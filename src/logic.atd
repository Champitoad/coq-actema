(* -------------------------------------------------------------------- *)
(** Identifiers *)

type name = string
type vname = (name * int)

type uid = int

(* -------------------------------------------------------------------- *)
(** Types *)

type type_ = [
  | TVar of vname
  | TUnit
  | TProd of (type_ * type_)
  | TOr of (type_ * type_)
  | TRec of (name * type_)
]

type arity = type_ list
type sig_  = (arity * type_)

(* -------------------------------------------------------------------- *)
(** Expressions *)

type expr = [
  | EVar of vname
  | EFun of (name * expr list)
]

(* -------------------------------------------------------------------- *)
(** Formulas *)

type logcon = [ And | Or | Imp | Equiv | Not ]
type bkind  = [ Forall | Exist ]

type form = [
  | FTrue
  | FFalse
  | FPred of (name * expr list)
  | FConn of (logcon * form list)
  | FBind of (bkind * name * type_ * form)
]

(* -------------------------------------------------------------------- *)
(** Terms = Formulas + Expressions *)

type term = [F of form | E of expr]

(* -------------------------------------------------------------------- *)
(** Actions *)

type pkind = [Hyp | Concl | Var of [Head | Body]]
type ctxt = { kind : pkind; handle : uid }
type ipath = { root : uid; ctxt : ctxt; sub : int list }

type choice = (int * expr option)
type itrace = choice list

type action = [
  | AId
  | ADef of ((type_ * expr option) * uid)
  | AIntro of (int * (expr * type_) option)
  | AElim of uid
  | AExact of uid
  | ACut of (form * uid)
  | AAssume of (form * uid)
  | AGeneralize of uid
  | AMove of (uid * uid option)
  | ADuplicate of uid
  | ALink of (ipath * ipath * itrace)
]

type intro_pat = uid list list

type atree = [
  | PNode of (action * intro_pat * atree list)
]

(* -------------------------------------------------------------------- *)
(** Environments *)

type bvar = (type_ * expr option)

type env = {
  env_prp     : (name * arity            ) list;
  env_fun     : (name * sig_             ) list;
  env_var     : (name * bvar  list       ) list;
  env_tvar    : (name * type_ option list) list;
  env_handles : (vname * uid             ) list;
}

(* -------------------------------------------------------------------- *)
(** Goals *)

type hyp = form

type goal = (env * hyp list * form)