// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=exe, use-js-string=true, version=5.7.2+5.7.2
(function
  (Object){
   typeof globalThis !== "object"
   &&
    (this
      ? get()
      : (Object.defineProperty
         (Object.prototype, "_T_", {configurable: true, get: get}),
        _T_));
   function get(){
    var global = this || self;
    global.globalThis = global;
    delete Object.prototype._T_;
   }
  }
  (Object));
(function(globalThis){
   "use strict";
   var
    jsoo_exports = typeof module === "object" && module.exports || globalThis;
    /*<<+array.js:54:0>>*/ function caml_array_blit(a1, i1, a2, i2, len){
     /*<<+array.js:55:2>>*/ if(i2 <= i1)
      /*<<+array.js:55:16>>*/ for
     ( /*<<+array.js:56:15>>*/ var j = 1; j <= len; j++)
       /*<<+array.js:56:35>>*/ a2[i2 + j] = a1[i1 + j];
    else
      /*<<+array.js:57:9>>*/ for
     ( /*<<+array.js:58:15>>*/ var j = len; j >= 1; j--)
       /*<<+array.js:58:35>>*/ a2[i2 + j] = a1[i1 + j];
     /*<<+array.js:60:2>>*/ return 0;
    /*<<+array.js:61:0>>*/ }
    /*<<+array.js:89:0>>*/ function caml_array_fill(array, ofs, len, v){
     /*<<+array.js:90:2>>*/ for
    ( /*<<+array.js:90:12>>*/ var i = 0; i < len; i++)
      /*<<+array.js:90:30>>*/ array[ofs + i + 1] = v;
     /*<<+array.js:93:2>>*/ return 0;
    /*<<+array.js:94:0>>*/ }
    /*<<+array.js:21:0>>*/ function caml_array_sub(a, i, len){
     /*<<+array.js:22:2>>*/  /*<<+array.js:22:9>>*/ var
     a2 = new Array(len + 1);
     /*<<+array.js:23:2>>*/ a2[0] = 0;
     /*<<+array.js:24:2>>*/ for
    (var  /*<<+array.js:24:13>>*/ i2 = 1,  /*<<+array.js:24:20>>*/ i1 = i + 1;
     i2 <= len;
     i2++,
     i1++)
      /*<<+array.js:24:49>>*/ a2[i2] = a[i1];
     /*<<+array.js:27:2>>*/ return a2;
    /*<<+array.js:28:0>>*/ }
    /*<<+domain.js:32:0>>*/ function caml_atomic_cas(ref, o, n){
     /*<<+domain.js:33:2>>*/ if(ref[1] === o) /*<<+domain.js:33:18>>*/ {
      /*<<+domain.js:34:4>>*/ ref[1] = n;
      /*<<+domain.js:35:4>>*/ return 1;
    }
     /*<<+domain.js:37:2>>*/ return 0;
    /*<<+domain.js:38:0>>*/ }
    /*<<+domain.js:41:0>>*/ function caml_atomic_fetch_add(ref, i){
     /*<<+domain.js:42:2>>*/  /*<<+domain.js:42:10>>*/ var old = ref[1];
     /*<<+domain.js:43:2>>*/ ref[1] += i;
     /*<<+domain.js:44:2>>*/ return old;
    /*<<+domain.js:45:0>>*/ }
    /*<<+domain.js:27:0>>*/ function caml_atomic_load(ref){
     /*<<+domain.js:28:2>>*/ return ref[1];
    /*<<+domain.js:29:0>>*/ }
    /*<<+sys.js:111:0>>*/ function jsoo_sys_getenv(n){
     /*<<+sys.js:112:2>>*/  /*<<+sys.js:112:14>>*/ var
     process = globalThis.process;
     /*<<+sys.js:114:2>>*/ if
     (process && process.env && process.env[n] != undefined)
      /*<<+sys.js:117:4>>*/ return process.env[n];
     /*<<+sys.js:118:2>>*/ if
     (globalThis.jsoo_static_env && globalThis.jsoo_static_env[n])
      /*<<+sys.js:120:4>>*/ return globalThis.jsoo_static_env[n];
    /*<<+sys.js:121:0>>*/ }
    /*<<+backtrace.js:21:0>>*/  /*<<+backtrace.js:21:31>>*/ var
    caml_record_backtrace_flag = 0;
    /*<<+backtrace.js:23:0>>*/ ( /*<<+backtrace.js:23:0>>*/ function(){
       /*<<+backtrace.js:24:2>>*/  /*<<+backtrace.js:24:8>>*/ var
       r =  /*<<+backtrace.js:24:10>>*/ jsoo_sys_getenv("OCAMLRUNPARAM");
       /*<<+backtrace.js:25:2>>*/ if(r !== undefined) /*<<+backtrace.js:25:21>>*/ {
        /*<<+backtrace.js:26:4>>*/  /*<<+backtrace.js:26:10>>*/ var
        l =  /*<<+backtrace.js:26:12>>*/ r.split(",");
        /*<<+backtrace.js:27:4>>*/ for
       ( /*<<+backtrace.js:27:14>>*/ var i = 0; i < l.length; i++)
         /*<<+backtrace.js:27:37>>*/ if(l[i] == "b") /*<<+backtrace.js:28:22>>*/ {
          /*<<+backtrace.js:28:24>>*/ caml_record_backtrace_flag = 1;
          /*<<+backtrace.js:28:56>>*/ break;
        }
        else if( /*<<+backtrace.js:29:15>>*/ l[i].startsWith("b="))
          /*<<+backtrace.js:29:38>>*/ caml_record_backtrace_flag =
          +
           /*<<+backtrace.js:30:39>>*/ l[i].slice(2);
        else
          /*<<+backtrace.js:31:11>>*/ continue;
      }
      /*<<+backtrace.js:23:1>>*/ }
     ());
    /*<<+stdlib.js:145:0>>*/  /*<<+stdlib.js:145:21>>*/ var
    caml_global_data = [0];
    /*<<+jslib.js:174:0>>*/ function caml_exn_with_js_backtrace(exn, force){
     /*<<+jslib.js:176:2>>*/ if(! exn.js_error || force || exn[0] == 248)
      /*<<+jslib.js:176:46>>*/ exn.js_error =
      new globalThis.Error("Js exception containing backtrace");
     /*<<+jslib.js:177:2>>*/ return exn;
    /*<<+jslib.js:178:0>>*/ }
    /*<<+jslib.js:165:0>>*/ function caml_maybe_attach_backtrace(exn, force){
     /*<<+jslib.js:166:2>>*/ return caml_record_backtrace_flag
            ?  /*<<+jslib.js:167:11>>*/ caml_exn_with_js_backtrace(exn, force)
            : exn;
    /*<<+jslib.js:169:0>>*/ }
    /*<<+fail.js:25:0>>*/ function caml_raise_with_arg(tag, arg){
     /*<<+fail.js:25:42>>*/ throw  /*<<+fail.js:25:48>>*/ caml_maybe_attach_backtrace
           ([0, tag, arg]);
    /*<<+fail.js:25:92>>*/ }
    /*<<+mlBytes.js:709:0>>*/ function caml_string_of_jsbytes(x){
     /*<<+mlBytes.js:709:37>>*/ return x;
    /*<<+mlBytes.js:709:46>>*/ }
    /*<<+fail.js:33:0>>*/ function caml_raise_with_string(tag, msg){
     /*<<+fail.js:34:2>>*/  /*<<+fail.js:34:2>>*/ caml_raise_with_arg
     (tag,  /*<<+fail.js:34:28>>*/ caml_string_of_jsbytes(msg));
    /*<<+fail.js:35:0>>*/ }
    /*<<+fail.js:48:0>>*/ function caml_invalid_argument(msg){
     /*<<+fail.js:49:2>>*/  /*<<+fail.js:49:2>>*/ caml_raise_with_string
     (caml_global_data.Invalid_argument, msg);
    /*<<+fail.js:50:0>>*/ }
    /*<<+bigarray.js:46:0>>*/ function caml_ba_get_size_per_element(kind){
     /*<<+bigarray.js:47:2>>*/ switch(kind){
      case 7:
      case 10:
      case 11:
        /*<<+bigarray.js:48:28>>*/ return 2;
      default:  /*<<+bigarray.js:49:11>>*/ return 1;
    }
    /*<<+bigarray.js:51:0>>*/ }
    /*<<+bigarray.js:56:0>>*/ function caml_ba_create_buffer(kind, size){
     /*<<+bigarray.js:57:2>>*/ var view;
     /*<<+bigarray.js:58:2>>*/ switch(kind){
      case 0:
        /*<<+bigarray.js:59:11>>*/ view = Float32Array;
        /*<<+bigarray.js:59:32>>*/ break;
      case 1:
        /*<<+bigarray.js:60:11>>*/ view = Float64Array;
        /*<<+bigarray.js:60:32>>*/ break;
      case 2:
        /*<<+bigarray.js:61:11>>*/ view = Int8Array;
        /*<<+bigarray.js:61:29>>*/ break;
      case 3:
        /*<<+bigarray.js:62:11>>*/ view = Uint8Array;
        /*<<+bigarray.js:62:30>>*/ break;
      case 4:
        /*<<+bigarray.js:63:11>>*/ view = Int16Array;
        /*<<+bigarray.js:63:30>>*/ break;
      case 5:
        /*<<+bigarray.js:64:11>>*/ view = Uint16Array;
        /*<<+bigarray.js:64:31>>*/ break;
      case 6:
        /*<<+bigarray.js:65:11>>*/ view = Int32Array;
        /*<<+bigarray.js:65:30>>*/ break;
      case 7:
        /*<<+bigarray.js:66:11>>*/ view = Int32Array;
        /*<<+bigarray.js:66:30>>*/ break;
      case 8:
        /*<<+bigarray.js:67:11>>*/ view = Int32Array;
        /*<<+bigarray.js:67:30>>*/ break;
      case 9:
        /*<<+bigarray.js:68:11>>*/ view = Int32Array;
        /*<<+bigarray.js:68:30>>*/ break;
      case 10:
        /*<<+bigarray.js:69:11>>*/ view = Float32Array;
        /*<<+bigarray.js:69:32>>*/ break;
      case 11:
        /*<<+bigarray.js:70:11>>*/ view = Float64Array;
        /*<<+bigarray.js:70:32>>*/ break;
      case 12:
        /*<<+bigarray.js:71:11>>*/ view = Uint8Array;
        /*<<+bigarray.js:71:30>>*/ break;
    }
     /*<<+bigarray.js:73:2>>*/ if(! view)
      /*<<+bigarray.js:73:13>>*/  /*<<+bigarray.js:73:13>>*/ caml_invalid_argument
      ("Bigarray.create: unsupported kind");
     /*<<+bigarray.js:74:2>>*/  /*<<+bigarray.js:74:11>>*/ var
     data =
       new
        view
        (size *  /*<<+bigarray.js:74:29>>*/ caml_ba_get_size_per_element(kind));
     /*<<+bigarray.js:75:2>>*/ return data;
    /*<<+bigarray.js:76:0>>*/ }
    /*<<+bigarray.js:34:0>>*/ function caml_ba_get_size(dims){
     /*<<+bigarray.js:35:2>>*/ var
      /*<<+bigarray.js:35:13>>*/ n_dims = dims.length,
      /*<<+bigarray.js:36:11>>*/ size = 1;
     /*<<+bigarray.js:37:2>>*/ for
    ( /*<<+bigarray.js:37:13>>*/ var i = 0; i < n_dims; i++) /*<<+bigarray.js:37:35>>*/ {
      /*<<+bigarray.js:38:4>>*/ if(dims[i] < 0)
       /*<<+bigarray.js:39:6>>*/  /*<<+bigarray.js:39:6>>*/ caml_invalid_argument
       ("Bigarray.create: negative dimension");
      /*<<+bigarray.js:40:4>>*/ size = size * dims[i];
    }
     /*<<+bigarray.js:42:2>>*/ return size;
    /*<<+bigarray.js:43:0>>*/ }
    /*<<+int64.js:21:0>>*/  /*<<+int64.js:21:22>>*/ var
    caml_int64_offset =  /*<<+int64.js:21:24>>*/ Math.pow(2, - 24);
    /*<<+fail.js:21:0>>*/ function caml_raise_constant(tag){
     /*<<+fail.js:21:37>>*/ throw tag;
    /*<<+fail.js:21:48>>*/ }
    /*<<+fail.js:60:0>>*/ function caml_raise_zero_divide(){
     /*<<+fail.js:61:2>>*/  /*<<+fail.js:61:2>>*/ caml_raise_constant
     (caml_global_data.Division_by_zero);
    /*<<+fail.js:62:0>>*/ }
    /*<<+int64.js:25:0>>*/ function MlInt64(lo, mi, hi){
     /*<<+int64.js:26:2>>*/ this.lo = lo & 0xffffff;
     /*<<+int64.js:27:2>>*/ this.mi = mi & 0xffffff;
     /*<<+int64.js:28:2>>*/ this.hi = hi & 0xffff;
    /*<<+int64.js:29:0>>*/ }
    /*<<+int64.js:30:0>>*/ MlInt64.prototype.caml_custom = "_j";
    /*<<+int64.js:31:0>>*/ MlInt64.prototype.copy =
    function(){
      /*<<+int64.js:32:2>>*/ return new MlInt64(this.lo, this.mi, this.hi);
     /*<<+int64.js:31:25>>*/ };
    /*<<+int64.js:35:0>>*/ MlInt64.prototype.ucompare =
    function(x){
      /*<<+int64.js:36:2>>*/ if(this.hi > x.hi)
       /*<<+int64.js:36:22>>*/ return 1;
      /*<<+int64.js:37:2>>*/ if(this.hi < x.hi)
       /*<<+int64.js:37:22>>*/ return - 1;
      /*<<+int64.js:38:2>>*/ if(this.mi > x.mi)
       /*<<+int64.js:38:22>>*/ return 1;
      /*<<+int64.js:39:2>>*/ if(this.mi < x.mi)
       /*<<+int64.js:39:22>>*/ return - 1;
      /*<<+int64.js:40:2>>*/ if(this.lo > x.lo)
       /*<<+int64.js:40:22>>*/ return 1;
      /*<<+int64.js:41:2>>*/ if(this.lo < x.lo)
       /*<<+int64.js:41:22>>*/ return - 1;
      /*<<+int64.js:42:2>>*/ return 0;
     /*<<+int64.js:35:29>>*/ };
    /*<<+int64.js:44:0>>*/ MlInt64.prototype.compare =
    function(x){
      /*<<+int64.js:45:2>>*/ var
       /*<<+int64.js:45:9>>*/ hi = this.hi << 16,
       /*<<+int64.js:46:10>>*/ xhi = x.hi << 16;
      /*<<+int64.js:47:2>>*/ if(hi > xhi)  /*<<+int64.js:47:16>>*/ return 1;
      /*<<+int64.js:48:2>>*/ if(hi < xhi)  /*<<+int64.js:48:16>>*/ return - 1;
      /*<<+int64.js:49:2>>*/ if(this.mi > x.mi)
       /*<<+int64.js:49:22>>*/ return 1;
      /*<<+int64.js:50:2>>*/ if(this.mi < x.mi)
       /*<<+int64.js:50:22>>*/ return - 1;
      /*<<+int64.js:51:2>>*/ if(this.lo > x.lo)
       /*<<+int64.js:51:22>>*/ return 1;
      /*<<+int64.js:52:2>>*/ if(this.lo < x.lo)
       /*<<+int64.js:52:22>>*/ return - 1;
      /*<<+int64.js:53:2>>*/ return 0;
     /*<<+int64.js:44:28>>*/ };
    /*<<+int64.js:55:0>>*/ MlInt64.prototype.neg =
    function(){
      /*<<+int64.js:56:2>>*/ var
       /*<<+int64.js:56:9>>*/ lo = - this.lo,
       /*<<+int64.js:57:9>>*/ mi = - this.mi + (lo >> 24),
       /*<<+int64.js:58:9>>*/ hi = - this.hi + (mi >> 24);
      /*<<+int64.js:59:2>>*/ return new MlInt64(lo, mi, hi);
     /*<<+int64.js:55:24>>*/ };
    /*<<+int64.js:61:0>>*/ MlInt64.prototype.add =
    function(x){
      /*<<+int64.js:62:2>>*/ var
       /*<<+int64.js:62:9>>*/ lo = this.lo + x.lo,
       /*<<+int64.js:63:9>>*/ mi = this.mi + x.mi + (lo >> 24),
       /*<<+int64.js:64:9>>*/ hi = this.hi + x.hi + (mi >> 24);
      /*<<+int64.js:65:2>>*/ return new MlInt64(lo, mi, hi);
     /*<<+int64.js:61:24>>*/ };
    /*<<+int64.js:67:0>>*/ MlInt64.prototype.sub =
    function(x){
      /*<<+int64.js:68:2>>*/ var
       /*<<+int64.js:68:9>>*/ lo = this.lo - x.lo,
       /*<<+int64.js:69:9>>*/ mi = this.mi - x.mi + (lo >> 24),
       /*<<+int64.js:70:9>>*/ hi = this.hi - x.hi + (mi >> 24);
      /*<<+int64.js:71:2>>*/ return new MlInt64(lo, mi, hi);
     /*<<+int64.js:67:24>>*/ };
    /*<<+int64.js:73:0>>*/ MlInt64.prototype.mul =
    function(x){
      /*<<+int64.js:74:2>>*/ var
       /*<<+int64.js:74:9>>*/ lo = this.lo * x.lo,
       /*<<+int64.js:75:9>>*/ mi =
        (lo * caml_int64_offset | 0) + this.mi * x.lo + this.lo * x.mi,
       /*<<+int64.js:76:9>>*/ hi =
        (mi * caml_int64_offset | 0) + this.hi * x.lo + this.mi * x.mi
        + this.lo * x.hi;
      /*<<+int64.js:77:2>>*/ return new MlInt64(lo, mi, hi);
     /*<<+int64.js:73:24>>*/ };
    /*<<+int64.js:79:0>>*/ MlInt64.prototype.isZero =
    function(){
      /*<<+int64.js:80:2>>*/ return (this.lo | this.mi | this.hi) == 0;
     /*<<+int64.js:79:27>>*/ };
    /*<<+int64.js:82:0>>*/ MlInt64.prototype.isNeg =
    function(){
      /*<<+int64.js:83:2>>*/ return this.hi << 16 < 0;
     /*<<+int64.js:82:26>>*/ };
    /*<<+int64.js:85:0>>*/ MlInt64.prototype.and =
    function(x){
      /*<<+int64.js:86:2>>*/ return new
             MlInt64
             (this.lo & x.lo, this.mi & x.mi, this.hi & x.hi);
     /*<<+int64.js:85:24>>*/ };
    /*<<+int64.js:88:0>>*/ MlInt64.prototype.or =
    function(x){
      /*<<+int64.js:89:2>>*/ return new
             MlInt64
             (this.lo | x.lo, this.mi | x.mi, this.hi | x.hi);
     /*<<+int64.js:88:23>>*/ };
    /*<<+int64.js:91:0>>*/ MlInt64.prototype.xor =
    function(x){
      /*<<+int64.js:92:2>>*/ return new
             MlInt64
             (this.lo ^ x.lo, this.mi ^ x.mi, this.hi ^ x.hi);
     /*<<+int64.js:91:24>>*/ };
    /*<<+int64.js:94:0>>*/ MlInt64.prototype.shift_left =
    function(s){
      /*<<+int64.js:95:2>>*/ s = s & 63;
      /*<<+int64.js:96:2>>*/ if(s == 0)  /*<<+int64.js:96:14>>*/ return this;
      /*<<+int64.js:97:2>>*/ if(s < 24)
       /*<<+int64.js:97:14>>*/ return new
              MlInt64
              (this.lo << s,
               this.mi << s | this.lo >> 24 - s,
               this.hi << s | this.mi >> 24 - s);
      /*<<+int64.js:102:2>>*/ if(s < 48)
       /*<<+int64.js:103:4>>*/ return new
              MlInt64
              (0, this.lo << s - 24, this.mi << s - 24 | this.lo >> 48 - s);
      /*<<+int64.js:106:2>>*/ return new MlInt64(0, 0, this.lo << s - 48);
     /*<<+int64.js:94:31>>*/ };
    /*<<+int64.js:108:0>>*/ MlInt64.prototype.shift_right_unsigned =
    function(s){
      /*<<+int64.js:109:2>>*/ s = s & 63;
      /*<<+int64.js:110:2>>*/ if(s == 0)
       /*<<+int64.js:110:14>>*/ return this;
      /*<<+int64.js:111:2>>*/ if(s < 24)
       /*<<+int64.js:112:4>>*/ return new
              MlInt64
              (this.lo >> s | this.mi << 24 - s,
               this.mi >> s | this.hi << 24 - s,
               this.hi >> s);
      /*<<+int64.js:116:2>>*/ if(s < 48)
       /*<<+int64.js:117:4>>*/ return new
              MlInt64
              (this.mi >> s - 24 | this.hi << 48 - s, this.hi >> s - 24, 0);
      /*<<+int64.js:121:2>>*/ return new MlInt64(this.hi >> s - 48, 0, 0);
     /*<<+int64.js:108:41>>*/ };
    /*<<+int64.js:123:0>>*/ MlInt64.prototype.shift_right =
    function(s){
      /*<<+int64.js:124:2>>*/ s = s & 63;
      /*<<+int64.js:125:2>>*/ if(s == 0)
       /*<<+int64.js:125:14>>*/ return this;
      /*<<+int64.js:126:2>>*/  /*<<+int64.js:126:8>>*/ var
      h = this.hi << 16 >> 16;
      /*<<+int64.js:127:2>>*/ if(s < 24)
       /*<<+int64.js:128:4>>*/ return new
              MlInt64
              (this.lo >> s | this.mi << 24 - s,
               this.mi >> s | h << 24 - s,
               this.hi << 16 >> s >>> 16);
      /*<<+int64.js:132:2>>*/  /*<<+int64.js:132:11>>*/ var
      sign = this.hi << 16 >> 31;
      /*<<+int64.js:133:2>>*/ if(s < 48)
       /*<<+int64.js:134:4>>*/ return new
              MlInt64
              (this.mi >> s - 24 | this.hi << 48 - s,
               this.hi << 16 >> s - 24 >> 16,
               sign & 0xffff);
      /*<<+int64.js:138:2>>*/ return new
             MlInt64
             (this.hi << 16 >> s - 32, sign, sign);
     /*<<+int64.js:123:32>>*/ };
    /*<<+int64.js:140:0>>*/ MlInt64.prototype.lsl1 =
    function(){
      /*<<+int64.js:141:2>>*/ this.hi = this.hi << 1 | this.mi >> 23;
      /*<<+int64.js:142:2>>*/ this.mi =
      (this.mi << 1 | this.lo >> 23) & 0xffffff;
      /*<<+int64.js:143:2>>*/ this.lo = this.lo << 1 & 0xffffff;
     /*<<+int64.js:140:25>>*/ };
    /*<<+int64.js:145:0>>*/ MlInt64.prototype.lsr1 =
    function(){
      /*<<+int64.js:146:2>>*/ this.lo =
      (this.lo >>> 1 | this.mi << 23) & 0xffffff;
      /*<<+int64.js:147:2>>*/ this.mi =
      (this.mi >>> 1 | this.hi << 23) & 0xffffff;
      /*<<+int64.js:148:2>>*/ this.hi = this.hi >>> 1;
     /*<<+int64.js:145:25>>*/ };
    /*<<+int64.js:150:0>>*/ MlInt64.prototype.udivmod =
    function(x){
      /*<<+int64.js:151:2>>*/ var
       /*<<+int64.js:151:13>>*/ offset = 0,
       /*<<+int64.js:152:14>>*/ modulus =
         /*<<+int64.js:152:16>>*/ this.copy(),
       /*<<+int64.js:153:14>>*/ divisor =  /*<<+int64.js:153:16>>*/ x.copy(),
       /*<<+int64.js:154:15>>*/ quotient = new MlInt64(0, 0, 0);
      /*<<+int64.js:155:2>>*/ while
     ( /*<<+int64.js:155:9>>*/ modulus.ucompare(divisor) > 0) /*<<+int64.js:155:40>>*/ {
       /*<<+int64.js:156:4>>*/ offset++;
       /*<<+int64.js:157:4>>*/  /*<<+int64.js:157:4>>*/ divisor.lsl1();
     }
      /*<<+int64.js:159:2>>*/ while(offset >= 0) /*<<+int64.js:159:22>>*/ {
       /*<<+int64.js:160:4>>*/ offset--;
       /*<<+int64.js:161:4>>*/  /*<<+int64.js:161:4>>*/ quotient.lsl1();
       /*<<+int64.js:162:4>>*/ if
       ( /*<<+int64.js:162:8>>*/ modulus.ucompare(divisor) >= 0) /*<<+int64.js:162:40>>*/ {
        /*<<+int64.js:163:6>>*/ quotient.lo++;
        /*<<+int64.js:164:6>>*/ modulus =
         /*<<+int64.js:164:16>>*/ modulus.sub(divisor);
      }
       /*<<+int64.js:166:4>>*/  /*<<+int64.js:166:4>>*/ divisor.lsr1();
     }
      /*<<+int64.js:168:2>>*/ return {quotient: quotient, modulus: modulus};
     /*<<+int64.js:150:28>>*/ };
    /*<<+int64.js:170:0>>*/ MlInt64.prototype.div =
    function(y){
      /*<<+int64.js:172:2>>*/  /*<<+int64.js:172:8>>*/ var x = this;
      /*<<+int64.js:173:2>>*/ if( /*<<+int64.js:173:6>>*/ y.isZero())
       /*<<+int64.js:173:18>>*/  /*<<+int64.js:173:18>>*/ caml_raise_zero_divide
       ();
      /*<<+int64.js:174:2>>*/  /*<<+int64.js:174:11>>*/ var
      sign = x.hi ^ y.hi;
      /*<<+int64.js:175:2>>*/ if(x.hi & 0x8000)
       /*<<+int64.js:175:21>>*/ x =  /*<<+int64.js:175:25>>*/ x.neg();
      /*<<+int64.js:176:2>>*/ if(y.hi & 0x8000)
       /*<<+int64.js:176:21>>*/ y =  /*<<+int64.js:176:25>>*/ y.neg();
      /*<<+int64.js:177:2>>*/  /*<<+int64.js:177:8>>*/ var
      q =  /*<<+int64.js:177:10>>*/ x.udivmod(y).quotient;
      /*<<+int64.js:178:2>>*/ if(sign & 0x8000)
       /*<<+int64.js:178:21>>*/ q =  /*<<+int64.js:178:25>>*/ q.neg();
      /*<<+int64.js:179:2>>*/ return q;
     /*<<+int64.js:170:24>>*/ };
    /*<<+int64.js:181:0>>*/ MlInt64.prototype.mod =
    function(y){
      /*<<+int64.js:183:2>>*/  /*<<+int64.js:183:8>>*/ var x = this;
      /*<<+int64.js:184:2>>*/ if( /*<<+int64.js:184:6>>*/ y.isZero())
       /*<<+int64.js:184:18>>*/  /*<<+int64.js:184:18>>*/ caml_raise_zero_divide
       ();
      /*<<+int64.js:185:2>>*/  /*<<+int64.js:185:11>>*/ var sign = x.hi;
      /*<<+int64.js:186:2>>*/ if(x.hi & 0x8000)
       /*<<+int64.js:186:21>>*/ x =  /*<<+int64.js:186:25>>*/ x.neg();
      /*<<+int64.js:187:2>>*/ if(y.hi & 0x8000)
       /*<<+int64.js:187:21>>*/ y =  /*<<+int64.js:187:25>>*/ y.neg();
      /*<<+int64.js:188:2>>*/  /*<<+int64.js:188:8>>*/ var
      r =  /*<<+int64.js:188:10>>*/ x.udivmod(y).modulus;
      /*<<+int64.js:189:2>>*/ if(sign & 0x8000)
       /*<<+int64.js:189:21>>*/ r =  /*<<+int64.js:189:25>>*/ r.neg();
      /*<<+int64.js:190:2>>*/ return r;
     /*<<+int64.js:181:24>>*/ };
    /*<<+int64.js:192:0>>*/ MlInt64.prototype.toInt =
    function(){
      /*<<+int64.js:193:2>>*/ return this.lo | this.mi << 24;
     /*<<+int64.js:192:26>>*/ };
    /*<<+int64.js:195:0>>*/ MlInt64.prototype.toFloat =
    function(){
      /*<<+int64.js:196:2>>*/ return (this.hi << 16)
            *  /*<<+int64.js:196:28>>*/ Math.pow(2, 32)
            + this.mi *  /*<<+int64.js:196:56>>*/ Math.pow(2, 24)
            + this.lo;
     /*<<+int64.js:195:28>>*/ };
    /*<<+int64.js:198:0>>*/ MlInt64.prototype.toArray =
    function(){
      /*<<+int64.js:199:2>>*/ return [this.hi >> 8,
             this.hi & 0xff,
             this.mi >> 16,
             this.mi >> 8 & 0xff,
             this.mi & 0xff,
             this.lo >> 16,
             this.lo >> 8 & 0xff,
             this.lo & 0xff];
     /*<<+int64.js:198:28>>*/ };
    /*<<+int64.js:208:0>>*/ MlInt64.prototype.lo32 =
    function(){
      /*<<+int64.js:209:2>>*/ return this.lo | (this.mi & 0xff) << 24;
     /*<<+int64.js:208:25>>*/ };
    /*<<+int64.js:211:0>>*/ MlInt64.prototype.hi32 =
    function(){
      /*<<+int64.js:212:2>>*/ return this.mi >>> 8 & 0xffff | this.hi << 16;
     /*<<+int64.js:211:25>>*/ };
    /*<<+int64.js:354:0>>*/ function caml_int64_create_lo_hi(lo, hi){
     /*<<+int64.js:355:2>>*/ return new
            MlInt64
            (lo & 0xffffff,
             lo >>> 24 & 0xff | (hi & 0xffff) << 8,
             hi >>> 16 & 0xffff);
    /*<<+int64.js:359:0>>*/ }
    /*<<+int64.js:364:0>>*/ function caml_int64_hi32(v){
     /*<<+int64.js:364:29>>*/ return  /*<<+int64.js:364:36>>*/ v.hi32();
    /*<<+int64.js:364:45>>*/ }
    /*<<+int64.js:361:0>>*/ function caml_int64_lo32(v){
     /*<<+int64.js:361:29>>*/ return  /*<<+int64.js:361:36>>*/ v.lo32();
    /*<<+int64.js:361:45>>*/ }
    /*<<+fail.js:72:0>>*/ function caml_array_bound_error(){
     /*<<+fail.js:73:2>>*/  /*<<+fail.js:73:2>>*/ caml_invalid_argument
     ("index out of bounds");
    /*<<+fail.js:74:0>>*/ }
    /*<<+bigarray.js:84:0>>*/  /*<<+bigarray.js:84:24>>*/ var
    caml_ba_custom_name = "_bigarr02";
    /*<<+bigarray.js:89:0>>*/ function Ml_Bigarray(kind, layout, dims, buffer){
     /*<<+bigarray.js:91:2>>*/ this.kind = kind;
     /*<<+bigarray.js:92:2>>*/ this.layout = layout;
     /*<<+bigarray.js:93:2>>*/ this.dims = dims;
     /*<<+bigarray.js:94:2>>*/ this.data = buffer;
    /*<<+bigarray.js:95:0>>*/ }
    /*<<+bigarray.js:97:0>>*/ Ml_Bigarray.prototype.caml_custom = caml_ba_custom_name;
    /*<<+bigarray.js:99:0>>*/ Ml_Bigarray.prototype.offset =
    function(arg){
      /*<<+bigarray.js:100:2>>*/  /*<<+bigarray.js:100:10>>*/ var ofs = 0;
      /*<<+bigarray.js:101:2>>*/ if(typeof arg === "number")
       /*<<+bigarray.js:101:30>>*/ arg = [arg];
      /*<<+bigarray.js:102:2>>*/ if(! (arg instanceof Array))
       /*<<+bigarray.js:102:32>>*/  /*<<+bigarray.js:102:32>>*/ caml_invalid_argument
       ("bigarray.js: invalid offset");
      /*<<+bigarray.js:103:2>>*/ if(this.dims.length != arg.length)
       /*<<+bigarray.js:104:4>>*/  /*<<+bigarray.js:104:4>>*/ caml_invalid_argument
       ("Bigarray.get/set: bad number of dimensions");
      /*<<+bigarray.js:105:2>>*/ if(this.layout == 0)
       /*<<+bigarray.js:105:38>>*/ for
      ( /*<<+bigarray.js:106:15>>*/ var i = 0; i < this.dims.length; i++) /*<<+bigarray.js:106:47>>*/ {
        /*<<+bigarray.js:107:6>>*/ if(arg[i] < 0 || arg[i] >= this.dims[i])
         /*<<+bigarray.js:108:8>>*/  /*<<+bigarray.js:108:8>>*/ caml_array_bound_error
         ();
        /*<<+bigarray.js:109:6>>*/ ofs = ofs * this.dims[i] + arg[i];
      }
     else
       /*<<+bigarray.js:111:9>>*/ for
      ( /*<<+bigarray.js:112:15>>*/ var i = this.dims.length - 1; i >= 0; i--) /*<<+bigarray.js:112:52>>*/ {
        /*<<+bigarray.js:113:6>>*/ if(arg[i] < 1 || arg[i] > this.dims[i])
         /*<<+bigarray.js:113:46>>*/  /*<<+bigarray.js:114:8>>*/ caml_array_bound_error
         ();
        /*<<+bigarray.js:116:6>>*/ ofs = ofs * this.dims[i] + (arg[i] - 1);
      }
      /*<<+bigarray.js:119:2>>*/ return ofs;
     /*<<+bigarray.js:99:31>>*/ };
    /*<<+bigarray.js:122:0>>*/ Ml_Bigarray.prototype.get =
    function(ofs){
      /*<<+bigarray.js:123:2>>*/ switch(this.kind){
       case 7:
         /*<<+bigarray.js:126:4>>*/ var
          /*<<+bigarray.js:126:10>>*/ l = this.data[ofs * 2 + 0],
          /*<<+bigarray.js:127:10>>*/ h = this.data[ofs * 2 + 1];
         /*<<+bigarray.js:128:4>>*/ return  /*<<+bigarray.js:128:11>>*/ caml_int64_create_lo_hi
                (l, h);
       case 10:
       case 11:
         /*<<+bigarray.js:131:4>>*/ var
          /*<<+bigarray.js:131:10>>*/ r = this.data[ofs * 2 + 0],
          /*<<+bigarray.js:132:10>>*/ i = this.data[ofs * 2 + 1];
         /*<<+bigarray.js:133:4>>*/ return [254, r, i];
       default:  /*<<+bigarray.js:135:4>>*/ return this.data[ofs];
     }
     /*<<+bigarray.js:122:28>>*/ };
    /*<<+bigarray.js:139:0>>*/ Ml_Bigarray.prototype.set =
    function(ofs, v){
      /*<<+bigarray.js:140:2>>*/ switch(this.kind){
       case 7:
         /*<<+bigarray.js:143:4>>*/ this.data[ofs * 2 + 0] =
          /*<<+bigarray.js:143:29>>*/ caml_int64_lo32(v);
         /*<<+bigarray.js:144:4>>*/ this.data[ofs * 2 + 1] =
          /*<<+bigarray.js:144:29>>*/ caml_int64_hi32(v);
         /*<<+bigarray.js:145:4>>*/ break;
       case 10:
       case 11:
         /*<<+bigarray.js:148:4>>*/ this.data[ofs * 2 + 0] = v[1];
         /*<<+bigarray.js:149:4>>*/ this.data[ofs * 2 + 1] = v[2];
         /*<<+bigarray.js:150:4>>*/ break;
       default:
         /*<<+bigarray.js:152:4>>*/ this.data[ofs] = v;
         /*<<+bigarray.js:153:4>>*/ break;
     }
      /*<<+bigarray.js:155:2>>*/ return 0;
     /*<<+bigarray.js:139:28>>*/ };
    /*<<+bigarray.js:159:0>>*/ Ml_Bigarray.prototype.fill =
    function(v){
      /*<<+bigarray.js:160:2>>*/ switch(this.kind){
       case 7:
         /*<<+bigarray.js:163:4>>*/ var
          /*<<+bigarray.js:163:10>>*/ a =
            /*<<+bigarray.js:163:12>>*/ caml_int64_lo32(v),
          /*<<+bigarray.js:164:10>>*/ b =
            /*<<+bigarray.js:164:12>>*/ caml_int64_hi32(v);
         /*<<+bigarray.js:165:4>>*/ if(a == b)
          /*<<+bigarray.js:165:14>>*/  /*<<+bigarray.js:166:6>>*/ this.data.fill
          (a);
        else
          /*<<+bigarray.js:168:9>>*/ for
         ( /*<<+bigarray.js:169:16>>*/ var i = 0; i < this.data.length; i++)
           /*<<+bigarray.js:169:45>>*/ this.data[i] = i % 2 == 0 ? a : b;
         /*<<+bigarray.js:173:4>>*/ break;
       case 10:
       case 11:
         /*<<+bigarray.js:176:4>>*/ var
          /*<<+bigarray.js:176:11>>*/ im = v[1],
          /*<<+bigarray.js:177:11>>*/ re = v[2];
         /*<<+bigarray.js:178:4>>*/ if(im == re)
          /*<<+bigarray.js:178:16>>*/  /*<<+bigarray.js:179:6>>*/ this.data.fill
          (im);
        else
          /*<<+bigarray.js:181:9>>*/ for
         ( /*<<+bigarray.js:182:16>>*/ var i = 0; i < this.data.length; i++)
           /*<<+bigarray.js:182:45>>*/ this.data[i] = i % 2 == 0 ? im : re;
         /*<<+bigarray.js:186:4>>*/ break;
       default:
         /*<<+bigarray.js:188:4>>*/  /*<<+bigarray.js:188:4>>*/ this.data.fill
         (v);
         /*<<+bigarray.js:189:4>>*/ break;
     }
     /*<<+bigarray.js:159:29>>*/ };
    /*<<+bigarray.js:194:0>>*/ Ml_Bigarray.prototype.compare =
    function(b, total){
      /*<<+bigarray.js:195:2>>*/ if
      (this.layout != b.layout || this.kind != b.kind) /*<<+bigarray.js:195:54>>*/ {
       /*<<+bigarray.js:196:4>>*/ var
        /*<<+bigarray.js:196:11>>*/ k1 = this.kind | this.layout << 8,
        /*<<+bigarray.js:197:11>>*/ k2 = b.kind | b.layout << 8;
       /*<<+bigarray.js:198:4>>*/ return k2 - k1;
     }
      /*<<+bigarray.js:200:2>>*/ if(this.dims.length != b.dims.length)
       /*<<+bigarray.js:200:41>>*/ return b.dims.length - this.dims.length;
      /*<<+bigarray.js:203:2>>*/ for
     ( /*<<+bigarray.js:203:13>>*/ var i = 0; i < this.dims.length; i++)
       /*<<+bigarray.js:204:4>>*/ if(this.dims[i] != b.dims[i])
        /*<<+bigarray.js:205:6>>*/ return this.dims[i] < b.dims[i] ? - 1 : 1;
      /*<<+bigarray.js:206:2>>*/ switch(this.kind){
       case 0:
       case 1:
       case 10:
       case 11:
         /*<<+bigarray.js:212:4>>*/ var x, y;
         /*<<+bigarray.js:213:4>>*/ for
        ( /*<<+bigarray.js:213:15>>*/ var i = 0; i < this.data.length; i++) /*<<+bigarray.js:213:47>>*/ {
          /*<<+bigarray.js:214:6>>*/ x = this.data[i];
          /*<<+bigarray.js:215:6>>*/ y = b.data[i];
          /*<<+bigarray.js:216:6>>*/ if(x < y)
           /*<<+bigarray.js:217:8>>*/ return - 1;
          /*<<+bigarray.js:218:6>>*/ if(x > y)
           /*<<+bigarray.js:219:8>>*/ return 1;
          /*<<+bigarray.js:220:6>>*/ if(x != y) /*<<+bigarray.js:220:18>>*/ {
           /*<<+bigarray.js:221:8>>*/ if(! total)
            /*<<+bigarray.js:221:20>>*/ return NaN;
           /*<<+bigarray.js:222:8>>*/ if(x == x)
            /*<<+bigarray.js:222:20>>*/ return 1;
           /*<<+bigarray.js:223:8>>*/ if(y == y)
            /*<<+bigarray.js:223:20>>*/ return - 1;
         }
        }
         /*<<+bigarray.js:226:4>>*/ break;
       case 7:
         /*<<+bigarray.js:229:4>>*/ for
        ( /*<<+bigarray.js:229:15>>*/ var i = 0; i < this.data.length; i += 2) /*<<+bigarray.js:229:48>>*/ {
          /*<<+bigarray.js:231:6>>*/ if(this.data[i + 1] < b.data[i + 1])
           /*<<+bigarray.js:232:8>>*/ return - 1;
          /*<<+bigarray.js:233:6>>*/ if(this.data[i + 1] > b.data[i + 1])
           /*<<+bigarray.js:234:8>>*/ return 1;
          /*<<+bigarray.js:235:6>>*/ if(this.data[i] >>> 0 < b.data[i] >>> 0)
           /*<<+bigarray.js:236:8>>*/ return - 1;
          /*<<+bigarray.js:237:6>>*/ if(this.data[i] >>> 0 > b.data[i] >>> 0)
           /*<<+bigarray.js:238:8>>*/ return 1;
        }
         /*<<+bigarray.js:240:4>>*/ break;
       case 2:
       case 3:
       case 4:
       case 5:
       case 6:
       case 8:
       case 9:
       case 12:
         /*<<+bigarray.js:249:4>>*/ for
        ( /*<<+bigarray.js:249:15>>*/ var i = 0; i < this.data.length; i++) /*<<+bigarray.js:249:47>>*/ {
          /*<<+bigarray.js:250:6>>*/ if(this.data[i] < b.data[i])
           /*<<+bigarray.js:251:8>>*/ return - 1;
          /*<<+bigarray.js:252:6>>*/ if(this.data[i] > b.data[i])
           /*<<+bigarray.js:253:8>>*/ return 1;
        }
         /*<<+bigarray.js:255:4>>*/ break;
     }
      /*<<+bigarray.js:257:2>>*/ return 0;
     /*<<+bigarray.js:194:32>>*/ };
    /*<<+bigarray.js:262:0>>*/ function Ml_Bigarray_c_1_1
   (kind, layout, dims, buffer){
     /*<<+bigarray.js:263:2>>*/ this.kind = kind;
     /*<<+bigarray.js:264:2>>*/ this.layout = layout;
     /*<<+bigarray.js:265:2>>*/ this.dims = dims;
     /*<<+bigarray.js:266:2>>*/ this.data = buffer;
    /*<<+bigarray.js:267:0>>*/ }
    /*<<+bigarray.js:269:0>>*/ Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
    /*<<+bigarray.js:270:0>>*/ Ml_Bigarray_c_1_1.prototype.offset =
    function(arg){
      /*<<+bigarray.js:271:2>>*/ if(typeof arg !== "number")
       /*<<+bigarray.js:271:29>>*/ if(arg instanceof Array && arg.length == 1)
        /*<<+bigarray.js:273:6>>*/ arg = arg[0];
      else
        /*<<+bigarray.js:274:9>>*/  /*<<+bigarray.js:274:9>>*/ caml_invalid_argument
        ("Ml_Bigarray_c_1_1.offset");
      /*<<+bigarray.js:276:2>>*/ if(arg < 0 || arg >= this.dims[0])
       /*<<+bigarray.js:277:4>>*/  /*<<+bigarray.js:277:4>>*/ caml_array_bound_error
       ();
      /*<<+bigarray.js:278:2>>*/ return arg;
     /*<<+bigarray.js:270:37>>*/ };
    /*<<+bigarray.js:281:0>>*/ Ml_Bigarray_c_1_1.prototype.get =
    function(ofs){
      /*<<+bigarray.js:282:2>>*/ return this.data[ofs];
     /*<<+bigarray.js:281:34>>*/ };
    /*<<+bigarray.js:285:0>>*/ Ml_Bigarray_c_1_1.prototype.set =
    function(ofs, v){
      /*<<+bigarray.js:286:2>>*/ this.data[ofs] = v;
      /*<<+bigarray.js:287:2>>*/ return 0;
     /*<<+bigarray.js:285:34>>*/ };
    /*<<+bigarray.js:290:0>>*/ Ml_Bigarray_c_1_1.prototype.fill =
    function(v){
      /*<<+bigarray.js:291:2>>*/  /*<<+bigarray.js:291:2>>*/ this.data.fill(v);
      /*<<+bigarray.js:292:2>>*/ return 0;
     /*<<+bigarray.js:290:35>>*/ };
    /*<<+bigarray.js:303:0>>*/ function caml_ba_create_unsafe
   (kind, layout, dims, data){
     /*<<+bigarray.js:304:2>>*/  /*<<+bigarray.js:304:23>>*/ var
     size_per_element =
        /*<<+bigarray.js:304:25>>*/ caml_ba_get_size_per_element(kind);
     /*<<+bigarray.js:305:2>>*/ if
     ( /*<<+bigarray.js:305:5>>*/ caml_ba_get_size(dims) * size_per_element
      != data.length)
      /*<<+bigarray.js:305:63>>*/  /*<<+bigarray.js:306:4>>*/ caml_invalid_argument
      ("length doesn't match dims");
     /*<<+bigarray.js:308:2>>*/ if
     (layout == 0 && dims.length == 1 && size_per_element == 1)
      /*<<+bigarray.js:311:4>>*/ return new
             Ml_Bigarray_c_1_1
             (kind, layout, dims, data);
     /*<<+bigarray.js:312:2>>*/ return new
            Ml_Bigarray
            (kind, layout, dims, data);
    /*<<+bigarray.js:314:0>>*/ }
    /*<<+jslib.js:204:0>>*/ function caml_js_from_array(a){
     /*<<+jslib.js:205:2>>*/ return  /*<<+jslib.js:205:9>>*/ a.slice(1);
    /*<<+jslib.js:206:0>>*/ }
    /*<<+bigarray.js:321:0>>*/ function caml_ba_create(kind, layout, dims_ml){
     /*<<+bigarray.js:322:2>>*/ var
      /*<<+bigarray.js:322:11>>*/ dims =
        /*<<+bigarray.js:322:13>>*/ caml_js_from_array(dims_ml),
      /*<<+bigarray.js:323:11>>*/ data =
        /*<<+bigarray.js:323:13>>*/ caml_ba_create_buffer
        (kind,  /*<<+bigarray.js:323:41>>*/ caml_ba_get_size(dims));
     /*<<+bigarray.js:324:2>>*/ return  /*<<+bigarray.js:324:9>>*/ caml_ba_create_unsafe
            (kind, layout, dims, data);
    /*<<+bigarray.js:325:0>>*/ }
    /*<<+bigarray.js:480:0>>*/ function caml_ba_set_1(ba, i0, v){
     /*<<+bigarray.js:481:2>>*/  /*<<+bigarray.js:481:2>>*/ ba.set
     ( /*<<+bigarray.js:481:9>>*/ ba.offset(i0), v);
     /*<<+bigarray.js:482:2>>*/ return 0;
    /*<<+bigarray.js:483:0>>*/ }
    /*<<+mlBytes.js:73:0>>*/ function caml_subarray_to_jsbytes(a, i, len){
     /*<<+mlBytes.js:74:2>>*/  /*<<+mlBytes.js:74:8>>*/ var
     f = String.fromCharCode;
     /*<<+mlBytes.js:75:2>>*/ if(i == 0 && len <= 4096 && len == a.length)
      /*<<+mlBytes.js:75:48>>*/ return  /*<<+mlBytes.js:75:55>>*/ f.apply
             (null, a);
     /*<<+mlBytes.js:76:2>>*/  /*<<+mlBytes.js:76:8>>*/ var s = "";
     /*<<+mlBytes.js:77:2>>*/ for(; 0 < len; i += 1024, len -= 1024)
      /*<<+mlBytes.js:78:4>>*/ s +=
       /*<<+mlBytes.js:78:9>>*/ f.apply
       (null,
         /*<<+mlBytes.js:78:24>>*/ a.slice
         (i, i +  /*<<+mlBytes.js:78:38>>*/ Math.min(len, 1024)));
     /*<<+mlBytes.js:79:2>>*/ return s;
    /*<<+mlBytes.js:80:0>>*/ }
    /*<<+mlBytes.js:453:0>>*/ function caml_convert_bytes_to_array(s){
     /*<<+mlBytes.js:455:2>>*/ var
      /*<<+mlBytes.js:455:8>>*/ a = new Uint8Array(s.l),
      /*<<+mlBytes.js:456:8>>*/ b = s.c,
      /*<<+mlBytes.js:456:17>>*/ l = b.length,
      /*<<+mlBytes.js:456:31>>*/ i = 0;
     /*<<+mlBytes.js:457:2>>*/ for(; i < l; i++)
      /*<<+mlBytes.js:457:21>>*/ a[i] =
       /*<<+mlBytes.js:457:28>>*/ b.charCodeAt(i);
     /*<<+mlBytes.js:458:2>>*/ for(l = s.l; i < l; i++)
      /*<<+mlBytes.js:458:28>>*/ a[i] = 0;
     /*<<+mlBytes.js:459:2>>*/ s.c = a;
     /*<<+mlBytes.js:460:2>>*/ s.t = 4;
     /*<<+mlBytes.js:461:2>>*/ return a;
    /*<<+mlBytes.js:462:0>>*/ }
    /*<<+mlBytes.js:607:0>>*/ function caml_blit_bytes(s1, i1, s2, i2, len){
     /*<<+mlBytes.js:608:2>>*/ if(len == 0)
      /*<<+mlBytes.js:608:16>>*/ return 0;
     /*<<+mlBytes.js:609:2>>*/ if
     (i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length)) /*<<+mlBytes.js:610:72>>*/ {
      /*<<+mlBytes.js:611:4>>*/ s2.c =
      s1.t == 4
       ?  /*<<+mlBytes.js:612:6>>*/ caml_subarray_to_jsbytes(s1.c, i1, len)
       : i1
         == 0
         && s1.c.length == len
         ? s1.c
         :  /*<<+mlBytes.js:613:43>>*/ s1.c.substr(i1, len);
      /*<<+mlBytes.js:614:4>>*/ s2.t = s2.c.length == s2.l ? 0 : 2;
    }
    else if(s2.t == 2 && i2 == s2.c.length) /*<<+mlBytes.js:615:59>>*/ {
      /*<<+mlBytes.js:616:4>>*/ s2.c +=
      s1.t == 4
       ?  /*<<+mlBytes.js:617:6>>*/ caml_subarray_to_jsbytes(s1.c, i1, len)
       : i1
         == 0
         && s1.c.length == len
         ? s1.c
         :  /*<<+mlBytes.js:618:43>>*/ s1.c.substr(i1, len);
      /*<<+mlBytes.js:619:4>>*/ s2.t = s2.c.length == s2.l ? 0 : 2;
    }
    else /*<<+mlBytes.js:620:9>>*/ {
      /*<<+mlBytes.js:621:4>>*/ if(s2.t != 4)
       /*<<+mlBytes.js:621:31>>*/  /*<<+mlBytes.js:621:31>>*/ caml_convert_bytes_to_array
       (s2);
      /*<<+mlBytes.js:622:4>>*/ var
       /*<<+mlBytes.js:622:11>>*/ c1 = s1.c,
       /*<<+mlBytes.js:622:22>>*/ c2 = s2.c;
      /*<<+mlBytes.js:623:4>>*/ if(s1.t == 4)
       /*<<+mlBytes.js:623:31>>*/ if(i2 <= i1)
        /*<<+mlBytes.js:624:20>>*/ for
       ( /*<<+mlBytes.js:625:19>>*/ var i = 0; i < len; i++)
         /*<<+mlBytes.js:625:38>>*/ c2[i2 + i] = c1[i1 + i];
      else
        /*<<+mlBytes.js:626:13>>*/ for
       ( /*<<+mlBytes.js:627:19>>*/ var i = len - 1; i >= 0; i--)
         /*<<+mlBytes.js:627:43>>*/ c2[i2 + i] = c1[i1 + i];
     else /*<<+mlBytes.js:629:11>>*/ {
       /*<<+mlBytes.js:630:6>>*/  /*<<+mlBytes.js:630:12>>*/ var
       l =  /*<<+mlBytes.js:630:14>>*/ Math.min(len, c1.length - i1);
       /*<<+mlBytes.js:631:6>>*/ for
      ( /*<<+mlBytes.js:631:17>>*/ var i = 0; i < l; i++)
        /*<<+mlBytes.js:631:34>>*/ c2[i2 + i] =
         /*<<+mlBytes.js:631:48>>*/ c1.charCodeAt(i1 + i);
       /*<<+mlBytes.js:632:6>>*/ for(; i < len; i++)
        /*<<+mlBytes.js:632:27>>*/ c2[i2 + i] = 0;
     }
    }
     /*<<+mlBytes.js:635:2>>*/ return 0;
    /*<<+mlBytes.js:636:0>>*/ }
    /*<<+mlBytes.js:50:0>>*/ function caml_str_repeat(n, s){
     /*<<+mlBytes.js:51:2>>*/ if(n == 0)  /*<<+mlBytes.js:51:13>>*/ return "";
     /*<<+mlBytes.js:52:2>>*/ if(s.repeat)
      /*<<+mlBytes.js:52:16>>*/ return  /*<<+mlBytes.js:52:24>>*/ s.repeat(n);
     /*<<+mlBytes.js:53:2>>*/ var
      /*<<+mlBytes.js:53:8>>*/ r = "",
      /*<<+mlBytes.js:53:16>>*/ l = 0;
     /*<<+mlBytes.js:54:2>>*/ for(;;) /*<<+mlBytes.js:54:10>>*/ {
      /*<<+mlBytes.js:55:4>>*/ if(n & 1)  /*<<+mlBytes.js:55:15>>*/ r += s;
      /*<<+mlBytes.js:56:4>>*/ n >>= 1;
      /*<<+mlBytes.js:57:4>>*/ if(n == 0)  /*<<+mlBytes.js:57:16>>*/ return r;
      /*<<+mlBytes.js:58:4>>*/ s += s;
      /*<<+mlBytes.js:59:4>>*/ l++;
      /*<<+mlBytes.js:60:4>>*/ if(l == 9)
       /*<<+mlBytes.js:60:16>>*/  /*<<+mlBytes.js:61:6>>*/ s.slice(0, 1);
    }
    /*<<+mlBytes.js:66:0>>*/ }
    /*<<+mlBytes.js:443:0>>*/ function caml_convert_string_to_bytes(s){
     /*<<+mlBytes.js:445:2>>*/ if(s.t == 2)
      /*<<+mlBytes.js:446:4>>*/ s.c +=
       /*<<+mlBytes.js:446:11>>*/ caml_str_repeat(s.l - s.c.length, "\0");
    else
      /*<<+mlBytes.js:448:4>>*/ s.c =
       /*<<+mlBytes.js:448:10>>*/ caml_subarray_to_jsbytes(s.c, 0, s.c.length);
     /*<<+mlBytes.js:449:2>>*/ s.t = 0;
    /*<<+mlBytes.js:450:0>>*/ }
    /*<<+mlBytes.js:165:0>>*/ function jsoo_is_ascii(s){
     /*<<+mlBytes.js:167:2>>*/ if(s.length < 24) /*<<+mlBytes.js:167:21>>*/ {
      /*<<+mlBytes.js:169:4>>*/ for
     ( /*<<+mlBytes.js:169:15>>*/ var i = 0; i < s.length; i++)
       /*<<+mlBytes.js:169:39>>*/ if
       ( /*<<+mlBytes.js:169:43>>*/ s.charCodeAt(i) > 127)
        /*<<+mlBytes.js:169:66>>*/ return false;
      /*<<+mlBytes.js:170:4>>*/ return true;
    }
    else
      /*<<+mlBytes.js:172:4>>*/ return !
             /*<<+mlBytes.js:172:12>>*/ /[^\x00-\x7f]/.test(s);
    /*<<+mlBytes.js:173:0>>*/ }
    /*<<+mlBytes.js:118:0>>*/ function caml_utf16_of_utf8(s){
     /*<<+mlBytes.js:119:2>>*/ for
    (var
       /*<<+mlBytes.js:119:13>>*/ b = "",
       /*<<+mlBytes.js:119:21>>*/ t = "",
      c,
      c1,
      c2,
      v,
       /*<<+mlBytes.js:119:43>>*/ i = 0,
       /*<<+mlBytes.js:119:50>>*/ l = s.length;
     i < l;
     i++) /*<<+mlBytes.js:119:74>>*/ {
      /*<<+mlBytes.js:120:4>>*/ c1 =
       /*<<+mlBytes.js:120:9>>*/ s.charCodeAt(i);
      /*<<+mlBytes.js:121:4>>*/ if(c1 < 0x80) /*<<+mlBytes.js:121:19>>*/ {
       /*<<+mlBytes.js:122:6>>*/ for
      ( /*<<+mlBytes.js:122:17>>*/ var j = i + 1;
       j < l && (c1 =  /*<<+mlBytes.js:122:43>>*/ s.charCodeAt(j)) < 0x80;
       j++)
        /*<<+mlBytes.js:122:72>>*/ ;
       /*<<+mlBytes.js:123:6>>*/ if(j - i > 512) /*<<+mlBytes.js:123:23>>*/ {
        /*<<+mlBytes.js:123:25>>*/  /*<<+mlBytes.js:123:25>>*/ t.substr(0, 1);
        /*<<+mlBytes.js:123:41>>*/ b += t;
        /*<<+mlBytes.js:123:49>>*/ t = "";
        /*<<+mlBytes.js:123:57>>*/ b +=
         /*<<+mlBytes.js:123:62>>*/ s.slice(i, j);
      }
      else
        /*<<+mlBytes.js:124:11>>*/ t +=
         /*<<+mlBytes.js:124:16>>*/ s.slice(i, j);
       /*<<+mlBytes.js:125:6>>*/ if(j == l)  /*<<+mlBytes.js:125:18>>*/ break;
       /*<<+mlBytes.js:126:6>>*/ i = j;
     }
      /*<<+mlBytes.js:128:4>>*/ v = 1;
      /*<<+mlBytes.js:129:4>>*/ if
      (++i < l
       && ((c2 =  /*<<+mlBytes.js:129:29>>*/ s.charCodeAt(i)) & - 64) == 128) /*<<+mlBytes.js:129:62>>*/ {
       /*<<+mlBytes.js:130:6>>*/ c = c2 + (c1 << 6);
       /*<<+mlBytes.js:131:6>>*/ if(c1 < 0xe0) /*<<+mlBytes.js:131:21>>*/ {
        /*<<+mlBytes.js:132:8>>*/ v = c - 0x3080;
        /*<<+mlBytes.js:133:8>>*/ if(v < 0x80)
         /*<<+mlBytes.js:133:22>>*/ v = 1;
      }
      else /*<<+mlBytes.js:134:13>>*/ {
        /*<<+mlBytes.js:135:8>>*/ v = 2;
        /*<<+mlBytes.js:136:8>>*/ if
        (++i < l
         && ((c2 =  /*<<+mlBytes.js:136:33>>*/ s.charCodeAt(i)) & - 64) == 128) /*<<+mlBytes.js:136:66>>*/ {
         /*<<+mlBytes.js:137:10>>*/ c = c2 + (c << 6);
         /*<<+mlBytes.js:138:10>>*/ if(c1 < 0xf0) /*<<+mlBytes.js:138:25>>*/ {
          /*<<+mlBytes.js:139:12>>*/ v = c - 0xe2080;
          /*<<+mlBytes.js:140:12>>*/ if
          (v < 0x800 || v >= 0xd7ff && v < 0xe000)
           /*<<+mlBytes.js:140:64>>*/ v = 2;
        }
        else /*<<+mlBytes.js:141:17>>*/ {
          /*<<+mlBytes.js:142:12>>*/ v = 3;
          /*<<+mlBytes.js:143:12>>*/ if
          (++i < l
           &&
            ((c2 =  /*<<+mlBytes.js:143:37>>*/ s.charCodeAt(i)) & - 64) == 128
           && c1 < 0xf5) /*<<+mlBytes.js:144:29>>*/ {
           /*<<+mlBytes.js:145:14>>*/ v = c2 - 0x3c82080 + (c << 6);
           /*<<+mlBytes.js:146:14>>*/ if(v < 0x10000 || v > 0x10ffff)
            /*<<+mlBytes.js:146:47>>*/ v = 3;
         }
        }
       }
      }
     }
      /*<<+mlBytes.js:152:4>>*/ if(v < 4) /*<<+mlBytes.js:152:15>>*/ {
       /*<<+mlBytes.js:153:6>>*/ i -= v;
       /*<<+mlBytes.js:154:6>>*/ t += "\ufffd";
     }
     else if(v > 0xffff)
       /*<<+mlBytes.js:156:6>>*/ t +=
        /*<<+mlBytes.js:156:11>>*/ String.fromCharCode
        (0xd7c0 + (v >> 10), 0xdc00 + (v & 0x3FF));
     else
       /*<<+mlBytes.js:158:6>>*/ t +=
        /*<<+mlBytes.js:158:11>>*/ String.fromCharCode(v);
      /*<<+mlBytes.js:159:4>>*/ if(t.length > 1024) /*<<+mlBytes.js:159:25>>*/ {
       /*<<+mlBytes.js:159:26>>*/  /*<<+mlBytes.js:159:26>>*/ t.substr(0, 1);
       /*<<+mlBytes.js:159:42>>*/ b += t;
       /*<<+mlBytes.js:159:50>>*/ t = "";
     }
    }
     /*<<+mlBytes.js:161:2>>*/ return b + t;
    /*<<+mlBytes.js:162:0>>*/ }
    /*<<+mlBytes.js:412:0>>*/ function MlBytes(tag, contents, length){
     /*<<+mlBytes.js:413:2>>*/ this.t = tag;
     /*<<+mlBytes.js:413:14>>*/ this.c = contents;
     /*<<+mlBytes.js:413:31>>*/ this.l = length;
    /*<<+mlBytes.js:414:0>>*/ }
    /*<<+mlBytes.js:415:0>>*/ MlBytes.prototype.toString =
    function(){
      /*<<+mlBytes.js:416:2>>*/ switch(this.t){
       case 9:
         /*<<+mlBytes.js:418:4>>*/ return this.c;
       default:
         /*<<+mlBytes.js:420:4>>*/  /*<<+mlBytes.js:420:4>>*/ caml_convert_string_to_bytes
         (this);
       case 0:
         /*<<+mlBytes.js:422:4>>*/ if
         ( /*<<+mlBytes.js:422:8>>*/ jsoo_is_ascii(this.c)) /*<<+mlBytes.js:422:31>>*/ {
          /*<<+mlBytes.js:423:6>>*/ this.t = 9;
          /*<<+mlBytes.js:424:6>>*/ return this.c;
        }
         /*<<+mlBytes.js:426:4>>*/ this.t = 8;
       case 8:
         /*<<+mlBytes.js:428:4>>*/ return this.c;
     }
     /*<<+mlBytes.js:415:29>>*/ };
    /*<<+mlBytes.js:431:0>>*/ MlBytes.prototype.toUtf16 =
    function(){
      /*<<+mlBytes.js:432:2>>*/  /*<<+mlBytes.js:432:8>>*/ var
      r =  /*<<+mlBytes.js:432:10>>*/ this.toString();
      /*<<+mlBytes.js:433:2>>*/ if(this.t == 9)
       /*<<+mlBytes.js:433:18>>*/ return r;
      /*<<+mlBytes.js:434:2>>*/ return  /*<<+mlBytes.js:434:9>>*/ caml_utf16_of_utf8
             (r);
     /*<<+mlBytes.js:431:28>>*/ };
    /*<<+mlBytes.js:436:0>>*/ MlBytes.prototype.slice =
    function(){
      /*<<+mlBytes.js:437:2>>*/  /*<<+mlBytes.js:437:14>>*/ var
      content =
        this.t == 4 ?  /*<<+mlBytes.js:437:30>>*/ this.c.slice() : this.c;
      /*<<+mlBytes.js:438:2>>*/ return new MlBytes(this.t, content, this.l);
     /*<<+mlBytes.js:436:26>>*/ };
    /*<<+mlBytes.js:734:0>>*/ function caml_bytes_of_jsbytes(s){
     /*<<+mlBytes.js:734:36>>*/ return new MlBytes(0, s, s.length);
    /*<<+mlBytes.js:734:70>>*/ }
    /*<<+mlBytes.js:713:0>>*/ function caml_jsbytes_of_string(x){
     /*<<+mlBytes.js:713:37>>*/ return x;
    /*<<+mlBytes.js:713:46>>*/ }
    /*<<+mlBytes.js:703:0>>*/ function caml_bytes_of_string(s){
     /*<<+mlBytes.js:704:2>>*/ return  /*<<+mlBytes.js:704:9>>*/ caml_bytes_of_jsbytes
            ( /*<<+mlBytes.js:704:31>>*/ caml_jsbytes_of_string(s));
    /*<<+mlBytes.js:705:0>>*/ }
    /*<<+mlBytes.js:640:0>>*/ function caml_blit_string(a, b, c, d, e){
     /*<<+mlBytes.js:641:2>>*/  /*<<+mlBytes.js:641:2>>*/ caml_blit_bytes
     ( /*<<+mlBytes.js:641:18>>*/ caml_bytes_of_string(a), b, c, d, e);
     /*<<+mlBytes.js:642:2>>*/ return 0;
    /*<<+mlBytes.js:643:0>>*/ }
    /*<<+ints.js:113:0>>*/ function caml_bswap16(x){
     /*<<+ints.js:114:2>>*/ return (x & 0x00FF) << 8 | (x & 0xFF00) >> 8;
    /*<<+ints.js:116:0>>*/ }
    /*<<+mlBytes.js:212:0>>*/ function caml_bytes_bound_error(){
     /*<<+mlBytes.js:213:2>>*/  /*<<+mlBytes.js:213:2>>*/ caml_invalid_argument
     ("index out of bounds");
    /*<<+mlBytes.js:214:0>>*/ }
    /*<<+mlBytes.js:176:0>>*/ function caml_bytes_unsafe_get(s, i){
     /*<<+mlBytes.js:177:2>>*/ switch(s.t & 6){
      default:
        /*<<+mlBytes.js:179:4>>*/ if(i >= s.c.length)
         /*<<+mlBytes.js:179:25>>*/ return 0;
      case 0:
        /*<<+mlBytes.js:181:4>>*/ return  /*<<+mlBytes.js:181:11>>*/ s.c.charCodeAt
               (i);
      case 4:
        /*<<+mlBytes.js:183:4>>*/ return s.c[i];
    }
    /*<<+mlBytes.js:185:0>>*/ }
    /*<<+mlBytes.js:293:0>>*/ function caml_bytes_get(s, i){
     /*<<+mlBytes.js:294:2>>*/ if(i >>> 0 >= s.l)
      /*<<+mlBytes.js:294:22>>*/  /*<<+mlBytes.js:294:22>>*/ caml_bytes_bound_error
      ();
     /*<<+mlBytes.js:295:2>>*/ return  /*<<+mlBytes.js:295:9>>*/ caml_bytes_unsafe_get
            (s, i);
    /*<<+mlBytes.js:296:0>>*/ }
    /*<<+int64.js:368:0>>*/ function caml_int64_of_bytes(a){
     /*<<+int64.js:369:2>>*/ return new
            MlInt64
            (a[7] << 0 | a[6] << 8 | a[5] << 16,
             a[4] << 0 | a[3] << 8 | a[2] << 16,
             a[1] << 0 | a[0] << 8);
    /*<<+int64.js:372:0>>*/ }
    /*<<+mlBytes.js:282:0>>*/ function caml_bytes_get64(s, i){
     /*<<+mlBytes.js:283:2>>*/ if(i >>> 0 >= s.l - 7)
      /*<<+mlBytes.js:283:26>>*/  /*<<+mlBytes.js:283:26>>*/ caml_bytes_bound_error
      ();
     /*<<+mlBytes.js:284:2>>*/  /*<<+mlBytes.js:284:8>>*/ var
     a = new Array(8);
     /*<<+mlBytes.js:285:2>>*/ for
    ( /*<<+mlBytes.js:285:12>>*/ var j = 0; j < 8; j++)
      /*<<+mlBytes.js:285:28>>*/ a[7 - j] =
       /*<<+mlBytes.js:286:15>>*/ caml_bytes_unsafe_get(s, i + j);
     /*<<+mlBytes.js:288:2>>*/ return  /*<<+mlBytes.js:288:9>>*/ caml_int64_of_bytes
            (a);
    /*<<+mlBytes.js:289:0>>*/ }
    /*<<+mlBytes.js:189:0>>*/ function caml_bytes_unsafe_set(s, i, c){
     /*<<+mlBytes.js:191:2>>*/ c &= 0xff;
     /*<<+mlBytes.js:192:2>>*/ if(s.t != 4) /*<<+mlBytes.js:192:28>>*/ {
      /*<<+mlBytes.js:193:4>>*/ if(i == s.c.length) /*<<+mlBytes.js:193:25>>*/ {
       /*<<+mlBytes.js:194:6>>*/ s.c +=
        /*<<+mlBytes.js:194:13>>*/ String.fromCharCode(c);
       /*<<+mlBytes.js:195:6>>*/ if(i + 1 == s.l)
        /*<<+mlBytes.js:195:24>>*/ s.t = 0;
       /*<<+mlBytes.js:196:6>>*/ return 0;
     }
      /*<<+mlBytes.js:198:4>>*/  /*<<+mlBytes.js:198:4>>*/ caml_convert_bytes_to_array
      (s);
    }
     /*<<+mlBytes.js:200:2>>*/ s.c[i] = c;
     /*<<+mlBytes.js:201:2>>*/ return 0;
    /*<<+mlBytes.js:202:0>>*/ }
    /*<<+mlBytes.js:395:0>>*/ function caml_bytes_set(s, i, c){
     /*<<+mlBytes.js:396:2>>*/ if(i >>> 0 >= s.l)
      /*<<+mlBytes.js:396:22>>*/  /*<<+mlBytes.js:396:22>>*/ caml_bytes_bound_error
      ();
     /*<<+mlBytes.js:397:2>>*/ return  /*<<+mlBytes.js:397:9>>*/ caml_bytes_unsafe_set
            (s, i, c);
    /*<<+mlBytes.js:398:0>>*/ }
    /*<<+mlBytes.js:315:0>>*/ function caml_bytes_set16(s, i, i16){
     /*<<+mlBytes.js:316:2>>*/ if(i >>> 0 >= s.l - 1)
      /*<<+mlBytes.js:316:26>>*/  /*<<+mlBytes.js:316:26>>*/ caml_bytes_bound_error
      ();
     /*<<+mlBytes.js:317:2>>*/ var
      /*<<+mlBytes.js:317:9>>*/ b2 = 0xFF & i16 >> 8,
      /*<<+mlBytes.js:318:9>>*/ b1 = 0xFF & i16;
     /*<<+mlBytes.js:319:2>>*/  /*<<+mlBytes.js:319:2>>*/ caml_bytes_unsafe_set
     (s, i + 0, b1);
     /*<<+mlBytes.js:320:2>>*/  /*<<+mlBytes.js:320:2>>*/ caml_bytes_unsafe_set
     (s, i + 1, b2);
     /*<<+mlBytes.js:321:2>>*/ return 0;
    /*<<+mlBytes.js:322:0>>*/ }
    /*<<+int64.js:374:0>>*/ function caml_int64_to_bytes(x){
     /*<<+int64.js:374:34>>*/ return  /*<<+int64.js:374:41>>*/ x.toArray();
    /*<<+int64.js:374:53>>*/ }
    /*<<+mlBytes.js:370:0>>*/ function caml_bytes_set64(s, i, i64){
     /*<<+mlBytes.js:371:2>>*/ if(i >>> 0 >= s.l - 7)
      /*<<+mlBytes.js:371:26>>*/  /*<<+mlBytes.js:371:26>>*/ caml_bytes_bound_error
      ();
     /*<<+mlBytes.js:372:2>>*/  /*<<+mlBytes.js:372:8>>*/ var
     a =  /*<<+mlBytes.js:372:10>>*/ caml_int64_to_bytes(i64);
     /*<<+mlBytes.js:373:2>>*/ for
    ( /*<<+mlBytes.js:373:12>>*/ var j = 0; j < 8; j++)
      /*<<+mlBytes.js:373:29>>*/  /*<<+mlBytes.js:374:4>>*/ caml_bytes_unsafe_set
      (s, i + 7 - j, a[j]);
     /*<<+mlBytes.js:376:2>>*/ return 0;
    /*<<+mlBytes.js:377:0>>*/ }
    /*<<+stdlib.js:23:0>>*/ function caml_call_gen(f, args){
     /*<<+stdlib.js:24:2>>*/ var
      /*<<+stdlib.js:24:8>>*/ n = f.l >= 0 ? f.l : f.l = f.length,
      /*<<+stdlib.js:25:14>>*/ argsLen = args.length,
      /*<<+stdlib.js:26:8>>*/ d = n - argsLen;
     /*<<+stdlib.js:27:2>>*/ if(d == 0)
      /*<<+stdlib.js:28:4>>*/ return  /*<<+stdlib.js:28:11>>*/ f.apply
             (null, args);
    else if(d < 0) /*<<+stdlib.js:29:18>>*/ {
      /*<<+stdlib.js:30:4>>*/  /*<<+stdlib.js:30:10>>*/ var
      g =
         /*<<+stdlib.js:30:12>>*/ f.apply
         (null,  /*<<+stdlib.js:30:25>>*/ args.slice(0, n));
      /*<<+stdlib.js:31:4>>*/ if(typeof g !== "function")
       /*<<+stdlib.js:31:32>>*/ return g;
      /*<<+stdlib.js:32:4>>*/ return  /*<<+stdlib.js:32:11>>*/ caml_call_gen
             (g,  /*<<+stdlib.js:32:27>>*/ args.slice(n));
    }
    else /*<<+stdlib.js:34:7>>*/ {
      /*<<+stdlib.js:35:4>>*/ switch(d){
       case 1:
         /*<<+stdlib.js:36:12>>*/ {
          /*<<+stdlib.js:37:6>>*/  /*<<+stdlib.js:37:12>>*/ var
          g =
            function(x){
              /*<<+stdlib.js:38:8>>*/  /*<<+stdlib.js:38:18>>*/ var
              nargs = new Array(argsLen + 1);
              /*<<+stdlib.js:39:8>>*/ for
             ( /*<<+stdlib.js:39:18>>*/ var i = 0; i < argsLen; i++)
               /*<<+stdlib.js:39:42>>*/ nargs[i] = args[i];
              /*<<+stdlib.js:40:8>>*/ nargs[argsLen] = x;
              /*<<+stdlib.js:41:8>>*/ return  /*<<+stdlib.js:41:15>>*/ f.apply
                     (null, nargs);
             /*<<+stdlib.js:37:14>>*/ };
          /*<<+stdlib.js:43:6>>*/ break;
        }
       case 2:
         /*<<+stdlib.js:45:12>>*/ {
          /*<<+stdlib.js:46:6>>*/  /*<<+stdlib.js:46:12>>*/ var
          g =
            function(x, y){
              /*<<+stdlib.js:47:8>>*/  /*<<+stdlib.js:47:18>>*/ var
              nargs = new Array(argsLen + 2);
              /*<<+stdlib.js:48:8>>*/ for
             ( /*<<+stdlib.js:48:18>>*/ var i = 0; i < argsLen; i++)
               /*<<+stdlib.js:48:42>>*/ nargs[i] = args[i];
              /*<<+stdlib.js:49:8>>*/ nargs[argsLen] = x;
              /*<<+stdlib.js:50:8>>*/ nargs[argsLen + 1] = y;
              /*<<+stdlib.js:51:8>>*/ return  /*<<+stdlib.js:51:15>>*/ f.apply
                     (null, nargs);
             /*<<+stdlib.js:46:14>>*/ };
          /*<<+stdlib.js:53:6>>*/ break;
        }
       default:
         /*<<+stdlib.js:55:13>>*/  /*<<+stdlib.js:56:12>>*/ var
         g =
           function(){
             /*<<+stdlib.js:57:8>>*/ var
              /*<<+stdlib.js:57:23>>*/ extra_args =
               arguments.length == 0 ? 1 : arguments.length,
              /*<<+stdlib.js:58:18>>*/ nargs =
               new Array(args.length + extra_args);
             /*<<+stdlib.js:59:8>>*/ for
            ( /*<<+stdlib.js:59:18>>*/ var i = 0; i < args.length; i++)
              /*<<+stdlib.js:59:46>>*/ nargs[i] = args[i];
             /*<<+stdlib.js:60:8>>*/ for
            ( /*<<+stdlib.js:60:18>>*/ var i = 0; i < arguments.length; i++)
              /*<<+stdlib.js:60:51>>*/ nargs[args.length + i] = arguments[i];
             /*<<+stdlib.js:61:8>>*/ return  /*<<+stdlib.js:61:15>>*/ caml_call_gen
                    (f, nargs);
            /*<<+stdlib.js:56:14>>*/ };
     }
      /*<<+stdlib.js:64:4>>*/ g.l = d;
      /*<<+stdlib.js:65:4>>*/ return g;
    }
    /*<<+stdlib.js:67:0>>*/ }
    /*<<+array.js:98:0>>*/ function caml_check_bound(array, index){
     /*<<+array.js:99:2>>*/ if(index >>> 0 >= array.length - 1)
      /*<<+array.js:99:39>>*/  /*<<+array.js:99:39>>*/ caml_array_bound_error
      ();
     /*<<+array.js:100:2>>*/ return array;
    /*<<+array.js:101:0>>*/ }
    /*<<+ieee_754.js:184:0>>*/ function caml_classify_float(x){
     /*<<+ieee_754.js:185:2>>*/ if( /*<<+ieee_754.js:185:6>>*/ isFinite(x)) /*<<+ieee_754.js:185:20>>*/ {
      /*<<+ieee_754.js:186:4>>*/ if
      ( /*<<+ieee_754.js:186:8>>*/ Math.abs(x) >= 2.2250738585072014e-308)
       /*<<+ieee_754.js:186:48>>*/ return 0;
      /*<<+ieee_754.js:187:4>>*/ if(x != 0)
       /*<<+ieee_754.js:187:16>>*/ return 1;
      /*<<+ieee_754.js:188:4>>*/ return 2;
    }
     /*<<+ieee_754.js:190:2>>*/ return  /*<<+ieee_754.js:190:9>>*/ isNaN(x)
            ? 4
            : 3;
    /*<<+ieee_754.js:191:0>>*/ }
    /*<<+obj.js:214:0>>*/ function caml_is_continuation_tag(t){
     /*<<+obj.js:215:2>>*/ return t == 245 ? 1 : 0;
    /*<<+obj.js:216:0>>*/ }
    /*<<+ieee_754.js:21:0>>*/  /*<<+ieee_754.js:21:12>>*/ var
    log2_ok =
      Math.log2
      &&
        /*<<+ieee_754.js:21:27>>*/ Math.log2(1.1235582092889474E+307) == 1020;
    /*<<+ieee_754.js:22:0>>*/ function jsoo_floor_log2(x){
     /*<<+ieee_754.js:23:2>>*/ if(log2_ok)
      /*<<+ieee_754.js:23:14>>*/ return  /*<<+ieee_754.js:23:21>>*/ Math.floor
             ( /*<<+ieee_754.js:23:32>>*/ Math.log2(x));
     /*<<+ieee_754.js:24:2>>*/  /*<<+ieee_754.js:24:8>>*/ var i = 0;
     /*<<+ieee_754.js:25:2>>*/ if(x == 0)
      /*<<+ieee_754.js:25:14>>*/ return - Infinity;
     /*<<+ieee_754.js:26:2>>*/ if(x >= 1)
      /*<<+ieee_754.js:26:11>>*/ while(x >= 2) /*<<+ieee_754.js:26:25>>*/ {
       /*<<+ieee_754.js:26:26>>*/ x /= 2;
       /*<<+ieee_754.js:26:32>>*/ i++;
     }
    else
      /*<<+ieee_754.js:27:7>>*/ while(x < 1) /*<<+ieee_754.js:27:22>>*/ {
       /*<<+ieee_754.js:27:23>>*/ x *= 2;
       /*<<+ieee_754.js:27:29>>*/ i--;
     }
     /*<<+ieee_754.js:28:2>>*/ return i;
    /*<<+ieee_754.js:29:0>>*/ }
    /*<<+ieee_754.js:69:0>>*/ function caml_int32_bits_of_float(x){
     /*<<+ieee_754.js:70:2>>*/  /*<<+ieee_754.js:70:15>>*/ var
     float32a = new Float32Array(1);
     /*<<+ieee_754.js:71:2>>*/ float32a[0] = x;
     /*<<+ieee_754.js:72:2>>*/  /*<<+ieee_754.js:72:13>>*/ var
     int32a = new Int32Array(float32a.buffer);
     /*<<+ieee_754.js:73:2>>*/ return int32a[0] | 0;
    /*<<+ieee_754.js:74:0>>*/ }
    /*<<+int64.js:349:0>>*/ function caml_int64_create_lo_mi_hi(lo, mi, hi){
     /*<<+int64.js:350:2>>*/ return new MlInt64(lo, mi, hi);
    /*<<+int64.js:351:0>>*/ }
    /*<<+ieee_754.js:33:0>>*/ function caml_int64_bits_of_float(x){
     /*<<+ieee_754.js:34:2>>*/ if(!  /*<<+ieee_754.js:34:7>>*/ isFinite(x)) /*<<+ieee_754.js:34:20>>*/ {
      /*<<+ieee_754.js:35:4>>*/ if( /*<<+ieee_754.js:35:8>>*/ isNaN(x))
       /*<<+ieee_754.js:36:6>>*/ return  /*<<+ieee_754.js:36:13>>*/ caml_int64_create_lo_mi_hi
              (1, 0, 0x7ff0);
      /*<<+ieee_754.js:37:4>>*/ return x > 0
             ?  /*<<+ieee_754.js:38:13>>*/ caml_int64_create_lo_mi_hi
               (0, 0, 0x7ff0)
             :  /*<<+ieee_754.js:40:13>>*/ caml_int64_create_lo_mi_hi
               (0, 0, 0xfff0);
    }
     /*<<+ieee_754.js:42:2>>*/  /*<<+ieee_754.js:42:11>>*/ var
     sign = x == 0 && 1 / x == - Infinity ? 0x8000 : x >= 0 ? 0 : 0x8000;
     /*<<+ieee_754.js:43:2>>*/ if(sign)  /*<<+ieee_754.js:43:12>>*/ x = - x;
     /*<<+ieee_754.js:46:2>>*/  /*<<+ieee_754.js:46:10>>*/ var
     exp =  /*<<+ieee_754.js:46:12>>*/ jsoo_floor_log2(x) + 1023;
     /*<<+ieee_754.js:47:2>>*/ if(exp <= 0) /*<<+ieee_754.js:47:16>>*/ {
      /*<<+ieee_754.js:48:4>>*/ exp = 0;
      /*<<+ieee_754.js:49:4>>*/ x /=
       /*<<+ieee_754.js:49:9>>*/ Math.pow(2, - 1026);
    }
    else /*<<+ieee_754.js:50:9>>*/ {
      /*<<+ieee_754.js:51:4>>*/ x /=
       /*<<+ieee_754.js:51:9>>*/ Math.pow(2, exp - 1027);
      /*<<+ieee_754.js:52:4>>*/ if(x < 16) /*<<+ieee_754.js:52:16>>*/ {
       /*<<+ieee_754.js:53:6>>*/ x *= 2;
       /*<<+ieee_754.js:53:14>>*/ exp -= 1;
     }
      /*<<+ieee_754.js:54:4>>*/ if(exp == 0)
       /*<<+ieee_754.js:54:18>>*/ x /= 2;
    }
     /*<<+ieee_754.js:57:2>>*/ var
      /*<<+ieee_754.js:57:8>>*/ k =
        /*<<+ieee_754.js:57:10>>*/ Math.pow(2, 24),
      /*<<+ieee_754.js:58:9>>*/ r3 = x | 0;
     /*<<+ieee_754.js:59:2>>*/ x = (x - r3) * k;
     /*<<+ieee_754.js:60:2>>*/  /*<<+ieee_754.js:60:9>>*/ var r2 = x | 0;
     /*<<+ieee_754.js:61:2>>*/ x = (x - r2) * k;
     /*<<+ieee_754.js:62:2>>*/  /*<<+ieee_754.js:62:9>>*/ var r1 = x | 0;
     /*<<+ieee_754.js:63:2>>*/ r3 = r3 & 0xf | sign | exp << 4;
     /*<<+ieee_754.js:64:2>>*/ return  /*<<+ieee_754.js:64:9>>*/ caml_int64_create_lo_mi_hi
            (r1, r2, r3);
    /*<<+ieee_754.js:65:0>>*/ }
    /*<<+bigarray.js:605:0>>*/ function caml_ba_serialize(writer, ba, sz){
     /*<<+bigarray.js:606:2>>*/  /*<<+bigarray.js:606:2>>*/ writer.write
     (32, ba.dims.length);
     /*<<+bigarray.js:607:2>>*/  /*<<+bigarray.js:607:2>>*/ writer.write
     (32, ba.kind | ba.layout << 8);
     /*<<+bigarray.js:608:2>>*/ if(ba.caml_custom == "_bigarr02")
      /*<<+bigarray.js:609:4>>*/ for
     ( /*<<+bigarray.js:609:14>>*/ var i = 0; i < ba.dims.length; i++)
       /*<<+bigarray.js:609:44>>*/ if(ba.dims[i] < 0xffff)
        /*<<+bigarray.js:611:8>>*/  /*<<+bigarray.js:611:8>>*/ writer.write
        (16, ba.dims[i]);
      else /*<<+bigarray.js:612:11>>*/ {
        /*<<+bigarray.js:613:8>>*/  /*<<+bigarray.js:613:8>>*/ writer.write
        (16, 0xffff);
        /*<<+bigarray.js:614:8>>*/  /*<<+bigarray.js:614:8>>*/ writer.write
        (32, 0);
        /*<<+bigarray.js:615:8>>*/  /*<<+bigarray.js:615:8>>*/ writer.write
        (32, ba.dims[i]);
      }
    else
      /*<<+bigarray.js:619:4>>*/ for
     ( /*<<+bigarray.js:619:14>>*/ var i = 0; i < ba.dims.length; i++)
       /*<<+bigarray.js:619:44>>*/  /*<<+bigarray.js:619:44>>*/ writer.write
       (32, ba.dims[i]);
     /*<<+bigarray.js:620:2>>*/ switch(ba.kind){
      case 2:
      case 3:
      case 12:
        /*<<+bigarray.js:624:4>>*/ for
       ( /*<<+bigarray.js:624:14>>*/ var i = 0; i < ba.data.length; i++)
         /*<<+bigarray.js:624:43>>*/  /*<<+bigarray.js:625:6>>*/ writer.write
         (8, ba.data[i]);
        /*<<+bigarray.js:627:4>>*/ break;
      case 4:
      case 5:
        /*<<+bigarray.js:630:4>>*/ for
       ( /*<<+bigarray.js:630:14>>*/ var i = 0; i < ba.data.length; i++)
         /*<<+bigarray.js:630:43>>*/  /*<<+bigarray.js:631:6>>*/ writer.write
         (16, ba.data[i]);
        /*<<+bigarray.js:633:4>>*/ break;
      case 6:
        /*<<+bigarray.js:635:4>>*/ for
       ( /*<<+bigarray.js:635:14>>*/ var i = 0; i < ba.data.length; i++)
         /*<<+bigarray.js:635:43>>*/  /*<<+bigarray.js:636:6>>*/ writer.write
         (32, ba.data[i]);
        /*<<+bigarray.js:638:4>>*/ break;
      case 8:
      case 9:
        /*<<+bigarray.js:641:4>>*/  /*<<+bigarray.js:641:4>>*/ writer.write
        (8, 0);
        /*<<+bigarray.js:642:4>>*/ for
       ( /*<<+bigarray.js:642:14>>*/ var i = 0; i < ba.data.length; i++)
         /*<<+bigarray.js:642:43>>*/  /*<<+bigarray.js:643:6>>*/ writer.write
         (32, ba.data[i]);
        /*<<+bigarray.js:645:4>>*/ break;
      case 7:
        /*<<+bigarray.js:647:4>>*/ for
       ( /*<<+bigarray.js:647:14>>*/ var i = 0; i < ba.data.length / 2; i++) /*<<+bigarray.js:647:47>>*/ {
         /*<<+bigarray.js:648:6>>*/  /*<<+bigarray.js:648:12>>*/ var
         b =
            /*<<+bigarray.js:648:14>>*/ caml_int64_to_bytes
            ( /*<<+bigarray.js:648:34>>*/ ba.get(i));
         /*<<+bigarray.js:649:6>>*/ for
        ( /*<<+bigarray.js:649:17>>*/ var j = 0; j < 8; j++)
          /*<<+bigarray.js:649:34>>*/  /*<<+bigarray.js:649:34>>*/ writer.write
          (8, b[j]);
       }
        /*<<+bigarray.js:651:4>>*/ break;
      case 1:
        /*<<+bigarray.js:653:4>>*/ for
       ( /*<<+bigarray.js:653:14>>*/ var i = 0; i < ba.data.length; i++) /*<<+bigarray.js:653:43>>*/ {
         /*<<+bigarray.js:654:6>>*/  /*<<+bigarray.js:654:12>>*/ var
         b =
            /*<<+bigarray.js:654:14>>*/ caml_int64_to_bytes
            ( /*<<+bigarray.js:654:34>>*/ caml_int64_bits_of_float
              ( /*<<+bigarray.js:654:59>>*/ ba.get(i)));
         /*<<+bigarray.js:655:6>>*/ for
        ( /*<<+bigarray.js:655:17>>*/ var j = 0; j < 8; j++)
          /*<<+bigarray.js:655:34>>*/  /*<<+bigarray.js:655:34>>*/ writer.write
          (8, b[j]);
       }
        /*<<+bigarray.js:657:4>>*/ break;
      case 0:
        /*<<+bigarray.js:659:4>>*/ for
       ( /*<<+bigarray.js:659:14>>*/ var i = 0; i < ba.data.length; i++) /*<<+bigarray.js:659:43>>*/ {
         /*<<+bigarray.js:660:6>>*/  /*<<+bigarray.js:660:12>>*/ var
         b =
            /*<<+bigarray.js:660:14>>*/ caml_int32_bits_of_float
            ( /*<<+bigarray.js:660:39>>*/ ba.get(i));
         /*<<+bigarray.js:661:6>>*/  /*<<+bigarray.js:661:6>>*/ writer.write
         (32, b);
       }
        /*<<+bigarray.js:663:4>>*/ break;
      case 10:
        /*<<+bigarray.js:665:4>>*/ for
       ( /*<<+bigarray.js:665:14>>*/ var i = 0; i < ba.data.length / 2; i++) /*<<+bigarray.js:665:47>>*/ {
         /*<<+bigarray.js:666:6>>*/  /*<<+bigarray.js:666:12>>*/ var
         j =  /*<<+bigarray.js:666:14>>*/ ba.get(i);
         /*<<+bigarray.js:667:6>>*/  /*<<+bigarray.js:667:6>>*/ writer.write
         (32,  /*<<+bigarray.js:667:23>>*/ caml_int32_bits_of_float(j[1]));
         /*<<+bigarray.js:668:6>>*/  /*<<+bigarray.js:668:6>>*/ writer.write
         (32,  /*<<+bigarray.js:668:23>>*/ caml_int32_bits_of_float(j[2]));
       }
        /*<<+bigarray.js:670:4>>*/ break;
      case 11:
        /*<<+bigarray.js:672:4>>*/ for
       ( /*<<+bigarray.js:672:14>>*/ var i = 0; i < ba.data.length / 2; i++) /*<<+bigarray.js:672:47>>*/ {
         /*<<+bigarray.js:673:6>>*/ var
          /*<<+bigarray.js:673:18>>*/ complex =
            /*<<+bigarray.js:673:20>>*/ ba.get(i),
          /*<<+bigarray.js:674:12>>*/ b =
            /*<<+bigarray.js:674:14>>*/ caml_int64_to_bytes
            ( /*<<+bigarray.js:674:34>>*/ caml_int64_bits_of_float(complex[1]));
         /*<<+bigarray.js:675:6>>*/ for
        ( /*<<+bigarray.js:675:17>>*/ var j = 0; j < 8; j++)
          /*<<+bigarray.js:675:34>>*/  /*<<+bigarray.js:675:34>>*/ writer.write
          (8, b[j]);
         /*<<+bigarray.js:676:6>>*/  /*<<+bigarray.js:676:12>>*/ var
         b =
            /*<<+bigarray.js:676:14>>*/ caml_int64_to_bytes
            ( /*<<+bigarray.js:676:34>>*/ caml_int64_bits_of_float(complex[2]));
         /*<<+bigarray.js:677:6>>*/ for
        ( /*<<+bigarray.js:677:17>>*/ var j = 0; j < 8; j++)
          /*<<+bigarray.js:677:34>>*/  /*<<+bigarray.js:677:34>>*/ writer.write
          (8, b[j]);
       }
        /*<<+bigarray.js:679:4>>*/ break;
    }
     /*<<+bigarray.js:681:2>>*/ sz[0] = (4 + ba.dims.length) * 4;
     /*<<+bigarray.js:682:2>>*/ sz[1] = (4 + ba.dims.length) * 8;
    /*<<+bigarray.js:683:0>>*/ }
    /*<<+ieee_754.js:176:0>>*/ function caml_int32_float_of_bits(x){
     /*<<+ieee_754.js:177:2>>*/  /*<<+ieee_754.js:177:13>>*/ var
     int32a = new Int32Array(1);
     /*<<+ieee_754.js:178:2>>*/ int32a[0] = x;
     /*<<+ieee_754.js:179:2>>*/  /*<<+ieee_754.js:179:15>>*/ var
     float32a = new Float32Array(int32a.buffer);
     /*<<+ieee_754.js:180:2>>*/ return float32a[0];
    /*<<+ieee_754.js:181:0>>*/ }
    /*<<+ieee_754.js:128:0>>*/ function caml_int64_float_of_bits(x){
     /*<<+ieee_754.js:129:2>>*/ var
      /*<<+ieee_754.js:129:9>>*/ lo = x.lo,
      /*<<+ieee_754.js:130:9>>*/ mi = x.mi,
      /*<<+ieee_754.js:131:9>>*/ hi = x.hi,
      /*<<+ieee_754.js:132:10>>*/ exp = (hi & 0x7fff) >> 4;
     /*<<+ieee_754.js:133:2>>*/ if(exp == 2047)
      /*<<+ieee_754.js:133:19>>*/ return (lo | mi | hi & 0xf) == 0
             ? hi & 0x8000 ? - Infinity : Infinity
             : NaN;
     /*<<+ieee_754.js:139:2>>*/ var
      /*<<+ieee_754.js:139:8>>*/ k =
        /*<<+ieee_754.js:139:10>>*/ Math.pow(2, - 24),
      /*<<+ieee_754.js:140:10>>*/ res = (lo * k + mi) * k + (hi & 0xf);
     /*<<+ieee_754.js:141:2>>*/ if(exp > 0) /*<<+ieee_754.js:141:15>>*/ {
      /*<<+ieee_754.js:142:4>>*/ res += 16;
      /*<<+ieee_754.js:143:4>>*/ res *=
       /*<<+ieee_754.js:143:11>>*/ Math.pow(2, exp - 1027);
    }
    else
      /*<<+ieee_754.js:145:4>>*/ res *=
       /*<<+ieee_754.js:145:11>>*/ Math.pow(2, - 1026);
     /*<<+ieee_754.js:146:2>>*/ if(hi & 0x8000)
      /*<<+ieee_754.js:146:19>>*/ res = - res;
     /*<<+ieee_754.js:147:2>>*/ return res;
    /*<<+ieee_754.js:148:0>>*/ }
    /*<<+fail.js:39:0>>*/ function caml_failwith(msg){
     /*<<+fail.js:40:2>>*/ if(! caml_global_data.Failure)
      /*<<+fail.js:41:4>>*/ caml_global_data.Failure =
      [248,  /*<<+fail.js:41:34>>*/ caml_string_of_jsbytes("Failure"), - 3];
     /*<<+fail.js:42:2>>*/  /*<<+fail.js:42:2>>*/ caml_raise_with_string
     (caml_global_data.Failure, msg);
    /*<<+fail.js:43:0>>*/ }
    /*<<+bigarray.js:691:0>>*/ function caml_ba_deserialize(reader, sz, name){
     /*<<+bigarray.js:692:2>>*/  /*<<+bigarray.js:692:15>>*/ var
     num_dims =  /*<<+bigarray.js:692:17>>*/ reader.read32s();
     /*<<+bigarray.js:693:2>>*/ if(num_dims < 0 || num_dims > 16)
      /*<<+bigarray.js:694:4>>*/  /*<<+bigarray.js:694:4>>*/ caml_failwith
      ("input_value: wrong number of bigarray dimensions");
     /*<<+bigarray.js:695:2>>*/ var
      /*<<+bigarray.js:695:10>>*/ tag =
        /*<<+bigarray.js:695:12>>*/ reader.read32s(),
      /*<<+bigarray.js:696:11>>*/ kind = tag & 0xff,
      /*<<+bigarray.js:697:13>>*/ layout = tag >> 8 & 1,
      /*<<+bigarray.js:698:11>>*/ dims = [];
     /*<<+bigarray.js:699:2>>*/ if(name == "_bigarr02")
      /*<<+bigarray.js:700:4>>*/ for
     ( /*<<+bigarray.js:700:15>>*/ var i = 0; i < num_dims; i++) /*<<+bigarray.js:700:39>>*/ {
       /*<<+bigarray.js:701:6>>*/  /*<<+bigarray.js:701:19>>*/ var
       size_dim =  /*<<+bigarray.js:701:21>>*/ reader.read16u();
       /*<<+bigarray.js:702:6>>*/ if(size_dim == 0xffff) /*<<+bigarray.js:702:28>>*/ {
        /*<<+bigarray.js:703:8>>*/ var
         /*<<+bigarray.js:703:24>>*/ size_dim_hi =
           /*<<+bigarray.js:703:26>>*/ reader.read32u(),
         /*<<+bigarray.js:704:24>>*/ size_dim_lo =
           /*<<+bigarray.js:704:26>>*/ reader.read32u();
        /*<<+bigarray.js:705:8>>*/ if(size_dim_hi != 0)
         /*<<+bigarray.js:706:10>>*/  /*<<+bigarray.js:706:10>>*/ caml_failwith
         ("input_value: bigarray dimension overflow in 32bit");
        /*<<+bigarray.js:707:8>>*/ size_dim = size_dim_lo;
      }
       /*<<+bigarray.js:709:6>>*/  /*<<+bigarray.js:709:6>>*/ dims.push
       (size_dim);
     }
    else
      /*<<+bigarray.js:712:4>>*/ for
     ( /*<<+bigarray.js:712:15>>*/ var i = 0; i < num_dims; i++)
       /*<<+bigarray.js:712:39>>*/  /*<<+bigarray.js:712:39>>*/ dims.push
       ( /*<<+bigarray.js:712:49>>*/ reader.read32u());
     /*<<+bigarray.js:713:2>>*/ var
      /*<<+bigarray.js:713:11>>*/ size =
        /*<<+bigarray.js:713:13>>*/ caml_ba_get_size(dims),
      /*<<+bigarray.js:714:11>>*/ data =
        /*<<+bigarray.js:714:13>>*/ caml_ba_create_buffer(kind, size),
      /*<<+bigarray.js:715:9>>*/ ba =
        /*<<+bigarray.js:715:11>>*/ caml_ba_create_unsafe
        (kind, layout, dims, data);
     /*<<+bigarray.js:716:2>>*/ switch(kind){
      case 2:
        /*<<+bigarray.js:718:4>>*/ for
       ( /*<<+bigarray.js:718:14>>*/ var i = 0; i < size; i++)
         /*<<+bigarray.js:718:33>>*/ data[i] =
          /*<<+bigarray.js:719:16>>*/ reader.read8s();
        /*<<+bigarray.js:721:4>>*/ break;
      case 3:
      case 12:
        /*<<+bigarray.js:724:4>>*/ for
       ( /*<<+bigarray.js:724:14>>*/ var i = 0; i < size; i++)
         /*<<+bigarray.js:724:33>>*/ data[i] =
          /*<<+bigarray.js:725:16>>*/ reader.read8u();
        /*<<+bigarray.js:727:4>>*/ break;
      case 4:
        /*<<+bigarray.js:729:4>>*/ for
       ( /*<<+bigarray.js:729:14>>*/ var i = 0; i < size; i++)
         /*<<+bigarray.js:729:33>>*/ data[i] =
          /*<<+bigarray.js:730:16>>*/ reader.read16s();
        /*<<+bigarray.js:732:4>>*/ break;
      case 5:
        /*<<+bigarray.js:734:4>>*/ for
       ( /*<<+bigarray.js:734:14>>*/ var i = 0; i < size; i++)
         /*<<+bigarray.js:734:33>>*/ data[i] =
          /*<<+bigarray.js:735:16>>*/ reader.read16u();
        /*<<+bigarray.js:737:4>>*/ break;
      case 6:
        /*<<+bigarray.js:739:4>>*/ for
       ( /*<<+bigarray.js:739:14>>*/ var i = 0; i < size; i++)
         /*<<+bigarray.js:739:33>>*/ data[i] =
          /*<<+bigarray.js:740:16>>*/ reader.read32s();
        /*<<+bigarray.js:742:4>>*/ break;
      case 8:
      case 9:
        /*<<+bigarray.js:745:4>>*/  /*<<+bigarray.js:745:14>>*/ var
        sixty =  /*<<+bigarray.js:745:16>>*/ reader.read8u();
        /*<<+bigarray.js:746:4>>*/ if(sixty)
         /*<<+bigarray.js:746:14>>*/  /*<<+bigarray.js:746:14>>*/ caml_failwith
         ("input_value: cannot read bigarray with 64-bit OCaml ints");
        /*<<+bigarray.js:747:4>>*/ for
       ( /*<<+bigarray.js:747:14>>*/ var i = 0; i < size; i++)
         /*<<+bigarray.js:747:33>>*/ data[i] =
          /*<<+bigarray.js:748:16>>*/ reader.read32s();
        /*<<+bigarray.js:750:4>>*/ break;
      case 7:
        /*<<+bigarray.js:752:4>>*/  /*<<+bigarray.js:752:10>>*/ var
        t = new Array(8);
        /*<<+bigarray.js:753:4>>*/ for
       ( /*<<+bigarray.js:753:14>>*/ var i = 0; i < size; i++) /*<<+bigarray.js:753:33>>*/ {
         /*<<+bigarray.js:754:6>>*/ for
        ( /*<<+bigarray.js:754:17>>*/ var j = 0; j < 8; j++)
          /*<<+bigarray.js:754:32>>*/ t[j] =
           /*<<+bigarray.js:754:39>>*/ reader.read8u();
         /*<<+bigarray.js:755:6>>*/  /*<<+bigarray.js:755:16>>*/ var
         int64 =  /*<<+bigarray.js:755:18>>*/ caml_int64_of_bytes(t);
         /*<<+bigarray.js:756:6>>*/  /*<<+bigarray.js:756:6>>*/ ba.set
         (i, int64);
       }
        /*<<+bigarray.js:758:4>>*/ break;
      case 1:
        /*<<+bigarray.js:760:4>>*/  /*<<+bigarray.js:760:10>>*/ var
        t = new Array(8);
        /*<<+bigarray.js:761:4>>*/ for
       ( /*<<+bigarray.js:761:14>>*/ var i = 0; i < size; i++) /*<<+bigarray.js:761:33>>*/ {
         /*<<+bigarray.js:762:6>>*/ for
        ( /*<<+bigarray.js:762:17>>*/ var j = 0; j < 8; j++)
          /*<<+bigarray.js:762:32>>*/ t[j] =
           /*<<+bigarray.js:762:39>>*/ reader.read8u();
         /*<<+bigarray.js:763:6>>*/  /*<<+bigarray.js:763:12>>*/ var
         f =
            /*<<+bigarray.js:763:14>>*/ caml_int64_float_of_bits
            ( /*<<+bigarray.js:763:39>>*/ caml_int64_of_bytes(t));
         /*<<+bigarray.js:764:6>>*/  /*<<+bigarray.js:764:6>>*/ ba.set(i, f);
       }
        /*<<+bigarray.js:766:4>>*/ break;
      case 0:
        /*<<+bigarray.js:768:4>>*/ for
       ( /*<<+bigarray.js:768:14>>*/ var i = 0; i < size; i++) /*<<+bigarray.js:768:33>>*/ {
         /*<<+bigarray.js:769:6>>*/  /*<<+bigarray.js:769:12>>*/ var
         f =
            /*<<+bigarray.js:769:14>>*/ caml_int32_float_of_bits
            ( /*<<+bigarray.js:769:39>>*/ reader.read32s());
         /*<<+bigarray.js:770:6>>*/  /*<<+bigarray.js:770:6>>*/ ba.set(i, f);
       }
        /*<<+bigarray.js:772:4>>*/ break;
      case 10:
        /*<<+bigarray.js:774:4>>*/ for
       ( /*<<+bigarray.js:774:14>>*/ var i = 0; i < size; i++) /*<<+bigarray.js:774:33>>*/ {
         /*<<+bigarray.js:775:6>>*/ var
          /*<<+bigarray.js:775:13>>*/ re =
            /*<<+bigarray.js:775:15>>*/ caml_int32_float_of_bits
            ( /*<<+bigarray.js:775:40>>*/ reader.read32s()),
          /*<<+bigarray.js:776:13>>*/ im =
            /*<<+bigarray.js:776:15>>*/ caml_int32_float_of_bits
            ( /*<<+bigarray.js:776:40>>*/ reader.read32s());
         /*<<+bigarray.js:777:6>>*/  /*<<+bigarray.js:777:6>>*/ ba.set
         (i, [254, re, im]);
       }
        /*<<+bigarray.js:779:4>>*/ break;
      case 11:
        /*<<+bigarray.js:781:4>>*/  /*<<+bigarray.js:781:10>>*/ var
        t = new Array(8);
        /*<<+bigarray.js:782:4>>*/ for
       ( /*<<+bigarray.js:782:14>>*/ var i = 0; i < size; i++) /*<<+bigarray.js:782:33>>*/ {
         /*<<+bigarray.js:783:6>>*/ for
        ( /*<<+bigarray.js:783:17>>*/ var j = 0; j < 8; j++)
          /*<<+bigarray.js:783:32>>*/ t[j] =
           /*<<+bigarray.js:783:39>>*/ reader.read8u();
         /*<<+bigarray.js:784:6>>*/  /*<<+bigarray.js:784:13>>*/ var
         re =
            /*<<+bigarray.js:784:15>>*/ caml_int64_float_of_bits
            ( /*<<+bigarray.js:784:40>>*/ caml_int64_of_bytes(t));
         /*<<+bigarray.js:785:6>>*/ for
        ( /*<<+bigarray.js:785:17>>*/ var j = 0; j < 8; j++)
          /*<<+bigarray.js:785:32>>*/ t[j] =
           /*<<+bigarray.js:785:39>>*/ reader.read8u();
         /*<<+bigarray.js:786:6>>*/  /*<<+bigarray.js:786:13>>*/ var
         im =
            /*<<+bigarray.js:786:15>>*/ caml_int64_float_of_bits
            ( /*<<+bigarray.js:786:40>>*/ caml_int64_of_bytes(t));
         /*<<+bigarray.js:787:6>>*/  /*<<+bigarray.js:787:6>>*/ ba.set
         (i, [254, re, im]);
       }
        /*<<+bigarray.js:789:4>>*/ break;
    }
     /*<<+bigarray.js:791:2>>*/ sz[0] = (4 + num_dims) * 4;
     /*<<+bigarray.js:792:2>>*/ return  /*<<+bigarray.js:792:9>>*/ caml_ba_create_unsafe
            (kind, layout, dims, data);
    /*<<+bigarray.js:793:0>>*/ }
    /*<<+bigarray.js:296:0>>*/ function caml_ba_compare(a, b, total){
     /*<<+bigarray.js:297:2>>*/ return  /*<<+bigarray.js:297:9>>*/ a.compare
            (b, total);
    /*<<+bigarray.js:298:0>>*/ }
    /*<<+ints.js:94:0>>*/ function caml_mul(a, b){
     /*<<+ints.js:95:2>>*/ return  /*<<+ints.js:95:9>>*/ Math.imul(a, b);
    /*<<+ints.js:96:0>>*/ }
    /*<<+hash.js:87:0>>*/ function caml_hash_mix_int(h, d){
     /*<<+hash.js:88:2>>*/ d =
      /*<<+hash.js:88:6>>*/ caml_mul(d, 0xcc9e2d51 | 0);
     /*<<+hash.js:89:2>>*/ d = d << 15 | d >>> 32 - 15;
     /*<<+hash.js:90:2>>*/ d =  /*<<+hash.js:90:6>>*/ caml_mul(d, 0x1b873593);
     /*<<+hash.js:91:2>>*/ h ^= d;
     /*<<+hash.js:92:2>>*/ h = h << 13 | h >>> 32 - 13;
     /*<<+hash.js:93:2>>*/ return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0;
    /*<<+hash.js:94:0>>*/ }
    /*<<+hash.js:115:0>>*/ function caml_hash_mix_int64(h, v){
     /*<<+hash.js:116:2>>*/ h =
      /*<<+hash.js:116:6>>*/ caml_hash_mix_int
      (h,  /*<<+hash.js:116:27>>*/ caml_int64_lo32(v));
     /*<<+hash.js:117:2>>*/ h =
      /*<<+hash.js:117:6>>*/ caml_hash_mix_int
      (h,  /*<<+hash.js:117:27>>*/ caml_int64_hi32(v));
     /*<<+hash.js:118:2>>*/ return h;
    /*<<+hash.js:119:0>>*/ }
    /*<<+hash.js:109:0>>*/ function caml_hash_mix_float(h, v0){
     /*<<+hash.js:110:2>>*/ return  /*<<+hash.js:110:9>>*/ caml_hash_mix_int64
            (h,  /*<<+hash.js:110:32>>*/ caml_int64_bits_of_float(v0));
    /*<<+hash.js:111:0>>*/ }
    /*<<+bigarray.js:807:0>>*/ function caml_ba_hash(ba){
     /*<<+bigarray.js:808:2>>*/ var
      /*<<+bigarray.js:808:15>>*/ num_elts =
        /*<<+bigarray.js:808:17>>*/ caml_ba_get_size(ba.dims),
      /*<<+bigarray.js:809:8>>*/ h = 0;
     /*<<+bigarray.js:810:2>>*/ switch(ba.kind){
      case 2:
      case 3:
      case 12:
        /*<<+bigarray.js:814:4>>*/ if(num_elts > 256)
         /*<<+bigarray.js:814:23>>*/ num_elts = 256;
        /*<<+bigarray.js:815:4>>*/ var
         /*<<+bigarray.js:815:10>>*/ w = 0,
         /*<<+bigarray.js:815:17>>*/ i = 0;
        /*<<+bigarray.js:816:4>>*/ for(i = 0; i + 4 <= ba.data.length; i += 4) /*<<+bigarray.js:816:45>>*/ {
         /*<<+bigarray.js:817:6>>*/ w =
         ba.data[i + 0] | ba.data[i + 1] << 8 | ba.data[i + 2] << 16
         | ba.data[i + 3] << 24;
         /*<<+bigarray.js:818:6>>*/ h =
          /*<<+bigarray.js:818:10>>*/ caml_hash_mix_int(h, w);
       }
        /*<<+bigarray.js:820:4>>*/ w = 0;
        /*<<+bigarray.js:821:4>>*/ switch(num_elts & 3){
         case 3:
           /*<<+bigarray.js:822:12>>*/ w = ba.data[i + 2] << 16;
         case 2:
           /*<<+bigarray.js:823:12>>*/ w |= ba.data[i + 1] << 8;
         case 1:
           /*<<+bigarray.js:824:12>>*/ w |= ba.data[i + 0];
           /*<<+bigarray.js:825:6>>*/ h =
            /*<<+bigarray.js:825:10>>*/ caml_hash_mix_int(h, w);
       }
        /*<<+bigarray.js:827:4>>*/ break;
      case 4:
      case 5:
        /*<<+bigarray.js:830:4>>*/ if(num_elts > 128)
         /*<<+bigarray.js:830:23>>*/ num_elts = 128;
        /*<<+bigarray.js:831:4>>*/ var
         /*<<+bigarray.js:831:10>>*/ w = 0,
         /*<<+bigarray.js:831:17>>*/ i = 0;
        /*<<+bigarray.js:832:4>>*/ for(i = 0; i + 2 <= ba.data.length; i += 2) /*<<+bigarray.js:832:45>>*/ {
         /*<<+bigarray.js:833:6>>*/ w = ba.data[i + 0] | ba.data[i + 1] << 16;
         /*<<+bigarray.js:834:6>>*/ h =
          /*<<+bigarray.js:834:10>>*/ caml_hash_mix_int(h, w);
       }
        /*<<+bigarray.js:836:4>>*/ if((num_elts & 1) != 0)
         /*<<+bigarray.js:837:6>>*/ h =
          /*<<+bigarray.js:837:10>>*/ caml_hash_mix_int(h, ba.data[i]);
        /*<<+bigarray.js:838:4>>*/ break;
      case 6:
        /*<<+bigarray.js:840:4>>*/ if(num_elts > 64)
         /*<<+bigarray.js:840:23>>*/ num_elts = 64;
        /*<<+bigarray.js:841:4>>*/ for
       ( /*<<+bigarray.js:841:15>>*/ var i = 0; i < num_elts; i++)
         /*<<+bigarray.js:841:39>>*/ h =
          /*<<+bigarray.js:841:43>>*/ caml_hash_mix_int(h, ba.data[i]);
        /*<<+bigarray.js:842:4>>*/ break;
      case 8:
      case 9:
        /*<<+bigarray.js:845:4>>*/ if(num_elts > 64)
         /*<<+bigarray.js:845:23>>*/ num_elts = 64;
        /*<<+bigarray.js:846:4>>*/ for
       ( /*<<+bigarray.js:846:15>>*/ var i = 0; i < num_elts; i++)
         /*<<+bigarray.js:846:39>>*/ h =
          /*<<+bigarray.js:846:43>>*/ caml_hash_mix_int(h, ba.data[i]);
        /*<<+bigarray.js:847:4>>*/ break;
      case 7:
        /*<<+bigarray.js:849:4>>*/ if(num_elts > 32)
         /*<<+bigarray.js:849:23>>*/ num_elts = 32;
        /*<<+bigarray.js:850:4>>*/ num_elts *= 2;
        /*<<+bigarray.js:851:4>>*/ for
       ( /*<<+bigarray.js:851:15>>*/ var i = 0; i < num_elts; i++)
         /*<<+bigarray.js:851:39>>*/ h =
          /*<<+bigarray.js:852:10>>*/ caml_hash_mix_int(h, ba.data[i]);
        /*<<+bigarray.js:854:4>>*/ break;
      case 10:
        /*<<+bigarray.js:856:4>>*/ num_elts *= 2;
      case 0:
        /*<<+bigarray.js:858:4>>*/ if(num_elts > 64)
         /*<<+bigarray.js:858:23>>*/ num_elts = 64;
        /*<<+bigarray.js:859:4>>*/ for
       ( /*<<+bigarray.js:859:15>>*/ var i = 0; i < num_elts; i++)
         /*<<+bigarray.js:859:39>>*/ h =
          /*<<+bigarray.js:859:43>>*/ caml_hash_mix_float(h, ba.data[i]);
        /*<<+bigarray.js:860:4>>*/ break;
      case 11:
        /*<<+bigarray.js:862:4>>*/ num_elts *= 2;
      case 1:
        /*<<+bigarray.js:864:4>>*/ if(num_elts > 32)
         /*<<+bigarray.js:864:23>>*/ num_elts = 32;
        /*<<+bigarray.js:865:4>>*/ for
       ( /*<<+bigarray.js:865:15>>*/ var i = 0; i < num_elts; i++)
         /*<<+bigarray.js:865:39>>*/ h =
          /*<<+bigarray.js:865:43>>*/ caml_hash_mix_float(h, ba.data[i]);
        /*<<+bigarray.js:866:4>>*/ break;
    }
     /*<<+bigarray.js:868:2>>*/ return h;
    /*<<+bigarray.js:869:0>>*/ }
    /*<<+marshal.js:221:0>>*/ function caml_int32_unmarshal(reader, size){
     /*<<+marshal.js:222:2>>*/ size[0] = 4;
     /*<<+marshal.js:223:2>>*/ return  /*<<+marshal.js:223:9>>*/ reader.read32s
            ();
    /*<<+marshal.js:224:0>>*/ }
    /*<<+marshal.js:228:0>>*/ function caml_nativeint_unmarshal(reader, size){
     /*<<+marshal.js:229:2>>*/ switch
     ( /*<<+marshal.js:229:10>>*/ reader.read8u()){
      case 1:
        /*<<+marshal.js:231:4>>*/ size[0] = 4;
        /*<<+marshal.js:232:4>>*/ return  /*<<+marshal.js:232:11>>*/ reader.read32s
               ();
      case 2:
        /*<<+marshal.js:234:4>>*/  /*<<+marshal.js:234:4>>*/ caml_failwith
        ("input_value: native integer value too large");
      default:
        /*<<+marshal.js:235:11>>*/  /*<<+marshal.js:235:11>>*/ caml_failwith
        ("input_value: ill-formed native integer");
    }
    /*<<+marshal.js:237:0>>*/ }
    /*<<+marshal.js:205:0>>*/ function caml_int64_unmarshal(reader, size){
     /*<<+marshal.js:206:2>>*/  /*<<+marshal.js:206:8>>*/ var
     t = new Array(8);
     /*<<+marshal.js:207:2>>*/ for
    ( /*<<+marshal.js:207:13>>*/ var j = 0; j < 8; j++)
      /*<<+marshal.js:207:28>>*/ t[j] =
       /*<<+marshal.js:207:35>>*/ reader.read8u();
     /*<<+marshal.js:208:2>>*/ size[0] = 8;
     /*<<+marshal.js:209:2>>*/ return  /*<<+marshal.js:209:9>>*/ caml_int64_of_bytes
            (t);
    /*<<+marshal.js:210:0>>*/ }
    /*<<+marshal.js:214:0>>*/ function caml_int64_marshal(writer, v, sizes){
     /*<<+marshal.js:215:2>>*/  /*<<+marshal.js:215:8>>*/ var
     b =  /*<<+marshal.js:215:10>>*/ caml_int64_to_bytes(v);
     /*<<+marshal.js:216:2>>*/ for
    ( /*<<+marshal.js:216:13>>*/ var i = 0; i < 8; i++)
      /*<<+marshal.js:216:30>>*/  /*<<+marshal.js:216:30>>*/ writer.write
      (8, b[i]);
     /*<<+marshal.js:217:2>>*/ sizes[0] = 8;
     /*<<+marshal.js:217:16>>*/ sizes[1] = 8;
    /*<<+marshal.js:218:0>>*/ }
    /*<<+int64.js:219:0>>*/ function caml_int64_compare(x, y, total){
     /*<<+int64.js:219:42>>*/ return  /*<<+int64.js:219:49>>*/ x.compare(y);
    /*<<+int64.js:219:62>>*/ }
    /*<<+int64.js:377:0>>*/ function caml_int64_hash(v){
     /*<<+int64.js:378:2>>*/ return  /*<<+int64.js:378:10>>*/ v.lo32()
           ^  /*<<+int64.js:378:23>>*/ v.hi32();
    /*<<+int64.js:379:0>>*/ }
    /*<<+marshal.js:243:0>>*/  /*<<+marshal.js:243:20>>*/ var
    caml_custom_ops =
      {"_j":
       {deserialize: caml_int64_unmarshal,
        serialize: caml_int64_marshal,
        fixed_length: 8,
        compare: caml_int64_compare,
        hash: caml_int64_hash},
       "_i": {deserialize: caml_int32_unmarshal, fixed_length: 4},
       "_n": {deserialize: caml_nativeint_unmarshal, fixed_length: 4},
       "_bigarray":
       {deserialize:
        function(reader, sz){
          /*<<+marshal.js:260:45>>*/ return  /*<<+marshal.js:260:52>>*/ caml_ba_deserialize
                 (reader, sz, "_bigarray");
         /*<<+marshal.js:260:22>>*/ },
        serialize: caml_ba_serialize,
        compare: caml_ba_compare,
        hash: caml_ba_hash},
       "_bigarr02":
       {deserialize:
        function(reader, sz){
          /*<<+marshal.js:266:45>>*/ return  /*<<+marshal.js:266:52>>*/ caml_ba_deserialize
                 (reader, sz, "_bigarr02");
         /*<<+marshal.js:266:22>>*/ },
        serialize: caml_ba_serialize,
        compare: caml_ba_compare,
        hash: caml_ba_hash}};
    /*<<+compare.js:43:0>>*/ function caml_compare_val_get_custom(a){
     /*<<+compare.js:44:2>>*/ return caml_custom_ops[a.caml_custom]
           && caml_custom_ops[a.caml_custom].compare;
    /*<<+compare.js:45:0>>*/ }
    /*<<+compare.js:49:0>>*/ function caml_compare_val_number_custom
   (num, custom, swap, total){
     /*<<+compare.js:50:2>>*/  /*<<+compare.js:50:11>>*/ var
     comp =  /*<<+compare.js:50:13>>*/ caml_compare_val_get_custom(custom);
     /*<<+compare.js:51:2>>*/ if(comp) /*<<+compare.js:51:11>>*/ {
      /*<<+compare.js:52:4>>*/  /*<<+compare.js:52:10>>*/ var
      x =
        swap > 0
         ?  /*<<+compare.js:52:23>>*/ comp(custom, num, total)
         :  /*<<+compare.js:52:46>>*/ comp(num, custom, total);
      /*<<+compare.js:53:4>>*/ if(total && x != x)
       /*<<+compare.js:53:24>>*/ return swap;
      /*<<+compare.js:54:4>>*/ if(+ x != + x)
       /*<<+compare.js:54:17>>*/ return + x;
      /*<<+compare.js:55:4>>*/ if((x | 0) != 0)
       /*<<+compare.js:55:21>>*/ return x | 0;
    }
     /*<<+compare.js:57:2>>*/ return swap;
    /*<<+compare.js:58:0>>*/ }
    /*<<+mlBytes.js:843:0>>*/ function caml_is_ml_string(s){
     /*<<+mlBytes.js:844:2>>*/ return typeof s === "string"
           && !  /*<<+mlBytes.js:844:36>>*/ /[^\x00-\xff]/.test(s);
    /*<<+mlBytes.js:845:0>>*/ }
    /*<<+mlBytes.js:823:0>>*/ function caml_is_ml_bytes(s){
     /*<<+mlBytes.js:824:2>>*/ return s instanceof MlBytes;
    /*<<+mlBytes.js:825:0>>*/ }
    /*<<+compare.js:20:0>>*/ function caml_compare_val_tag(a){
     /*<<+compare.js:21:2>>*/ if(typeof a === "number")
      /*<<+compare.js:21:29>>*/ return 1000;
    else if( /*<<+compare.js:22:11>>*/ caml_is_ml_bytes(a))
      /*<<+compare.js:22:32>>*/ return 252;
    else if( /*<<+compare.js:23:11>>*/ caml_is_ml_string(a))
      /*<<+compare.js:23:33>>*/ return 1252;
    else if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255) /*<<+compare.js:24:69>>*/ {
      /*<<+compare.js:26:4>>*/  /*<<+compare.js:26:12>>*/ var tag = a[0] | 0;
      /*<<+compare.js:29:4>>*/ return tag == 254 ? 0 : tag;
    }
    else if(a instanceof String)
      /*<<+compare.js:31:32>>*/ return 12520;
    else if(typeof a == "string")
      /*<<+compare.js:32:33>>*/ return 12520;
    else if(a instanceof Number)
      /*<<+compare.js:33:32>>*/ return 1000;
    else if(a && a.caml_custom)
      /*<<+compare.js:34:31>>*/ return 1255;
    else if(a && a.compare)
      /*<<+compare.js:35:27>>*/ return 1256;
    else if(typeof a == "function")
      /*<<+compare.js:36:35>>*/ return 1247;
    else if(typeof a == "symbol")  /*<<+compare.js:37:33>>*/ return 1251;
     /*<<+compare.js:38:2>>*/ return 1001;
    /*<<+compare.js:39:0>>*/ }
    /*<<+compare.js:241:0>>*/ function caml_int_compare(a, b){
     /*<<+compare.js:242:2>>*/ if(a < b)
      /*<<+compare.js:242:13>>*/ return - 1;
     /*<<+compare.js:242:26>>*/ if(a == b)
      /*<<+compare.js:242:38>>*/ return 0;
     /*<<+compare.js:242:48>>*/ return 1;
    /*<<+compare.js:243:0>>*/ }
    /*<<+mlBytes.js:669:0>>*/ function caml_string_compare(s1, s2){
     /*<<+mlBytes.js:670:2>>*/ return s1 < s2 ? - 1 : s1 > s2 ? 1 : 0;
    /*<<+mlBytes.js:671:0>>*/ }
    /*<<+mlBytes.js:521:0>>*/ function caml_bytes_compare(s1, s2){
     /*<<+mlBytes.js:522:2>>*/ s1.t & 6
    &&  /*<<+mlBytes.js:522:16>>*/ caml_convert_string_to_bytes(s1);
     /*<<+mlBytes.js:523:2>>*/ s2.t & 6
    &&  /*<<+mlBytes.js:523:16>>*/ caml_convert_string_to_bytes(s2);
     /*<<+mlBytes.js:524:2>>*/ return s1.c < s2.c ? - 1 : s1.c > s2.c ? 1 : 0;
    /*<<+mlBytes.js:525:0>>*/ }
    /*<<+compare.js:66:0>>*/ function caml_compare_val(a, b, total){
     /*<<+compare.js:67:2>>*/  /*<<+compare.js:67:12>>*/ var stack = [];
     /*<<+compare.js:68:2>>*/ for(;;) /*<<+compare.js:68:10>>*/ {
      /*<<+compare.js:69:4>>*/ if(! (total && a === b)) /*<<+compare.js:69:29>>*/ {
       /*<<+compare.js:70:6>>*/  /*<<+compare.js:70:16>>*/ var
       tag_a =  /*<<+compare.js:70:18>>*/ caml_compare_val_tag(a);
       /*<<+compare.js:72:6>>*/ if(tag_a == 250) /*<<+compare.js:72:23>>*/ {
        /*<<+compare.js:72:25>>*/ a = a[1];
        /*<<+compare.js:72:35>>*/ continue;
      }
       /*<<+compare.js:74:6>>*/  /*<<+compare.js:74:16>>*/ var
       tag_b =  /*<<+compare.js:74:18>>*/ caml_compare_val_tag(b);
       /*<<+compare.js:76:6>>*/ if(tag_b == 250) /*<<+compare.js:76:23>>*/ {
        /*<<+compare.js:76:25>>*/ b = b[1];
        /*<<+compare.js:76:35>>*/ continue;
      }
       /*<<+compare.js:79:6>>*/ if(tag_a !== tag_b) /*<<+compare.js:79:26>>*/ {
        /*<<+compare.js:80:8>>*/ if(tag_a == 1000) /*<<+compare.js:80:26>>*/ {
         /*<<+compare.js:81:10>>*/ if(tag_b == 1255)
          /*<<+compare.js:81:28>>*/ return  /*<<+compare.js:82:19>>*/ caml_compare_val_number_custom
                 (a, b, - 1, total);
         /*<<+compare.js:84:10>>*/ return - 1;
       }
        /*<<+compare.js:86:8>>*/ if(tag_b == 1000) /*<<+compare.js:86:26>>*/ {
         /*<<+compare.js:87:10>>*/ if(tag_a == 1255)
          /*<<+compare.js:87:28>>*/ return  /*<<+compare.js:88:19>>*/ caml_compare_val_number_custom
                 (b, a, 1, total);
         /*<<+compare.js:90:10>>*/ return 1;
       }
        /*<<+compare.js:92:8>>*/ return tag_a < tag_b ? - 1 : 1;
      }
       /*<<+compare.js:94:6>>*/ switch(tag_a){
        case 247:
          /*<<+compare.js:98:8>>*/  /*<<+compare.js:98:8>>*/ caml_invalid_argument
          ("compare: functional value");
          /*<<+compare.js:99:8>>*/ break;
        case 248:
          /*<<+compare.js:101:8>>*/  /*<<+compare.js:101:14>>*/ var
          x =  /*<<+compare.js:101:16>>*/ caml_int_compare(a[2], b[2]);
          /*<<+compare.js:102:8>>*/ if(x != 0)
           /*<<+compare.js:102:20>>*/ return x | 0;
          /*<<+compare.js:103:8>>*/ break;
        case 249:
          /*<<+compare.js:106:8>>*/  /*<<+compare.js:106:8>>*/ caml_invalid_argument
          ("compare: functional value");
          /*<<+compare.js:107:8>>*/ break;
        case 250:
          /*<<+compare.js:110:8>>*/  /*<<+compare.js:110:8>>*/ caml_invalid_argument
          ("equal: got Forward_tag, should not happen");
          /*<<+compare.js:111:8>>*/ break;
        case 251:
          /*<<+compare.js:113:8>>*/  /*<<+compare.js:113:8>>*/ caml_invalid_argument
          ("equal: abstract value");
          /*<<+compare.js:114:8>>*/ break;
        case 252:
          /*<<+compare.js:116:8>>*/ if(a !== b) /*<<+compare.js:116:21>>*/ {
           /*<<+compare.js:117:10>>*/  /*<<+compare.js:117:16>>*/ var
           x =  /*<<+compare.js:117:18>>*/ caml_bytes_compare(a, b);
           /*<<+compare.js:118:10>>*/ if(x != 0)
            /*<<+compare.js:118:22>>*/ return x | 0;
         }
          /*<<+compare.js:120:8>>*/ break;
        case 253:
          /*<<+compare.js:123:8>>*/  /*<<+compare.js:123:8>>*/ caml_invalid_argument
          ("equal: got Double_tag, should not happen");
          /*<<+compare.js:124:8>>*/ break;
        case 254:
          /*<<+compare.js:127:8>>*/  /*<<+compare.js:127:8>>*/ caml_invalid_argument
          ("equal: got Double_array_tag, should not happen");
          /*<<+compare.js:128:8>>*/ break;
        case 255:
          /*<<+compare.js:130:8>>*/  /*<<+compare.js:130:8>>*/ caml_invalid_argument
          ("equal: got Custom_tag, should not happen");
          /*<<+compare.js:131:8>>*/ break;
        case 1247:
          /*<<+compare.js:133:8>>*/  /*<<+compare.js:133:8>>*/ caml_invalid_argument
          ("compare: functional value");
          /*<<+compare.js:134:8>>*/ break;
        case 1255:
          /*<<+compare.js:136:8>>*/  /*<<+compare.js:136:17>>*/ var
          comp =  /*<<+compare.js:136:19>>*/ caml_compare_val_get_custom(a);
          /*<<+compare.js:137:8>>*/ if
          (comp !=  /*<<+compare.js:137:19>>*/ caml_compare_val_get_custom(b))
           /*<<+compare.js:137:50>>*/ return a.caml_custom < b.caml_custom
                  ? - 1
                  : 1;
          /*<<+compare.js:140:8>>*/ if(! comp)
           /*<<+compare.js:141:10>>*/  /*<<+compare.js:141:10>>*/ caml_invalid_argument
           ("compare: abstract value");
          /*<<+compare.js:142:8>>*/  /*<<+compare.js:142:14>>*/ var
          x =  /*<<+compare.js:142:16>>*/ comp(a, b, total);
          /*<<+compare.js:143:8>>*/ if(x != x)
           /*<<+compare.js:143:18>>*/ return total ? - 1 : x;
          /*<<+compare.js:146:8>>*/ if(x !== (x | 0))
           /*<<+compare.js:146:23>>*/ return - 1;
          /*<<+compare.js:149:8>>*/ if(x != 0)
           /*<<+compare.js:149:20>>*/ return x | 0;
          /*<<+compare.js:150:8>>*/ break;
        case 1256:
          /*<<+compare.js:152:8>>*/  /*<<+compare.js:152:14>>*/ var
          x =  /*<<+compare.js:152:16>>*/ a.compare(b, total);
          /*<<+compare.js:153:8>>*/ if(x != x)
           /*<<+compare.js:153:19>>*/ return total ? - 1 : x;
          /*<<+compare.js:156:8>>*/ if(x !== (x | 0))
           /*<<+compare.js:156:23>>*/ return - 1;
          /*<<+compare.js:159:8>>*/ if(x != 0)
           /*<<+compare.js:159:20>>*/ return x | 0;
          /*<<+compare.js:160:8>>*/ break;
        case 1000:
          /*<<+compare.js:162:8>>*/ a = + a;
          /*<<+compare.js:163:8>>*/ b = + b;
          /*<<+compare.js:164:8>>*/ if(a < b)
           /*<<+compare.js:164:19>>*/ return - 1;
          /*<<+compare.js:165:8>>*/ if(a > b)
           /*<<+compare.js:165:19>>*/ return 1;
          /*<<+compare.js:166:8>>*/ if(a != b) /*<<+compare.js:166:20>>*/ {
           /*<<+compare.js:167:10>>*/ if(! total)
            /*<<+compare.js:167:22>>*/ return NaN;
           /*<<+compare.js:168:10>>*/ if(a == a)
            /*<<+compare.js:168:22>>*/ return 1;
           /*<<+compare.js:169:10>>*/ if(b == b)
            /*<<+compare.js:169:22>>*/ return - 1;
         }
          /*<<+compare.js:171:8>>*/ break;
        case 1001:
          /*<<+compare.js:186:8>>*/ if(a < b)
           /*<<+compare.js:186:19>>*/ return - 1;
          /*<<+compare.js:187:8>>*/ if(a > b)
           /*<<+compare.js:187:19>>*/ return 1;
          /*<<+compare.js:188:8>>*/ if(a != b) /*<<+compare.js:188:20>>*/ {
           /*<<+compare.js:189:10>>*/ if(! total)
            /*<<+compare.js:189:22>>*/ return NaN;
           /*<<+compare.js:190:10>>*/ if(a == a)
            /*<<+compare.js:190:22>>*/ return 1;
           /*<<+compare.js:191:10>>*/ if(b == b)
            /*<<+compare.js:191:22>>*/ return - 1;
         }
          /*<<+compare.js:193:8>>*/ break;
        case 1251:
          /*<<+compare.js:195:8>>*/ if(a !== b) /*<<+compare.js:195:20>>*/ {
           /*<<+compare.js:196:10>>*/ if(! total)
            /*<<+compare.js:196:22>>*/ return NaN;
           /*<<+compare.js:197:10>>*/ return 1;
         }
          /*<<+compare.js:199:8>>*/ break;
        case 1252:
          /*<<+compare.js:201:8>>*/ var
           /*<<+compare.js:201:14>>*/ a =
             /*<<+compare.js:201:16>>*/ caml_jsbytes_of_string(a),
           /*<<+compare.js:202:14>>*/ b =
             /*<<+compare.js:202:16>>*/ caml_jsbytes_of_string(b);
          /*<<+compare.js:203:8>>*/ if(a !== b) /*<<+compare.js:203:20>>*/ {
           /*<<+compare.js:204:10>>*/ if(a < b)
            /*<<+compare.js:204:20>>*/ return - 1;
           /*<<+compare.js:205:10>>*/ if(a > b)
            /*<<+compare.js:205:20>>*/ return 1;
         }
          /*<<+compare.js:207:8>>*/ break;
        case 12520:
          /*<<+compare.js:209:8>>*/ var
           /*<<+compare.js:209:14>>*/ a =
             /*<<+compare.js:209:16>>*/ a.toString(),
           /*<<+compare.js:210:14>>*/ b =
             /*<<+compare.js:210:16>>*/ b.toString();
          /*<<+compare.js:211:8>>*/ if(a !== b) /*<<+compare.js:211:20>>*/ {
           /*<<+compare.js:212:10>>*/ if(a < b)
            /*<<+compare.js:212:20>>*/ return - 1;
           /*<<+compare.js:213:10>>*/ if(a > b)
            /*<<+compare.js:213:20>>*/ return 1;
         }
          /*<<+compare.js:215:8>>*/ break;
        case 246:
        case 254:
        default:
          /*<<+compare.js:219:8>>*/ if
          ( /*<<+compare.js:219:11>>*/ caml_is_continuation_tag(tag_a)) /*<<+compare.js:219:44>>*/ {
           /*<<+compare.js:220:10>>*/  /*<<+compare.js:220:10>>*/ caml_invalid_argument
           ("compare: continuation value");
           /*<<+compare.js:221:10>>*/ break;
         }
          /*<<+compare.js:223:8>>*/ if(a.length != b.length)
           /*<<+compare.js:223:34>>*/ return a.length < b.length ? - 1 : 1;
          /*<<+compare.js:224:8>>*/ if(a.length > 1)
           /*<<+compare.js:224:26>>*/  /*<<+compare.js:224:26>>*/ stack.push
           (a, b, 1);
          /*<<+compare.js:225:8>>*/ break;
      }
     }
      /*<<+compare.js:228:4>>*/ if(stack.length == 0)
       /*<<+compare.js:228:27>>*/ return 0;
      /*<<+compare.js:229:4>>*/  /*<<+compare.js:229:10>>*/ var
      i =  /*<<+compare.js:229:12>>*/ stack.pop();
      /*<<+compare.js:230:4>>*/ b =  /*<<+compare.js:230:8>>*/ stack.pop();
      /*<<+compare.js:231:4>>*/ a =  /*<<+compare.js:231:8>>*/ stack.pop();
      /*<<+compare.js:232:4>>*/ if(i + 1 < a.length)
       /*<<+compare.js:232:26>>*/  /*<<+compare.js:232:26>>*/ stack.push
       (a, b, i + 1);
      /*<<+compare.js:233:4>>*/ a = a[i];
      /*<<+compare.js:234:4>>*/ b = b[i];
    }
    /*<<+compare.js:236:0>>*/ }
    /*<<+compare.js:239:0>>*/ function caml_compare(a, b){
     /*<<+compare.js:239:31>>*/ return  /*<<+compare.js:239:38>>*/ caml_compare_val
            (a, b, true);
    /*<<+compare.js:239:69>>*/ }
    /*<<+backtrace.js:50:0>>*/ function caml_convert_raw_backtrace(){
     /*<<+backtrace.js:50:41>>*/ return [0];
    /*<<+backtrace.js:50:53>>*/ }
    /*<<+mlBytes.js:499:0>>*/ function caml_create_bytes(len){
     /*<<+mlBytes.js:500:2>>*/ if(len < 0)
      /*<<+mlBytes.js:500:15>>*/  /*<<+mlBytes.js:500:15>>*/ caml_invalid_argument
      ("Bytes.create");
     /*<<+mlBytes.js:501:2>>*/ return new MlBytes(len ? 2 : 9, "", len);
    /*<<+mlBytes.js:502:0>>*/ }
    /*<<+ints.js:100:0>>*/ function caml_div(x, y){
     /*<<+ints.js:101:2>>*/ if(y == 0)
      /*<<+ints.js:101:14>>*/  /*<<+ints.js:101:14>>*/ caml_raise_zero_divide
      ();
     /*<<+ints.js:102:2>>*/ return x / y | 0;
    /*<<+ints.js:103:0>>*/ }
    /*<<+domain.js:2:0>>*/  /*<<+domain.js:2:20>>*/ var caml_domain_dls = [0];
    /*<<+domain.js:21:0>>*/ function caml_domain_dls_get(unit){
     /*<<+domain.js:22:2>>*/ return caml_domain_dls;
    /*<<+domain.js:23:0>>*/ }
    /*<<+domain.js:6:0>>*/ function caml_domain_dls_set(a){
     /*<<+domain.js:7:2>>*/ caml_domain_dls = a;
    /*<<+domain.js:8:0>>*/ }
    /*<<+weak.js:23:0>>*/  /*<<+weak.js:23:25>>*/ var
    caml_ephe_key_offset = 3;
    /*<<+weak.js:129:0>>*/ function caml_ephe_blit_key(a1, i1, a2, i2, len){
     /*<<+weak.js:131:2>>*/  /*<<+weak.js:131:2>>*/ caml_array_blit
     (a1,
      caml_ephe_key_offset + i1 - 1,
      a2,
      caml_ephe_key_offset + i2 - 1,
      len);
     /*<<+weak.js:134:2>>*/ return 0;
    /*<<+weak.js:135:0>>*/ }
    /*<<+weak.js:116:0>>*/ function caml_ephe_check_key(x, i){
     /*<<+weak.js:117:2>>*/  /*<<+weak.js:117:11>>*/ var
     weak = x[caml_ephe_key_offset + i];
     /*<<+weak.js:118:2>>*/ if
     (globalThis.WeakRef && weak instanceof globalThis.WeakRef)
      /*<<+weak.js:118:63>>*/ weak =  /*<<+weak.js:118:70>>*/ weak.deref();
     /*<<+weak.js:119:2>>*/ return weak === undefined ? 0 : 1;
    /*<<+weak.js:123:0>>*/ }
    /*<<+weak.js:92:0>>*/ function caml_ephe_get_key(x, i){
     /*<<+weak.js:93:2>>*/ if(i < 0 || caml_ephe_key_offset + i >= x.length)
      /*<<+weak.js:94:4>>*/  /*<<+weak.js:94:4>>*/ caml_invalid_argument
      ("Weak.get_key");
     /*<<+weak.js:95:2>>*/  /*<<+weak.js:95:11>>*/ var
     weak = x[caml_ephe_key_offset + i];
     /*<<+weak.js:96:2>>*/ if
     (globalThis.WeakRef && weak instanceof globalThis.WeakRef)
      /*<<+weak.js:96:63>>*/ weak =  /*<<+weak.js:96:70>>*/ weak.deref();
     /*<<+weak.js:97:2>>*/ return weak === undefined ? 0 : [0, weak];
    /*<<+weak.js:98:0>>*/ }
    /*<<+weak.js:30:0>>*/ function caml_ephe_set_key(x, i, v){
     /*<<+weak.js:31:2>>*/ if(i < 0 || caml_ephe_key_offset + i >= x.length)
      /*<<+weak.js:32:4>>*/  /*<<+weak.js:32:4>>*/ caml_invalid_argument
      ("Weak.set");
     /*<<+weak.js:33:2>>*/ if(v instanceof Object && globalThis.WeakRef) /*<<+weak.js:33:49>>*/ {
      /*<<+weak.js:34:4>>*/ if(x[1].register)
       /*<<+weak.js:34:22>>*/  /*<<+weak.js:34:22>>*/ x[1].register
       (v, undefined, v);
      /*<<+weak.js:35:4>>*/ x[caml_ephe_key_offset + i] = new globalThis.WeakRef(v);
    }
    else
      /*<<+weak.js:37:7>>*/ x[caml_ephe_key_offset + i] = v;
     /*<<+weak.js:38:2>>*/ return 0;
    /*<<+weak.js:39:0>>*/ }
    /*<<+weak.js:43:0>>*/ function caml_ephe_unset_key(x, i){
     /*<<+weak.js:44:2>>*/ if(i < 0 || caml_ephe_key_offset + i >= x.length)
      /*<<+weak.js:45:4>>*/  /*<<+weak.js:45:4>>*/ caml_invalid_argument
      ("Weak.set");
     /*<<+weak.js:46:2>>*/ if
     (globalThis.WeakRef
      && x[caml_ephe_key_offset + i] instanceof globalThis.WeakRef
      && x[1].unregister) /*<<+weak.js:46:105>>*/ {
      /*<<+weak.js:47:4>>*/  /*<<+weak.js:47:12>>*/ var
      old =  /*<<+weak.js:47:14>>*/ x[caml_ephe_key_offset + i].deref();
      /*<<+weak.js:48:4>>*/ if(old !== undefined) /*<<+weak.js:48:26>>*/ {
       /*<<+weak.js:49:6>>*/  /*<<+weak.js:49:16>>*/ var count = 0;
       /*<<+weak.js:50:6>>*/ for
      ( /*<<+weak.js:50:16>>*/ var j = caml_ephe_key_offset;
       j < x.length;
       j++) /*<<+weak.js:50:58>>*/ {
        /*<<+weak.js:51:8>>*/  /*<<+weak.js:51:16>>*/ var key = x[j];
        /*<<+weak.js:52:8>>*/ if(key instanceof globalThis.WeakRef) /*<<+weak.js:52:45>>*/ {
         /*<<+weak.js:53:10>>*/ key =  /*<<+weak.js:53:16>>*/ key.deref();
         /*<<+weak.js:54:10>>*/ if(key === old)
          /*<<+weak.js:54:26>>*/ count++;
       }
      }
       /*<<+weak.js:57:6>>*/ if(count == 1)
        /*<<+weak.js:57:21>>*/  /*<<+weak.js:57:21>>*/ x[1].unregister(old);
     }
    }
     /*<<+weak.js:60:2>>*/ x[caml_ephe_key_offset + i] = undefined;
     /*<<+weak.js:61:2>>*/ return 0;
    /*<<+weak.js:62:0>>*/ }
    /*<<+compare.js:246:0>>*/ function caml_equal(x, y){
     /*<<+compare.js:246:29>>*/ return +
           ( /*<<+compare.js:246:38>>*/ caml_compare_val(x, y, false) == 0);
    /*<<+compare.js:246:73>>*/ }
    /*<<+mlBytes.js:587:0>>*/ function caml_fill_bytes(s, i, l, c){
     /*<<+mlBytes.js:588:2>>*/ if(l > 0)
      /*<<+mlBytes.js:588:13>>*/ if
      (i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
       /*<<+mlBytes.js:589:77>>*/ if(c == 0) /*<<+mlBytes.js:590:18>>*/ {
        /*<<+mlBytes.js:591:8>>*/ s.c = "";
        /*<<+mlBytes.js:592:8>>*/ s.t = 2;
      }
      else /*<<+mlBytes.js:593:13>>*/ {
        /*<<+mlBytes.js:594:8>>*/ s.c =
         /*<<+mlBytes.js:594:14>>*/ caml_str_repeat
         (l,  /*<<+mlBytes.js:594:34>>*/ String.fromCharCode(c));
        /*<<+mlBytes.js:595:8>>*/ s.t = l == s.l ? 0 : 2;
      }
     else /*<<+mlBytes.js:597:11>>*/ {
       /*<<+mlBytes.js:598:6>>*/ if(s.t != 4)
        /*<<+mlBytes.js:598:32>>*/  /*<<+mlBytes.js:598:32>>*/ caml_convert_bytes_to_array
        (s);
       /*<<+mlBytes.js:599:6>>*/ for(l += i; i < l; i++)
        /*<<+mlBytes.js:599:31>>*/ s.c[i] = c;
     }
     /*<<+mlBytes.js:602:2>>*/ return 0;
    /*<<+mlBytes.js:603:0>>*/ }
    /*<<+gc.js:58:0>>*/ function caml_final_register(){
     /*<<+gc.js:58:34>>*/ return 0;
    /*<<+gc.js:58:44>>*/ }
    /*<<+ieee_754.js:501:0>>*/ function caml_float_of_string(s){
     /*<<+ieee_754.js:502:2>>*/ var res;
     /*<<+ieee_754.js:503:2>>*/ s =
      /*<<+ieee_754.js:503:6>>*/ caml_jsbytes_of_string(s);
     /*<<+ieee_754.js:504:2>>*/ res = + s;
     /*<<+ieee_754.js:505:2>>*/ if(s.length > 0 && res === res)
      /*<<+ieee_754.js:505:39>>*/ return res;
     /*<<+ieee_754.js:506:2>>*/ s =
      /*<<+ieee_754.js:506:6>>*/ s.replace(/_/g, "");
     /*<<+ieee_754.js:507:2>>*/ res = + s;
     /*<<+ieee_754.js:508:2>>*/ if
     (s.length > 0 && res === res
      ||  /*<<+ieee_754.js:508:43>>*/ /^[+-]?nan$/i.test(s))
      /*<<+ieee_754.js:508:66>>*/ return res;
     /*<<+ieee_754.js:509:2>>*/  /*<<+ieee_754.js:509:8>>*/ var
     m =
        /*<<+ieee_754.js:509:10>>*/ /^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)(p([+-]?[0-9]+))?/i.exec
        (s);
     /*<<+ieee_754.js:511:2>>*/ if(m) /*<<+ieee_754.js:511:7>>*/ {
      /*<<+ieee_754.js:512:4>>*/ var
       /*<<+ieee_754.js:512:11>>*/ m3 =
         /*<<+ieee_754.js:512:13>>*/ m[3].replace(/0+$/, ""),
       /*<<+ieee_754.js:513:17>>*/ mantissa =
         /*<<+ieee_754.js:513:19>>*/ parseInt(m[1] + m[2] + m3, 16),
       /*<<+ieee_754.js:514:17>>*/ exponent = (m[5] | 0) - 4 * m3.length;
      /*<<+ieee_754.js:515:4>>*/ res =
      mantissa *  /*<<+ieee_754.js:515:21>>*/ Math.pow(2, exponent);
      /*<<+ieee_754.js:516:4>>*/ return res;
    }
     /*<<+ieee_754.js:518:2>>*/ if
     ( /*<<+ieee_754.js:518:5>>*/ /^\+?inf(inity)?$/i.test(s))
      /*<<+ieee_754.js:518:34>>*/ return Infinity;
     /*<<+ieee_754.js:519:2>>*/ if
     ( /*<<+ieee_754.js:519:5>>*/ /^-inf(inity)?$/i.test(s))
      /*<<+ieee_754.js:519:32>>*/ return - Infinity;
     /*<<+ieee_754.js:520:2>>*/  /*<<+ieee_754.js:520:2>>*/ caml_failwith
     ("float_of_string");
    /*<<+ieee_754.js:521:0>>*/ }
    /*<<+format.js:22:0>>*/ function caml_parse_format(fmt){
     /*<<+format.js:23:2>>*/ fmt =
      /*<<+format.js:23:8>>*/ caml_jsbytes_of_string(fmt);
     /*<<+format.js:24:2>>*/  /*<<+format.js:24:10>>*/ var len = fmt.length;
     /*<<+format.js:25:2>>*/ if(len > 31)
      /*<<+format.js:25:16>>*/  /*<<+format.js:25:16>>*/ caml_invalid_argument
      ("format_int: format too long");
     /*<<+format.js:26:2>>*/  /*<<+format.js:26:8>>*/ var
     f =
       {justify: "+",
        signstyle: "-",
        filler: " ",
        alternate: false,
        base: 0,
        signedconv: false,
        width: 0,
        uppercase: false,
        sign: 1,
        prec: - 1,
        conv: "f"};
     /*<<+format.js:30:2>>*/ for
    ( /*<<+format.js:30:13>>*/ var i = 0; i < len; i++) /*<<+format.js:30:32>>*/ {
      /*<<+format.js:31:4>>*/  /*<<+format.js:31:10>>*/ var
      c =  /*<<+format.js:31:12>>*/ fmt.charAt(i);
      /*<<+format.js:32:4>>*/ switch(c){
       case "-":
         /*<<+format.js:34:6>>*/ f.justify = "-";
         /*<<+format.js:34:23>>*/ break;
       case "+":
       case " ":
         /*<<+format.js:36:6>>*/ f.signstyle = c;
         /*<<+format.js:36:23>>*/ break;
       case "0":
         /*<<+format.js:38:6>>*/ f.filler = "0";
         /*<<+format.js:38:22>>*/ break;
       case "#":
         /*<<+format.js:40:6>>*/ f.alternate = true;
         /*<<+format.js:40:26>>*/ break;
       case "1":
       case "2":
       case "3":
       case "4":
       case "5":
       case "6":
       case "7":
       case "8":
       case "9":
         /*<<+format.js:43:6>>*/ f.width = 0;
         /*<<+format.js:44:6>>*/ while
        (c =  /*<<+format.js:44:15>>*/ fmt.charCodeAt(i) - 48,
         c >= 0 && c <= 9) /*<<+format.js:44:57>>*/ {
          /*<<+format.js:45:8>>*/ f.width = f.width * 10 + c;
          /*<<+format.js:45:36>>*/ i++;
        }
         /*<<+format.js:47:6>>*/ i--;
         /*<<+format.js:48:6>>*/ break;
       case ".":
         /*<<+format.js:50:6>>*/ f.prec = 0;
         /*<<+format.js:51:6>>*/ i++;
         /*<<+format.js:52:6>>*/ while
        (c =  /*<<+format.js:52:15>>*/ fmt.charCodeAt(i) - 48,
         c >= 0 && c <= 9) /*<<+format.js:52:57>>*/ {
          /*<<+format.js:53:8>>*/ f.prec = f.prec * 10 + c;
          /*<<+format.js:53:34>>*/ i++;
        }
         /*<<+format.js:55:6>>*/ i--;
       case "d":
       case "i":
         /*<<+format.js:57:6>>*/ f.signedconv = true;
       case "u":
         /*<<+format.js:59:6>>*/ f.base = 10;  /*<<+format.js:59:19>>*/ break;
       case "x":
         /*<<+format.js:61:6>>*/ f.base = 16;  /*<<+format.js:61:19>>*/ break;
       case "X":
         /*<<+format.js:63:6>>*/ f.base = 16;
         /*<<+format.js:63:19>>*/ f.uppercase = true;
         /*<<+format.js:63:39>>*/ break;
       case "o":
         /*<<+format.js:65:6>>*/ f.base = 8;  /*<<+format.js:65:18>>*/ break;
       case "e":
       case "f":
       case "g":
         /*<<+format.js:67:6>>*/ f.signedconv = true;
         /*<<+format.js:67:27>>*/ f.conv = c;
         /*<<+format.js:67:39>>*/ break;
       case "E":
       case "F":
       case "G":
         /*<<+format.js:69:6>>*/ f.signedconv = true;
         /*<<+format.js:69:27>>*/ f.uppercase = true;
         /*<<+format.js:70:6>>*/ f.conv =
          /*<<+format.js:70:15>>*/ c.toLowerCase();
         /*<<+format.js:70:33>>*/ break;
     }
    }
     /*<<+format.js:73:2>>*/ return f;
    /*<<+format.js:74:0>>*/ }
    /*<<+format.js:78:0>>*/ function caml_finish_formatting(f, rawbuffer){
     /*<<+format.js:79:2>>*/ if(f.uppercase)
      /*<<+format.js:79:19>>*/ rawbuffer =
       /*<<+format.js:79:31>>*/ rawbuffer.toUpperCase();
     /*<<+format.js:80:2>>*/  /*<<+format.js:80:10>>*/ var
     len = rawbuffer.length;
     /*<<+format.js:82:2>>*/ if
     (f.signedconv && (f.sign < 0 || f.signstyle != "-"))
      /*<<+format.js:82:58>>*/ len++;
     /*<<+format.js:83:2>>*/ if(f.alternate) /*<<+format.js:83:19>>*/ {
      /*<<+format.js:84:4>>*/ if(f.base == 8)
       /*<<+format.js:84:21>>*/ len += 1;
      /*<<+format.js:85:4>>*/ if(f.base == 16)
       /*<<+format.js:85:22>>*/ len += 2;
    }
     /*<<+format.js:88:2>>*/  /*<<+format.js:88:13>>*/ var buffer = "";
     /*<<+format.js:89:2>>*/ if(f.justify == "+" && f.filler == " ")
      /*<<+format.js:90:4>>*/ for
     ( /*<<+format.js:90:15>>*/ var i = len; i < f.width; i++)
       /*<<+format.js:90:40>>*/ buffer += " ";
     /*<<+format.js:91:2>>*/ if(f.signedconv)
      /*<<+format.js:91:20>>*/ if(f.sign < 0)
       /*<<+format.js:92:20>>*/ buffer += "-";
     else if(f.signstyle != "-")
       /*<<+format.js:93:33>>*/ buffer += f.signstyle;
     /*<<+format.js:95:2>>*/ if(f.alternate && f.base == 8)
      /*<<+format.js:95:34>>*/ buffer += "0";
     /*<<+format.js:96:2>>*/ if(f.alternate && f.base == 16)
      /*<<+format.js:96:35>>*/ buffer += f.uppercase ? "0X" : "0x";
     /*<<+format.js:97:2>>*/ if(f.justify == "+" && f.filler == "0")
      /*<<+format.js:98:4>>*/ for
     ( /*<<+format.js:98:15>>*/ var i = len; i < f.width; i++)
       /*<<+format.js:98:40>>*/ buffer += "0";
     /*<<+format.js:99:2>>*/ buffer += rawbuffer;
     /*<<+format.js:100:2>>*/ if(f.justify == "-")
      /*<<+format.js:101:4>>*/ for
     ( /*<<+format.js:101:15>>*/ var i = len; i < f.width; i++)
       /*<<+format.js:101:40>>*/ buffer += " ";
     /*<<+format.js:102:2>>*/ return  /*<<+format.js:102:9>>*/ caml_string_of_jsbytes
            (buffer);
    /*<<+format.js:103:0>>*/ }
    /*<<+ieee_754.js:435:0>>*/ function caml_format_float(fmt, x){
     /*<<+ieee_754.js:436:2>>*/ function toFixed(x, dp){
      /*<<+ieee_754.js:437:4>>*/ if
      ( /*<<+ieee_754.js:437:8>>*/ Math.abs(x) < 1.0)
       /*<<+ieee_754.js:437:27>>*/ return  /*<<+ieee_754.js:438:13>>*/ x.toFixed
              (dp);
     else /*<<+ieee_754.js:439:11>>*/ {
       /*<<+ieee_754.js:440:6>>*/  /*<<+ieee_754.js:440:12>>*/ var
       e =
          /*<<+ieee_754.js:440:14>>*/ parseInt
          ( /*<<+ieee_754.js:440:23>>*/  /*<<+ieee_754.js:440:23>>*/ x.toString
              ().split
             ("+")
            [1]);
       /*<<+ieee_754.js:441:6>>*/ if(e > 20) /*<<+ieee_754.js:441:18>>*/ {
        /*<<+ieee_754.js:442:8>>*/ e -= 20;
        /*<<+ieee_754.js:443:8>>*/ x /=
         /*<<+ieee_754.js:443:13>>*/ Math.pow(10, e);
        /*<<+ieee_754.js:444:8>>*/ x +=
         /*<<+ieee_754.js:444:13>>*/ new Array(e + 1).join("0");
        /*<<+ieee_754.js:445:8>>*/ if(dp > 0)
         /*<<+ieee_754.js:445:19>>*/ x =
         x + "." +  /*<<+ieee_754.js:446:24>>*/ new Array(dp + 1).join("0");
        /*<<+ieee_754.js:448:8>>*/ return x;
      }
      else
        /*<<+ieee_754.js:450:11>>*/ return  /*<<+ieee_754.js:450:18>>*/ x.toFixed
               (dp);
     }
     /*<<+ieee_754.js:452:2>>*/ }
     /*<<+ieee_754.js:453:2>>*/ var
     s,
      /*<<+ieee_754.js:453:11>>*/ f =
        /*<<+ieee_754.js:453:13>>*/ caml_parse_format(fmt),
      /*<<+ieee_754.js:454:11>>*/ prec = f.prec < 0 ? 6 : f.prec;
     /*<<+ieee_754.js:455:2>>*/ if(x < 0 || x == 0 && 1 / x == - Infinity) /*<<+ieee_754.js:455:45>>*/ {
      /*<<+ieee_754.js:455:47>>*/ f.sign = - 1;
      /*<<+ieee_754.js:455:60>>*/ x = - x;
    }
     /*<<+ieee_754.js:456:2>>*/ if( /*<<+ieee_754.js:456:6>>*/ isNaN(x)) /*<<+ieee_754.js:456:16>>*/ {
      /*<<+ieee_754.js:456:18>>*/ s = "nan";
      /*<<+ieee_754.js:456:29>>*/ f.filler = " ";
    }
    else if(!  /*<<+ieee_754.js:457:12>>*/ isFinite(x)) /*<<+ieee_754.js:457:25>>*/ {
      /*<<+ieee_754.js:457:27>>*/ s = "inf";
      /*<<+ieee_754.js:457:38>>*/ f.filler = " ";
    }
    else
      /*<<+ieee_754.js:459:4>>*/ switch(f.conv){
       case "e":
         /*<<+ieee_754.js:461:6>>*/ var
          /*<<+ieee_754.js:461:12>>*/ s =
            /*<<+ieee_754.js:461:14>>*/ x.toExponential(prec),
          /*<<+ieee_754.js:463:12>>*/ i = s.length;
         /*<<+ieee_754.js:464:6>>*/ if
         ( /*<<+ieee_754.js:464:10>>*/ s.charAt(i - 3) == "e")
          /*<<+ieee_754.js:465:8>>*/ s =
           /*<<+ieee_754.js:465:12>>*/ s.slice(0, i - 1) + "0"
          +  /*<<+ieee_754.js:465:39>>*/ s.slice(i - 1);
         /*<<+ieee_754.js:466:6>>*/ break;
       case "f":
         /*<<+ieee_754.js:468:6>>*/ s =
          /*<<+ieee_754.js:468:10>>*/ toFixed(x, prec);
         /*<<+ieee_754.js:468:28>>*/ break;
       case "g":
         /*<<+ieee_754.js:470:6>>*/ prec = prec ? prec : 1;
         /*<<+ieee_754.js:471:6>>*/ s =
          /*<<+ieee_754.js:471:10>>*/ x.toExponential(prec - 1);
         /*<<+ieee_754.js:472:6>>*/ var
          /*<<+ieee_754.js:472:12>>*/ j =
            /*<<+ieee_754.js:472:14>>*/ s.indexOf("e"),
          /*<<+ieee_754.js:473:14>>*/ exp =
           +
            /*<<+ieee_754.js:473:17>>*/ s.slice(j + 1);
         /*<<+ieee_754.js:474:6>>*/ if
         (exp < - 4 || x >= 1e21
          ||  /*<<+ieee_754.js:474:35>>*/ x.toFixed(0).length > prec) /*<<+ieee_754.js:474:63>>*/ {
          /*<<+ieee_754.js:476:8>>*/  /*<<+ieee_754.js:476:14>>*/ var
          i = j - 1;
          /*<<+ieee_754.js:476:23>>*/ while
         ( /*<<+ieee_754.js:476:30>>*/ s.charAt(i) == "0")
           /*<<+ieee_754.js:476:50>>*/ i--;
          /*<<+ieee_754.js:477:8>>*/ if
          ( /*<<+ieee_754.js:477:12>>*/ s.charAt(i) == ".")
           /*<<+ieee_754.js:477:32>>*/ i--;
          /*<<+ieee_754.js:478:8>>*/ s =
           /*<<+ieee_754.js:478:12>>*/ s.slice(0, i + 1)
          +  /*<<+ieee_754.js:478:32>>*/ s.slice(j);
          /*<<+ieee_754.js:479:8>>*/ i = s.length;
          /*<<+ieee_754.js:480:8>>*/ if
          ( /*<<+ieee_754.js:480:12>>*/ s.charAt(i - 3) == "e")
           /*<<+ieee_754.js:481:10>>*/ s =
            /*<<+ieee_754.js:481:14>>*/ s.slice(0, i - 1) + "0"
           +  /*<<+ieee_754.js:481:41>>*/ s.slice(i - 1);
          /*<<+ieee_754.js:482:8>>*/ break;
        }
        else /*<<+ieee_754.js:483:13>>*/ {
          /*<<+ieee_754.js:484:8>>*/  /*<<+ieee_754.js:484:14>>*/ var
          p = prec;
          /*<<+ieee_754.js:485:8>>*/ if(exp < 0) /*<<+ieee_754.js:485:21>>*/ {
           /*<<+ieee_754.js:485:23>>*/ p -= exp + 1;
           /*<<+ieee_754.js:485:37>>*/ s =
            /*<<+ieee_754.js:485:41>>*/ x.toFixed(p);
         }
         else
           /*<<+ieee_754.js:486:13>>*/ while
          (s =  /*<<+ieee_754.js:486:24>>*/ x.toFixed(p), s.length > prec + 1)
            /*<<+ieee_754.js:486:59>>*/ p--;
          /*<<+ieee_754.js:487:8>>*/ if(p) /*<<+ieee_754.js:487:15>>*/ {
           /*<<+ieee_754.js:489:10>>*/  /*<<+ieee_754.js:489:16>>*/ var
           i = s.length - 1;
           /*<<+ieee_754.js:489:32>>*/ while
          ( /*<<+ieee_754.js:489:39>>*/ s.charAt(i) == "0")
            /*<<+ieee_754.js:489:59>>*/ i--;
           /*<<+ieee_754.js:490:10>>*/ if
           ( /*<<+ieee_754.js:490:14>>*/ s.charAt(i) == ".")
            /*<<+ieee_754.js:490:34>>*/ i--;
           /*<<+ieee_754.js:491:10>>*/ s =
            /*<<+ieee_754.js:491:14>>*/ s.slice(0, i + 1);
         }
        }
         /*<<+ieee_754.js:494:6>>*/ break;
     }
     /*<<+ieee_754.js:496:2>>*/ return  /*<<+ieee_754.js:496:9>>*/ caml_finish_formatting
            (f, s);
    /*<<+ieee_754.js:497:0>>*/ }
    /*<<+ints.js:21:0>>*/ function caml_format_int(fmt, i){
     /*<<+ints.js:22:2>>*/ if
     ( /*<<+ints.js:22:6>>*/ caml_jsbytes_of_string(fmt) == "%d")
      /*<<+ints.js:22:43>>*/ return  /*<<+ints.js:22:50>>*/ caml_string_of_jsbytes
             ("" + i);
     /*<<+ints.js:23:2>>*/  /*<<+ints.js:23:8>>*/ var
     f =  /*<<+ints.js:23:10>>*/ caml_parse_format(fmt);
     /*<<+ints.js:24:2>>*/ if(i < 0)
      /*<<+ints.js:24:13>>*/ if(f.signedconv) /*<<+ints.js:24:33>>*/ {
       /*<<+ints.js:24:35>>*/ f.sign = - 1;
       /*<<+ints.js:24:48>>*/ i = - i;
     }
     else
       /*<<+ints.js:24:63>>*/ i >>>= 0;
     /*<<+ints.js:25:2>>*/  /*<<+ints.js:25:8>>*/ var
     s =  /*<<+ints.js:25:10>>*/ i.toString(f.base);
     /*<<+ints.js:26:2>>*/ if(f.prec >= 0) /*<<+ints.js:26:19>>*/ {
      /*<<+ints.js:27:4>>*/ f.filler = " ";
      /*<<+ints.js:28:4>>*/  /*<<+ints.js:28:10>>*/ var n = f.prec - s.length;
      /*<<+ints.js:29:4>>*/ if(n > 0)
       /*<<+ints.js:29:15>>*/ s =
        /*<<+ints.js:29:19>>*/ caml_str_repeat(n, "0") + s;
    }
     /*<<+ints.js:31:2>>*/ return  /*<<+ints.js:31:9>>*/ caml_finish_formatting
            (f, s);
    /*<<+ints.js:32:0>>*/ }
    /*<<+obj.js:137:0>>*/  /*<<+obj.js:137:20>>*/ var caml_oo_last_id = 0;
    /*<<+obj.js:148:0>>*/ function caml_fresh_oo_id(){
     /*<<+obj.js:149:2>>*/ return caml_oo_last_id++;
    /*<<+obj.js:150:0>>*/ }
    /*<<+mlBytes.js:718:0>>*/ function caml_jsstring_of_string(s){
     /*<<+mlBytes.js:719:2>>*/ if( /*<<+mlBytes.js:719:5>>*/ jsoo_is_ascii(s))
      /*<<+mlBytes.js:720:4>>*/ return s;
     /*<<+mlBytes.js:721:2>>*/ return  /*<<+mlBytes.js:721:9>>*/ caml_utf16_of_utf8
            (s);
    /*<<+mlBytes.js:721:32>>*/ }
    /*<<+fs_node.js:21:0>>*/ function fs_node_supported(){
     /*<<+fs_node.js:22:2>>*/ return typeof globalThis.process !== "undefined"
           && typeof globalThis.process.versions !== "undefined"
           && typeof globalThis.process.versions.node !== "undefined";
    /*<<+fs_node.js:26:0>>*/ }
    /*<<+fs.js:52:0>>*/ function make_path_is_absolute(){
     /*<<+fs.js:53:2>>*/ function posix(path){
      /*<<+fs.js:54:4>>*/ if( /*<<+fs.js:54:8>>*/ path.charAt(0) === "/")
       /*<<+fs.js:54:32>>*/ return ["",
               /*<<+fs.js:54:44>>*/ path.substring(1)];
      /*<<+fs.js:55:4>>*/ return;
     /*<<+fs.js:56:2>>*/ }
     /*<<+fs.js:58:2>>*/ function win32(path){
      /*<<+fs.js:60:4>>*/ var
       /*<<+fs.js:60:22>>*/ splitDeviceRe =
        /^([a-zA-Z]:|[\\/]{2}[^\\/]+[\\/]+[^\\/]+)?([\\/])?([\s\S]*?)$/,
       /*<<+fs.js:61:15>>*/ result =
         /*<<+fs.js:61:17>>*/ splitDeviceRe.exec(path),
       /*<<+fs.js:62:15>>*/ device = result[1] || "",
       /*<<+fs.js:63:14>>*/ isUnc =
         /*<<+fs.js:63:16>>*/ Boolean
         (device &&  /*<<+fs.js:63:34>>*/ device.charAt(1) !== ":");
      /*<<+fs.js:66:4>>*/ if( /*<<+fs.js:66:8>>*/ Boolean(result[2] || isUnc)) /*<<+fs.js:66:37>>*/ {
       /*<<+fs.js:67:6>>*/ var
        /*<<+fs.js:67:15>>*/ root = result[1] || "",
        /*<<+fs.js:68:14>>*/ sep = result[2] || "";
       /*<<+fs.js:69:6>>*/ return [root,
               /*<<+fs.js:69:20>>*/ path.substring(root.length + sep.length)];
     }
      /*<<+fs.js:71:4>>*/ return;
     /*<<+fs.js:72:2>>*/ }
     /*<<+fs.js:73:2>>*/ return  /*<<+fs.js:73:5>>*/ fs_node_supported()
            && globalThis.process
            && globalThis.process.platform
            ? globalThis.process.platform === "win32" ? win32 : posix
            : posix;
    /*<<+fs.js:77:0>>*/ }
    /*<<+fs.js:78:0>>*/  /*<<+fs.js:78:21>>*/ var
    path_is_absolute =  /*<<+fs.js:78:23>>*/ make_path_is_absolute();
    /*<<+fs.js:23:0>>*/ function caml_trailing_slash(name){
     /*<<+fs.js:24:2>>*/ return  /*<<+fs.js:24:10>>*/ name.slice(- 1) !== "/"
            ? name + "/"
            : name;
    /*<<+fs.js:25:0>>*/ }
    /*<<+fs.js:29:0>>*/ if
    ( /*<<+fs.js:29:3>>*/ fs_node_supported() && globalThis.process
     && globalThis.process.cwd)
     /*<<+fs.js:30:2>>*/  /*<<+fs.js:30:23>>*/ var
     caml_current_dir =
        /*<<+fs.js:30:25>>*/  /*<<+fs.js:30:25>>*/ globalThis.process.cwd().replace
        (/\\/g, "/");
   else
     /*<<+fs.js:32:2>>*/  /*<<+fs.js:32:23>>*/ var
     caml_current_dir = "/static";
    /*<<+fs.js:33:0>>*/ caml_current_dir =
     /*<<+fs.js:33:19>>*/ caml_trailing_slash(caml_current_dir);
    /*<<+fs.js:83:0>>*/ function caml_make_path(name){
     /*<<+fs.js:84:2>>*/ name =
      /*<<+fs.js:84:7>>*/ caml_jsstring_of_string(name);
     /*<<+fs.js:85:2>>*/ if(!  /*<<+fs.js:85:7>>*/ path_is_absolute(name))
      /*<<+fs.js:86:4>>*/ name = caml_current_dir + name;
     /*<<+fs.js:87:2>>*/ var
      /*<<+fs.js:87:12>>*/ comp0 =
        /*<<+fs.js:87:14>>*/ path_is_absolute(name),
      /*<<+fs.js:88:11>>*/ comp =  /*<<+fs.js:88:13>>*/ comp0[1].split("/"),
      /*<<+fs.js:89:12>>*/ ncomp = [];
     /*<<+fs.js:90:2>>*/ for
    ( /*<<+fs.js:90:12>>*/ var i = 0; i < comp.length; i++)
      /*<<+fs.js:90:36>>*/ switch(comp[i]){
       case "..":
         /*<<+fs.js:92:15>>*/ if(ncomp.length > 1)
          /*<<+fs.js:92:34>>*/  /*<<+fs.js:92:34>>*/ ncomp.pop();
         /*<<+fs.js:92:47>>*/ break;
       case ".":
         /*<<+fs.js:93:14>>*/ break;
       case "":
         /*<<+fs.js:94:13>>*/ break;
       default:
         /*<<+fs.js:95:13>>*/  /*<<+fs.js:95:13>>*/ ncomp.push(comp[i]);
         /*<<+fs.js:95:33>>*/ break;
     }
     /*<<+fs.js:98:2>>*/  /*<<+fs.js:98:2>>*/ ncomp.unshift(comp0[0]);
     /*<<+fs.js:99:2>>*/ ncomp.orig = name;
     /*<<+fs.js:100:2>>*/ return ncomp;
    /*<<+fs.js:101:0>>*/ }
    /*<<+mlBytes.js:83:0>>*/ function caml_utf8_of_utf16(s){
     /*<<+mlBytes.js:84:2>>*/ for
    (var
       /*<<+mlBytes.js:84:13>>*/ b = "",
       /*<<+mlBytes.js:84:21>>*/ t = b,
      c,
      d,
       /*<<+mlBytes.js:84:34>>*/ i = 0,
       /*<<+mlBytes.js:84:41>>*/ l = s.length;
     i < l;
     i++) /*<<+mlBytes.js:84:65>>*/ {
      /*<<+mlBytes.js:85:4>>*/ c =  /*<<+mlBytes.js:85:8>>*/ s.charCodeAt(i);
      /*<<+mlBytes.js:86:4>>*/ if(c < 0x80) /*<<+mlBytes.js:86:18>>*/ {
       /*<<+mlBytes.js:87:6>>*/ for
      ( /*<<+mlBytes.js:87:17>>*/ var j = i + 1;
       j < l && (c =  /*<<+mlBytes.js:87:42>>*/ s.charCodeAt(j)) < 0x80;
       j++)
        /*<<+mlBytes.js:87:71>>*/ ;
       /*<<+mlBytes.js:88:6>>*/ if(j - i > 512) /*<<+mlBytes.js:88:23>>*/ {
        /*<<+mlBytes.js:88:25>>*/  /*<<+mlBytes.js:88:25>>*/ t.substr(0, 1);
        /*<<+mlBytes.js:88:41>>*/ b += t;
        /*<<+mlBytes.js:88:49>>*/ t = "";
        /*<<+mlBytes.js:88:57>>*/ b +=
         /*<<+mlBytes.js:88:62>>*/ s.slice(i, j);
      }
      else
        /*<<+mlBytes.js:89:11>>*/ t +=
         /*<<+mlBytes.js:89:16>>*/ s.slice(i, j);
       /*<<+mlBytes.js:90:6>>*/ if(j == l)  /*<<+mlBytes.js:90:18>>*/ break;
       /*<<+mlBytes.js:91:6>>*/ i = j;
     }
      /*<<+mlBytes.js:93:4>>*/ if(c < 0x800) /*<<+mlBytes.js:93:19>>*/ {
       /*<<+mlBytes.js:94:6>>*/ t +=
        /*<<+mlBytes.js:94:11>>*/ String.fromCharCode(0xc0 | c >> 6);
       /*<<+mlBytes.js:95:6>>*/ t +=
        /*<<+mlBytes.js:95:11>>*/ String.fromCharCode(0x80 | c & 0x3f);
     }
     else if(c < 0xd800 || c >= 0xdfff)
       /*<<+mlBytes.js:96:42>>*/ t +=
        /*<<+mlBytes.js:97:11>>*/ String.fromCharCode
        (0xe0 | c >> 12, 0x80 | c >> 6 & 0x3f, 0x80 | c & 0x3f);
     else if
      (c >= 0xdbff || i + 1 == l
       || (d =  /*<<+mlBytes.js:101:20>>*/ s.charCodeAt(i + 1)) < 0xdc00
       || d > 0xdfff)
       /*<<+mlBytes.js:101:65>>*/ t += "\xef\xbf\xbd";
     else /*<<+mlBytes.js:104:11>>*/ {
       /*<<+mlBytes.js:105:6>>*/ i++;
       /*<<+mlBytes.js:106:6>>*/ c = (c << 10) + d - 0x35fdc00;
       /*<<+mlBytes.js:107:6>>*/ t +=
        /*<<+mlBytes.js:107:11>>*/ String.fromCharCode
        (0xf0 | c >> 18,
         0x80 | c >> 12 & 0x3f,
         0x80 | c >> 6 & 0x3f,
         0x80 | c & 0x3f);
     }
      /*<<+mlBytes.js:112:4>>*/ if(t.length > 1024) /*<<+mlBytes.js:112:25>>*/ {
       /*<<+mlBytes.js:112:26>>*/  /*<<+mlBytes.js:112:26>>*/ t.substr(0, 1);
       /*<<+mlBytes.js:112:42>>*/ b += t;
       /*<<+mlBytes.js:112:50>>*/ t = "";
     }
    }
     /*<<+mlBytes.js:114:2>>*/ return b + t;
    /*<<+mlBytes.js:115:0>>*/ }
    /*<<+mlBytes.js:726:0>>*/ function caml_string_of_jsstring(s){
     /*<<+mlBytes.js:727:2>>*/ return  /*<<+mlBytes.js:727:6>>*/ jsoo_is_ascii
             (s)
            ?  /*<<+mlBytes.js:728:11>>*/ caml_string_of_jsbytes(s)
            :  /*<<+mlBytes.js:729:14>>*/ caml_string_of_jsbytes
              ( /*<<+mlBytes.js:729:37>>*/ caml_utf8_of_utf16(s));
    /*<<+mlBytes.js:730:0>>*/ }
    /*<<+unix.js:86:0>>*/  /*<<+unix.js:86:15>>*/ var
    unix_error =
      ["E2BIG",
       "EACCES",
       "EAGAIN",
       "EBADF",
       "EBUSY",
       "ECHILD",
       "EDEADLK",
       "EDOM",
       "EEXIST",
       "EFAULT",
       "EFBIG",
       "EINTR",
       "EINVAL",
       "EIO",
       "EISDIR",
       "EMFILE",
       "EMLINK",
       "ENAMETOOLONG",
       "ENFILE",
       "ENODEV",
       "ENOENT",
       "ENOEXEC",
       "ENOLCK",
       "ENOMEM",
       "ENOSPC",
       "ENOSYS",
       "ENOTDIR",
       "ENOTEMPTY",
       "ENOTTY",
       "ENXIO",
       "EPERM",
       "EPIPE",
       "ERANGE",
       "EROFS",
       "ESPIPE",
       "ESRCH",
       "EXDEV",
       "EWOULDBLOCK",
       "EINPROGRESS",
       "EALREADY",
       "ENOTSOCK",
       "EDESTADDRREQ",
       "EMSGSIZE",
       "EPROTOTYPE",
       "ENOPROTOOPT",
       "EPROTONOSUPPORT",
       "ESOCKTNOSUPPORT",
       "EOPNOTSUPP",
       "EPFNOSUPPORT",
       "EAFNOSUPPORT",
       "EADDRINUSE",
       "EADDRNOTAVAIL",
       "ENETDOWN",
       "ENETUNREACH",
       "ENETRESET",
       "ECONNABORTED",
       "ECONNRESET",
       "ENOBUFS",
       "EISCONN",
       "ENOTCONN",
       "ESHUTDOWN",
       "ETOOMANYREFS",
       "ETIMEDOUT",
       "ECONNREFUSED",
       "EHOSTDOWN",
       "EHOSTUNREACH",
       "ELOOP",
       "EOVERFLOW"];
    /*<<+unix.js:103:0>>*/ function make_unix_err_args
   (code, syscall, path, errno){
     /*<<+unix.js:104:2>>*/  /*<<+unix.js:104:14>>*/ var
     variant =  /*<<+unix.js:104:16>>*/ unix_error.indexOf(code);
     /*<<+unix.js:105:2>>*/ if(variant < 0) /*<<+unix.js:105:19>>*/ {
      /*<<+unix.js:107:4>>*/ if(errno == null)
       /*<<+unix.js:107:23>>*/ errno = - 9999;
      /*<<+unix.js:111:4>>*/ variant = [0, errno];
    }
     /*<<+unix.js:113:2>>*/  /*<<+unix.js:113:11>>*/ var
     args =
       [variant,
         /*<<+unix.js:115:4>>*/ caml_string_of_jsstring(syscall || ""),
         /*<<+unix.js:116:4>>*/ caml_string_of_jsstring(path || "")];
     /*<<+unix.js:118:2>>*/ return args;
    /*<<+unix.js:119:0>>*/ }
    /*<<+stdlib.js:129:0>>*/  /*<<+stdlib.js:129:22>>*/ var
    caml_named_values = {};
    /*<<+stdlib.js:140:0>>*/ function caml_named_value(nm){
     /*<<+stdlib.js:141:2>>*/ return caml_named_values[nm];
    /*<<+stdlib.js:142:0>>*/ }
    /*<<+fail.js:29:0>>*/ function caml_raise_with_args(tag, args){
     /*<<+fail.js:29:44>>*/ throw  /*<<+fail.js:29:50>>*/ caml_maybe_attach_backtrace
           ( /*<<+fail.js:29:78>>*/ [0, tag].concat(args));
    /*<<+fail.js:29:102>>*/ }
    /*<<+mlBytes.js:512:0>>*/ function caml_bytes_of_array(a){
     /*<<+mlBytes.js:513:2>>*/ if(! (a instanceof Uint8Array))
      /*<<+mlBytes.js:513:34>>*/ a = new Uint8Array(a);
     /*<<+mlBytes.js:516:2>>*/ return new MlBytes(4, a, a.length);
    /*<<+mlBytes.js:517:0>>*/ }
    /*<<+sys.js:22:0>>*/ function caml_raise_sys_error(msg){
     /*<<+sys.js:23:2>>*/  /*<<+sys.js:23:2>>*/ caml_raise_with_string
     (caml_global_data.Sys_error, msg);
    /*<<+sys.js:24:0>>*/ }
    /*<<+fs.js:192:0>>*/ function caml_raise_no_such_file(name){
     /*<<+fs.js:193:2>>*/  /*<<+fs.js:193:2>>*/ caml_raise_sys_error
     (name + ": No such file or directory");
    /*<<+fs.js:194:0>>*/ }
    /*<<+mlBytes.js:466:0>>*/ function caml_uint8_array_of_bytes(s){
     /*<<+mlBytes.js:467:2>>*/ if(s.t != 4)
      /*<<+mlBytes.js:467:28>>*/  /*<<+mlBytes.js:467:28>>*/ caml_convert_bytes_to_array
      (s);
     /*<<+mlBytes.js:468:2>>*/ return s.c;
    /*<<+mlBytes.js:469:0>>*/ }
    /*<<+mlBytes.js:646:0>>*/ function caml_ml_bytes_length(s){
     /*<<+mlBytes.js:646:35>>*/ return s.l;
    /*<<+mlBytes.js:646:46>>*/ }
    /*<<+fs.js:48:0>>*/ function MlFile(){ /*<<+fs.js:48:20>>*/ }
    /*<<+fs_fake.js:269:0>>*/ function MlFakeFile(content){
     /*<<+fs_fake.js:270:2>>*/ this.data = content;
    /*<<+fs_fake.js:271:0>>*/ }
    /*<<+fs_fake.js:272:0>>*/ MlFakeFile.prototype = new MlFile();
    /*<<+fs_fake.js:273:0>>*/ MlFakeFile.prototype.constructor = MlFakeFile;
    /*<<+fs_fake.js:274:0>>*/ MlFakeFile.prototype.truncate =
    function(len){
      /*<<+fs_fake.js:275:2>>*/  /*<<+fs_fake.js:275:10>>*/ var
      old = this.data;
      /*<<+fs_fake.js:276:2>>*/ this.data =
       /*<<+fs_fake.js:276:14>>*/ caml_create_bytes(len | 0);
      /*<<+fs_fake.js:277:2>>*/  /*<<+fs_fake.js:277:2>>*/ caml_blit_bytes
      (old, 0, this.data, 0, len);
     /*<<+fs_fake.js:274:32>>*/ };
    /*<<+fs_fake.js:279:0>>*/ MlFakeFile.prototype.length =
    function(){
      /*<<+fs_fake.js:280:2>>*/ return  /*<<+fs_fake.js:280:9>>*/ caml_ml_bytes_length
             (this.data);
     /*<<+fs_fake.js:279:30>>*/ };
    /*<<+fs_fake.js:282:0>>*/ MlFakeFile.prototype.write =
    function(offset, buf, pos, len){
      /*<<+fs_fake.js:283:2>>*/  /*<<+fs_fake.js:283:11>>*/ var
      clen =  /*<<+fs_fake.js:283:13>>*/ this.length();
      /*<<+fs_fake.js:284:2>>*/ if(offset + len >= clen) /*<<+fs_fake.js:284:27>>*/ {
       /*<<+fs_fake.js:285:4>>*/ var
        /*<<+fs_fake.js:285:16>>*/ new_str =
          /*<<+fs_fake.js:285:18>>*/ caml_create_bytes(offset + len),
        /*<<+fs_fake.js:286:17>>*/ old_data = this.data;
       /*<<+fs_fake.js:287:4>>*/ this.data = new_str;
       /*<<+fs_fake.js:288:4>>*/  /*<<+fs_fake.js:288:4>>*/ caml_blit_bytes
       (old_data, 0, this.data, 0, clen);
     }
      /*<<+fs_fake.js:290:2>>*/  /*<<+fs_fake.js:290:2>>*/ caml_blit_bytes
      ( /*<<+fs_fake.js:290:18>>*/ caml_bytes_of_array(buf),
       pos,
       this.data,
       offset,
       len);
      /*<<+fs_fake.js:291:2>>*/ return 0;
     /*<<+fs_fake.js:282:29>>*/ };
    /*<<+fs_fake.js:293:0>>*/ MlFakeFile.prototype.read =
    function(offset, buf, pos, len){
      /*<<+fs_fake.js:294:2>>*/  /*<<+fs_fake.js:294:11>>*/ var
      clen =  /*<<+fs_fake.js:294:13>>*/ this.length();
      /*<<+fs_fake.js:295:2>>*/ if(offset + len >= clen)
       /*<<+fs_fake.js:295:27>>*/ len = clen - offset;
      /*<<+fs_fake.js:298:2>>*/ if(len) /*<<+fs_fake.js:298:10>>*/ {
       /*<<+fs_fake.js:299:4>>*/  /*<<+fs_fake.js:299:13>>*/ var
       data =  /*<<+fs_fake.js:299:15>>*/ caml_create_bytes(len | 0);
       /*<<+fs_fake.js:300:4>>*/  /*<<+fs_fake.js:300:4>>*/ caml_blit_bytes
       (this.data, offset, data, 0, len);
       /*<<+fs_fake.js:301:4>>*/  /*<<+fs_fake.js:301:4>>*/ buf.set
       ( /*<<+fs_fake.js:301:12>>*/ caml_uint8_array_of_bytes(data), pos);
     }
      /*<<+fs_fake.js:303:2>>*/ return len;
     /*<<+fs_fake.js:293:28>>*/ };
    /*<<+fs_fake.js:349:0>>*/ function MlFakeFd(name, file, flags){
     /*<<+fs_fake.js:350:2>>*/ this.file = file;
     /*<<+fs_fake.js:351:2>>*/ this.name = name;
     /*<<+fs_fake.js:352:2>>*/ this.flags = flags;
    /*<<+fs_fake.js:353:0>>*/ }
    /*<<+fs_fake.js:355:0>>*/ MlFakeFd.prototype.err_closed =
    function(){
      /*<<+fs_fake.js:356:2>>*/  /*<<+fs_fake.js:356:2>>*/ caml_raise_sys_error
      (this.name + ": file descriptor already closed");
     /*<<+fs_fake.js:355:32>>*/ };
    /*<<+fs_fake.js:358:0>>*/ MlFakeFd.prototype.length =
    function(){
      /*<<+fs_fake.js:359:2>>*/ if(this.file)
       /*<<+fs_fake.js:359:16>>*/ return  /*<<+fs_fake.js:359:23>>*/ this.file.length
              ();
      /*<<+fs_fake.js:360:2>>*/  /*<<+fs_fake.js:360:2>>*/ this.err_closed();
     /*<<+fs_fake.js:358:28>>*/ };
    /*<<+fs_fake.js:362:0>>*/ MlFakeFd.prototype.write =
    function(offset, buf, pos, len){
      /*<<+fs_fake.js:363:2>>*/ if(this.file)
       /*<<+fs_fake.js:363:16>>*/ return  /*<<+fs_fake.js:363:23>>*/ this.file.write
              (offset, buf, pos, len);
      /*<<+fs_fake.js:364:2>>*/  /*<<+fs_fake.js:364:2>>*/ this.err_closed();
     /*<<+fs_fake.js:362:27>>*/ };
    /*<<+fs_fake.js:366:0>>*/ MlFakeFd.prototype.read =
    function(offset, buf, pos, len){
      /*<<+fs_fake.js:367:2>>*/ if(this.file)
       /*<<+fs_fake.js:367:16>>*/ return  /*<<+fs_fake.js:367:23>>*/ this.file.read
              (offset, buf, pos, len);
      /*<<+fs_fake.js:368:2>>*/  /*<<+fs_fake.js:368:2>>*/ this.err_closed();
     /*<<+fs_fake.js:366:26>>*/ };
    /*<<+fs_fake.js:370:0>>*/ MlFakeFd.prototype.close =
    function(){
      /*<<+fs_fake.js:371:2>>*/ this.file = undefined;
     /*<<+fs_fake.js:370:27>>*/ };
    /*<<+fs_fake.js:28:0>>*/ function MlFakeDevice(root, f){
     /*<<+fs_fake.js:29:2>>*/ this.content = {};
     /*<<+fs_fake.js:30:2>>*/ this.root = root;
     /*<<+fs_fake.js:31:2>>*/ this.lookupFun = f;
    /*<<+fs_fake.js:32:0>>*/ }
    /*<<+fs_fake.js:33:0>>*/ MlFakeDevice.prototype.nm =
    function(name){
      /*<<+fs_fake.js:34:2>>*/ return this.root + name;
     /*<<+fs_fake.js:33:28>>*/ };
    /*<<+fs_fake.js:36:0>>*/ MlFakeDevice.prototype.create_dir_if_needed =
    function(name){
      /*<<+fs_fake.js:37:2>>*/ var
       /*<<+fs_fake.js:37:11>>*/ comp =
         /*<<+fs_fake.js:37:13>>*/ name.split("/"),
       /*<<+fs_fake.js:38:10>>*/ res = "";
      /*<<+fs_fake.js:39:2>>*/ for
     ( /*<<+fs_fake.js:39:12>>*/ var i = 0; i < comp.length - 1; i++) /*<<+fs_fake.js:39:42>>*/ {
       /*<<+fs_fake.js:40:4>>*/ res += comp[i] + "/";
       /*<<+fs_fake.js:41:4>>*/ if(this.content[res])
        /*<<+fs_fake.js:41:26>>*/ continue;
       /*<<+fs_fake.js:42:4>>*/ this.content[res] =
        /*<<+fs_fake.js:42:24>>*/ Symbol("directory");
     }
     /*<<+fs_fake.js:36:46>>*/ };
    /*<<+fs_fake.js:45:0>>*/ MlFakeDevice.prototype.slash =
    function(name){
      /*<<+fs_fake.js:46:2>>*/ return  /*<<+fs_fake.js:46:9>>*/ /\/$/.test
              (name)
             ? name
             : name + "/";
     /*<<+fs_fake.js:45:31>>*/ };
    /*<<+fs_fake.js:48:0>>*/ MlFakeDevice.prototype.lookup =
    function(name){
      /*<<+fs_fake.js:49:2>>*/ if(! this.content[name] && this.lookupFun) /*<<+fs_fake.js:49:44>>*/ {
       /*<<+fs_fake.js:50:4>>*/  /*<<+fs_fake.js:50:12>>*/ var
       res =
          /*<<+fs_fake.js:50:14>>*/ this.lookupFun
          ( /*<<+fs_fake.js:50:29>>*/ caml_string_of_jsbytes(this.root),
            /*<<+fs_fake.js:50:64>>*/ caml_string_of_jsbytes(name));
       /*<<+fs_fake.js:51:4>>*/ if(res !== 0) /*<<+fs_fake.js:51:18>>*/ {
        /*<<+fs_fake.js:52:6>>*/  /*<<+fs_fake.js:52:6>>*/ this.create_dir_if_needed
        (name);
        /*<<+fs_fake.js:53:6>>*/ this.content[name] =
        new
         MlFakeFile
         ( /*<<+fs_fake.js:53:40>>*/ caml_bytes_of_string(res[1]));
      }
     }
     /*<<+fs_fake.js:48:32>>*/ };
    /*<<+fs_fake.js:57:0>>*/ MlFakeDevice.prototype.exists =
    function(name){
      /*<<+fs_fake.js:59:2>>*/ if(name == "")
       /*<<+fs_fake.js:59:17>>*/ return 1;
      /*<<+fs_fake.js:61:2>>*/  /*<<+fs_fake.js:61:17>>*/ var
      name_slash =  /*<<+fs_fake.js:61:19>>*/ this.slash(name);
      /*<<+fs_fake.js:62:2>>*/ if(this.content[name_slash])
       /*<<+fs_fake.js:62:31>>*/ return 1;
      /*<<+fs_fake.js:64:2>>*/  /*<<+fs_fake.js:64:2>>*/ this.lookup(name);
      /*<<+fs_fake.js:65:2>>*/ return this.content[name] ? 1 : 0;
     /*<<+fs_fake.js:57:32>>*/ };
    /*<<+fs_fake.js:67:0>>*/ MlFakeDevice.prototype.isFile =
    function(name){
      /*<<+fs_fake.js:68:2>>*/ return  /*<<+fs_fake.js:68:5>>*/ this.exists
              (name)
             && !  /*<<+fs_fake.js:68:27>>*/ this.is_dir(name)
             ? 1
             : 0;
     /*<<+fs_fake.js:67:32>>*/ };
    /*<<+fs_fake.js:75:0>>*/ MlFakeDevice.prototype.mkdir =
    function(name, mode, raise_unix){
      /*<<+fs_fake.js:76:2>>*/  /*<<+fs_fake.js:76:17>>*/ var
      unix_error =
        raise_unix
        &&  /*<<+fs_fake.js:76:33>>*/ caml_named_value("Unix.Unix_error");
      /*<<+fs_fake.js:77:2>>*/ if( /*<<+fs_fake.js:77:5>>*/ this.exists(name))
       /*<<+fs_fake.js:77:24>>*/ if(unix_error)
        /*<<+fs_fake.js:78:20>>*/  /*<<+fs_fake.js:79:6>>*/ caml_raise_with_args
        (unix_error,
          /*<<+fs_fake.js:79:39>>*/ make_unix_err_args
          ("EEXIST", "mkdir",  /*<<+fs_fake.js:79:77>>*/ this.nm(name)));
      else
        /*<<+fs_fake.js:81:9>>*/  /*<<+fs_fake.js:82:6>>*/ caml_raise_sys_error
        (name + ": File exists");
      /*<<+fs_fake.js:85:2>>*/  /*<<+fs_fake.js:85:13>>*/ var
      parent =  /*<<+fs_fake.js:85:15>>*/ /^(.*)\/[^/]+/.exec(name);
      /*<<+fs_fake.js:86:2>>*/ parent = parent && parent[1] || "";
      /*<<+fs_fake.js:87:2>>*/ if
      (!  /*<<+fs_fake.js:87:6>>*/ this.exists(parent))
       /*<<+fs_fake.js:87:26>>*/ if(unix_error)
        /*<<+fs_fake.js:88:20>>*/  /*<<+fs_fake.js:89:6>>*/ caml_raise_with_args
        (unix_error,
          /*<<+fs_fake.js:89:39>>*/ make_unix_err_args
          ("ENOENT", "mkdir",  /*<<+fs_fake.js:89:77>>*/ this.nm(parent)));
      else
        /*<<+fs_fake.js:91:9>>*/  /*<<+fs_fake.js:92:6>>*/ caml_raise_sys_error
        (parent + ": No such file or directory");
      /*<<+fs_fake.js:95:2>>*/ if
      (!  /*<<+fs_fake.js:95:6>>*/ this.is_dir(parent))
       /*<<+fs_fake.js:95:26>>*/ if(unix_error)
        /*<<+fs_fake.js:96:20>>*/  /*<<+fs_fake.js:97:6>>*/ caml_raise_with_args
        (unix_error,
          /*<<+fs_fake.js:97:39>>*/ make_unix_err_args
          ("ENOTDIR", "mkdir",  /*<<+fs_fake.js:97:78>>*/ this.nm(parent)));
      else
        /*<<+fs_fake.js:99:9>>*/  /*<<+fs_fake.js:100:6>>*/ caml_raise_sys_error
        (parent + ": Not a directory");
      /*<<+fs_fake.js:103:2>>*/  /*<<+fs_fake.js:103:2>>*/ this.create_dir_if_needed
      ( /*<<+fs_fake.js:103:28>>*/ this.slash(name));
     /*<<+fs_fake.js:75:31>>*/ };
    /*<<+fs_fake.js:105:0>>*/ MlFakeDevice.prototype.rmdir =
    function(name, raise_unix){
      /*<<+fs_fake.js:106:2>>*/ var
       /*<<+fs_fake.js:106:17>>*/ unix_error =
        raise_unix
        &&  /*<<+fs_fake.js:106:33>>*/ caml_named_value("Unix.Unix_error"),
       /*<<+fs_fake.js:107:17>>*/ name_slash =
        name == "" ? "" :  /*<<+fs_fake.js:107:36>>*/ this.slash(name),
       /*<<+fs_fake.js:108:8>>*/ r = new RegExp("^" + name_slash + "([^/]+)");
      /*<<+fs_fake.js:109:2>>*/ if
      (!  /*<<+fs_fake.js:109:6>>*/ this.exists(name))
       /*<<+fs_fake.js:109:25>>*/ if(unix_error)
        /*<<+fs_fake.js:110:20>>*/  /*<<+fs_fake.js:111:6>>*/ caml_raise_with_args
        (unix_error,
          /*<<+fs_fake.js:111:39>>*/ make_unix_err_args
          ("ENOENT", "rmdir",  /*<<+fs_fake.js:111:77>>*/ this.nm(name)));
      else
        /*<<+fs_fake.js:113:9>>*/  /*<<+fs_fake.js:114:6>>*/ caml_raise_sys_error
        (name + ": No such file or directory");
      /*<<+fs_fake.js:117:2>>*/ if
      (!  /*<<+fs_fake.js:117:6>>*/ this.is_dir(name))
       /*<<+fs_fake.js:117:25>>*/ if(unix_error)
        /*<<+fs_fake.js:118:20>>*/  /*<<+fs_fake.js:119:6>>*/ caml_raise_with_args
        (unix_error,
          /*<<+fs_fake.js:119:39>>*/ make_unix_err_args
          ("ENOTDIR", "rmdir",  /*<<+fs_fake.js:119:78>>*/ this.nm(name)));
      else
        /*<<+fs_fake.js:121:9>>*/  /*<<+fs_fake.js:122:6>>*/ caml_raise_sys_error
        (name + ": Not a directory");
      /*<<+fs_fake.js:125:2>>*/ for(var n in this.content)
       /*<<+fs_fake.js:125:29>>*/ if( /*<<+fs_fake.js:126:7>>*/ n.match(r))
        /*<<+fs_fake.js:126:19>>*/ if(unix_error)
         /*<<+fs_fake.js:127:22>>*/  /*<<+fs_fake.js:128:8>>*/ caml_raise_with_args
         (unix_error,
           /*<<+fs_fake.js:128:41>>*/ make_unix_err_args
           ("ENOTEMPTY", "rmdir",  /*<<+fs_fake.js:128:82>>*/ this.nm(name)));
       else
         /*<<+fs_fake.js:129:13>>*/  /*<<+fs_fake.js:130:8>>*/ caml_raise_sys_error
         ( /*<<+fs_fake.js:130:29>>*/ this.nm(name) + ": Directory not empty");
      /*<<+fs_fake.js:134:2>>*/ delete this.content[name_slash];
     /*<<+fs_fake.js:105:31>>*/ };
    /*<<+fs_fake.js:136:0>>*/ MlFakeDevice.prototype.readdir =
    function(name){
      /*<<+fs_fake.js:137:2>>*/  /*<<+fs_fake.js:137:17>>*/ var
      name_slash =
        name == "" ? "" :  /*<<+fs_fake.js:137:36>>*/ this.slash(name);
      /*<<+fs_fake.js:138:2>>*/ if
      (!  /*<<+fs_fake.js:138:6>>*/ this.exists(name))
       /*<<+fs_fake.js:138:25>>*/  /*<<+fs_fake.js:139:4>>*/ caml_raise_sys_error
       (name + ": No such file or directory");
      /*<<+fs_fake.js:141:2>>*/ if
      (!  /*<<+fs_fake.js:141:6>>*/ this.is_dir(name))
       /*<<+fs_fake.js:141:25>>*/  /*<<+fs_fake.js:142:4>>*/ caml_raise_sys_error
       (name + ": Not a directory");
      /*<<+fs_fake.js:144:2>>*/ var
       /*<<+fs_fake.js:144:8>>*/ r = new RegExp("^" + name_slash + "([^/]+)"),
       /*<<+fs_fake.js:145:11>>*/ seen = {},
       /*<<+fs_fake.js:146:8>>*/ a = [];
      /*<<+fs_fake.js:147:2>>*/ for(var n in this.content) /*<<+fs_fake.js:147:29>>*/ {
       /*<<+fs_fake.js:148:4>>*/  /*<<+fs_fake.js:148:10>>*/ var
       m =  /*<<+fs_fake.js:148:12>>*/ n.match(r);
       /*<<+fs_fake.js:149:4>>*/ if(m && ! seen[m[1]]) /*<<+fs_fake.js:149:25>>*/ {
        /*<<+fs_fake.js:149:26>>*/ seen[m[1]] = true;
        /*<<+fs_fake.js:149:45>>*/  /*<<+fs_fake.js:149:45>>*/ a.push(m[1]);
      }
     }
      /*<<+fs_fake.js:151:2>>*/ return a;
     /*<<+fs_fake.js:136:33>>*/ };
    /*<<+fs_fake.js:153:0>>*/ MlFakeDevice.prototype.opendir =
    function(name, raise_unix){
      /*<<+fs_fake.js:154:2>>*/ var
       /*<<+fs_fake.js:154:17>>*/ unix_error =
        raise_unix
        &&  /*<<+fs_fake.js:154:33>>*/ caml_named_value("Unix.Unix_error"),
       /*<<+fs_fake.js:156:8>>*/ a =
         /*<<+fs_fake.js:156:10>>*/ this.readdir(name),
       /*<<+fs_fake.js:157:8>>*/ c = false,
       /*<<+fs_fake.js:158:8>>*/ i = 0;
      /*<<+fs_fake.js:159:2>>*/ return {readSync:
             function(){
               /*<<+fs_fake.js:160:4>>*/ if(c)
                /*<<+fs_fake.js:160:11>>*/ if(unix_error)
                 /*<<+fs_fake.js:161:22>>*/  /*<<+fs_fake.js:162:8>>*/ caml_raise_with_args
                 (unix_error,
                   /*<<+fs_fake.js:162:41>>*/ make_unix_err_args
                   ("EBADF",
                    "closedir",
                     /*<<+fs_fake.js:162:81>>*/ this.nm(name)));
               else
                 /*<<+fs_fake.js:164:11>>*/  /*<<+fs_fake.js:165:8>>*/ caml_raise_sys_error
                 (name + ": closedir failed");
               /*<<+fs_fake.js:168:4>>*/ if(i == a.length)
                /*<<+fs_fake.js:168:22>>*/ return null;
               /*<<+fs_fake.js:169:4>>*/  /*<<+fs_fake.js:169:14>>*/ var
               entry = a[i];
               /*<<+fs_fake.js:170:4>>*/ i++;
               /*<<+fs_fake.js:171:4>>*/ return {name: entry};
              /*<<+fs_fake.js:159:23>>*/ },
             closeSync:
             function(){
               /*<<+fs_fake.js:174:6>>*/ if(c)
                /*<<+fs_fake.js:174:13>>*/ if(unix_error)
                 /*<<+fs_fake.js:175:24>>*/  /*<<+fs_fake.js:176:10>>*/ caml_raise_with_args
                 (unix_error,
                   /*<<+fs_fake.js:176:43>>*/ make_unix_err_args
                   ("EBADF",
                    "closedir",
                     /*<<+fs_fake.js:176:83>>*/ this.nm(name)));
               else
                 /*<<+fs_fake.js:178:13>>*/  /*<<+fs_fake.js:179:10>>*/ caml_raise_sys_error
                 (name + ": closedir failed");
               /*<<+fs_fake.js:182:6>>*/ c = true;
               /*<<+fs_fake.js:183:6>>*/ a = [];
              /*<<+fs_fake.js:173:18>>*/ }};
     /*<<+fs_fake.js:153:33>>*/ };
    /*<<+fs_fake.js:187:0>>*/ MlFakeDevice.prototype.is_dir =
    function(name){
      /*<<+fs_fake.js:188:2>>*/ if(name == "")
       /*<<+fs_fake.js:188:18>>*/ return true;
      /*<<+fs_fake.js:189:2>>*/  /*<<+fs_fake.js:189:17>>*/ var
      name_slash =  /*<<+fs_fake.js:189:19>>*/ this.slash(name);
      /*<<+fs_fake.js:190:2>>*/ return this.content[name_slash] ? 1 : 0;
     /*<<+fs_fake.js:187:32>>*/ };
    /*<<+fs_fake.js:192:0>>*/ MlFakeDevice.prototype.unlink =
    function(name){
      /*<<+fs_fake.js:193:2>>*/  /*<<+fs_fake.js:193:9>>*/ var
      ok = this.content[name] ? true : false;
      /*<<+fs_fake.js:194:2>>*/ delete this.content[name];
      /*<<+fs_fake.js:195:2>>*/ return ok;
     /*<<+fs_fake.js:192:32>>*/ };
    /*<<+fs_fake.js:197:0>>*/ MlFakeDevice.prototype.open =
    function(name, f){
      /*<<+fs_fake.js:198:2>>*/ var file;
      /*<<+fs_fake.js:199:2>>*/ if(f.rdonly && f.wronly)
       /*<<+fs_fake.js:200:4>>*/  /*<<+fs_fake.js:200:4>>*/ caml_raise_sys_error
       ( /*<<+fs_fake.js:200:25>>*/ this.nm(name)
        + " : flags Open_rdonly and Open_wronly are not compatible");
      /*<<+fs_fake.js:201:2>>*/ if(f.text && f.binary)
       /*<<+fs_fake.js:202:4>>*/  /*<<+fs_fake.js:202:4>>*/ caml_raise_sys_error
       ( /*<<+fs_fake.js:202:25>>*/ this.nm(name)
        + " : flags Open_text and Open_binary are not compatible");
      /*<<+fs_fake.js:203:2>>*/  /*<<+fs_fake.js:203:2>>*/ this.lookup(name);
      /*<<+fs_fake.js:204:2>>*/ if(this.content[name]) /*<<+fs_fake.js:204:26>>*/ {
       /*<<+fs_fake.js:205:4>>*/ if
       ( /*<<+fs_fake.js:205:8>>*/ this.is_dir(name))
        /*<<+fs_fake.js:205:27>>*/  /*<<+fs_fake.js:205:27>>*/ caml_raise_sys_error
        ( /*<<+fs_fake.js:205:48>>*/ this.nm(name) + " : is a directory");
       /*<<+fs_fake.js:206:4>>*/ if(f.create && f.excl)
        /*<<+fs_fake.js:206:28>>*/  /*<<+fs_fake.js:206:28>>*/ caml_raise_sys_error
        ( /*<<+fs_fake.js:206:49>>*/ this.nm(name) + " : file already exists");
       /*<<+fs_fake.js:207:4>>*/ file = this.content[name];
       /*<<+fs_fake.js:208:4>>*/ if(f.truncate)
        /*<<+fs_fake.js:208:19>>*/  /*<<+fs_fake.js:208:19>>*/ file.truncate();
     }
     else if(f.create) /*<<+fs_fake.js:209:23>>*/ {
       /*<<+fs_fake.js:210:4>>*/  /*<<+fs_fake.js:210:4>>*/ this.create_dir_if_needed
       (name);
       /*<<+fs_fake.js:211:4>>*/ this.content[name] =
       new MlFakeFile( /*<<+fs_fake.js:211:40>>*/ caml_create_bytes(0));
       /*<<+fs_fake.js:212:4>>*/ file = this.content[name];
     }
     else
       /*<<+fs_fake.js:213:9>>*/  /*<<+fs_fake.js:214:4>>*/ caml_raise_no_such_file
       ( /*<<+fs_fake.js:214:29>>*/ this.nm(name));
      /*<<+fs_fake.js:216:2>>*/ return new
             MlFakeFd
             ( /*<<+fs_fake.js:216:22>>*/ this.nm(name), file, f);
     /*<<+fs_fake.js:197:30>>*/ };
    /*<<+fs_fake.js:219:0>>*/ MlFakeDevice.prototype.open =
    function(name, f){
      /*<<+fs_fake.js:220:2>>*/ var file;
      /*<<+fs_fake.js:221:2>>*/ if(f.rdonly && f.wronly)
       /*<<+fs_fake.js:222:4>>*/  /*<<+fs_fake.js:222:4>>*/ caml_raise_sys_error
       ( /*<<+fs_fake.js:222:25>>*/ this.nm(name)
        + " : flags Open_rdonly and Open_wronly are not compatible");
      /*<<+fs_fake.js:223:2>>*/ if(f.text && f.binary)
       /*<<+fs_fake.js:224:4>>*/  /*<<+fs_fake.js:224:4>>*/ caml_raise_sys_error
       ( /*<<+fs_fake.js:224:25>>*/ this.nm(name)
        + " : flags Open_text and Open_binary are not compatible");
      /*<<+fs_fake.js:225:2>>*/  /*<<+fs_fake.js:225:2>>*/ this.lookup(name);
      /*<<+fs_fake.js:226:2>>*/ if(this.content[name]) /*<<+fs_fake.js:226:26>>*/ {
       /*<<+fs_fake.js:227:4>>*/ if
       ( /*<<+fs_fake.js:227:8>>*/ this.is_dir(name))
        /*<<+fs_fake.js:227:27>>*/  /*<<+fs_fake.js:227:27>>*/ caml_raise_sys_error
        ( /*<<+fs_fake.js:227:48>>*/ this.nm(name) + " : is a directory");
       /*<<+fs_fake.js:228:4>>*/ if(f.create && f.excl)
        /*<<+fs_fake.js:228:28>>*/  /*<<+fs_fake.js:228:28>>*/ caml_raise_sys_error
        ( /*<<+fs_fake.js:228:49>>*/ this.nm(name) + " : file already exists");
       /*<<+fs_fake.js:229:4>>*/ file = this.content[name];
       /*<<+fs_fake.js:230:4>>*/ if(f.truncate)
        /*<<+fs_fake.js:230:19>>*/  /*<<+fs_fake.js:230:19>>*/ file.truncate();
     }
     else if(f.create) /*<<+fs_fake.js:231:23>>*/ {
       /*<<+fs_fake.js:232:4>>*/  /*<<+fs_fake.js:232:4>>*/ this.create_dir_if_needed
       (name);
       /*<<+fs_fake.js:233:4>>*/ this.content[name] =
       new MlFakeFile( /*<<+fs_fake.js:233:40>>*/ caml_create_bytes(0));
       /*<<+fs_fake.js:234:4>>*/ file = this.content[name];
     }
     else
       /*<<+fs_fake.js:235:9>>*/  /*<<+fs_fake.js:236:4>>*/ caml_raise_no_such_file
       ( /*<<+fs_fake.js:236:29>>*/ this.nm(name));
      /*<<+fs_fake.js:238:2>>*/ return new
             MlFakeFd
             ( /*<<+fs_fake.js:238:22>>*/ this.nm(name), file, f);
     /*<<+fs_fake.js:219:30>>*/ };
    /*<<+fs_fake.js:241:0>>*/ MlFakeDevice.prototype.register =
    function(name, content){
      /*<<+fs_fake.js:242:2>>*/ var file;
      /*<<+fs_fake.js:243:2>>*/ if(this.content[name])
       /*<<+fs_fake.js:243:25>>*/  /*<<+fs_fake.js:243:25>>*/ caml_raise_sys_error
       ( /*<<+fs_fake.js:243:46>>*/ this.nm(name) + " : file already exists");
      /*<<+fs_fake.js:244:2>>*/ if
      ( /*<<+fs_fake.js:244:5>>*/ caml_is_ml_bytes(content))
       /*<<+fs_fake.js:245:4>>*/ file = new MlFakeFile(content);
      /*<<+fs_fake.js:246:2>>*/ if
      ( /*<<+fs_fake.js:246:5>>*/ caml_is_ml_string(content))
       /*<<+fs_fake.js:247:4>>*/ file =
       new
        MlFakeFile
        ( /*<<+fs_fake.js:247:26>>*/ caml_bytes_of_string(content));
     else if(content instanceof Array)
       /*<<+fs_fake.js:249:4>>*/ file =
       new
        MlFakeFile
        ( /*<<+fs_fake.js:249:26>>*/ caml_bytes_of_array(content));
     else if(typeof content === "string")
       /*<<+fs_fake.js:251:4>>*/ file =
       new
        MlFakeFile
        ( /*<<+fs_fake.js:251:26>>*/ caml_bytes_of_jsbytes(content));
     else if(content.toString) /*<<+fs_fake.js:252:28>>*/ {
       /*<<+fs_fake.js:253:4>>*/  /*<<+fs_fake.js:253:14>>*/ var
       bytes =
          /*<<+fs_fake.js:253:16>>*/ caml_bytes_of_string
          ( /*<<+fs_fake.js:253:37>>*/ caml_string_of_jsstring
            ( /*<<+fs_fake.js:253:61>>*/ content.toString()));
       /*<<+fs_fake.js:254:4>>*/ file = new MlFakeFile(bytes);
     }
      /*<<+fs_fake.js:256:2>>*/ if(file) /*<<+fs_fake.js:256:10>>*/ {
       /*<<+fs_fake.js:257:4>>*/  /*<<+fs_fake.js:257:4>>*/ this.create_dir_if_needed
       (name);
       /*<<+fs_fake.js:258:4>>*/ this.content[name] = file;
     }
     else
       /*<<+fs_fake.js:260:7>>*/  /*<<+fs_fake.js:260:7>>*/ caml_raise_sys_error
       ( /*<<+fs_fake.js:260:28>>*/ this.nm(name)
        + " : registering file with invalid content type");
     /*<<+fs_fake.js:241:33>>*/ };
    /*<<+fs_fake.js:263:0>>*/ MlFakeDevice.prototype.constructor = MlFakeDevice;
    /*<<+mlBytes.js:663:0>>*/ function caml_ml_string_length(s){
     /*<<+mlBytes.js:664:2>>*/ return s.length;
    /*<<+mlBytes.js:665:0>>*/ }
    /*<<+mlBytes.js:650:0>>*/ function caml_string_unsafe_get(s, i){
     /*<<+mlBytes.js:651:2>>*/ return  /*<<+mlBytes.js:651:9>>*/ s.charCodeAt
            (i);
    /*<<+mlBytes.js:652:0>>*/ }
    /*<<+mlBytes.js:474:0>>*/ function caml_uint8_array_of_string(s){
     /*<<+mlBytes.js:475:2>>*/ var
      /*<<+mlBytes.js:475:8>>*/ l =
        /*<<+mlBytes.js:475:10>>*/ caml_ml_string_length(s),
      /*<<+mlBytes.js:476:8>>*/ a = new Uint8Array(l),
      /*<<+mlBytes.js:477:8>>*/ i = 0;
     /*<<+mlBytes.js:478:2>>*/ for(; i < l; i++)
      /*<<+mlBytes.js:478:21>>*/ a[i] =
       /*<<+mlBytes.js:478:28>>*/ caml_string_unsafe_get(s, i);
     /*<<+mlBytes.js:479:2>>*/ return a;
    /*<<+mlBytes.js:480:0>>*/ }
    /*<<+fs_node.js:249:0>>*/ function MlNodeFd(fd, flags){
     /*<<+fs_node.js:250:2>>*/ this.fs =
      /*<<+fs_node.js:250:12>>*/ require("fs");
     /*<<+fs_node.js:251:2>>*/ this.fd = fd;
     /*<<+fs_node.js:252:2>>*/ this.flags = flags;
    /*<<+fs_node.js:253:0>>*/ }
    /*<<+fs_node.js:254:0>>*/ MlNodeFd.prototype = new MlFile();
    /*<<+fs_node.js:255:0>>*/ MlNodeFd.prototype.constructor = MlNodeFd;
    /*<<+fs_node.js:257:0>>*/ MlNodeFd.prototype.truncate =
    function(len){
      /*<<+fs_node.js:258:2>>*/ try{
       /*<<+fs_node.js:259:4>>*/  /*<<+fs_node.js:259:4>>*/ this.fs.ftruncateSync
       (this.fd, len | 0);
     }
     catch(err){
       /*<<+fs_node.js:261:4>>*/  /*<<+fs_node.js:261:4>>*/ caml_raise_sys_error
       ( /*<<+fs_node.js:261:25>>*/ err.toString());
     }
     /*<<+fs_node.js:257:30>>*/ };
    /*<<+fs_node.js:264:0>>*/ MlNodeFd.prototype.length =
    function(){
      /*<<+fs_node.js:265:2>>*/ try{
       /*<<+fs_node.js:266:4>>*/ return  /*<<+fs_node.js:266:11>>*/ this.fs.fstatSync
              (this.fd).size;
     }
     catch(err){
       /*<<+fs_node.js:268:4>>*/  /*<<+fs_node.js:268:4>>*/ caml_raise_sys_error
       ( /*<<+fs_node.js:268:25>>*/ err.toString());
     }
     /*<<+fs_node.js:264:28>>*/ };
    /*<<+fs_node.js:271:0>>*/ MlNodeFd.prototype.write =
    function(offset, buf, buf_offset, len){
      /*<<+fs_node.js:272:2>>*/ try{
       /*<<+fs_node.js:273:4>>*/ if(this.flags.isCharacterDevice)
        /*<<+fs_node.js:274:6>>*/  /*<<+fs_node.js:274:6>>*/ this.fs.writeSync
        (this.fd, buf, buf_offset, len);
      else
        /*<<+fs_node.js:276:6>>*/  /*<<+fs_node.js:276:6>>*/ this.fs.writeSync
        (this.fd, buf, buf_offset, len, offset);
     }
     catch(err){
       /*<<+fs_node.js:278:4>>*/  /*<<+fs_node.js:278:4>>*/ caml_raise_sys_error
       ( /*<<+fs_node.js:278:25>>*/ err.toString());
     }
      /*<<+fs_node.js:280:2>>*/ return 0;
     /*<<+fs_node.js:271:27>>*/ };
    /*<<+fs_node.js:282:0>>*/ MlNodeFd.prototype.read =
    function(offset, a, buf_offset, len){
      /*<<+fs_node.js:283:2>>*/ try{
       /*<<+fs_node.js:284:4>>*/ if(this.flags.isCharacterDevice)
        /*<<+fs_node.js:285:6>>*/  /*<<+fs_node.js:285:15>>*/ var
        read =
           /*<<+fs_node.js:285:17>>*/ this.fs.readSync
           (this.fd, a, buf_offset, len);
      else
        /*<<+fs_node.js:287:6>>*/  /*<<+fs_node.js:287:15>>*/ var
        read =
           /*<<+fs_node.js:287:17>>*/ this.fs.readSync
           (this.fd, a, buf_offset, len, offset);
       /*<<+fs_node.js:288:4>>*/ return read;
     }
     catch(err){
       /*<<+fs_node.js:290:4>>*/  /*<<+fs_node.js:290:4>>*/ caml_raise_sys_error
       ( /*<<+fs_node.js:290:25>>*/ err.toString());
     }
     /*<<+fs_node.js:282:26>>*/ };
    /*<<+fs_node.js:293:0>>*/ MlNodeFd.prototype.close =
    function(){
      /*<<+fs_node.js:294:2>>*/ try{
       /*<<+fs_node.js:295:4>>*/  /*<<+fs_node.js:295:4>>*/ this.fs.closeSync
       (this.fd);
       /*<<+fs_node.js:296:4>>*/ return 0;
     }
     catch(err){
       /*<<+fs_node.js:298:4>>*/  /*<<+fs_node.js:298:4>>*/ caml_raise_sys_error
       ( /*<<+fs_node.js:298:25>>*/ err.toString());
     }
     /*<<+fs_node.js:293:27>>*/ };
    /*<<+fs_node.js:37:0>>*/ function MlNodeDevice(root){
     /*<<+fs_node.js:38:2>>*/ this.fs =
      /*<<+fs_node.js:38:12>>*/ require("fs");
     /*<<+fs_node.js:39:2>>*/ this.root = root;
    /*<<+fs_node.js:40:0>>*/ }
    /*<<+fs_node.js:41:0>>*/ MlNodeDevice.prototype.nm =
    function(name){
      /*<<+fs_node.js:42:2>>*/ return this.root + name;
     /*<<+fs_node.js:41:28>>*/ };
    /*<<+fs_node.js:44:0>>*/ MlNodeDevice.prototype.exists =
    function(name){
      /*<<+fs_node.js:45:2>>*/ try{
       /*<<+fs_node.js:46:4>>*/ return  /*<<+fs_node.js:46:11>>*/ this.fs.existsSync
               ( /*<<+fs_node.js:46:30>>*/ this.nm(name))
              ? 1
              : 0;
     }
     catch(err){ /*<<+fs_node.js:48:4>>*/ return 0;}
     /*<<+fs_node.js:44:32>>*/ };
    /*<<+fs_node.js:51:0>>*/ MlNodeDevice.prototype.isFile =
    function(name){
      /*<<+fs_node.js:52:2>>*/ try{
       /*<<+fs_node.js:53:4>>*/ return  /*<<+fs_node.js:53:11>>*/  /*<<+fs_node.js:53:11>>*/ this.fs.statSync
                ( /*<<+fs_node.js:53:28>>*/ this.nm(name)).isFile
               ()
              ? 1
              : 0;
     }
     catch(err){
       /*<<+fs_node.js:55:4>>*/  /*<<+fs_node.js:55:4>>*/ caml_raise_sys_error
       ( /*<<+fs_node.js:55:25>>*/ err.toString());
     }
     /*<<+fs_node.js:51:32>>*/ };
    /*<<+fs_node.js:58:0>>*/ MlNodeDevice.prototype.mkdir =
    function(name, mode, raise_unix){
      /*<<+fs_node.js:59:2>>*/ try{
       /*<<+fs_node.js:60:4>>*/  /*<<+fs_node.js:60:4>>*/ this.fs.mkdirSync
       ( /*<<+fs_node.js:60:22>>*/ this.nm(name), {mode: mode});
       /*<<+fs_node.js:61:4>>*/ return 0;
     }
     catch(err){
       /*<<+fs_node.js:63:4>>*/  /*<<+fs_node.js:63:4>>*/ this.raise_nodejs_error
       (err, raise_unix);
     }
     /*<<+fs_node.js:58:31>>*/ };
    /*<<+fs_node.js:66:0>>*/ MlNodeDevice.prototype.rmdir =
    function(name, raise_unix){
      /*<<+fs_node.js:67:2>>*/ try{
       /*<<+fs_node.js:68:4>>*/  /*<<+fs_node.js:68:4>>*/ this.fs.rmdirSync
       ( /*<<+fs_node.js:68:22>>*/ this.nm(name));
       /*<<+fs_node.js:69:4>>*/ return 0;
     }
     catch(err){
       /*<<+fs_node.js:71:4>>*/  /*<<+fs_node.js:71:4>>*/ this.raise_nodejs_error
       (err, raise_unix);
     }
     /*<<+fs_node.js:66:31>>*/ };
    /*<<+fs_node.js:74:0>>*/ MlNodeDevice.prototype.readdir =
    function(name, raise_unix){
      /*<<+fs_node.js:75:2>>*/ try{
       /*<<+fs_node.js:76:4>>*/ return  /*<<+fs_node.js:76:11>>*/ this.fs.readdirSync
              ( /*<<+fs_node.js:76:31>>*/ this.nm(name));
     }
     catch(err){
       /*<<+fs_node.js:78:4>>*/  /*<<+fs_node.js:78:4>>*/ this.raise_nodejs_error
       (err, raise_unix);
     }
     /*<<+fs_node.js:74:33>>*/ };
    /*<<+fs_node.js:81:0>>*/ MlNodeDevice.prototype.is_dir =
    function(name){
      /*<<+fs_node.js:82:2>>*/ try{
       /*<<+fs_node.js:83:4>>*/ return  /*<<+fs_node.js:83:11>>*/  /*<<+fs_node.js:83:11>>*/ this.fs.statSync
                ( /*<<+fs_node.js:83:28>>*/ this.nm(name)).isDirectory
               ()
              ? 1
              : 0;
     }
     catch(err){
       /*<<+fs_node.js:85:4>>*/  /*<<+fs_node.js:85:4>>*/ caml_raise_sys_error
       ( /*<<+fs_node.js:85:25>>*/ err.toString());
     }
     /*<<+fs_node.js:81:32>>*/ };
    /*<<+fs_node.js:88:0>>*/ MlNodeDevice.prototype.unlink =
    function(name, raise_unix){
      /*<<+fs_node.js:89:2>>*/ try{
       /*<<+fs_node.js:90:4>>*/  /*<<+fs_node.js:90:10>>*/ var
       b =
          /*<<+fs_node.js:90:12>>*/ this.fs.existsSync
           ( /*<<+fs_node.js:90:31>>*/ this.nm(name))
          ? 1
          : 0;
       /*<<+fs_node.js:91:4>>*/  /*<<+fs_node.js:91:4>>*/ this.fs.unlinkSync
       ( /*<<+fs_node.js:91:23>>*/ this.nm(name));
       /*<<+fs_node.js:92:4>>*/ return b;
     }
     catch(err){
       /*<<+fs_node.js:94:4>>*/  /*<<+fs_node.js:94:4>>*/ this.raise_nodejs_error
       (err, raise_unix);
     }
     /*<<+fs_node.js:88:32>>*/ };
    /*<<+fs_node.js:97:0>>*/ MlNodeDevice.prototype.open =
    function(name, f, raise_unix){
      /*<<+fs_node.js:98:2>>*/ var
       /*<<+fs_node.js:98:13>>*/ consts =
         /*<<+fs_node.js:98:15>>*/ require("constants"),
       /*<<+fs_node.js:99:10>>*/ res = 0;
      /*<<+fs_node.js:100:2>>*/ for(var key in f)
       /*<<+fs_node.js:100:19>>*/ switch(key){
        case "rdonly":
          /*<<+fs_node.js:102:21>>*/ res |= consts.O_RDONLY;
          /*<<+fs_node.js:102:45>>*/ break;
        case "wronly":
          /*<<+fs_node.js:103:21>>*/ res |= consts.O_WRONLY;
          /*<<+fs_node.js:103:45>>*/ break;
        case "append":
          /*<<+fs_node.js:105:6>>*/ res |= consts.O_WRONLY | consts.O_APPEND;
          /*<<+fs_node.js:106:6>>*/ break;
        case "create":
          /*<<+fs_node.js:107:22>>*/ res |= consts.O_CREAT;
          /*<<+fs_node.js:107:48>>*/ break;
        case "truncate":
          /*<<+fs_node.js:108:22>>*/ res |= consts.O_TRUNC;
          /*<<+fs_node.js:108:48>>*/ break;
        case "excl":
          /*<<+fs_node.js:109:22>>*/ res |= consts.O_EXCL;
          /*<<+fs_node.js:109:48>>*/ break;
        case "binary":
          /*<<+fs_node.js:110:22>>*/ res |= consts.O_BINARY;
          /*<<+fs_node.js:110:48>>*/ break;
        case "text":
          /*<<+fs_node.js:111:22>>*/ res |= consts.O_TEXT;
          /*<<+fs_node.js:111:48>>*/ break;
        case "nonblock":
          /*<<+fs_node.js:112:22>>*/ res |= consts.O_NONBLOCK;
          /*<<+fs_node.js:112:48>>*/ break;
      }
      /*<<+fs_node.js:115:2>>*/ try{
       /*<<+fs_node.js:116:4>>*/ var
        /*<<+fs_node.js:116:11>>*/ fd =
          /*<<+fs_node.js:116:13>>*/ this.fs.openSync
          ( /*<<+fs_node.js:116:30>>*/ this.nm(name), res),
        /*<<+fs_node.js:117:26>>*/ isCharacterDevice =
          /*<<+fs_node.js:117:28>>*/  /*<<+fs_node.js:117:28>>*/ this.fs.lstatSync
           ( /*<<+fs_node.js:117:46>>*/ this.nm(name)).isCharacterDevice
          ();
       /*<<+fs_node.js:118:4>>*/ f.isCharacterDevice = isCharacterDevice;
       /*<<+fs_node.js:119:4>>*/ return new MlNodeFd(fd, f);
     }
     catch(err){
       /*<<+fs_node.js:121:4>>*/  /*<<+fs_node.js:121:4>>*/ this.raise_nodejs_error
       (err, raise_unix);
     }
     /*<<+fs_node.js:97:30>>*/ };
    /*<<+fs_node.js:125:0>>*/ MlNodeDevice.prototype.rename =
    function(o, n, raise_unix){
      /*<<+fs_node.js:126:2>>*/ try{
       /*<<+fs_node.js:127:4>>*/  /*<<+fs_node.js:127:4>>*/ this.fs.renameSync
       ( /*<<+fs_node.js:127:23>>*/ this.nm(o),
         /*<<+fs_node.js:127:35>>*/ this.nm(n));
     }
     catch(err){
       /*<<+fs_node.js:129:4>>*/  /*<<+fs_node.js:129:4>>*/ this.raise_nodejs_error
       (err, raise_unix);
     }
     /*<<+fs_node.js:125:32>>*/ };
    /*<<+fs_node.js:132:0>>*/ MlNodeDevice.prototype.stat =
    function(name, raise_unix){
      /*<<+fs_node.js:133:2>>*/ try{
       /*<<+fs_node.js:134:4>>*/  /*<<+fs_node.js:134:17>>*/ var
       js_stats =
          /*<<+fs_node.js:134:19>>*/ this.fs.statSync
          ( /*<<+fs_node.js:134:36>>*/ this.nm(name));
       /*<<+fs_node.js:135:4>>*/ return  /*<<+fs_node.js:135:11>>*/ this.stats_from_js
              (js_stats);
     }
     catch(err){
       /*<<+fs_node.js:137:4>>*/  /*<<+fs_node.js:137:4>>*/ this.raise_nodejs_error
       (err, raise_unix);
     }
     /*<<+fs_node.js:132:30>>*/ };
    /*<<+fs_node.js:140:0>>*/ MlNodeDevice.prototype.lstat =
    function(name, raise_unix){
      /*<<+fs_node.js:141:2>>*/ try{
       /*<<+fs_node.js:142:4>>*/  /*<<+fs_node.js:142:17>>*/ var
       js_stats =
          /*<<+fs_node.js:142:19>>*/ this.fs.lstatSync
          ( /*<<+fs_node.js:142:37>>*/ this.nm(name));
       /*<<+fs_node.js:143:4>>*/ return  /*<<+fs_node.js:143:11>>*/ this.stats_from_js
              (js_stats);
     }
     catch(err){
       /*<<+fs_node.js:145:4>>*/  /*<<+fs_node.js:145:4>>*/ this.raise_nodejs_error
       (err, raise_unix);
     }
     /*<<+fs_node.js:140:31>>*/ };
    /*<<+fs_node.js:148:0>>*/ MlNodeDevice.prototype.symlink =
    function(to_dir, target, path, raise_unix){
      /*<<+fs_node.js:149:2>>*/ try{
       /*<<+fs_node.js:150:4>>*/  /*<<+fs_node.js:150:4>>*/ this.fs.symlinkSync
       ( /*<<+fs_node.js:150:24>>*/ this.nm(target),
         /*<<+fs_node.js:150:41>>*/ this.nm(path),
        to_dir ? "dir" : "file");
       /*<<+fs_node.js:151:4>>*/ return 0;
     }
     catch(err){
       /*<<+fs_node.js:153:4>>*/  /*<<+fs_node.js:153:4>>*/ this.raise_nodejs_error
       (err, raise_unix);
     }
     /*<<+fs_node.js:148:33>>*/ };
    /*<<+fs_node.js:156:0>>*/ MlNodeDevice.prototype.readlink =
    function(name, raise_unix){
      /*<<+fs_node.js:157:2>>*/ try{
       /*<<+fs_node.js:158:4>>*/  /*<<+fs_node.js:158:13>>*/ var
       link =
          /*<<+fs_node.js:158:15>>*/ this.fs.readlinkSync
          ( /*<<+fs_node.js:158:36>>*/ this.nm(name), "utf8");
       /*<<+fs_node.js:159:4>>*/ return  /*<<+fs_node.js:159:11>>*/ caml_string_of_jsstring
              (link);
     }
     catch(err){
       /*<<+fs_node.js:161:4>>*/  /*<<+fs_node.js:161:4>>*/ this.raise_nodejs_error
       (err, raise_unix);
     }
     /*<<+fs_node.js:156:34>>*/ };
    /*<<+fs_node.js:164:0>>*/ MlNodeDevice.prototype.opendir =
    function(name, raise_unix){
      /*<<+fs_node.js:165:2>>*/ try{
       /*<<+fs_node.js:166:4>>*/ return  /*<<+fs_node.js:166:11>>*/ this.fs.opendirSync
              ( /*<<+fs_node.js:166:31>>*/ this.nm(name));
     }
     catch(err){
       /*<<+fs_node.js:168:4>>*/  /*<<+fs_node.js:168:4>>*/ this.raise_nodejs_error
       (err, raise_unix);
     }
     /*<<+fs_node.js:164:33>>*/ };
    /*<<+fs_node.js:171:0>>*/ MlNodeDevice.prototype.raise_nodejs_error =
    function(err, raise_unix){
      /*<<+fs_node.js:172:2>>*/  /*<<+fs_node.js:172:17>>*/ var
      unix_error =
         /*<<+fs_node.js:172:19>>*/ caml_named_value("Unix.Unix_error");
      /*<<+fs_node.js:173:2>>*/ if(raise_unix && unix_error) /*<<+fs_node.js:173:32>>*/ {
       /*<<+fs_node.js:174:4>>*/  /*<<+fs_node.js:174:13>>*/ var
       args =
          /*<<+fs_node.js:174:15>>*/ make_unix_err_args
          (err.code, err.syscall, err.path, err.errno);
       /*<<+fs_node.js:175:4>>*/  /*<<+fs_node.js:175:4>>*/ caml_raise_with_args
       (unix_error, args);
     }
     else
       /*<<+fs_node.js:176:9>>*/  /*<<+fs_node.js:177:4>>*/ caml_raise_sys_error
       ( /*<<+fs_node.js:177:25>>*/ err.toString());
     /*<<+fs_node.js:171:44>>*/ };
    /*<<+fs_node.js:180:0>>*/ MlNodeDevice.prototype.stats_from_js =
    function(js_stats){
      /*<<+fs_node.js:191:2>>*/ var file_kind;
      /*<<+fs_node.js:192:2>>*/ if
      ( /*<<+fs_node.js:192:6>>*/ js_stats.isFile())
       /*<<+fs_node.js:192:25>>*/ file_kind = 0;
     else if( /*<<+fs_node.js:194:13>>*/ js_stats.isDirectory())
       /*<<+fs_node.js:194:37>>*/ file_kind = 1;
     else if( /*<<+fs_node.js:196:13>>*/ js_stats.isCharacterDevice())
       /*<<+fs_node.js:196:43>>*/ file_kind = 2;
     else if( /*<<+fs_node.js:198:13>>*/ js_stats.isBlockDevice())
       /*<<+fs_node.js:198:39>>*/ file_kind = 3;
     else if( /*<<+fs_node.js:200:13>>*/ js_stats.isSymbolicLink())
       /*<<+fs_node.js:200:40>>*/ file_kind = 4;
     else if( /*<<+fs_node.js:202:13>>*/ js_stats.isFIFO())
       /*<<+fs_node.js:202:32>>*/ file_kind = 5;
     else if( /*<<+fs_node.js:204:13>>*/ js_stats.isSocket())
       /*<<+fs_node.js:204:34>>*/ file_kind = 6;
      /*<<+fs_node.js:223:2>>*/ return [0,
             js_stats.dev,
             js_stats.ino,
             file_kind,
             js_stats.mode,
             js_stats.nlink,
             js_stats.uid,
             js_stats.gid,
             js_stats.rdev,
             js_stats.size,
             js_stats.atimeMs,
             js_stats.mtimeMs,
             js_stats.ctimeMs];
     /*<<+fs_node.js:180:39>>*/ };
    /*<<+fs_node.js:240:0>>*/ MlNodeDevice.prototype.constructor = MlNodeDevice;
    /*<<+fs.js:37:0>>*/ function caml_get_root(path){
     /*<<+fs.js:38:2>>*/  /*<<+fs.js:38:8>>*/ var
     x =  /*<<+fs.js:38:10>>*/ path_is_absolute(path);
     /*<<+fs.js:39:2>>*/ if(! x)  /*<<+fs.js:39:10>>*/ return;
     /*<<+fs.js:40:2>>*/ return x[0] + "/";
    /*<<+fs.js:40:19>>*/ }
    /*<<+fs.js:44:0>>*/ var
     /*<<+fs.js:44:14>>*/ caml_root =
       /*<<+fs.js:44:16>>*/ caml_get_root(caml_current_dir)
      ||  /*<<+fs.js:44:51>>*/ caml_failwith("unable to compute caml_root"),
     /*<<+fs.js:105:21>>*/ jsoo_mount_point = [];
    /*<<+fs.js:106:0>>*/ if( /*<<+fs.js:106:4>>*/ fs_node_supported())
     /*<<+fs.js:106:25>>*/  /*<<+fs.js:107:2>>*/ jsoo_mount_point.push
     ({path: caml_root, device: new MlNodeDevice(caml_root)});
   else
     /*<<+fs.js:108:7>>*/  /*<<+fs.js:109:2>>*/ jsoo_mount_point.push
     ({path: caml_root, device: new MlFakeDevice(caml_root)});
    /*<<+fs.js:111:0>>*/  /*<<+fs.js:111:0>>*/ jsoo_mount_point.push
    ({path: "/static/", device: new MlFakeDevice("/static/")});
    /*<<+fs.js:126:0>>*/ function resolve_fs_device(name){
     /*<<+fs.js:127:2>>*/ var
      /*<<+fs.js:127:11>>*/ path =  /*<<+fs.js:127:13>>*/ caml_make_path(name),
      /*<<+fs.js:128:11>>*/ name =  /*<<+fs.js:128:13>>*/ path.join("/"),
      /*<<+fs.js:129:17>>*/ name_slash =
        /*<<+fs.js:129:19>>*/ caml_trailing_slash(name),
     res;
     /*<<+fs.js:131:2>>*/ for
    ( /*<<+fs.js:131:12>>*/ var i = 0; i < jsoo_mount_point.length; i++) /*<<+fs.js:131:51>>*/ {
      /*<<+fs.js:132:4>>*/  /*<<+fs.js:132:10>>*/ var m = jsoo_mount_point[i];
      /*<<+fs.js:133:4>>*/ if
      ( /*<<+fs.js:133:7>>*/ name_slash.search(m.path) == 0
       && (! res || res.path.length < m.path.length))
       /*<<+fs.js:135:6>>*/ res =
       {path: m.path,
        device: m.device,
        rest:
         /*<<+fs.js:135:46>>*/ name.substring(m.path.length, name.length)};
    }
     /*<<+fs.js:137:2>>*/ if
     (! res &&  /*<<+fs.js:137:14>>*/ fs_node_supported()) /*<<+fs.js:137:35>>*/ {
      /*<<+fs.js:138:4>>*/  /*<<+fs.js:138:13>>*/ var
      root =  /*<<+fs.js:138:15>>*/ caml_get_root(name);
      /*<<+fs.js:139:4>>*/ if
      (root &&  /*<<+fs.js:139:16>>*/ root.match(/^[a-zA-Z]:\/$/)) /*<<+fs.js:139:44>>*/ {
       /*<<+fs.js:140:6>>*/  /*<<+fs.js:140:12>>*/ var
       m = {path: root, device: new MlNodeDevice(root)};
       /*<<+fs.js:141:6>>*/  /*<<+fs.js:141:6>>*/ jsoo_mount_point.push(m);
       /*<<+fs.js:142:6>>*/ res =
       {path: m.path,
        device: m.device,
        rest:
         /*<<+fs.js:142:46>>*/ name.substring(m.path.length, name.length)};
     }
    }
     /*<<+fs.js:145:2>>*/ if(res)  /*<<+fs.js:145:12>>*/ return res;
     /*<<+fs.js:146:2>>*/  /*<<+fs.js:146:2>>*/ caml_raise_sys_error
     ("no device found for " + name_slash);
    /*<<+fs.js:147:0>>*/ }
    /*<<+fs.js:307:0>>*/ function caml_create_file(name, content){
     /*<<+fs.js:308:2>>*/  /*<<+fs.js:308:11>>*/ var
     root =  /*<<+fs.js:308:13>>*/ resolve_fs_device(name);
     /*<<+fs.js:309:2>>*/ if(! root.device.register)
      /*<<+fs.js:309:29>>*/  /*<<+fs.js:309:29>>*/ caml_failwith
      ("cannot register file");
     /*<<+fs.js:310:2>>*/  /*<<+fs.js:310:2>>*/ root.device.register
     (root.rest, content);
     /*<<+fs.js:311:2>>*/ return 0;
    /*<<+fs.js:312:0>>*/ }
    /*<<+fs.js:317:0>>*/ function jsoo_create_file(name, content){
     /*<<+fs.js:318:2>>*/ var
      /*<<+fs.js:318:11>>*/ name =
        /*<<+fs.js:318:13>>*/ caml_string_of_jsbytes(name),
      /*<<+fs.js:319:14>>*/ content =
        /*<<+fs.js:319:16>>*/ caml_string_of_jsbytes(content);
     /*<<+fs.js:320:2>>*/ return  /*<<+fs.js:320:9>>*/ caml_create_file
            (name, content);
    /*<<+fs.js:321:0>>*/ }
    /*<<+fs.js:293:0>>*/ function caml_fs_init(){
     /*<<+fs.js:294:2>>*/  /*<<+fs.js:294:9>>*/ var
     tmp = globalThis.caml_fs_tmp;
     /*<<+fs.js:295:2>>*/ if(tmp)
      /*<<+fs.js:295:9>>*/ for
     ( /*<<+fs.js:296:14>>*/ var i = 0; i < tmp.length; i++)
       /*<<+fs.js:296:39>>*/  /*<<+fs.js:297:6>>*/ jsoo_create_file
       (tmp[i].name, tmp[i].content);
     /*<<+fs.js:300:2>>*/ globalThis.jsoo_create_file = jsoo_create_file;
     /*<<+fs.js:301:2>>*/ globalThis.caml_fs_tmp = [];
     /*<<+fs.js:302:2>>*/ return 0;
    /*<<+fs.js:303:0>>*/ }
    /*<<+backtrace.js:45:0>>*/ function caml_get_exception_raw_backtrace(){ /*<<+backtrace.js:45:47>>*/ return [0];
    /*<<+backtrace.js:45:59>>*/ }
    /*<<+obj.js:114:0>>*/  /*<<+obj.js:114:22>>*/ var caml_method_cache = [];
    /*<<+obj.js:115:0>>*/ function caml_get_public_method(obj, tag, cacheid){
     /*<<+obj.js:116:2>>*/ var
      /*<<+obj.js:116:12>>*/ meths = obj[1],
      /*<<+obj.js:117:10>>*/ ofs = caml_method_cache[cacheid];
     /*<<+obj.js:118:2>>*/ if(ofs === undefined)
      /*<<+obj.js:118:25>>*/ for
     ( /*<<+obj.js:120:15>>*/ var i = caml_method_cache.length;
      i < cacheid;
      i++)
       /*<<+obj.js:121:6>>*/ caml_method_cache[i] = 0;
    else if(meths[ofs] === tag)  /*<<+obj.js:122:33>>*/ return meths[ofs - 1];
     /*<<+obj.js:125:2>>*/ var
      /*<<+obj.js:125:9>>*/ li = 3,
      /*<<+obj.js:125:17>>*/ hi = meths[1] * 2 + 1,
     mi;
     /*<<+obj.js:126:2>>*/ while(li < hi) /*<<+obj.js:126:18>>*/ {
      /*<<+obj.js:127:4>>*/ mi = li + hi >> 1 | 1;
      /*<<+obj.js:128:4>>*/ if(tag < meths[mi + 1])
       /*<<+obj.js:128:27>>*/ hi = mi - 2;
     else
       /*<<+obj.js:129:9>>*/ li = mi;
    }
     /*<<+obj.js:131:2>>*/ caml_method_cache[cacheid] = li + 1;
     /*<<+obj.js:133:2>>*/ return tag == meths[li + 1] ? meths[li] : 0;
    /*<<+obj.js:134:0>>*/ }
    /*<<+compare.js:252:0>>*/ function caml_greaterequal(x, y){
     /*<<+compare.js:252:36>>*/ return +
           ( /*<<+compare.js:252:45>>*/ caml_compare_val(x, y, false) >= 0);
    /*<<+compare.js:252:80>>*/ }
    /*<<+compare.js:255:0>>*/ function caml_greaterthan(x, y){
     /*<<+compare.js:255:35>>*/ return +
           ( /*<<+compare.js:255:44>>*/ caml_compare_val(x, y, false) > 0);
    /*<<+compare.js:255:78>>*/ }
    /*<<+hash.js:123:0>>*/ function caml_hash_mix_jsbytes(h, s){
     /*<<+hash.js:124:2>>*/ var  /*<<+hash.js:124:10>>*/ len = s.length, i, w;
     /*<<+hash.js:125:2>>*/ for(i = 0; i + 4 <= len; i += 4) /*<<+hash.js:125:36>>*/ {
      /*<<+hash.js:126:4>>*/ w =
       /*<<+hash.js:126:8>>*/ s.charCodeAt(i)
      |  /*<<+hash.js:127:9>>*/ s.charCodeAt(i + 1) << 8
      |  /*<<+hash.js:128:9>>*/ s.charCodeAt(i + 2) << 16
      |  /*<<+hash.js:129:9>>*/ s.charCodeAt(i + 3) << 24;
      /*<<+hash.js:130:4>>*/ h =
       /*<<+hash.js:130:8>>*/ caml_hash_mix_int(h, w);
    }
     /*<<+hash.js:132:2>>*/ w = 0;
     /*<<+hash.js:133:2>>*/ switch(len & 3){
      case 3:
        /*<<+hash.js:134:10>>*/ w =
         /*<<+hash.js:134:15>>*/ s.charCodeAt(i + 2) << 16;
      case 2:
        /*<<+hash.js:135:10>>*/ w |=
         /*<<+hash.js:135:15>>*/ s.charCodeAt(i + 1) << 8;
      case 1:
        /*<<+hash.js:137:4>>*/ w |=  /*<<+hash.js:137:9>>*/ s.charCodeAt(i);
        /*<<+hash.js:138:4>>*/ h =
         /*<<+hash.js:138:8>>*/ caml_hash_mix_int(h, w);
    }
     /*<<+hash.js:141:2>>*/ h ^= len;
     /*<<+hash.js:142:2>>*/ return h;
    /*<<+hash.js:143:0>>*/ }
    /*<<+hash.js:182:0>>*/ function caml_hash_mix_string(h, v){
     /*<<+hash.js:183:2>>*/ return  /*<<+hash.js:183:9>>*/ caml_hash_mix_jsbytes
            (h,  /*<<+hash.js:183:34>>*/ caml_jsbytes_of_string(v));
    /*<<+hash.js:184:0>>*/ }
    /*<<+hash.js:147:0>>*/ function caml_hash_mix_bytes_arr(h, s){
     /*<<+hash.js:148:2>>*/ var  /*<<+hash.js:148:10>>*/ len = s.length, i, w;
     /*<<+hash.js:149:2>>*/ for(i = 0; i + 4 <= len; i += 4) /*<<+hash.js:149:36>>*/ {
      /*<<+hash.js:150:4>>*/ w =
      s[i] | s[i + 1] << 8 | s[i + 2] << 16 | s[i + 3] << 24;
      /*<<+hash.js:154:4>>*/ h =
       /*<<+hash.js:154:8>>*/ caml_hash_mix_int(h, w);
    }
     /*<<+hash.js:156:2>>*/ w = 0;
     /*<<+hash.js:157:2>>*/ switch(len & 3){
      case 3:
        /*<<+hash.js:158:10>>*/ w = s[i + 2] << 16;
      case 2:
        /*<<+hash.js:159:10>>*/ w |= s[i + 1] << 8;
      case 1:
        /*<<+hash.js:160:10>>*/ w |= s[i];
        /*<<+hash.js:161:4>>*/ h =
         /*<<+hash.js:161:8>>*/ caml_hash_mix_int(h, w);
    }
     /*<<+hash.js:164:2>>*/ h ^= len;
     /*<<+hash.js:165:2>>*/ return h;
    /*<<+hash.js:166:0>>*/ }
    /*<<+mlBytes.js:829:0>>*/ function caml_ml_bytes_content(s){
     /*<<+mlBytes.js:830:2>>*/ switch(s.t & 6){
      default:
        /*<<+mlBytes.js:832:4>>*/  /*<<+mlBytes.js:832:4>>*/ caml_convert_string_to_bytes
        (s);
      case 0:
        /*<<+mlBytes.js:834:4>>*/ return s.c;
      case 4:
        /*<<+mlBytes.js:836:4>>*/ return s.c;
    }
    /*<<+mlBytes.js:838:0>>*/ }
    /*<<+hash.js:172:0>>*/ function caml_hash_mix_bytes(h, v){
     /*<<+hash.js:173:2>>*/  /*<<+hash.js:173:14>>*/ var
     content =  /*<<+hash.js:173:16>>*/ caml_ml_bytes_content(v);
     /*<<+hash.js:174:2>>*/ return typeof content === "string"
            ?  /*<<+hash.js:175:11>>*/ caml_hash_mix_jsbytes(h, content)
            :  /*<<+hash.js:177:11>>*/ caml_hash_mix_bytes_arr(h, content);
    /*<<+hash.js:178:0>>*/ }
    /*<<+hash.js:98:0>>*/ function caml_hash_mix_final(h){
     /*<<+hash.js:99:2>>*/ h ^= h >>> 16;
     /*<<+hash.js:100:2>>*/ h =
      /*<<+hash.js:100:6>>*/ caml_mul(h, 0x85ebca6b | 0);
     /*<<+hash.js:101:2>>*/ h ^= h >>> 13;
     /*<<+hash.js:102:2>>*/ h =
      /*<<+hash.js:102:6>>*/ caml_mul(h, 0xc2b2ae35 | 0);
     /*<<+hash.js:103:2>>*/ h ^= h >>> 16;
     /*<<+hash.js:104:2>>*/ return h;
    /*<<+hash.js:105:0>>*/ }
    /*<<+hash.js:193:0>>*/ function caml_hash(count, limit, seed, obj){
     /*<<+hash.js:194:2>>*/ var queue, rd, wr, sz, num, h, v, i, len;
     /*<<+hash.js:195:2>>*/ sz = limit;
     /*<<+hash.js:196:2>>*/ if(sz < 0 || sz > 256)
      /*<<+hash.js:196:26>>*/ sz = 256;
     /*<<+hash.js:197:2>>*/ num = count;
     /*<<+hash.js:198:2>>*/ h = seed;
     /*<<+hash.js:199:2>>*/ queue = [obj];
     /*<<+hash.js:199:17>>*/ rd = 0;
     /*<<+hash.js:199:25>>*/ wr = 1;
     /*<<+hash.js:200:2>>*/ while(rd < wr && num > 0) /*<<+hash.js:200:29>>*/ {
      /*<<+hash.js:201:4>>*/ v = queue[rd++];
      /*<<+hash.js:202:4>>*/ if(v && v.caml_custom){
       /*<<+hash.js:202:27>>*/ if
       (caml_custom_ops[v.caml_custom] && caml_custom_ops[v.caml_custom].hash) /*<<+hash.js:203:80>>*/ {
        /*<<+hash.js:204:8>>*/  /*<<+hash.js:204:15>>*/ var
        hh =  /*<<+hash.js:204:17>>*/ caml_custom_ops[v.caml_custom].hash(v);
        /*<<+hash.js:205:8>>*/ h =
         /*<<+hash.js:205:12>>*/ caml_hash_mix_int(h, hh);
        /*<<+hash.js:206:8>>*/ num--;
      }
     }
     else if(v instanceof Array && v[0] === (v[0] | 0))
       /*<<+hash.js:209:54>>*/ switch(v[0]){
        case 248:
          /*<<+hash.js:213:8>>*/ h =
           /*<<+hash.js:213:12>>*/ caml_hash_mix_int(h, v[2]);
          /*<<+hash.js:214:8>>*/ num--;
          /*<<+hash.js:215:8>>*/ break;
        case 250:
          /*<<+hash.js:218:8>>*/ queue[--rd] = v[1];
          /*<<+hash.js:219:8>>*/ break;
        default:
          /*<<+hash.js:221:8>>*/ if
          ( /*<<+hash.js:221:11>>*/ caml_is_continuation_tag(v[0]))
           /*<<+hash.js:221:43>>*/ break;
          /*<<+hash.js:226:8>>*/  /*<<+hash.js:226:16>>*/ var
          tag = v.length - 1 << 10 | v[0];
          /*<<+hash.js:227:8>>*/ h =
           /*<<+hash.js:227:12>>*/ caml_hash_mix_int(h, tag);
          /*<<+hash.js:228:8>>*/ for(i = 1, len = v.length; i < len; i++) /*<<+hash.js:228:50>>*/ {
           /*<<+hash.js:229:10>>*/ if(wr >= sz)
            /*<<+hash.js:229:24>>*/ break;
           /*<<+hash.js:230:10>>*/ queue[wr++] = v[i];
         }
          /*<<+hash.js:232:8>>*/ break;
      }
     else if( /*<<+hash.js:234:15>>*/ caml_is_ml_bytes(v)) /*<<+hash.js:234:36>>*/ {
       /*<<+hash.js:235:6>>*/ h =
        /*<<+hash.js:235:10>>*/ caml_hash_mix_bytes(h, v);
       /*<<+hash.js:236:6>>*/ num--;
     }
     else if( /*<<+hash.js:237:15>>*/ caml_is_ml_string(v)) /*<<+hash.js:237:37>>*/ {
       /*<<+hash.js:238:6>>*/ h =
        /*<<+hash.js:238:10>>*/ caml_hash_mix_string(h, v);
       /*<<+hash.js:239:6>>*/ num--;
     }
     else if(typeof v === "string") /*<<+hash.js:240:38>>*/ {
       /*<<+hash.js:241:6>>*/ h =
        /*<<+hash.js:241:10>>*/ caml_hash_mix_jsbytes(h, v);
       /*<<+hash.js:242:6>>*/ num--;
     }
     else if(v === (v | 0)) /*<<+hash.js:243:28>>*/ {
       /*<<+hash.js:245:6>>*/ h =
        /*<<+hash.js:245:10>>*/ caml_hash_mix_int(h, v + v + 1);
       /*<<+hash.js:246:6>>*/ num--;
     }
     else if(typeof v === "number") /*<<+hash.js:247:38>>*/ {
       /*<<+hash.js:249:6>>*/ h =
        /*<<+hash.js:249:10>>*/ caml_hash_mix_float(h, v);
       /*<<+hash.js:250:6>>*/ num--;
     }
    }
     /*<<+hash.js:253:2>>*/ h =  /*<<+hash.js:253:6>>*/ caml_hash_mix_final(h);
     /*<<+hash.js:254:2>>*/ return h & 0x3FFFFFFF;
    /*<<+hash.js:255:0>>*/ }
    /*<<+ieee_754.js:81:0>>*/ function caml_hexstring_of_float(x, prec, style){
     /*<<+ieee_754.js:82:2>>*/ if(!  /*<<+ieee_754.js:82:7>>*/ isFinite(x)) /*<<+ieee_754.js:82:20>>*/ {
      /*<<+ieee_754.js:83:4>>*/ if( /*<<+ieee_754.js:83:8>>*/ isNaN(x))
       /*<<+ieee_754.js:83:18>>*/ return  /*<<+ieee_754.js:83:25>>*/ caml_string_of_jsstring
              ("nan");
      /*<<+ieee_754.js:84:4>>*/ return  /*<<+ieee_754.js:84:11>>*/ caml_string_of_jsstring
             (x > 0 ? "infinity" : "-infinity");
    }
     /*<<+ieee_754.js:86:2>>*/  /*<<+ieee_754.js:86:11>>*/ var
     sign = x == 0 && 1 / x == - Infinity ? 1 : x >= 0 ? 0 : 1;
     /*<<+ieee_754.js:87:2>>*/ if(sign)  /*<<+ieee_754.js:87:11>>*/ x = - x;
     /*<<+ieee_754.js:88:2>>*/  /*<<+ieee_754.js:88:10>>*/ var exp = 0;
     /*<<+ieee_754.js:89:2>>*/ if(x == 0)
      /*<<+ieee_754.js:89:14>>*/ ;
    else if(x < 1)
      /*<<+ieee_754.js:90:18>>*/ while(x < 1 && exp > - 1022) /*<<+ieee_754.js:91:34>>*/ {
       /*<<+ieee_754.js:91:36>>*/ x *= 2;
       /*<<+ieee_754.js:91:44>>*/ exp--;
     }
    else
      /*<<+ieee_754.js:92:9>>*/ while(x >= 2) /*<<+ieee_754.js:93:19>>*/ {
       /*<<+ieee_754.js:93:21>>*/ x /= 2;
       /*<<+ieee_754.js:93:29>>*/ exp++;
     }
     /*<<+ieee_754.js:95:2>>*/ var
      /*<<+ieee_754.js:95:15>>*/ exp_sign = exp < 0 ? "" : "+",
      /*<<+ieee_754.js:96:15>>*/ sign_str = "";
     /*<<+ieee_754.js:97:2>>*/ if(sign)
      /*<<+ieee_754.js:97:12>>*/ sign_str = "-";
    else
      /*<<+ieee_754.js:98:7>>*/ switch(style){
       case 43:
         /*<<+ieee_754.js:100:23>>*/ sign_str = "+";
         /*<<+ieee_754.js:100:39>>*/ break;
       case 32:
         /*<<+ieee_754.js:101:23>>*/ sign_str = " ";
         /*<<+ieee_754.js:101:39>>*/ break;
       default:  /*<<+ieee_754.js:102:13>>*/ break;
     }
     /*<<+ieee_754.js:105:2>>*/ if(prec >= 0 && prec < 13) /*<<+ieee_754.js:105:30>>*/ {
      /*<<+ieee_754.js:107:4>>*/  /*<<+ieee_754.js:107:12>>*/ var
      cst =  /*<<+ieee_754.js:107:14>>*/ Math.pow(2, prec * 4);
      /*<<+ieee_754.js:108:4>>*/ x =
       /*<<+ieee_754.js:108:8>>*/ Math.round(x * cst) / cst;
    }
     /*<<+ieee_754.js:110:2>>*/  /*<<+ieee_754.js:110:12>>*/ var
     x_str =  /*<<+ieee_754.js:110:14>>*/ x.toString(16);
     /*<<+ieee_754.js:111:2>>*/ if(prec >= 0) /*<<+ieee_754.js:111:15>>*/ {
      /*<<+ieee_754.js:112:4>>*/  /*<<+ieee_754.js:112:12>>*/ var
      idx =  /*<<+ieee_754.js:112:14>>*/ x_str.indexOf(".");
      /*<<+ieee_754.js:113:4>>*/ if(idx < 0)
       /*<<+ieee_754.js:113:14>>*/ x_str +=
       "." +  /*<<+ieee_754.js:114:21>>*/ caml_str_repeat(prec, "0");
     else /*<<+ieee_754.js:116:9>>*/ {
       /*<<+ieee_754.js:117:6>>*/  /*<<+ieee_754.js:117:15>>*/ var
       size = idx + 1 + prec;
       /*<<+ieee_754.js:118:6>>*/ if(x_str.length < size)
        /*<<+ieee_754.js:119:8>>*/ x_str +=
         /*<<+ieee_754.js:119:17>>*/ caml_str_repeat(size - x_str.length, "0");
      else
        /*<<+ieee_754.js:121:8>>*/ x_str =
         /*<<+ieee_754.js:121:16>>*/ x_str.substr(0, size);
     }
    }
     /*<<+ieee_754.js:124:2>>*/ return  /*<<+ieee_754.js:124:9>>*/ caml_string_of_jsstring
            (sign_str + "0x" + x_str + "p" + exp_sign
             +  /*<<+ieee_754.js:124:77>>*/ exp.toString(10));
    /*<<+ieee_754.js:125:0>>*/ }
    /*<<+marshal.js:93:0>>*/ function MlStringReader(s, i){
     /*<<+marshal.js:93:33>>*/ this.s =
      /*<<+marshal.js:93:42>>*/ caml_jsbytes_of_string(s);
     /*<<+marshal.js:93:69>>*/ this.i = i;
    /*<<+marshal.js:93:81>>*/ }
    /*<<+marshal.js:94:0>>*/ MlStringReader.prototype =
    {read8u:
     function(){
       /*<<+marshal.js:95:23>>*/ return  /*<<+marshal.js:95:30>>*/ this.s.charCodeAt
              (this.i++);
      /*<<+marshal.js:95:9>>*/ },
     read8s:
     function(){
       /*<<+marshal.js:96:23>>*/ return  /*<<+marshal.js:96:30>>*/ this.s.charCodeAt
              (this.i++)
             << 24
             >> 24;
      /*<<+marshal.js:96:9>>*/ },
     read16u:
     function(){
       /*<<+marshal.js:98:4>>*/ var
        /*<<+marshal.js:98:10>>*/ s = this.s,
        /*<<+marshal.js:98:22>>*/ i = this.i;
       /*<<+marshal.js:99:4>>*/ this.i = i + 2;
       /*<<+marshal.js:100:4>>*/ return  /*<<+marshal.js:100:12>>*/ s.charCodeAt
              (i)
             << 8
             |  /*<<+marshal.js:100:36>>*/ s.charCodeAt(i + 1);
      /*<<+marshal.js:97:10>>*/ },
     read16s:
     function(){
       /*<<+marshal.js:103:4>>*/ var
        /*<<+marshal.js:103:10>>*/ s = this.s,
        /*<<+marshal.js:103:22>>*/ i = this.i;
       /*<<+marshal.js:104:4>>*/ this.i = i + 2;
       /*<<+marshal.js:105:4>>*/ return  /*<<+marshal.js:105:12>>*/ s.charCodeAt
              (i)
             << 24
             >> 16
             |  /*<<+marshal.js:105:43>>*/ s.charCodeAt(i + 1);
      /*<<+marshal.js:102:10>>*/ },
     read32u:
     function(){
       /*<<+marshal.js:108:4>>*/ var
        /*<<+marshal.js:108:10>>*/ s = this.s,
        /*<<+marshal.js:108:22>>*/ i = this.i;
       /*<<+marshal.js:109:4>>*/ this.i = i + 4;
       /*<<+marshal.js:110:4>>*/ return ( /*<<+marshal.js:110:13>>*/ s.charCodeAt
              (i)
             << 24
             |  /*<<+marshal.js:110:39>>*/ s.charCodeAt(i + 1) << 16
             |  /*<<+marshal.js:111:13>>*/ s.charCodeAt(i + 2) << 8
             |  /*<<+marshal.js:111:39>>*/ s.charCodeAt(i + 3))
             >>> 0;
      /*<<+marshal.js:107:10>>*/ },
     read32s:
     function(){
       /*<<+marshal.js:114:4>>*/ var
        /*<<+marshal.js:114:10>>*/ s = this.s,
        /*<<+marshal.js:114:22>>*/ i = this.i;
       /*<<+marshal.js:115:4>>*/ this.i = i + 4;
       /*<<+marshal.js:116:4>>*/ return  /*<<+marshal.js:116:12>>*/ s.charCodeAt
              (i)
             << 24
             |  /*<<+marshal.js:116:38>>*/ s.charCodeAt(i + 1) << 16
             |  /*<<+marshal.js:117:7>>*/ s.charCodeAt(i + 2) << 8
             |  /*<<+marshal.js:117:33>>*/ s.charCodeAt(i + 3);
      /*<<+marshal.js:113:10>>*/ },
     readstr:
     function(len){
       /*<<+marshal.js:120:4>>*/  /*<<+marshal.js:120:10>>*/ var i = this.i;
       /*<<+marshal.js:121:4>>*/ this.i = i + len;
       /*<<+marshal.js:122:4>>*/ return  /*<<+marshal.js:122:11>>*/ caml_string_of_jsbytes
              ( /*<<+marshal.js:122:34>>*/ this.s.substring(i, i + len));
      /*<<+marshal.js:119:10>>*/ },
     readuint8array:
     function(len){
       /*<<+marshal.js:125:4>>*/ var
        /*<<+marshal.js:125:10>>*/ b = new Uint8Array(len),
        /*<<+marshal.js:126:10>>*/ s = this.s,
        /*<<+marshal.js:127:10>>*/ i = this.i;
       /*<<+marshal.js:128:4>>*/ for
      ( /*<<+marshal.js:128:14>>*/ var j = 0; j < len; j++)
        /*<<+marshal.js:128:33>>*/ b[j] =
         /*<<+marshal.js:129:13>>*/ s.charCodeAt(i + j);
       /*<<+marshal.js:131:4>>*/ this.i = i + len;
       /*<<+marshal.js:132:4>>*/ return b;
      /*<<+marshal.js:124:17>>*/ }};
    /*<<+zstd.js:663:0>>*/  /*<<+zstd.js:663:26>>*/ var
    caml_decompress_input = null;
    /*<<+mlBytes.js:506:0>>*/ function caml_string_of_array(a){
     /*<<+mlBytes.js:507:2>>*/ return  /*<<+mlBytes.js:507:9>>*/ caml_string_of_jsbytes
            ( /*<<+mlBytes.js:507:32>>*/ caml_subarray_to_jsbytes
              (a, 0, a.length));
    /*<<+mlBytes.js:508:0>>*/ }
    /*<<+marshal.js:52:0>>*/ function UInt8ArrayReader(s, i){
     /*<<+marshal.js:52:35>>*/ this.s = s;
     /*<<+marshal.js:52:47>>*/ this.i = i;
    /*<<+marshal.js:52:59>>*/ }
    /*<<+marshal.js:53:0>>*/ UInt8ArrayReader.prototype =
    {read8u:
     function(){
       /*<<+marshal.js:54:23>>*/ return this.s[this.i++];
      /*<<+marshal.js:54:9>>*/ },
     read8s:
     function(){
       /*<<+marshal.js:55:23>>*/ return this.s[this.i++] << 24 >> 24;
      /*<<+marshal.js:55:9>>*/ },
     read16u:
     function(){
       /*<<+marshal.js:57:4>>*/ var
        /*<<+marshal.js:57:10>>*/ s = this.s,
        /*<<+marshal.js:57:22>>*/ i = this.i;
       /*<<+marshal.js:58:4>>*/ this.i = i + 2;
       /*<<+marshal.js:59:4>>*/ return s[i] << 8 | s[i + 1];
      /*<<+marshal.js:56:10>>*/ },
     read16s:
     function(){
       /*<<+marshal.js:62:4>>*/ var
        /*<<+marshal.js:62:10>>*/ s = this.s,
        /*<<+marshal.js:62:22>>*/ i = this.i;
       /*<<+marshal.js:63:4>>*/ this.i = i + 2;
       /*<<+marshal.js:64:4>>*/ return s[i] << 24 >> 16 | s[i + 1];
      /*<<+marshal.js:61:10>>*/ },
     read32u:
     function(){
       /*<<+marshal.js:67:4>>*/ var
        /*<<+marshal.js:67:10>>*/ s = this.s,
        /*<<+marshal.js:67:22>>*/ i = this.i;
       /*<<+marshal.js:68:4>>*/ this.i = i + 4;
       /*<<+marshal.js:69:4>>*/ return (s[i] << 24 | s[i + 1] << 16
             | s[i + 2] << 8
             | s[i + 3])
             >>> 0;
      /*<<+marshal.js:66:10>>*/ },
     read32s:
     function(){
       /*<<+marshal.js:73:4>>*/ var
        /*<<+marshal.js:73:10>>*/ s = this.s,
        /*<<+marshal.js:73:22>>*/ i = this.i;
       /*<<+marshal.js:74:4>>*/ this.i = i + 4;
       /*<<+marshal.js:75:4>>*/ return s[i] << 24 | s[i + 1] << 16
             | s[i + 2] << 8
             | s[i + 3];
      /*<<+marshal.js:72:10>>*/ },
     readstr:
     function(len){
       /*<<+marshal.js:79:4>>*/  /*<<+marshal.js:79:10>>*/ var i = this.i;
       /*<<+marshal.js:80:4>>*/ this.i = i + len;
       /*<<+marshal.js:81:4>>*/ return  /*<<+marshal.js:81:11>>*/ caml_string_of_array
              ( /*<<+marshal.js:81:32>>*/ this.s.subarray(i, i + len));
      /*<<+marshal.js:78:10>>*/ },
     readuint8array:
     function(len){
       /*<<+marshal.js:84:4>>*/  /*<<+marshal.js:84:10>>*/ var i = this.i;
       /*<<+marshal.js:85:4>>*/ this.i = i + len;
       /*<<+marshal.js:86:4>>*/ return  /*<<+marshal.js:86:11>>*/ this.s.subarray
              (i, i + len);
      /*<<+marshal.js:83:17>>*/ }};
    /*<<+marshal.js:185:0>>*/ function caml_float_of_bytes(a){
     /*<<+marshal.js:186:2>>*/ return  /*<<+marshal.js:186:9>>*/ caml_int64_float_of_bits
            ( /*<<+marshal.js:186:35>>*/ caml_int64_of_bytes(a));
    /*<<+marshal.js:187:0>>*/ }
    /*<<+marshal.js:278:0>>*/ function caml_input_value_from_reader
   (reader, ofs){
     /*<<+marshal.js:279:2>>*/ function readvlq(overflow){
      /*<<+marshal.js:280:4>>*/ var
       /*<<+marshal.js:280:10>>*/ c =
         /*<<+marshal.js:280:12>>*/ reader.read8u(),
       /*<<+marshal.js:281:10>>*/ n = c & 0x7F;
      /*<<+marshal.js:282:4>>*/ while((c & 0x80) != 0) /*<<+marshal.js:282:28>>*/ {
       /*<<+marshal.js:283:6>>*/ c =
        /*<<+marshal.js:283:10>>*/ reader.read8u();
       /*<<+marshal.js:284:6>>*/  /*<<+marshal.js:284:13>>*/ var n7 = n << 7;
       /*<<+marshal.js:285:6>>*/ if(n != n7 >> 7)
        /*<<+marshal.js:285:24>>*/ overflow[0] = true;
       /*<<+marshal.js:286:6>>*/ n = n7 | c & 0x7F;
     }
      /*<<+marshal.js:288:4>>*/ return n;
     /*<<+marshal.js:289:2>>*/ }
     /*<<+marshal.js:290:2>>*/  /*<<+marshal.js:290:12>>*/ var
     magic =  /*<<+marshal.js:290:14>>*/ reader.read32u();
     /*<<+marshal.js:291:2>>*/ switch(magic){
      case 0x8495A6BE:
        /*<<+marshal.js:293:4>>*/ var
         /*<<+marshal.js:293:19>>*/ header_len = 20,
         /*<<+marshal.js:294:19>>*/ compressed = 0,
         /*<<+marshal.js:295:17>>*/ data_len =
           /*<<+marshal.js:295:19>>*/ reader.read32u(),
         /*<<+marshal.js:296:30>>*/ uncompressed_data_len = data_len,
         /*<<+marshal.js:297:20>>*/ num_objects =
           /*<<+marshal.js:297:22>>*/ reader.read32u(),
         /*<<+marshal.js:298:17>>*/ _size_32 =
           /*<<+marshal.js:298:19>>*/ reader.read32u(),
         /*<<+marshal.js:299:17>>*/ _size_64 =
           /*<<+marshal.js:299:19>>*/ reader.read32u();
        /*<<+marshal.js:300:4>>*/ break;
      case 0x8495A6BD:
        /*<<+marshal.js:302:4>>*/ var
         /*<<+marshal.js:302:19>>*/ header_len =
           /*<<+marshal.js:302:21>>*/ reader.read8u() & 0x3F,
         /*<<+marshal.js:303:19>>*/ compressed = 1,
         /*<<+marshal.js:304:17>>*/ overflow = [false],
         /*<<+marshal.js:305:17>>*/ data_len =
           /*<<+marshal.js:305:19>>*/ readvlq(overflow),
         /*<<+marshal.js:306:30>>*/ uncompressed_data_len =
           /*<<+marshal.js:306:32>>*/ readvlq(overflow),
         /*<<+marshal.js:307:20>>*/ num_objects =
           /*<<+marshal.js:307:22>>*/ readvlq(overflow),
         /*<<+marshal.js:308:17>>*/ _size_32 =
           /*<<+marshal.js:308:19>>*/ readvlq(overflow),
         /*<<+marshal.js:309:17>>*/ _size_64 =
           /*<<+marshal.js:309:19>>*/ readvlq(overflow);
        /*<<+marshal.js:310:4>>*/ if(overflow[0])
         /*<<+marshal.js:310:19>>*/  /*<<+marshal.js:311:8>>*/ caml_failwith
         ("caml_input_value_from_reader: object too large to be read back on this platform");
        /*<<+marshal.js:313:4>>*/ break;
      case 0x8495A6BF:
        /*<<+marshal.js:315:4>>*/  /*<<+marshal.js:315:4>>*/ caml_failwith
        ("caml_input_value_from_reader: object too large to be read back on a 32-bit platform");
        /*<<+marshal.js:316:4>>*/ break;
      default:
        /*<<+marshal.js:318:4>>*/  /*<<+marshal.js:318:4>>*/ caml_failwith
        ("caml_input_value_from_reader: bad object");
        /*<<+marshal.js:319:4>>*/ break;
    }
     /*<<+marshal.js:321:2>>*/ var
      /*<<+marshal.js:321:12>>*/ stack = [],
      /*<<+marshal.js:322:23>>*/ intern_obj_table =
       num_objects > 0 ? [] : null,
      /*<<+marshal.js:323:18>>*/ obj_counter = 0;
     /*<<+marshal.js:324:2>>*/ function intern_rec(reader){
      /*<<+marshal.js:325:4>>*/  /*<<+marshal.js:325:13>>*/ var
      code =  /*<<+marshal.js:325:15>>*/ reader.read8u();
      /*<<+marshal.js:326:4>>*/ if(code >= 0x40)
       /*<<+marshal.js:326:47>>*/ if(code >= 0x80) /*<<+marshal.js:327:51>>*/ {
        /*<<+marshal.js:328:8>>*/ var
         /*<<+marshal.js:328:16>>*/ tag = code & 0xF,
         /*<<+marshal.js:329:17>>*/ size = code >> 4 & 0x7,
         /*<<+marshal.js:330:14>>*/ v = [tag];
        /*<<+marshal.js:331:8>>*/ if(size == 0)
         /*<<+marshal.js:331:23>>*/ return v;
        /*<<+marshal.js:332:8>>*/ if(intern_obj_table)
         /*<<+marshal.js:332:30>>*/ intern_obj_table[obj_counter++] = v;
        /*<<+marshal.js:333:8>>*/  /*<<+marshal.js:333:8>>*/ stack.push
        (v, size);
        /*<<+marshal.js:334:8>>*/ return v;
      }
      else
        /*<<+marshal.js:336:8>>*/ return code & 0x3F;
     else if(code >= 0x20) /*<<+marshal.js:338:52>>*/ {
       /*<<+marshal.js:339:8>>*/ var
        /*<<+marshal.js:339:16>>*/ len = code & 0x1F,
        /*<<+marshal.js:340:14>>*/ v =
          /*<<+marshal.js:340:16>>*/ reader.readstr(len);
       /*<<+marshal.js:341:8>>*/ if(intern_obj_table)
        /*<<+marshal.js:341:30>>*/ intern_obj_table[obj_counter++] = v;
       /*<<+marshal.js:342:8>>*/ return v;
     }
     else
       /*<<+marshal.js:343:13>>*/ switch(code){
        case 0x00:
          /*<<+marshal.js:346:10>>*/ return  /*<<+marshal.js:346:17>>*/ reader.read8s
                 ();
        case 0x01:
          /*<<+marshal.js:348:10>>*/ return  /*<<+marshal.js:348:17>>*/ reader.read16s
                 ();
        case 0x02:
          /*<<+marshal.js:350:10>>*/ return  /*<<+marshal.js:350:17>>*/ reader.read32s
                 ();
        case 0x03:
          /*<<+marshal.js:352:10>>*/  /*<<+marshal.js:352:10>>*/ caml_failwith
          ("input_value: integer too large");
          /*<<+marshal.js:353:10>>*/ break;
        case 0x04:
          /*<<+marshal.js:355:10>>*/  /*<<+marshal.js:355:21>>*/ var
          offset =  /*<<+marshal.js:355:23>>*/ reader.read8u();
          /*<<+marshal.js:356:10>>*/ if(compressed == 0)
           /*<<+marshal.js:356:30>>*/ offset = obj_counter - offset;
          /*<<+marshal.js:357:10>>*/ return intern_obj_table[offset];
        case 0x05:
          /*<<+marshal.js:359:10>>*/  /*<<+marshal.js:359:21>>*/ var
          offset =  /*<<+marshal.js:359:23>>*/ reader.read16u();
          /*<<+marshal.js:360:10>>*/ if(compressed == 0)
           /*<<+marshal.js:360:30>>*/ offset = obj_counter - offset;
          /*<<+marshal.js:361:10>>*/ return intern_obj_table[offset];
        case 0x06:
          /*<<+marshal.js:363:10>>*/  /*<<+marshal.js:363:21>>*/ var
          offset =  /*<<+marshal.js:363:23>>*/ reader.read32u();
          /*<<+marshal.js:364:10>>*/ if(compressed == 0)
           /*<<+marshal.js:364:30>>*/ offset = obj_counter - offset;
          /*<<+marshal.js:365:10>>*/ return intern_obj_table[offset];
        case 0x08:
          /*<<+marshal.js:367:10>>*/ var
           /*<<+marshal.js:367:21>>*/ header =
             /*<<+marshal.js:367:23>>*/ reader.read32u(),
           /*<<+marshal.js:368:18>>*/ tag = header & 0xFF,
           /*<<+marshal.js:369:19>>*/ size = header >> 10,
           /*<<+marshal.js:370:16>>*/ v = [tag];
          /*<<+marshal.js:371:10>>*/ if(size == 0)
           /*<<+marshal.js:371:25>>*/ return v;
          /*<<+marshal.js:372:10>>*/ if(intern_obj_table)
           /*<<+marshal.js:372:32>>*/ intern_obj_table[obj_counter++] = v;
          /*<<+marshal.js:373:10>>*/  /*<<+marshal.js:373:10>>*/ stack.push
          (v, size);
          /*<<+marshal.js:374:10>>*/ return v;
        case 0x13:
          /*<<+marshal.js:376:10>>*/  /*<<+marshal.js:376:10>>*/ caml_failwith
          ("input_value: data block too large");
          /*<<+marshal.js:377:10>>*/ break;
        case 0x09:
          /*<<+marshal.js:379:10>>*/ var
           /*<<+marshal.js:379:18>>*/ len =
             /*<<+marshal.js:379:20>>*/ reader.read8u(),
           /*<<+marshal.js:380:16>>*/ v =
             /*<<+marshal.js:380:18>>*/ reader.readstr(len);
          /*<<+marshal.js:381:10>>*/ if(intern_obj_table)
           /*<<+marshal.js:381:32>>*/ intern_obj_table[obj_counter++] = v;
          /*<<+marshal.js:382:10>>*/ return v;
        case 0x0A:
          /*<<+marshal.js:384:10>>*/ var
           /*<<+marshal.js:384:18>>*/ len =
             /*<<+marshal.js:384:20>>*/ reader.read32u(),
           /*<<+marshal.js:385:16>>*/ v =
             /*<<+marshal.js:385:18>>*/ reader.readstr(len);
          /*<<+marshal.js:386:10>>*/ if(intern_obj_table)
           /*<<+marshal.js:386:32>>*/ intern_obj_table[obj_counter++] = v;
          /*<<+marshal.js:387:10>>*/ return v;
        case 0x0C:
          /*<<+marshal.js:389:10>>*/  /*<<+marshal.js:389:16>>*/ var
          t = new Array(8);
          /*<<+marshal.js:390:10>>*/ for
         ( /*<<+marshal.js:390:21>>*/ var i = 0; i < 8; i++)
           /*<<+marshal.js:390:36>>*/ t[7 - i] =
            /*<<+marshal.js:390:47>>*/ reader.read8u();
          /*<<+marshal.js:391:10>>*/  /*<<+marshal.js:391:16>>*/ var
          v =  /*<<+marshal.js:391:18>>*/ caml_float_of_bytes(t);
          /*<<+marshal.js:392:10>>*/ if(intern_obj_table)
           /*<<+marshal.js:392:32>>*/ intern_obj_table[obj_counter++] = v;
          /*<<+marshal.js:393:10>>*/ return v;
        case 0x0B:
          /*<<+marshal.js:395:10>>*/  /*<<+marshal.js:395:16>>*/ var
          t = new Array(8);
          /*<<+marshal.js:396:10>>*/ for
         ( /*<<+marshal.js:396:21>>*/ var i = 0; i < 8; i++)
           /*<<+marshal.js:396:36>>*/ t[i] =
            /*<<+marshal.js:396:43>>*/ reader.read8u();
          /*<<+marshal.js:397:10>>*/  /*<<+marshal.js:397:16>>*/ var
          v =  /*<<+marshal.js:397:18>>*/ caml_float_of_bytes(t);
          /*<<+marshal.js:398:10>>*/ if(intern_obj_table)
           /*<<+marshal.js:398:32>>*/ intern_obj_table[obj_counter++] = v;
          /*<<+marshal.js:399:10>>*/ return v;
        case 0x0E:
          /*<<+marshal.js:401:10>>*/ var
           /*<<+marshal.js:401:18>>*/ len =
             /*<<+marshal.js:401:20>>*/ reader.read8u(),
           /*<<+marshal.js:402:16>>*/ v = new Array(len + 1);
          /*<<+marshal.js:403:10>>*/ v[0] = 254;
          /*<<+marshal.js:404:10>>*/  /*<<+marshal.js:404:16>>*/ var
          t = new Array(8);
          /*<<+marshal.js:405:10>>*/ if(intern_obj_table)
           /*<<+marshal.js:405:32>>*/ intern_obj_table[obj_counter++] = v;
          /*<<+marshal.js:406:10>>*/ for
         ( /*<<+marshal.js:406:21>>*/ var i = 1; i <= len; i++) /*<<+marshal.js:406:39>>*/ {
           /*<<+marshal.js:407:12>>*/ for
          ( /*<<+marshal.js:407:23>>*/ var j = 0; j < 8; j++)
            /*<<+marshal.js:407:38>>*/ t[7 - j] =
             /*<<+marshal.js:407:49>>*/ reader.read8u();
           /*<<+marshal.js:408:12>>*/ v[i] =
            /*<<+marshal.js:408:19>>*/ caml_float_of_bytes(t);
         }
          /*<<+marshal.js:410:10>>*/ return v;
        case 0x0D:
          /*<<+marshal.js:412:10>>*/ var
           /*<<+marshal.js:412:18>>*/ len =
             /*<<+marshal.js:412:20>>*/ reader.read8u(),
           /*<<+marshal.js:413:16>>*/ v = new Array(len + 1);
          /*<<+marshal.js:414:10>>*/ v[0] = 254;
          /*<<+marshal.js:415:10>>*/  /*<<+marshal.js:415:16>>*/ var
          t = new Array(8);
          /*<<+marshal.js:416:10>>*/ if(intern_obj_table)
           /*<<+marshal.js:416:32>>*/ intern_obj_table[obj_counter++] = v;
          /*<<+marshal.js:417:10>>*/ for
         ( /*<<+marshal.js:417:21>>*/ var i = 1; i <= len; i++) /*<<+marshal.js:417:39>>*/ {
           /*<<+marshal.js:418:12>>*/ for
          ( /*<<+marshal.js:418:23>>*/ var j = 0; j < 8; j++)
            /*<<+marshal.js:418:38>>*/ t[j] =
             /*<<+marshal.js:418:45>>*/ reader.read8u();
           /*<<+marshal.js:419:12>>*/ v[i] =
            /*<<+marshal.js:419:20>>*/ caml_float_of_bytes(t);
         }
          /*<<+marshal.js:421:10>>*/ return v;
        case 0x07:
          /*<<+marshal.js:423:10>>*/ var
           /*<<+marshal.js:423:18>>*/ len =
             /*<<+marshal.js:423:20>>*/ reader.read32u(),
           /*<<+marshal.js:424:16>>*/ v = new Array(len + 1);
          /*<<+marshal.js:425:10>>*/ v[0] = 254;
          /*<<+marshal.js:426:10>>*/ if(intern_obj_table)
           /*<<+marshal.js:426:32>>*/ intern_obj_table[obj_counter++] = v;
          /*<<+marshal.js:427:10>>*/  /*<<+marshal.js:427:16>>*/ var
          t = new Array(8);
          /*<<+marshal.js:428:10>>*/ for
         ( /*<<+marshal.js:428:21>>*/ var i = 1; i <= len; i++) /*<<+marshal.js:428:39>>*/ {
           /*<<+marshal.js:429:12>>*/ for
          ( /*<<+marshal.js:429:23>>*/ var j = 0; j < 8; j++)
            /*<<+marshal.js:429:38>>*/ t[7 - j] =
             /*<<+marshal.js:429:49>>*/ reader.read8u();
           /*<<+marshal.js:430:12>>*/ v[i] =
            /*<<+marshal.js:430:19>>*/ caml_float_of_bytes(t);
         }
          /*<<+marshal.js:432:10>>*/ return v;
        case 0x0F:
          /*<<+marshal.js:434:10>>*/ var
           /*<<+marshal.js:434:18>>*/ len =
             /*<<+marshal.js:434:20>>*/ reader.read32u(),
           /*<<+marshal.js:435:16>>*/ v = new Array(len + 1);
          /*<<+marshal.js:436:10>>*/ v[0] = 254;
          /*<<+marshal.js:437:10>>*/  /*<<+marshal.js:437:16>>*/ var
          t = new Array(8);
          /*<<+marshal.js:438:10>>*/ for
         ( /*<<+marshal.js:438:21>>*/ var i = 1; i <= len; i++) /*<<+marshal.js:438:39>>*/ {
           /*<<+marshal.js:439:12>>*/ for
          ( /*<<+marshal.js:439:23>>*/ var j = 0; j < 8; j++)
            /*<<+marshal.js:439:38>>*/ t[j] =
             /*<<+marshal.js:439:45>>*/ reader.read8u();
           /*<<+marshal.js:440:12>>*/ v[i] =
            /*<<+marshal.js:440:20>>*/ caml_float_of_bytes(t);
         }
          /*<<+marshal.js:442:10>>*/ return v;
        case 0x10:
        case 0x11:
          /*<<+marshal.js:445:10>>*/  /*<<+marshal.js:445:10>>*/ caml_failwith
          ("input_value: code pointer");
          /*<<+marshal.js:446:10>>*/ break;
        case 0x12:
        case 0x18:
        case 0x19:
          /*<<+marshal.js:450:10>>*/ var
          c,
           /*<<+marshal.js:450:19>>*/ s = "";
          /*<<+marshal.js:451:10>>*/ while
         ((c =  /*<<+marshal.js:451:22>>*/ reader.read8u()) != 0)
           /*<<+marshal.js:451:46>>*/ s +=
            /*<<+marshal.js:451:51>>*/ String.fromCharCode(c);
          /*<<+marshal.js:452:10>>*/ var
           /*<<+marshal.js:452:18>>*/ ops = caml_custom_ops[s],
          expected_size;
          /*<<+marshal.js:454:10>>*/ if(! ops)
           /*<<+marshal.js:455:12>>*/  /*<<+marshal.js:455:12>>*/ caml_failwith
           ("input_value: unknown custom block identifier");
          /*<<+marshal.js:456:10>>*/ switch(code){
           case 0x12:
             /*<<+marshal.js:458:12>>*/ break;
           case 0x19:
             /*<<+marshal.js:460:12>>*/ if(! ops.fixed_length)
              /*<<+marshal.js:461:14>>*/  /*<<+marshal.js:461:14>>*/ caml_failwith
              ("input_value: expected a fixed-size custom block");
             /*<<+marshal.js:462:12>>*/ expected_size = ops.fixed_length;
             /*<<+marshal.js:463:12>>*/ break;
           case 0x18:
             /*<<+marshal.js:465:12>>*/ expected_size =
              /*<<+marshal.js:465:28>>*/ reader.read32u();
             /*<<+marshal.js:467:12>>*/  /*<<+marshal.js:467:12>>*/ reader.read32s
             ();
             /*<<+marshal.js:467:30>>*/  /*<<+marshal.js:467:30>>*/ reader.read32s
             ();
             /*<<+marshal.js:468:12>>*/ break;
         }
          /*<<+marshal.js:470:10>>*/ var
           /*<<+marshal.js:470:22>>*/ old_pos = reader.i,
           /*<<+marshal.js:471:19>>*/ size = [0],
           /*<<+marshal.js:472:16>>*/ v =
             /*<<+marshal.js:472:18>>*/ ops.deserialize(reader, size);
          /*<<+marshal.js:473:10>>*/ if(expected_size != undefined)
           /*<<+marshal.js:473:40>>*/ if(expected_size != size[0])
            /*<<+marshal.js:475:14>>*/  /*<<+marshal.js:475:14>>*/ caml_failwith
            ("input_value: incorrect length of serialized custom block");
          /*<<+marshal.js:477:10>>*/ if(intern_obj_table)
           /*<<+marshal.js:477:32>>*/ intern_obj_table[obj_counter++] = v;
          /*<<+marshal.js:478:10>>*/ return v;
        default:
          /*<<+marshal.js:480:10>>*/  /*<<+marshal.js:480:10>>*/ caml_failwith
          ("input_value: ill-formed message");
      }
     /*<<+marshal.js:484:2>>*/ }
     /*<<+marshal.js:485:2>>*/ if(compressed)
      /*<<+marshal.js:485:17>>*/ if(caml_decompress_input)
       /*<<+marshal.js:487:6>>*/ var
        /*<<+marshal.js:487:15>>*/ data =
          /*<<+marshal.js:487:17>>*/ reader.readuint8array(data_len),
        /*<<+marshal.js:488:14>>*/ res = new Uint8Array(uncompressed_data_len),
        /*<<+marshal.js:489:14>>*/ res =
          /*<<+marshal.js:489:16>>*/ caml_decompress_input(data, res),
        /*<<+marshal.js:490:17>>*/ reader = new UInt8ArrayReader(res, 0);
     else
       /*<<+marshal.js:491:11>>*/  /*<<+marshal.js:492:6>>*/ caml_failwith
       ("input_value: compressed object, cannot decompress");
     /*<<+marshal.js:495:2>>*/  /*<<+marshal.js:495:10>>*/ var
     res =  /*<<+marshal.js:495:12>>*/ intern_rec(reader);
     /*<<+marshal.js:496:2>>*/ while(stack.length > 0) /*<<+marshal.js:496:27>>*/ {
      /*<<+marshal.js:497:4>>*/ var
       /*<<+marshal.js:497:13>>*/ size =
         /*<<+marshal.js:497:15>>*/ stack.pop(),
       /*<<+marshal.js:498:10>>*/ v =  /*<<+marshal.js:498:12>>*/ stack.pop(),
       /*<<+marshal.js:499:10>>*/ d = v.length;
      /*<<+marshal.js:500:4>>*/ if(d < size)
       /*<<+marshal.js:500:18>>*/  /*<<+marshal.js:500:18>>*/ stack.push
       (v, size);
      /*<<+marshal.js:501:4>>*/ v[d] =
       /*<<+marshal.js:501:11>>*/ intern_rec(reader);
    }
     /*<<+marshal.js:503:2>>*/ if(typeof ofs != "number")
      /*<<+marshal.js:503:28>>*/ ofs[0] = reader.i;
     /*<<+marshal.js:504:2>>*/ return res;
    /*<<+marshal.js:505:0>>*/ }
    /*<<+mlBytes.js:695:0>>*/ function caml_string_of_bytes(s){
     /*<<+mlBytes.js:696:2>>*/ s.t & 6
    &&  /*<<+mlBytes.js:696:15>>*/ caml_convert_string_to_bytes(s);
     /*<<+mlBytes.js:697:2>>*/ return  /*<<+mlBytes.js:697:9>>*/ caml_string_of_jsbytes
            (s.c);
    /*<<+mlBytes.js:698:0>>*/ }
    /*<<+marshal.js:198:0>>*/ function caml_input_value_from_bytes(s, ofs){
     /*<<+marshal.js:199:2>>*/  /*<<+marshal.js:199:13>>*/ var
     reader =
       new
        MlStringReader
        ( /*<<+marshal.js:199:35>>*/ caml_string_of_bytes(s),
         typeof ofs == "number" ? ofs : ofs[0]);
     /*<<+marshal.js:200:2>>*/ return  /*<<+marshal.js:200:9>>*/ caml_input_value_from_reader
            (reader, ofs);
    /*<<+marshal.js:201:0>>*/ }
    /*<<+int64.js:225:0>>*/ function caml_int64_add(x, y){
     /*<<+int64.js:225:33>>*/ return  /*<<+int64.js:225:40>>*/ x.add(y);
    /*<<+int64.js:225:49>>*/ }
    /*<<+int64.js:241:0>>*/ function caml_int64_and(x, y){
     /*<<+int64.js:241:33>>*/ return  /*<<+int64.js:241:40>>*/ x.and(y);
    /*<<+int64.js:241:50>>*/ }
    /*<<+int64.js:259:0>>*/ function caml_int64_div(x, y){
     /*<<+int64.js:259:33>>*/ return  /*<<+int64.js:259:40>>*/ x.div(y);
    /*<<+int64.js:259:49>>*/ }
    /*<<+int64.js:235:0>>*/ function caml_int64_is_zero(x){
     /*<<+int64.js:235:33>>*/ return +  /*<<+int64.js:235:41>>*/ x.isZero();
    /*<<+int64.js:235:53>>*/ }
    /*<<+int64.js:266:0>>*/ function caml_int64_of_int32(x){
     /*<<+int64.js:267:2>>*/ return new
            MlInt64
            (x & 0xffffff, x >> 24 & 0xffffff, x >> 31 & 0xffff);
    /*<<+int64.js:268:0>>*/ }
    /*<<+int64.js:271:0>>*/ function caml_int64_to_int32(x){
     /*<<+int64.js:271:35>>*/ return  /*<<+int64.js:271:42>>*/ x.toInt();
    /*<<+int64.js:271:52>>*/ }
    /*<<+int64.js:238:0>>*/ function caml_int64_is_negative(x){
     /*<<+int64.js:238:37>>*/ return +  /*<<+int64.js:238:45>>*/ x.isNeg();
    /*<<+int64.js:238:56>>*/ }
    /*<<+int64.js:222:0>>*/ function caml_int64_neg(x){
     /*<<+int64.js:222:30>>*/ return  /*<<+int64.js:222:37>>*/ x.neg();
    /*<<+int64.js:222:45>>*/ }
    /*<<+int64.js:291:0>>*/ function caml_int64_format(fmt, x){
     /*<<+int64.js:292:2>>*/  /*<<+int64.js:292:8>>*/ var
     f =  /*<<+int64.js:292:10>>*/ caml_parse_format(fmt);
     /*<<+int64.js:293:2>>*/ if
     (f.signedconv &&  /*<<+int64.js:293:22>>*/ caml_int64_is_negative(x)) /*<<+int64.js:293:49>>*/ {
      /*<<+int64.js:294:4>>*/ f.sign = - 1;
      /*<<+int64.js:294:17>>*/ x =  /*<<+int64.js:294:21>>*/ caml_int64_neg(x);
    }
     /*<<+int64.js:296:2>>*/ var
      /*<<+int64.js:296:13>>*/ buffer = "",
      /*<<+int64.js:297:12>>*/ wbase =
        /*<<+int64.js:297:14>>*/ caml_int64_of_int32(f.base),
      /*<<+int64.js:298:12>>*/ cvtbl = "0123456789abcdef";
     /*<<+int64.js:299:2>>*/ do /*<<+int64.js:299:5>>*/ {
      /*<<+int64.js:300:4>>*/  /*<<+int64.js:300:10>>*/ var
      p =  /*<<+int64.js:300:12>>*/ x.udivmod(wbase);
      /*<<+int64.js:301:4>>*/ x = p.quotient;
      /*<<+int64.js:302:4>>*/ buffer =
       /*<<+int64.js:302:13>>*/ cvtbl.charAt
       ( /*<<+int64.js:302:26>>*/ caml_int64_to_int32(p.modulus))
      + buffer;
    }
    while
     (!  /*<<+int64.js:303:13>>*/ caml_int64_is_zero(x));
     /*<<+int64.js:304:2>>*/ if(f.prec >= 0) /*<<+int64.js:304:19>>*/ {
      /*<<+int64.js:305:4>>*/ f.filler = " ";
      /*<<+int64.js:306:4>>*/  /*<<+int64.js:306:10>>*/ var
      n = f.prec - buffer.length;
      /*<<+int64.js:307:4>>*/ if(n > 0)
       /*<<+int64.js:307:15>>*/ buffer =
        /*<<+int64.js:307:24>>*/ caml_str_repeat(n, "0") + buffer;
    }
     /*<<+int64.js:309:2>>*/ return  /*<<+int64.js:309:9>>*/ caml_finish_formatting
            (f, buffer);
    /*<<+int64.js:310:0>>*/ }
    /*<<+int64.js:262:0>>*/ function caml_int64_mod(x, y){
     /*<<+int64.js:262:33>>*/ return  /*<<+int64.js:262:40>>*/ x.mod(y);
    /*<<+int64.js:262:49>>*/ }
    /*<<+int64.js:232:0>>*/ function caml_int64_mul(x, y){
     /*<<+int64.js:232:31>>*/ return  /*<<+int64.js:232:38>>*/ x.mul(y);
    /*<<+int64.js:232:47>>*/ }
    /*<<+int64.js:278:0>>*/ function caml_int64_of_float(x){
     /*<<+int64.js:279:2>>*/ if(x < 0)
      /*<<+int64.js:279:13>>*/ x =  /*<<+int64.js:279:17>>*/ Math.ceil(x);
     /*<<+int64.js:280:2>>*/ return new
            MlInt64
            (x & 0xffffff,
              /*<<+int64.js:282:4>>*/ Math.floor(x * caml_int64_offset)
             & 0xffffff,
              /*<<+int64.js:283:4>>*/ Math.floor
              (x * caml_int64_offset * caml_int64_offset)
             & 0xffff);
    /*<<+int64.js:284:0>>*/ }
    /*<<+int64.js:216:0>>*/ function caml_int64_ult(x, y){
     /*<<+int64.js:216:31>>*/ return  /*<<+int64.js:216:38>>*/ x.ucompare(y)
           < 0;
    /*<<+int64.js:216:57>>*/ }
    /*<<+ints.js:36:0>>*/ function caml_parse_sign_and_base(s){
     /*<<+ints.js:37:2>>*/ var
      /*<<+ints.js:37:8>>*/ i = 0,
      /*<<+ints.js:37:17>>*/ len =
        /*<<+ints.js:37:19>>*/ caml_ml_string_length(s),
      /*<<+ints.js:37:50>>*/ base = 10,
      /*<<+ints.js:37:61>>*/ sign = 1;
     /*<<+ints.js:38:2>>*/ if(len > 0)
      /*<<+ints.js:38:15>>*/ switch
      ( /*<<+ints.js:39:12>>*/ caml_string_unsafe_get(s, i)){
       case 45:
         /*<<+ints.js:40:13>>*/ i++;
         /*<<+ints.js:40:18>>*/ sign = - 1;
         /*<<+ints.js:40:29>>*/ break;
       case 43:
         /*<<+ints.js:41:13>>*/ i++;
         /*<<+ints.js:41:18>>*/ sign = 1;
         /*<<+ints.js:41:28>>*/ break;
     }
     /*<<+ints.js:44:2>>*/ if
     (i + 1 < len
      &&  /*<<+ints.js:44:21>>*/ caml_string_unsafe_get(s, i) == 48)
      /*<<+ints.js:45:4>>*/ switch
      ( /*<<+ints.js:45:12>>*/ caml_string_unsafe_get(s, i + 1)){
       case 120:
       case 88:
         /*<<+ints.js:46:23>>*/ base = 16;
         /*<<+ints.js:46:34>>*/ i += 2;
         /*<<+ints.js:46:42>>*/ break;
       case 111:
       case 79:
         /*<<+ints.js:47:23>>*/ base = 8;
         /*<<+ints.js:47:34>>*/ i += 2;
         /*<<+ints.js:47:42>>*/ break;
       case 98:
       case 66:
         /*<<+ints.js:48:23>>*/ base = 2;
         /*<<+ints.js:48:34>>*/ i += 2;
         /*<<+ints.js:48:42>>*/ break;
       case 117:
       case 85:
         /*<<+ints.js:49:23>>*/ i += 2;  /*<<+ints.js:49:31>>*/ break;
     }
     /*<<+ints.js:51:2>>*/ return [i, sign, base];
    /*<<+ints.js:52:0>>*/ }
    /*<<+ints.js:55:0>>*/ function caml_parse_digit(c){
     /*<<+ints.js:56:2>>*/ if(c >= 48 && c <= 57)
      /*<<+ints.js:56:27>>*/ return c - 48;
     /*<<+ints.js:57:2>>*/ if(c >= 65 && c <= 90)
      /*<<+ints.js:57:27>>*/ return c - 55;
     /*<<+ints.js:58:2>>*/ if(c >= 97 && c <= 122)
      /*<<+ints.js:58:27>>*/ return c - 87;
     /*<<+ints.js:59:2>>*/ return - 1;
    /*<<+ints.js:60:0>>*/ }
    /*<<+int64.js:317:0>>*/ function caml_int64_of_string(s){
     /*<<+int64.js:318:2>>*/ var
      /*<<+int64.js:318:8>>*/ r =
        /*<<+int64.js:318:10>>*/ caml_parse_sign_and_base(s),
      /*<<+int64.js:319:8>>*/ i = r[0],
      /*<<+int64.js:319:21>>*/ sign = r[1],
      /*<<+int64.js:319:34>>*/ base = r[2],
      /*<<+int64.js:320:13>>*/ base64 =
        /*<<+int64.js:320:15>>*/ caml_int64_of_int32(base),
      /*<<+int64.js:321:16>>*/ threshold =
        /*<<+int64.js:322:6>>*/ new MlInt64(0xffffff, 0xfffffff, 0xffff).udivmod
        (base64).quotient,
      /*<<+int64.js:323:8>>*/ c =
        /*<<+int64.js:323:10>>*/ caml_string_unsafe_get(s, i),
      /*<<+int64.js:324:8>>*/ d =
        /*<<+int64.js:324:10>>*/ caml_parse_digit(c);
     /*<<+int64.js:325:2>>*/ if(d < 0 || d >= base)
      /*<<+int64.js:325:26>>*/  /*<<+int64.js:325:26>>*/ caml_failwith
      ("int_of_string");
     /*<<+int64.js:326:2>>*/  /*<<+int64.js:326:10>>*/ var
     res =  /*<<+int64.js:326:12>>*/ caml_int64_of_int32(d);
     /*<<+int64.js:327:2>>*/ for(;;) /*<<+int64.js:327:11>>*/ {
      /*<<+int64.js:328:4>>*/ i++;
      /*<<+int64.js:329:4>>*/ c =
       /*<<+int64.js:329:8>>*/ caml_string_unsafe_get(s, i);
      /*<<+int64.js:330:4>>*/ if(c == 95)  /*<<+int64.js:330:17>>*/ continue;
      /*<<+int64.js:331:4>>*/ d =  /*<<+int64.js:331:8>>*/ caml_parse_digit(c);
      /*<<+int64.js:332:4>>*/ if(d < 0 || d >= base)
       /*<<+int64.js:332:28>>*/ break;
      /*<<+int64.js:334:4>>*/ if
      ( /*<<+int64.js:334:8>>*/ caml_int64_ult(threshold, res))
       /*<<+int64.js:334:40>>*/  /*<<+int64.js:334:40>>*/ caml_failwith
       ("int_of_string");
      /*<<+int64.js:335:4>>*/ d =
       /*<<+int64.js:335:8>>*/ caml_int64_of_int32(d);
      /*<<+int64.js:336:4>>*/ res =
       /*<<+int64.js:336:10>>*/ caml_int64_add
       ( /*<<+int64.js:336:25>>*/ caml_int64_mul(base64, res), d);
      /*<<+int64.js:338:4>>*/ if
      ( /*<<+int64.js:338:8>>*/ caml_int64_ult(res, d))
       /*<<+int64.js:338:32>>*/  /*<<+int64.js:338:32>>*/ caml_failwith
       ("int_of_string");
    }
     /*<<+int64.js:340:2>>*/ if
     (i !=  /*<<+int64.js:340:11>>*/ caml_ml_string_length(s))
      /*<<+int64.js:340:37>>*/  /*<<+int64.js:340:37>>*/ caml_failwith
      ("int_of_string");
     /*<<+int64.js:341:2>>*/ if
     (base == 10
      &&
        /*<<+int64.js:341:20>>*/ caml_int64_ult
        (new MlInt64(0, 0, 0x8000), res))
      /*<<+int64.js:342:4>>*/  /*<<+int64.js:342:4>>*/ caml_failwith
      ("int_of_string");
     /*<<+int64.js:343:2>>*/ if(sign < 0)
      /*<<+int64.js:343:16>>*/ res =
       /*<<+int64.js:343:22>>*/ caml_int64_neg(res);
     /*<<+int64.js:344:2>>*/ return res;
    /*<<+int64.js:345:0>>*/ }
    /*<<+int64.js:244:0>>*/ function caml_int64_or(x, y){
     /*<<+int64.js:244:32>>*/ return  /*<<+int64.js:244:39>>*/ x.or(y);
    /*<<+int64.js:244:48>>*/ }
    /*<<+int64.js:256:0>>*/ function caml_int64_shift_right(x, s){
     /*<<+int64.js:256:41>>*/ return  /*<<+int64.js:256:48>>*/ x.shift_right
            (s);
    /*<<+int64.js:256:65>>*/ }
    /*<<+int64.js:253:0>>*/ function caml_int64_shift_right_unsigned(x, s){
     /*<<+int64.js:253:50>>*/ return  /*<<+int64.js:253:57>>*/ x.shift_right_unsigned
            (s);
    /*<<+int64.js:253:83>>*/ }
    /*<<+int64.js:228:0>>*/ function caml_int64_sub(x, y){
     /*<<+int64.js:228:33>>*/ return  /*<<+int64.js:228:40>>*/ x.sub(y);
    /*<<+int64.js:228:49>>*/ }
    /*<<+int64.js:274:0>>*/ function caml_int64_to_float(x){
     /*<<+int64.js:274:35>>*/ return  /*<<+int64.js:274:42>>*/ x.toFloat();
    /*<<+int64.js:274:55>>*/ }
    /*<<+ints.js:65:0>>*/ function caml_int_of_string(s){
     /*<<+ints.js:66:2>>*/ var
      /*<<+ints.js:66:8>>*/ r =
        /*<<+ints.js:66:10>>*/ caml_parse_sign_and_base(s),
      /*<<+ints.js:67:8>>*/ i = r[0],
      /*<<+ints.js:67:21>>*/ sign = r[1],
      /*<<+ints.js:67:34>>*/ base = r[2],
      /*<<+ints.js:68:10>>*/ len =
        /*<<+ints.js:68:12>>*/ caml_ml_string_length(s),
      /*<<+ints.js:69:16>>*/ threshold = - 1 >>> 0,
      /*<<+ints.js:70:8>>*/ c =
       i < len ?  /*<<+ints.js:70:20>>*/ caml_string_unsafe_get(s, i) : 0,
      /*<<+ints.js:71:8>>*/ d =  /*<<+ints.js:71:10>>*/ caml_parse_digit(c);
     /*<<+ints.js:72:2>>*/ if(d < 0 || d >= base)
      /*<<+ints.js:72:26>>*/  /*<<+ints.js:72:26>>*/ caml_failwith
      ("int_of_string");
     /*<<+ints.js:73:2>>*/  /*<<+ints.js:73:10>>*/ var res = d;
     /*<<+ints.js:74:2>>*/ for(i++; i < len; i++) /*<<+ints.js:74:22>>*/ {
      /*<<+ints.js:75:4>>*/ c =
       /*<<+ints.js:75:8>>*/ caml_string_unsafe_get(s, i);
      /*<<+ints.js:76:4>>*/ if(c == 95)  /*<<+ints.js:76:17>>*/ continue;
      /*<<+ints.js:77:4>>*/ d =  /*<<+ints.js:77:8>>*/ caml_parse_digit(c);
      /*<<+ints.js:78:4>>*/ if(d < 0 || d >= base)
       /*<<+ints.js:78:28>>*/ break;
      /*<<+ints.js:79:4>>*/ res = base * res + d;
      /*<<+ints.js:80:4>>*/ if(res > threshold)
       /*<<+ints.js:80:25>>*/  /*<<+ints.js:80:25>>*/ caml_failwith
       ("int_of_string");
    }
     /*<<+ints.js:82:2>>*/ if(i != len)
      /*<<+ints.js:82:16>>*/  /*<<+ints.js:82:16>>*/ caml_failwith
      ("int_of_string");
     /*<<+ints.js:86:2>>*/ res = sign * res;
     /*<<+ints.js:87:2>>*/ if(base == 10 && (res | 0) != res)
      /*<<+ints.js:89:4>>*/  /*<<+ints.js:89:4>>*/ caml_failwith
      ("int_of_string");
     /*<<+ints.js:90:2>>*/ return res | 0;
    /*<<+ints.js:91:0>>*/ }
    /*<<+jslib_js_of_ocaml.js:57:0>>*/ function caml_js_get_console(){
     /*<<+jslib_js_of_ocaml.js:58:2>>*/ var
      /*<<+jslib_js_of_ocaml.js:58:8>>*/ c = console,
      /*<<+jslib_js_of_ocaml.js:59:8>>*/ m =
       ["log",
        "debug",
        "info",
        "warn",
        "error",
        "assert",
        "dir",
        "dirxml",
        "trace",
        "group",
        "groupCollapsed",
        "groupEnd",
        "time",
        "timeEnd"];
     /*<<+jslib_js_of_ocaml.js:61:2>>*/ function f(){
     /*<<+jslib_js_of_ocaml.js:61:17>>*/ }
     /*<<+jslib_js_of_ocaml.js:62:2>>*/ for
    ( /*<<+jslib_js_of_ocaml.js:62:13>>*/ var i = 0; i < m.length; i++)
      /*<<+jslib_js_of_ocaml.js:62:37>>*/ if(! c[m[i]])
       /*<<+jslib_js_of_ocaml.js:62:51>>*/ c[m[i]] = f;
     /*<<+jslib_js_of_ocaml.js:63:2>>*/ return c;
    /*<<+jslib_js_of_ocaml.js:64:0>>*/ }
    /*<<+jslib.js:68:0>>*/  /*<<+jslib.js:68:18>>*/ var
    caml_callback = caml_call_gen;
    /*<<+jslib.js:306:0>>*/ function caml_js_wrap_callback(f){
     /*<<+jslib.js:307:2>>*/ return function(){
      /*<<+jslib.js:308:4>>*/  /*<<+jslib.js:308:12>>*/ var
      len = arguments.length;
      /*<<+jslib.js:309:4>>*/ if(len > 0) /*<<+jslib.js:309:15>>*/ {
       /*<<+jslib.js:310:6>>*/  /*<<+jslib.js:310:15>>*/ var
       args = new Array(len);
       /*<<+jslib.js:311:6>>*/ for
      ( /*<<+jslib.js:311:17>>*/ var i = 0; i < len; i++)
        /*<<+jslib.js:311:36>>*/ args[i] = arguments[i];
     }
     else
       /*<<+jslib.js:312:11>>*/ args = [undefined];
      /*<<+jslib.js:315:4>>*/  /*<<+jslib.js:315:12>>*/ var
      res =  /*<<+jslib.js:315:14>>*/ caml_callback(f, args);
      /*<<+jslib.js:316:4>>*/ return res instanceof Function
             ?  /*<<+jslib.js:316:37>>*/ caml_js_wrap_callback(res)
             : res; /*<<+jslib.js:307:9>>*/ };
    /*<<+jslib.js:318:0>>*/ }
    /*<<+jslib.js:352:0>>*/ function caml_js_wrap_meth_callback(f){
     /*<<+jslib.js:353:2>>*/ return function(){
      /*<<+jslib.js:354:4>>*/ var
       /*<<+jslib.js:354:12>>*/ len = arguments.length,
       /*<<+jslib.js:355:13>>*/ args = new Array(len + 1);
      /*<<+jslib.js:356:4>>*/ args[0] = this;
      /*<<+jslib.js:357:4>>*/ for
     ( /*<<+jslib.js:357:15>>*/ var i = 0; i < len; i++)
       /*<<+jslib.js:357:34>>*/ args[i + 1] = arguments[i];
      /*<<+jslib.js:358:4>>*/  /*<<+jslib.js:358:12>>*/ var
      res =  /*<<+jslib.js:358:14>>*/ caml_callback(f, args);
      /*<<+jslib.js:359:4>>*/ return res instanceof Function
             ?  /*<<+jslib.js:359:37>>*/ caml_js_wrap_callback(res)
             : res; /*<<+jslib.js:353:9>>*/ };
    /*<<+jslib.js:361:0>>*/ }
    /*<<+compare.js:258:0>>*/ function caml_lessequal(x, y){
     /*<<+compare.js:258:33>>*/ return +
           ( /*<<+compare.js:258:42>>*/ caml_compare_val(x, y, false) <= 0);
    /*<<+compare.js:258:77>>*/ }
    /*<<+compare.js:261:0>>*/ function caml_lessthan(x, y){
     /*<<+compare.js:261:32>>*/ return +
           ( /*<<+compare.js:261:41>>*/ caml_compare_val(x, y, false) < 0);
    /*<<+compare.js:261:75>>*/ }
    /*<<+mlBytes.js:862:0>>*/ function caml_new_string(s){
     /*<<+mlBytes.js:862:31>>*/ return  /*<<+mlBytes.js:862:38>>*/ caml_string_of_jsbytes
            (s);
    /*<<+mlBytes.js:862:64>>*/ }
    /*<<+bigarray.js:426:0>>*/ function caml_ba_get_1(ba, i0){
     /*<<+bigarray.js:427:2>>*/ return  /*<<+bigarray.js:427:9>>*/ ba.get
            ( /*<<+bigarray.js:427:16>>*/ ba.offset(i0));
    /*<<+bigarray.js:428:0>>*/ }
    /*<<+int64.js:247:0>>*/ function caml_int64_xor(x, y){
     /*<<+int64.js:247:33>>*/ return  /*<<+int64.js:247:40>>*/ x.xor(y);
    /*<<+int64.js:247:49>>*/ }
    /*<<+int64.js:250:0>>*/ function caml_int64_shift_left(x, s){
     /*<<+int64.js:250:40>>*/ return  /*<<+int64.js:250:47>>*/ x.shift_left(s);
    /*<<+int64.js:250:63>>*/ }
    /*<<+prng.js:13:0>>*/ function caml_lxm_next(v){
     /*<<+prng.js:14:2>>*/ function shift_l(x, k){
      /*<<+prng.js:15:4>>*/ return  /*<<+prng.js:15:11>>*/ caml_int64_shift_left
             (x, k);
     /*<<+prng.js:16:2>>*/ }
     /*<<+prng.js:17:2>>*/ function shift_r(x, k){
      /*<<+prng.js:18:4>>*/ return  /*<<+prng.js:18:11>>*/ caml_int64_shift_right_unsigned
             (x, k);
     /*<<+prng.js:19:2>>*/ }
     /*<<+prng.js:20:2>>*/ function or(a, b){
      /*<<+prng.js:21:4>>*/ return  /*<<+prng.js:21:11>>*/ caml_int64_or(a, b);
     /*<<+prng.js:22:2>>*/ }
     /*<<+prng.js:23:2>>*/ function xor(a, b){
      /*<<+prng.js:24:4>>*/ return  /*<<+prng.js:24:11>>*/ caml_int64_xor
             (a, b);
     /*<<+prng.js:25:2>>*/ }
     /*<<+prng.js:26:2>>*/ function add(a, b){
      /*<<+prng.js:27:4>>*/ return  /*<<+prng.js:27:11>>*/ caml_int64_add
             (a, b);
     /*<<+prng.js:28:2>>*/ }
     /*<<+prng.js:29:2>>*/ function mul(a, b){
      /*<<+prng.js:30:4>>*/ return  /*<<+prng.js:30:11>>*/ caml_int64_mul
             (a, b);
     /*<<+prng.js:31:2>>*/ }
     /*<<+prng.js:32:2>>*/ function rotl(x, k){
      /*<<+prng.js:33:4>>*/ return  /*<<+prng.js:33:11>>*/ or
             ( /*<<+prng.js:33:14>>*/ shift_l(x, k),
               /*<<+prng.js:33:27>>*/ shift_r(x, 64 - k));
     /*<<+prng.js:34:2>>*/ }
     /*<<+prng.js:35:2>>*/ function get(a, i){
      /*<<+prng.js:36:4>>*/ return  /*<<+prng.js:36:11>>*/ caml_ba_get_1(a, i);
     /*<<+prng.js:37:2>>*/ }
     /*<<+prng.js:38:2>>*/ function set(a, i, x){
      /*<<+prng.js:39:4>>*/ return  /*<<+prng.js:39:11>>*/ caml_ba_set_1
             (a, i, x);
     /*<<+prng.js:40:2>>*/ }
     /*<<+prng.js:41:2>>*/ var
      /*<<+prng.js:41:8>>*/ M =
        /*<<+prng.js:41:10>>*/ caml_int64_of_string
        ( /*<<+prng.js:41:31>>*/ caml_new_string("0xd1342543de82ef95")),
      /*<<+prng.js:42:11>>*/ daba =
        /*<<+prng.js:42:13>>*/ caml_int64_of_string
        ( /*<<+prng.js:42:34>>*/ caml_new_string("0xdaba0b6eb09322e3")),
     z,
     q0,
     q1,
      /*<<+prng.js:44:9>>*/ st = v,
      /*<<+prng.js:45:8>>*/ a =  /*<<+prng.js:45:10>>*/ get(st, 0),
      /*<<+prng.js:46:8>>*/ s =  /*<<+prng.js:46:10>>*/ get(st, 1),
      /*<<+prng.js:47:9>>*/ x0 =  /*<<+prng.js:47:11>>*/ get(st, 2),
      /*<<+prng.js:48:9>>*/ x1 =  /*<<+prng.js:48:11>>*/ get(st, 3);
     /*<<+prng.js:50:2>>*/ z =  /*<<+prng.js:50:6>>*/ add(s, x0);
     /*<<+prng.js:52:2>>*/ z =
      /*<<+prng.js:52:6>>*/ mul
      ( /*<<+prng.js:52:10>>*/ xor(z,  /*<<+prng.js:52:16>>*/ shift_r(z, 32)),
       daba);
     /*<<+prng.js:53:2>>*/ z =
      /*<<+prng.js:53:6>>*/ mul
      ( /*<<+prng.js:53:10>>*/ xor(z,  /*<<+prng.js:53:16>>*/ shift_r(z, 32)),
       daba);
     /*<<+prng.js:54:2>>*/ z =
      /*<<+prng.js:54:6>>*/ xor(z,  /*<<+prng.js:54:12>>*/ shift_r(z, 32));
     /*<<+prng.js:56:2>>*/  /*<<+prng.js:56:2>>*/ set
     (st,
      1,
       /*<<+prng.js:56:13>>*/ add( /*<<+prng.js:56:18>>*/ mul(s, M), a));
     /*<<+prng.js:58:2>>*/ var
      /*<<+prng.js:58:9>>*/ q0 = x0,
      /*<<+prng.js:59:9>>*/ q1 = x1;
     /*<<+prng.js:60:2>>*/ q1 =  /*<<+prng.js:60:7>>*/ xor(q1, q0);
     /*<<+prng.js:61:2>>*/ q0 =  /*<<+prng.js:61:7>>*/ rotl(q0, 24);
     /*<<+prng.js:62:2>>*/ q0 =
      /*<<+prng.js:62:7>>*/ xor
      ( /*<<+prng.js:62:11>>*/ xor(q0, q1),
        /*<<+prng.js:62:25>>*/ shift_l(q1, 16));
     /*<<+prng.js:63:2>>*/ q1 =  /*<<+prng.js:63:7>>*/ rotl(q1, 37);
     /*<<+prng.js:64:2>>*/  /*<<+prng.js:64:2>>*/ set(st, 2, q0);
     /*<<+prng.js:65:2>>*/  /*<<+prng.js:65:2>>*/ set(st, 3, q1);
     /*<<+prng.js:67:2>>*/ return z;
    /*<<+prng.js:68:0>>*/ }
    /*<<+array.js:105:0>>*/ function caml_make_vect(len, init){
     /*<<+array.js:106:2>>*/ if(len < 0)
      /*<<+array.js:106:15>>*/  /*<<+array.js:106:15>>*/ caml_array_bound_error
      ();
     /*<<+array.js:107:2>>*/ var
      /*<<+array.js:107:10>>*/ len = len + 1 | 0,
      /*<<+array.js:108:8>>*/ b = new Array(len);
     /*<<+array.js:109:2>>*/ b[0] = 0;
     /*<<+array.js:110:2>>*/ for
    ( /*<<+array.js:110:13>>*/ var i = 1; i < len; i++)
      /*<<+array.js:110:32>>*/ b[i] = init;
     /*<<+array.js:111:2>>*/ return b;
    /*<<+array.js:112:0>>*/ }
    /*<<+marshal.js:513:0>>*/  /*<<+marshal.js:513:29>>*/ var
    caml_marshal_header_size = 16;
    /*<<+marshal.js:522:0>>*/ function caml_marshal_data_size(s, ofs){
     /*<<+marshal.js:523:2>>*/  /*<<+marshal.js:523:8>>*/ var
     r =
       new
        UInt8ArrayReader
        ( /*<<+marshal.js:523:31>>*/ caml_uint8_array_of_bytes(s), ofs);
     /*<<+marshal.js:524:2>>*/ function readvlq(overflow){
      /*<<+marshal.js:525:4>>*/ var
       /*<<+marshal.js:525:10>>*/ c =  /*<<+marshal.js:525:12>>*/ r.read8u(),
       /*<<+marshal.js:526:10>>*/ n = c & 0x7F;
      /*<<+marshal.js:527:4>>*/ while((c & 0x80) != 0) /*<<+marshal.js:527:28>>*/ {
       /*<<+marshal.js:528:6>>*/ c =  /*<<+marshal.js:528:10>>*/ r.read8u();
       /*<<+marshal.js:529:6>>*/  /*<<+marshal.js:529:13>>*/ var n7 = n << 7;
       /*<<+marshal.js:530:6>>*/ if(n != n7 >> 7)
        /*<<+marshal.js:530:24>>*/ overflow[0] = true;
       /*<<+marshal.js:531:6>>*/ n = n7 | c & 0x7F;
     }
      /*<<+marshal.js:533:4>>*/ return n;
     /*<<+marshal.js:534:2>>*/ }
     /*<<+marshal.js:536:2>>*/ switch( /*<<+marshal.js:536:9>>*/ r.read32u()){
      case 0x8495A6BE:
        /*<<+marshal.js:538:4>>*/ var
         /*<<+marshal.js:538:19>>*/ header_len = 20,
         /*<<+marshal.js:539:17>>*/ data_len =
           /*<<+marshal.js:539:19>>*/ r.read32u();
        /*<<+marshal.js:540:4>>*/ break;
      case 0x8495A6BD:
        /*<<+marshal.js:542:4>>*/ var
         /*<<+marshal.js:542:19>>*/ header_len =
           /*<<+marshal.js:542:21>>*/ r.read8u() & 0x3F,
         /*<<+marshal.js:543:17>>*/ overflow = [false],
         /*<<+marshal.js:544:17>>*/ data_len =
           /*<<+marshal.js:544:19>>*/ readvlq(overflow);
        /*<<+marshal.js:545:4>>*/ if(overflow[0])
         /*<<+marshal.js:545:19>>*/  /*<<+marshal.js:546:6>>*/ caml_failwith
         ("Marshal.data_size: object too large to be read back on this platform");
        /*<<+marshal.js:548:4>>*/ break;
      case 0x8495A6BF:
      default:
        /*<<+marshal.js:551:4>>*/  /*<<+marshal.js:551:4>>*/ caml_failwith
        ("Marshal.data_size: bad object");
        /*<<+marshal.js:552:4>>*/ break;
    }
     /*<<+marshal.js:554:2>>*/ return header_len - caml_marshal_header_size
           + data_len;
    /*<<+marshal.js:555:0>>*/ }
    /*<<+md5.js:144:0>>*/ function caml_MD5Init(){
     /*<<+md5.js:145:2>>*/ var
      /*<<+md5.js:145:13>>*/ buffer = new ArrayBuffer(64),
      /*<<+md5.js:146:10>>*/ b32 = new Uint32Array(buffer),
      /*<<+md5.js:147:9>>*/ b8 = new Uint8Array(buffer);
     /*<<+md5.js:148:2>>*/ return {len: 0,
            w:
            new Uint32Array([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476]),
            b32: b32,
            b8: b8};
    /*<<+md5.js:152:0>>*/ }
    /*<<+md5.js:51:0>>*/  /*<<+md5.js:51:22>>*/ var
    caml_MD5Transform =
       /*<<+md5.js:51:24>>*/ function(){
         /*<<+md5.js:52:2>>*/ function add(x, y){
          /*<<+md5.js:52:24>>*/ return x + y | 0;
         /*<<+md5.js:52:44>>*/ }
         /*<<+md5.js:53:2>>*/ function xx(q, a, b, x, s, t){
          /*<<+md5.js:54:4>>*/ a =
           /*<<+md5.js:54:8>>*/ add
           ( /*<<+md5.js:54:12>>*/ add(a, q),
             /*<<+md5.js:54:23>>*/ add(x, t));
          /*<<+md5.js:55:4>>*/ return  /*<<+md5.js:55:11>>*/ add
                 (a << s | a >>> 32 - s, b);
         /*<<+md5.js:56:2>>*/ }
         /*<<+md5.js:57:2>>*/ function ff(a, b, c, d, x, s, t){
          /*<<+md5.js:58:4>>*/ return  /*<<+md5.js:58:11>>*/ xx
                 (b & c | ~ b & d, a, b, x, s, t);
         /*<<+md5.js:59:2>>*/ }
         /*<<+md5.js:60:2>>*/ function gg(a, b, c, d, x, s, t){
          /*<<+md5.js:61:4>>*/ return  /*<<+md5.js:61:11>>*/ xx
                 (b & d | c & ~ d, a, b, x, s, t);
         /*<<+md5.js:62:2>>*/ }
         /*<<+md5.js:63:2>>*/ function hh(a, b, c, d, x, s, t){
          /*<<+md5.js:63:31>>*/ return  /*<<+md5.js:63:38>>*/ xx
                 (b ^ c ^ d, a, b, x, s, t);
         /*<<+md5.js:63:68>>*/ }
         /*<<+md5.js:64:2>>*/ function ii(a, b, c, d, x, s, t){
          /*<<+md5.js:64:31>>*/ return  /*<<+md5.js:64:38>>*/ xx
                 (c ^ (b | ~ d), a, b, x, s, t);
         /*<<+md5.js:64:73>>*/ }
         /*<<+md5.js:66:2>>*/ return function(w, buffer){
          /*<<+md5.js:67:4>>*/ var
           /*<<+md5.js:67:10>>*/ a = w[0],
           /*<<+md5.js:67:20>>*/ b = w[1],
           /*<<+md5.js:67:30>>*/ c = w[2],
           /*<<+md5.js:67:40>>*/ d = w[3];
          /*<<+md5.js:69:4>>*/ a =
           /*<<+md5.js:69:8>>*/ ff(a, b, c, d, buffer[0], 7, 0xD76AA478);
          /*<<+md5.js:70:4>>*/ d =
           /*<<+md5.js:70:8>>*/ ff(d, a, b, c, buffer[1], 12, 0xE8C7B756);
          /*<<+md5.js:71:4>>*/ c =
           /*<<+md5.js:71:8>>*/ ff(c, d, a, b, buffer[2], 17, 0x242070DB);
          /*<<+md5.js:72:4>>*/ b =
           /*<<+md5.js:72:8>>*/ ff(b, c, d, a, buffer[3], 22, 0xC1BDCEEE);
          /*<<+md5.js:73:4>>*/ a =
           /*<<+md5.js:73:8>>*/ ff(a, b, c, d, buffer[4], 7, 0xF57C0FAF);
          /*<<+md5.js:74:4>>*/ d =
           /*<<+md5.js:74:8>>*/ ff(d, a, b, c, buffer[5], 12, 0x4787C62A);
          /*<<+md5.js:75:4>>*/ c =
           /*<<+md5.js:75:8>>*/ ff(c, d, a, b, buffer[6], 17, 0xA8304613);
          /*<<+md5.js:76:4>>*/ b =
           /*<<+md5.js:76:8>>*/ ff(b, c, d, a, buffer[7], 22, 0xFD469501);
          /*<<+md5.js:77:4>>*/ a =
           /*<<+md5.js:77:8>>*/ ff(a, b, c, d, buffer[8], 7, 0x698098D8);
          /*<<+md5.js:78:4>>*/ d =
           /*<<+md5.js:78:8>>*/ ff(d, a, b, c, buffer[9], 12, 0x8B44F7AF);
          /*<<+md5.js:79:4>>*/ c =
           /*<<+md5.js:79:8>>*/ ff(c, d, a, b, buffer[10], 17, 0xFFFF5BB1);
          /*<<+md5.js:80:4>>*/ b =
           /*<<+md5.js:80:8>>*/ ff(b, c, d, a, buffer[11], 22, 0x895CD7BE);
          /*<<+md5.js:81:4>>*/ a =
           /*<<+md5.js:81:8>>*/ ff(a, b, c, d, buffer[12], 7, 0x6B901122);
          /*<<+md5.js:82:4>>*/ d =
           /*<<+md5.js:82:8>>*/ ff(d, a, b, c, buffer[13], 12, 0xFD987193);
          /*<<+md5.js:83:4>>*/ c =
           /*<<+md5.js:83:8>>*/ ff(c, d, a, b, buffer[14], 17, 0xA679438E);
          /*<<+md5.js:84:4>>*/ b =
           /*<<+md5.js:84:8>>*/ ff(b, c, d, a, buffer[15], 22, 0x49B40821);
          /*<<+md5.js:86:4>>*/ a =
           /*<<+md5.js:86:8>>*/ gg(a, b, c, d, buffer[1], 5, 0xF61E2562);
          /*<<+md5.js:87:4>>*/ d =
           /*<<+md5.js:87:8>>*/ gg(d, a, b, c, buffer[6], 9, 0xC040B340);
          /*<<+md5.js:88:4>>*/ c =
           /*<<+md5.js:88:8>>*/ gg(c, d, a, b, buffer[11], 14, 0x265E5A51);
          /*<<+md5.js:89:4>>*/ b =
           /*<<+md5.js:89:8>>*/ gg(b, c, d, a, buffer[0], 20, 0xE9B6C7AA);
          /*<<+md5.js:90:4>>*/ a =
           /*<<+md5.js:90:8>>*/ gg(a, b, c, d, buffer[5], 5, 0xD62F105D);
          /*<<+md5.js:91:4>>*/ d =
           /*<<+md5.js:91:8>>*/ gg(d, a, b, c, buffer[10], 9, 0x02441453);
          /*<<+md5.js:92:4>>*/ c =
           /*<<+md5.js:92:8>>*/ gg(c, d, a, b, buffer[15], 14, 0xD8A1E681);
          /*<<+md5.js:93:4>>*/ b =
           /*<<+md5.js:93:8>>*/ gg(b, c, d, a, buffer[4], 20, 0xE7D3FBC8);
          /*<<+md5.js:94:4>>*/ a =
           /*<<+md5.js:94:8>>*/ gg(a, b, c, d, buffer[9], 5, 0x21E1CDE6);
          /*<<+md5.js:95:4>>*/ d =
           /*<<+md5.js:95:8>>*/ gg(d, a, b, c, buffer[14], 9, 0xC33707D6);
          /*<<+md5.js:96:4>>*/ c =
           /*<<+md5.js:96:8>>*/ gg(c, d, a, b, buffer[3], 14, 0xF4D50D87);
          /*<<+md5.js:97:4>>*/ b =
           /*<<+md5.js:97:8>>*/ gg(b, c, d, a, buffer[8], 20, 0x455A14ED);
          /*<<+md5.js:98:4>>*/ a =
           /*<<+md5.js:98:8>>*/ gg(a, b, c, d, buffer[13], 5, 0xA9E3E905);
          /*<<+md5.js:99:4>>*/ d =
           /*<<+md5.js:99:8>>*/ gg(d, a, b, c, buffer[2], 9, 0xFCEFA3F8);
          /*<<+md5.js:100:4>>*/ c =
           /*<<+md5.js:100:8>>*/ gg(c, d, a, b, buffer[7], 14, 0x676F02D9);
          /*<<+md5.js:101:4>>*/ b =
           /*<<+md5.js:101:8>>*/ gg(b, c, d, a, buffer[12], 20, 0x8D2A4C8A);
          /*<<+md5.js:103:4>>*/ a =
           /*<<+md5.js:103:8>>*/ hh(a, b, c, d, buffer[5], 4, 0xFFFA3942);
          /*<<+md5.js:104:4>>*/ d =
           /*<<+md5.js:104:8>>*/ hh(d, a, b, c, buffer[8], 11, 0x8771F681);
          /*<<+md5.js:105:4>>*/ c =
           /*<<+md5.js:105:8>>*/ hh(c, d, a, b, buffer[11], 16, 0x6D9D6122);
          /*<<+md5.js:106:4>>*/ b =
           /*<<+md5.js:106:8>>*/ hh(b, c, d, a, buffer[14], 23, 0xFDE5380C);
          /*<<+md5.js:107:4>>*/ a =
           /*<<+md5.js:107:8>>*/ hh(a, b, c, d, buffer[1], 4, 0xA4BEEA44);
          /*<<+md5.js:108:4>>*/ d =
           /*<<+md5.js:108:8>>*/ hh(d, a, b, c, buffer[4], 11, 0x4BDECFA9);
          /*<<+md5.js:109:4>>*/ c =
           /*<<+md5.js:109:8>>*/ hh(c, d, a, b, buffer[7], 16, 0xF6BB4B60);
          /*<<+md5.js:110:4>>*/ b =
           /*<<+md5.js:110:8>>*/ hh(b, c, d, a, buffer[10], 23, 0xBEBFBC70);
          /*<<+md5.js:111:4>>*/ a =
           /*<<+md5.js:111:8>>*/ hh(a, b, c, d, buffer[13], 4, 0x289B7EC6);
          /*<<+md5.js:112:4>>*/ d =
           /*<<+md5.js:112:8>>*/ hh(d, a, b, c, buffer[0], 11, 0xEAA127FA);
          /*<<+md5.js:113:4>>*/ c =
           /*<<+md5.js:113:8>>*/ hh(c, d, a, b, buffer[3], 16, 0xD4EF3085);
          /*<<+md5.js:114:4>>*/ b =
           /*<<+md5.js:114:8>>*/ hh(b, c, d, a, buffer[6], 23, 0x04881D05);
          /*<<+md5.js:115:4>>*/ a =
           /*<<+md5.js:115:8>>*/ hh(a, b, c, d, buffer[9], 4, 0xD9D4D039);
          /*<<+md5.js:116:4>>*/ d =
           /*<<+md5.js:116:8>>*/ hh(d, a, b, c, buffer[12], 11, 0xE6DB99E5);
          /*<<+md5.js:117:4>>*/ c =
           /*<<+md5.js:117:8>>*/ hh(c, d, a, b, buffer[15], 16, 0x1FA27CF8);
          /*<<+md5.js:118:4>>*/ b =
           /*<<+md5.js:118:8>>*/ hh(b, c, d, a, buffer[2], 23, 0xC4AC5665);
          /*<<+md5.js:120:4>>*/ a =
           /*<<+md5.js:120:8>>*/ ii(a, b, c, d, buffer[0], 6, 0xF4292244);
          /*<<+md5.js:121:4>>*/ d =
           /*<<+md5.js:121:8>>*/ ii(d, a, b, c, buffer[7], 10, 0x432AFF97);
          /*<<+md5.js:122:4>>*/ c =
           /*<<+md5.js:122:8>>*/ ii(c, d, a, b, buffer[14], 15, 0xAB9423A7);
          /*<<+md5.js:123:4>>*/ b =
           /*<<+md5.js:123:8>>*/ ii(b, c, d, a, buffer[5], 21, 0xFC93A039);
          /*<<+md5.js:124:4>>*/ a =
           /*<<+md5.js:124:8>>*/ ii(a, b, c, d, buffer[12], 6, 0x655B59C3);
          /*<<+md5.js:125:4>>*/ d =
           /*<<+md5.js:125:8>>*/ ii(d, a, b, c, buffer[3], 10, 0x8F0CCC92);
          /*<<+md5.js:126:4>>*/ c =
           /*<<+md5.js:126:8>>*/ ii(c, d, a, b, buffer[10], 15, 0xFFEFF47D);
          /*<<+md5.js:127:4>>*/ b =
           /*<<+md5.js:127:8>>*/ ii(b, c, d, a, buffer[1], 21, 0x85845DD1);
          /*<<+md5.js:128:4>>*/ a =
           /*<<+md5.js:128:8>>*/ ii(a, b, c, d, buffer[8], 6, 0x6FA87E4F);
          /*<<+md5.js:129:4>>*/ d =
           /*<<+md5.js:129:8>>*/ ii(d, a, b, c, buffer[15], 10, 0xFE2CE6E0);
          /*<<+md5.js:130:4>>*/ c =
           /*<<+md5.js:130:8>>*/ ii(c, d, a, b, buffer[6], 15, 0xA3014314);
          /*<<+md5.js:131:4>>*/ b =
           /*<<+md5.js:131:8>>*/ ii(b, c, d, a, buffer[13], 21, 0x4E0811A1);
          /*<<+md5.js:132:4>>*/ a =
           /*<<+md5.js:132:8>>*/ ii(a, b, c, d, buffer[4], 6, 0xF7537E82);
          /*<<+md5.js:133:4>>*/ d =
           /*<<+md5.js:133:8>>*/ ii(d, a, b, c, buffer[11], 10, 0xBD3AF235);
          /*<<+md5.js:134:4>>*/ c =
           /*<<+md5.js:134:8>>*/ ii(c, d, a, b, buffer[2], 15, 0x2AD7D2BB);
          /*<<+md5.js:135:4>>*/ b =
           /*<<+md5.js:135:8>>*/ ii(b, c, d, a, buffer[9], 21, 0xEB86D391);
          /*<<+md5.js:137:4>>*/ w[0] =  /*<<+md5.js:137:11>>*/ add(a, w[0]);
          /*<<+md5.js:138:4>>*/ w[1] =  /*<<+md5.js:138:11>>*/ add(b, w[1]);
          /*<<+md5.js:139:4>>*/ w[2] =  /*<<+md5.js:139:11>>*/ add(c, w[2]);
          /*<<+md5.js:140:4>>*/ w[3] =  /*<<+md5.js:140:11>>*/ add(d, w[3]); /*<<+md5.js:66:9>>*/ };
        /*<<+md5.js:51:25>>*/ }
       ();
    /*<<+md5.js:156:0>>*/ function caml_MD5Update(ctx, input, input_len){
     /*<<+md5.js:157:2>>*/ var
      /*<<+md5.js:157:13>>*/ in_buf = ctx.len & 0x3f,
      /*<<+md5.js:158:16>>*/ input_pos = 0;
     /*<<+md5.js:159:2>>*/ ctx.len += input_len;
     /*<<+md5.js:160:2>>*/ if(in_buf) /*<<+md5.js:160:12>>*/ {
      /*<<+md5.js:161:4>>*/  /*<<+md5.js:161:16>>*/ var missing = 64 - in_buf;
      /*<<+md5.js:162:4>>*/ if(input_len < missing) /*<<+md5.js:162:28>>*/ {
       /*<<+md5.js:163:6>>*/  /*<<+md5.js:163:6>>*/ ctx.b8.set
       ( /*<<+md5.js:163:17>>*/ input.subarray(0, input_len), in_buf);
       /*<<+md5.js:164:6>>*/ return;
     }
      /*<<+md5.js:166:4>>*/  /*<<+md5.js:166:4>>*/ ctx.b8.set
      ( /*<<+md5.js:166:15>>*/ input.subarray(0, missing), in_buf);
      /*<<+md5.js:167:4>>*/  /*<<+md5.js:167:4>>*/ caml_MD5Transform
      (ctx.w, ctx.b32);
      /*<<+md5.js:168:4>>*/ input_len -= missing;
      /*<<+md5.js:169:4>>*/ input_pos += missing;
    }
     /*<<+md5.js:171:2>>*/ while(input_len >= 64) /*<<+md5.js:171:24>>*/ {
      /*<<+md5.js:172:4>>*/  /*<<+md5.js:172:4>>*/ ctx.b8.set
      ( /*<<+md5.js:172:15>>*/ input.subarray(input_pos, input_pos + 64), 0);
      /*<<+md5.js:173:4>>*/  /*<<+md5.js:173:4>>*/ caml_MD5Transform
      (ctx.w, ctx.b32);
      /*<<+md5.js:174:4>>*/ input_len -= 64;
      /*<<+md5.js:175:4>>*/ input_pos += 64;
    }
     /*<<+md5.js:177:2>>*/ if(input_len)
      /*<<+md5.js:178:4>>*/  /*<<+md5.js:178:4>>*/ ctx.b8.set
      ( /*<<+md5.js:178:15>>*/ input.subarray
        (input_pos, input_pos + input_len),
       0);
    /*<<+md5.js:179:0>>*/ }
    /*<<+md5.js:183:0>>*/ function caml_MD5Final(ctx){
     /*<<+md5.js:184:2>>*/  /*<<+md5.js:184:13>>*/ var
     in_buf = ctx.len & 0x3f;
     /*<<+md5.js:185:2>>*/ ctx.b8[in_buf] = 0x80;
     /*<<+md5.js:186:2>>*/ in_buf++;
     /*<<+md5.js:187:2>>*/ if(in_buf > 56) /*<<+md5.js:187:18>>*/ {
      /*<<+md5.js:188:4>>*/ for
     ( /*<<+md5.js:188:14>>*/ var j = in_buf; j < 64; j++)
       /*<<+md5.js:188:36>>*/ ctx.b8[j] = 0;
      /*<<+md5.js:191:4>>*/  /*<<+md5.js:191:4>>*/ caml_MD5Transform
      (ctx.w, ctx.b32);
      /*<<+md5.js:192:4>>*/ for
     ( /*<<+md5.js:192:14>>*/ var j = 0; j < 56; j++)
       /*<<+md5.js:192:31>>*/ ctx.b8[j] = 0;
    }
    else
      /*<<+md5.js:195:9>>*/ for
     ( /*<<+md5.js:196:14>>*/ var j = in_buf; j < 56; j++)
       /*<<+md5.js:196:36>>*/ ctx.b8[j] = 0;
     /*<<+md5.js:200:2>>*/ ctx.b32[14] = ctx.len << 3;
     /*<<+md5.js:201:2>>*/ ctx.b32[15] = ctx.len >> 29 & 0x1FFFFFFF;
     /*<<+md5.js:202:2>>*/  /*<<+md5.js:202:2>>*/ caml_MD5Transform
     (ctx.w, ctx.b32);
     /*<<+md5.js:203:2>>*/  /*<<+md5.js:203:8>>*/ var t = new Uint8Array(16);
     /*<<+md5.js:204:2>>*/ for( /*<<+md5.js:204:13>>*/ var i = 0; i < 4; i++)
      /*<<+md5.js:205:4>>*/ for( /*<<+md5.js:205:15>>*/ var j = 0; j < 4; j++)
       /*<<+md5.js:206:6>>*/ t[i * 4 + j] = ctx.w[i] >> 8 * j & 0xFF;
     /*<<+md5.js:207:2>>*/ return t;
    /*<<+md5.js:208:0>>*/ }
    /*<<+md5.js:214:0>>*/ function caml_md5_bytes(s, ofs, len){
     /*<<+md5.js:215:2>>*/ var
      /*<<+md5.js:215:10>>*/ ctx =  /*<<+md5.js:215:12>>*/ caml_MD5Init(),
      /*<<+md5.js:216:8>>*/ a =
        /*<<+md5.js:216:10>>*/ caml_uint8_array_of_bytes(s);
     /*<<+md5.js:217:2>>*/  /*<<+md5.js:217:2>>*/ caml_MD5Update
     (ctx,  /*<<+md5.js:217:21>>*/ a.subarray(ofs, ofs + len), len);
     /*<<+md5.js:218:2>>*/ return  /*<<+md5.js:218:9>>*/ caml_string_of_array
            ( /*<<+md5.js:218:30>>*/ caml_MD5Final(ctx));
    /*<<+md5.js:219:0>>*/ }
    /*<<+md5.js:46:0>>*/ function caml_md5_string(s, ofs, len){
     /*<<+md5.js:47:2>>*/ return  /*<<+md5.js:47:9>>*/ caml_md5_bytes
            ( /*<<+md5.js:47:24>>*/ caml_bytes_of_string(s), ofs, len);
    /*<<+md5.js:48:0>>*/ }
    /*<<+io.js:23:0>>*/  /*<<+io.js:23:17>>*/ var caml_sys_fds = new Array(3);
    /*<<+io.js:27:0>>*/ function caml_sys_close(fd){
     /*<<+io.js:28:2>>*/  /*<<+io.js:28:11>>*/ var file = caml_sys_fds[fd];
     /*<<+io.js:29:2>>*/ if(file)
      /*<<+io.js:29:11>>*/  /*<<+io.js:29:11>>*/ file.close();
     /*<<+io.js:30:2>>*/ delete caml_sys_fds[fd];
     /*<<+io.js:31:2>>*/ return 0;
    /*<<+io.js:32:0>>*/ }
    /*<<+io.js:99:0>>*/  /*<<+io.js:99:21>>*/ var
    caml_ml_channels = new Array();
    /*<<+io.js:467:0>>*/ function caml_ml_flush(chanid){
     /*<<+io.js:468:2>>*/  /*<<+io.js:468:11>>*/ var
     chan = caml_ml_channels[chanid];
     /*<<+io.js:469:2>>*/ if(! chan.opened)
      /*<<+io.js:469:20>>*/  /*<<+io.js:469:20>>*/ caml_raise_sys_error
      ("Cannot flush a closed channel");
     /*<<+io.js:470:2>>*/ if(! chan.buffer || chan.buffer_curr == 0)
      /*<<+io.js:470:44>>*/ return 0;
     /*<<+io.js:471:2>>*/ if(chan.output)
      /*<<+io.js:471:18>>*/  /*<<+io.js:472:4>>*/ chan.output
      ( /*<<+io.js:472:16>>*/ caml_subarray_to_jsbytes
        (chan.buffer, 0, chan.buffer_curr));
    else
      /*<<+io.js:473:9>>*/  /*<<+io.js:474:4>>*/ chan.file.write
      (chan.offset, chan.buffer, 0, chan.buffer_curr);
     /*<<+io.js:476:2>>*/ chan.offset += chan.buffer_curr;
     /*<<+io.js:477:2>>*/ chan.buffer_curr = 0;
     /*<<+io.js:478:2>>*/ return 0;
    /*<<+io.js:479:0>>*/ }
    /*<<+io.js:203:0>>*/ function caml_ml_close_channel(chanid){
     /*<<+io.js:204:2>>*/  /*<<+io.js:204:11>>*/ var
     chan = caml_ml_channels[chanid];
     /*<<+io.js:205:2>>*/ if(chan.opened) /*<<+io.js:205:18>>*/ {
      /*<<+io.js:206:4>>*/ chan.opened = false;
      /*<<+io.js:207:4>>*/  /*<<+io.js:207:4>>*/ caml_sys_close(chan.fd);
      /*<<+io.js:208:4>>*/ chan.fd = - 1;
      /*<<+io.js:209:4>>*/ chan.buffer = new Uint8Array(0);
      /*<<+io.js:210:4>>*/ chan.buffer_curr = 0;
      /*<<+io.js:211:4>>*/ chan.buffer_max = 0;
    }
     /*<<+io.js:213:2>>*/ return 0;
    /*<<+io.js:214:0>>*/ }
    /*<<+backtrace.js:38:0>>*/ function caml_ml_debug_info_status(){
     /*<<+backtrace.js:38:40>>*/ return 0;
    /*<<+backtrace.js:38:50>>*/ }
    /*<<+io.js:247:0>>*/ function caml_refill(chan){
     /*<<+io.js:248:2>>*/ if(chan.refill != null) /*<<+io.js:248:25>>*/ {
      /*<<+io.js:249:4>>*/ var
       /*<<+io.js:249:12>>*/ str =  /*<<+io.js:249:14>>*/ chan.refill(),
       /*<<+io.js:250:14>>*/ str_a =
         /*<<+io.js:250:16>>*/ caml_uint8_array_of_string(str);
      /*<<+io.js:251:4>>*/ if(str_a.length == 0)
       /*<<+io.js:251:27>>*/ chan.refill = null;
     else /*<<+io.js:254:9>>*/ {
       /*<<+io.js:255:6>>*/ if
       (chan.buffer.length < chan.buffer_max + str_a.length) /*<<+io.js:255:61>>*/ {
        /*<<+io.js:256:8>>*/  /*<<+io.js:256:14>>*/ var
        b = new Uint8Array(chan.buffer_max + str_a.length);
        /*<<+io.js:257:8>>*/  /*<<+io.js:257:8>>*/ b.set(chan.buffer);
        /*<<+io.js:258:8>>*/ chan.buffer = b;
      }
       /*<<+io.js:260:6>>*/  /*<<+io.js:260:6>>*/ chan.buffer.set
       (str_a, chan.buffer_max);
       /*<<+io.js:261:6>>*/ chan.offset += str_a.length;
       /*<<+io.js:262:6>>*/ chan.buffer_max += str_a.length;
     }
    }
    else /*<<+io.js:264:9>>*/ {
      /*<<+io.js:265:4>>*/  /*<<+io.js:265:14>>*/ var
      nread =
         /*<<+io.js:265:16>>*/ chan.file.read
         (chan.offset,
          chan.buffer,
          chan.buffer_max,
          chan.buffer.length - chan.buffer_max);
      /*<<+io.js:266:4>>*/ chan.offset += nread;
      /*<<+io.js:267:4>>*/ chan.buffer_max += nread;
    }
    /*<<+io.js:269:0>>*/ }
    /*<<+io.js:289:0>>*/ function caml_ml_input_block(chanid, ba, i, l){
     /*<<+io.js:290:2>>*/ var
      /*<<+io.js:290:11>>*/ chan = caml_ml_channels[chanid],
      /*<<+io.js:291:8>>*/ n = l,
      /*<<+io.js:292:12>>*/ avail = chan.buffer_max - chan.buffer_curr;
     /*<<+io.js:293:2>>*/ if(l <= avail) /*<<+io.js:293:17>>*/ {
      /*<<+io.js:294:4>>*/  /*<<+io.js:294:4>>*/ ba.set
      ( /*<<+io.js:294:11>>*/ chan.buffer.subarray
        (chan.buffer_curr, chan.buffer_curr + l),
       i);
      /*<<+io.js:295:4>>*/ chan.buffer_curr += l;
    }
    else if(avail > 0) /*<<+io.js:297:21>>*/ {
      /*<<+io.js:298:4>>*/  /*<<+io.js:298:4>>*/ ba.set
      ( /*<<+io.js:298:11>>*/ chan.buffer.subarray
        (chan.buffer_curr, chan.buffer_curr + avail),
       i);
      /*<<+io.js:299:4>>*/ chan.buffer_curr += avail;
      /*<<+io.js:300:4>>*/ n = avail;
    }
    else /*<<+io.js:301:9>>*/ {
      /*<<+io.js:302:4>>*/ chan.buffer_curr = 0;
      /*<<+io.js:303:4>>*/ chan.buffer_max = 0;
      /*<<+io.js:304:4>>*/  /*<<+io.js:304:4>>*/ caml_refill(chan);
      /*<<+io.js:305:4>>*/  /*<<+io.js:305:14>>*/ var
      avail = chan.buffer_max - chan.buffer_curr;
      /*<<+io.js:306:4>>*/ if(n > avail)  /*<<+io.js:306:18>>*/ n = avail;
      /*<<+io.js:307:4>>*/  /*<<+io.js:307:4>>*/ ba.set
      ( /*<<+io.js:307:11>>*/ chan.buffer.subarray
        (chan.buffer_curr, chan.buffer_curr + n),
       i);
      /*<<+io.js:308:4>>*/ chan.buffer_curr += n;
    }
     /*<<+io.js:310:2>>*/ return n | 0;
    /*<<+io.js:311:0>>*/ }
    /*<<+io.js:274:0>>*/ function caml_ml_input(chanid, b, i, l){
     /*<<+io.js:275:2>>*/  /*<<+io.js:275:9>>*/ var
     ba =  /*<<+io.js:275:11>>*/ caml_uint8_array_of_bytes(b);
     /*<<+io.js:276:2>>*/ return  /*<<+io.js:276:9>>*/ caml_ml_input_block
            (chanid, ba, i, l);
    /*<<+io.js:277:0>>*/ }
    /*<<+fail.js:54:0>>*/ function caml_raise_end_of_file(){
     /*<<+fail.js:55:2>>*/  /*<<+fail.js:55:2>>*/ caml_raise_constant
     (caml_global_data.End_of_file);
    /*<<+fail.js:56:0>>*/ }
    /*<<+io.js:362:0>>*/ function caml_ml_input_char(chanid){
     /*<<+io.js:363:2>>*/  /*<<+io.js:363:11>>*/ var
     chan = caml_ml_channels[chanid];
     /*<<+io.js:364:2>>*/ if(chan.buffer_curr >= chan.buffer_max) /*<<+io.js:364:41>>*/ {
      /*<<+io.js:365:4>>*/ chan.buffer_curr = 0;
      /*<<+io.js:366:4>>*/ chan.buffer_max = 0;
      /*<<+io.js:367:4>>*/  /*<<+io.js:367:4>>*/ caml_refill(chan);
    }
     /*<<+io.js:369:2>>*/ if(chan.buffer_curr >= chan.buffer_max)
      /*<<+io.js:370:4>>*/  /*<<+io.js:370:4>>*/ caml_raise_end_of_file();
     /*<<+io.js:371:2>>*/  /*<<+io.js:371:10>>*/ var
     res = chan.buffer[chan.buffer_curr];
     /*<<+io.js:372:2>>*/ chan.buffer_curr++;
     /*<<+io.js:373:2>>*/ return res;
    /*<<+io.js:374:0>>*/ }
    /*<<+fs_node.js:311:0>>*/ function caml_sys_open_for_node(fd, flags){
     /*<<+fs_node.js:312:2>>*/ if(flags.name)
      /*<<+fs_node.js:312:17>>*/ try{
       /*<<+fs_node.js:314:6>>*/ var
        /*<<+fs_node.js:314:13>>*/ fs =
          /*<<+fs_node.js:314:15>>*/ require("fs"),
        /*<<+fs_node.js:315:14>>*/ fd2 =
          /*<<+fs_node.js:315:16>>*/ fs.openSync(flags.name, "rs");
       /*<<+fs_node.js:316:6>>*/ return new MlNodeFd(fd2, flags);
     }
     catch(e){}
     /*<<+fs_node.js:319:2>>*/ return new MlNodeFd(fd, flags);
    /*<<+fs_node.js:320:0>>*/ }
    /*<<+fs_fake.js:310:0>>*/ function MlFakeFd_out(fd, flags){
     /*<<+fs_fake.js:311:2>>*/  /*<<+fs_fake.js:311:2>>*/ MlFakeFile.call
     (this,  /*<<+fs_fake.js:311:24>>*/ caml_create_bytes(0));
     /*<<+fs_fake.js:312:2>>*/ this.log =
     function(s){
       /*<<+fs_fake.js:312:29>>*/ return 0;
      /*<<+fs_fake.js:312:14>>*/ };
     /*<<+fs_fake.js:313:2>>*/ if(fd == 1 && typeof console.log == "function")
      /*<<+fs_fake.js:314:4>>*/ this.log = console.log;
    else if(fd == 2 && typeof console.error == "function")
      /*<<+fs_fake.js:316:4>>*/ this.log = console.error;
    else if(typeof console.log == "function")
      /*<<+fs_fake.js:318:4>>*/ this.log = console.log;
     /*<<+fs_fake.js:319:2>>*/ this.flags = flags;
    /*<<+fs_fake.js:320:0>>*/ }
    /*<<+fs_fake.js:321:0>>*/ MlFakeFd_out.prototype.length =
    function(){
      /*<<+fs_fake.js:321:45>>*/ return 0;
     /*<<+fs_fake.js:321:32>>*/ };
    /*<<+fs_fake.js:322:0>>*/ MlFakeFd_out.prototype.write =
    function(offset, buf, pos, len){
      /*<<+fs_fake.js:323:2>>*/ if(this.log) /*<<+fs_fake.js:323:15>>*/ {
       /*<<+fs_fake.js:324:4>>*/ if
       (len > 0 && pos >= 0 && pos + len <= buf.length
        && buf[pos + len - 1] == 10)
        /*<<+fs_fake.js:328:6>>*/ len--;
       /*<<+fs_fake.js:331:4>>*/  /*<<+fs_fake.js:331:12>>*/ var
       src =  /*<<+fs_fake.js:331:14>>*/ caml_create_bytes(len);
       /*<<+fs_fake.js:332:4>>*/  /*<<+fs_fake.js:332:4>>*/ caml_blit_bytes
       ( /*<<+fs_fake.js:332:20>>*/ caml_bytes_of_array(buf),
        pos,
        src,
        0,
        len);
       /*<<+fs_fake.js:333:4>>*/  /*<<+fs_fake.js:333:4>>*/ this.log
       ( /*<<+fs_fake.js:333:13>>*/ src.toUtf16());
       /*<<+fs_fake.js:334:4>>*/ return 0;
     }
      /*<<+fs_fake.js:336:2>>*/  /*<<+fs_fake.js:336:2>>*/ caml_raise_sys_error
      (this.fd + ": file descriptor already closed");
     /*<<+fs_fake.js:322:31>>*/ };
    /*<<+fs_fake.js:338:0>>*/ MlFakeFd_out.prototype.read =
    function(offset, buf, pos, len){
      /*<<+fs_fake.js:339:2>>*/  /*<<+fs_fake.js:339:2>>*/ caml_raise_sys_error
      (this.fd + ": file descriptor is write only");
     /*<<+fs_fake.js:338:30>>*/ };
    /*<<+fs_fake.js:341:0>>*/ MlFakeFd_out.prototype.close =
    function(){
      /*<<+fs_fake.js:342:2>>*/ this.log = undefined;
     /*<<+fs_fake.js:341:31>>*/ };
    /*<<+io.js:43:0>>*/ function caml_sys_open_internal(file, idx){
     /*<<+io.js:44:2>>*/ if(idx == undefined)
      /*<<+io.js:44:22>>*/ idx = caml_sys_fds.length;
     /*<<+io.js:47:2>>*/ caml_sys_fds[idx] = file;
     /*<<+io.js:48:2>>*/ return idx | 0;
    /*<<+io.js:49:0>>*/ }
    /*<<+io.js:50:0>>*/ function caml_sys_open(name, flags, _perms){
     /*<<+io.js:51:2>>*/  /*<<+io.js:51:8>>*/ var f = {};
     /*<<+io.js:52:2>>*/ while(flags) /*<<+io.js:52:14>>*/ {
      /*<<+io.js:53:4>>*/ switch(flags[1]){
       case 0:
         /*<<+io.js:54:12>>*/ f.rdonly = 1;  /*<<+io.js:54:25>>*/ break;
       case 1:
         /*<<+io.js:55:12>>*/ f.wronly = 1;  /*<<+io.js:55:25>>*/ break;
       case 2:
         /*<<+io.js:56:12>>*/ f.append = 1;  /*<<+io.js:56:25>>*/ break;
       case 3:
         /*<<+io.js:57:12>>*/ f.create = 1;  /*<<+io.js:57:25>>*/ break;
       case 4:
         /*<<+io.js:58:12>>*/ f.truncate = 1;  /*<<+io.js:58:27>>*/ break;
       case 5:
         /*<<+io.js:59:12>>*/ f.excl = 1;  /*<<+io.js:59:24>>*/ break;
       case 6:
         /*<<+io.js:60:12>>*/ f.binary = 1;  /*<<+io.js:60:25>>*/ break;
       case 7:
         /*<<+io.js:61:12>>*/ f.text = 1;  /*<<+io.js:61:23>>*/ break;
       case 8:
         /*<<+io.js:62:12>>*/ f.nonblock = 1;  /*<<+io.js:62:27>>*/ break;
     }
      /*<<+io.js:64:4>>*/ flags = flags[2];
    }
     /*<<+io.js:66:2>>*/ if(f.rdonly && f.wronly)
      /*<<+io.js:67:4>>*/  /*<<+io.js:67:4>>*/ caml_raise_sys_error
      ( /*<<+io.js:67:25>>*/ caml_jsbytes_of_string(name)
       + " : flags Open_rdonly and Open_wronly are not compatible");
     /*<<+io.js:68:2>>*/ if(f.text && f.binary)
      /*<<+io.js:69:4>>*/  /*<<+io.js:69:4>>*/ caml_raise_sys_error
      ( /*<<+io.js:69:25>>*/ caml_jsbytes_of_string(name)
       + " : flags Open_text and Open_binary are not compatible");
     /*<<+io.js:70:2>>*/ var
      /*<<+io.js:70:11>>*/ root =
        /*<<+io.js:70:13>>*/ resolve_fs_device(name),
      /*<<+io.js:71:11>>*/ file =
        /*<<+io.js:71:13>>*/ root.device.open(root.rest, f);
     /*<<+io.js:72:2>>*/ return  /*<<+io.js:72:9>>*/ caml_sys_open_internal
            (file, undefined);
    /*<<+io.js:73:0>>*/ }
    /*<<+io.js:74:0>>*/ ( /*<<+io.js:74:0>>*/ function(){
       /*<<+io.js:75:2>>*/ function file(fd, flags){
        /*<<+io.js:76:4>>*/ return  /*<<+io.js:76:7>>*/ fs_node_supported()
               ?  /*<<+io.js:77:13>>*/ caml_sys_open_for_node(fd, flags)
               : new MlFakeFd_out(fd, flags);
       /*<<+io.js:81:2>>*/ }
       /*<<+io.js:82:2>>*/  /*<<+io.js:82:2>>*/ caml_sys_open_internal
       ( /*<<+io.js:82:25>>*/ file
         (0, {rdonly: 1, altname: "/dev/stdin", isCharacterDevice: true}),
        0);
       /*<<+io.js:83:2>>*/  /*<<+io.js:83:2>>*/ caml_sys_open_internal
       ( /*<<+io.js:83:25>>*/ file
         (1, {buffered: 2, wronly: 1, isCharacterDevice: true}),
        1);
       /*<<+io.js:84:2>>*/  /*<<+io.js:84:2>>*/ caml_sys_open_internal
       ( /*<<+io.js:84:25>>*/ file
         (2, {buffered: 2, wronly: 1, isCharacterDevice: true}),
        2);
      /*<<+io.js:74:1>>*/ }
     ());
    /*<<+io.js:139:0>>*/ function caml_ml_open_descriptor_in(fd){
     /*<<+io.js:140:2>>*/  /*<<+io.js:140:11>>*/ var file = caml_sys_fds[fd];
     /*<<+io.js:141:2>>*/ if(file.flags.wronly)
      /*<<+io.js:141:24>>*/  /*<<+io.js:141:24>>*/ caml_raise_sys_error
      ("fd " + fd + " is writeonly");
     /*<<+io.js:142:2>>*/ var
      /*<<+io.js:142:13>>*/ refill = null,
      /*<<+io.js:143:14>>*/ channel =
       {file: file,
        offset: file.flags.append ?  /*<<+io.js:145:29>>*/ file.length() : 0,
        fd: fd,
        opened: true,
        out: false,
        buffer_curr: 0,
        buffer_max: 0,
        buffer: new Uint8Array(65536),
        refill: refill};
     /*<<+io.js:154:2>>*/ caml_ml_channels[channel.fd] = channel;
     /*<<+io.js:155:2>>*/ return channel.fd;
    /*<<+io.js:156:0>>*/ }
    /*<<+io.js:117:0>>*/ function caml_ml_open_descriptor_out(fd){
     /*<<+io.js:118:2>>*/  /*<<+io.js:118:11>>*/ var file = caml_sys_fds[fd];
     /*<<+io.js:119:2>>*/ if(file.flags.rdonly)
      /*<<+io.js:119:24>>*/  /*<<+io.js:119:24>>*/ caml_raise_sys_error
      ("fd " + fd + " is readonly");
     /*<<+io.js:120:2>>*/ var
      /*<<+io.js:120:15>>*/ buffered =
       file.flags.buffered !== undefined ? file.flags.buffered : 1,
      /*<<+io.js:121:14>>*/ channel =
       {file: file,
        offset: file.flags.append ?  /*<<+io.js:123:29>>*/ file.length() : 0,
        fd: fd,
        opened: true,
        out: true,
        buffer_curr: 0,
        buffer: new Uint8Array(65536),
        buffered: buffered};
     /*<<+io.js:131:2>>*/ caml_ml_channels[channel.fd] = channel;
     /*<<+io.js:132:2>>*/ return channel.fd;
    /*<<+io.js:133:0>>*/ }
    /*<<+io.js:103:0>>*/ function caml_ml_out_channels_list(){
     /*<<+io.js:104:2>>*/  /*<<+io.js:104:8>>*/ var l = 0;
     /*<<+io.js:105:2>>*/ for
    ( /*<<+io.js:105:12>>*/ var c = 0; c < caml_ml_channels.length; c++)
      /*<<+io.js:105:50>>*/ if
      (caml_ml_channels[c] && caml_ml_channels[c].opened
       && caml_ml_channels[c].out)
       /*<<+io.js:107:6>>*/ l = [0, caml_ml_channels[c].fd, l];
     /*<<+io.js:109:2>>*/ return l;
    /*<<+io.js:110:0>>*/ }
    /*<<+io.js:486:0>>*/ function caml_ml_output_ta
   (chanid, buffer, offset, len){
     /*<<+io.js:487:2>>*/  /*<<+io.js:487:11>>*/ var
     chan = caml_ml_channels[chanid];
     /*<<+io.js:488:2>>*/ if(! chan.opened)
      /*<<+io.js:488:20>>*/  /*<<+io.js:488:20>>*/ caml_raise_sys_error
      ("Cannot output to a closed channel");
     /*<<+io.js:489:2>>*/ buffer =
      /*<<+io.js:489:11>>*/ buffer.subarray(offset, offset + len);
     /*<<+io.js:490:2>>*/ if
     (chan.buffer_curr + buffer.length > chan.buffer.length) /*<<+io.js:490:60>>*/ {
      /*<<+io.js:491:4>>*/  /*<<+io.js:491:10>>*/ var
      b = new Uint8Array(chan.buffer_curr + buffer.length);
      /*<<+io.js:492:4>>*/  /*<<+io.js:492:4>>*/ b.set(chan.buffer);
      /*<<+io.js:493:4>>*/ chan.buffer = b;
    }
     /*<<+io.js:495:2>>*/ switch(chan.buffered){
      case 0:
        /*<<+io.js:497:4>>*/  /*<<+io.js:497:4>>*/ chan.buffer.set
        (buffer, chan.buffer_curr);
        /*<<+io.js:498:4>>*/ chan.buffer_curr += buffer.length;
        /*<<+io.js:499:4>>*/  /*<<+io.js:499:4>>*/ caml_ml_flush(chanid);
        /*<<+io.js:500:4>>*/ break;
      case 1:
        /*<<+io.js:502:4>>*/  /*<<+io.js:502:4>>*/ chan.buffer.set
        (buffer, chan.buffer_curr);
        /*<<+io.js:503:4>>*/ chan.buffer_curr += buffer.length;
        /*<<+io.js:504:4>>*/ if(chan.buffer_curr >= chan.buffer.length)
         /*<<+io.js:505:6>>*/  /*<<+io.js:505:6>>*/ caml_ml_flush(chanid);
        /*<<+io.js:506:4>>*/ break;
      case 2:
        /*<<+io.js:508:4>>*/  /*<<+io.js:508:11>>*/ var
        id =  /*<<+io.js:508:13>>*/ buffer.lastIndexOf(10);
        /*<<+io.js:509:4>>*/ if(id < 0) /*<<+io.js:509:15>>*/ {
         /*<<+io.js:510:6>>*/  /*<<+io.js:510:6>>*/ chan.buffer.set
         (buffer, chan.buffer_curr);
         /*<<+io.js:511:6>>*/ chan.buffer_curr += buffer.length;
         /*<<+io.js:512:6>>*/ if(chan.buffer_curr >= chan.buffer.length)
          /*<<+io.js:513:8>>*/  /*<<+io.js:513:8>>*/ caml_ml_flush(chanid);
       }
       else /*<<+io.js:515:9>>*/ {
         /*<<+io.js:516:6>>*/  /*<<+io.js:516:6>>*/ chan.buffer.set
         ( /*<<+io.js:516:22>>*/ buffer.subarray(0, id + 1), chan.buffer_curr);
         /*<<+io.js:517:6>>*/ chan.buffer_curr += id + 1;
         /*<<+io.js:518:6>>*/  /*<<+io.js:518:6>>*/ caml_ml_flush(chanid);
         /*<<+io.js:519:6>>*/  /*<<+io.js:519:6>>*/ chan.buffer.set
         ( /*<<+io.js:519:22>>*/ buffer.subarray(id + 1), chan.buffer_curr);
         /*<<+io.js:520:6>>*/ chan.buffer_curr += buffer.length - id - 1;
       }
        /*<<+io.js:522:4>>*/ break;
    }
     /*<<+io.js:524:2>>*/ return 0;
    /*<<+io.js:525:0>>*/ }
    /*<<+io.js:529:0>>*/ function caml_ml_output_bytes
   (chanid, buffer, offset, len){
     /*<<+io.js:530:2>>*/  /*<<+io.js:530:13>>*/ var
     buffer =  /*<<+io.js:530:15>>*/ caml_uint8_array_of_bytes(buffer);
     /*<<+io.js:531:2>>*/ return  /*<<+io.js:531:9>>*/ caml_ml_output_ta
            (chanid, buffer, offset, len);
    /*<<+io.js:532:0>>*/ }
    /*<<+io.js:546:0>>*/ function caml_ml_output(chanid, buffer, offset, len){
     /*<<+io.js:547:2>>*/ return  /*<<+io.js:547:9>>*/ caml_ml_output_bytes
            (chanid,
              /*<<+io.js:547:37>>*/ caml_bytes_of_string(buffer),
             offset,
             len);
    /*<<+io.js:548:0>>*/ }
    /*<<+io.js:553:0>>*/ function caml_ml_output_char(chanid, c){
     /*<<+io.js:554:2>>*/  /*<<+io.js:554:8>>*/ var
     s =
        /*<<+io.js:554:10>>*/ caml_string_of_jsbytes
        ( /*<<+io.js:554:33>>*/ String.fromCharCode(c));
     /*<<+io.js:555:2>>*/  /*<<+io.js:555:2>>*/ caml_ml_output
     (chanid, s, 0, 1);
     /*<<+io.js:556:2>>*/ return 0;
    /*<<+io.js:557:0>>*/ }
    /*<<+ints.js:107:0>>*/ function caml_mod(x, y){
     /*<<+ints.js:108:2>>*/ if(y == 0)
      /*<<+ints.js:108:14>>*/  /*<<+ints.js:108:14>>*/ caml_raise_zero_divide
      ();
     /*<<+ints.js:109:2>>*/ return x % y;
    /*<<+ints.js:110:0>>*/ }
    /*<<+compare.js:249:0>>*/ function caml_notequal(x, y){
     /*<<+compare.js:249:32>>*/ return +
           ( /*<<+compare.js:249:41>>*/ caml_compare_val(x, y, false) != 0);
    /*<<+compare.js:249:76>>*/ }
    /*<<+obj.js:55:0>>*/ function caml_obj_block(tag, size){
     /*<<+obj.js:56:2>>*/  /*<<+obj.js:56:8>>*/ var o = new Array(size + 1);
     /*<<+obj.js:57:2>>*/ o[0] = tag;
     /*<<+obj.js:58:2>>*/ for
    ( /*<<+obj.js:58:13>>*/ var i = 1; i <= size; i++)
      /*<<+obj.js:58:34>>*/ o[i] = 0;
     /*<<+obj.js:59:2>>*/ return o;
    /*<<+obj.js:60:0>>*/ }
    /*<<+obj.js:37:0>>*/ function caml_obj_tag(x){
     /*<<+obj.js:38:2>>*/ if(x instanceof Array && x[0] == x[0] >>> 0)
      /*<<+obj.js:39:4>>*/ return x[0];
    else if( /*<<+obj.js:40:11>>*/ caml_is_ml_bytes(x))
      /*<<+obj.js:41:4>>*/ return 252;
    else if( /*<<+obj.js:42:11>>*/ caml_is_ml_string(x))
      /*<<+obj.js:43:4>>*/ return 252;
    else if(x instanceof Function || typeof x == "function")
      /*<<+obj.js:45:4>>*/ return 247;
    else if(x && x.caml_custom)
      /*<<+obj.js:47:4>>*/ return 255;
    else
      /*<<+obj.js:49:4>>*/ return 1000;
    /*<<+obj.js:50:0>>*/ }
    /*<<+stdlib.js:149:0>>*/ function caml_build_symbols(symb){
     /*<<+stdlib.js:150:2>>*/  /*<<+stdlib.js:150:8>>*/ var r = {};
     /*<<+stdlib.js:151:2>>*/ if(symb)
      /*<<+stdlib.js:151:11>>*/ for
     ( /*<<+stdlib.js:152:14>>*/ var i = 1; i < symb.length; i++)
       /*<<+stdlib.js:152:40>>*/ r
       [ /*<<+stdlib.js:153:8>>*/ caml_jsstring_of_string(symb[i][1])]
      = symb[i][2];
     /*<<+stdlib.js:156:2>>*/ return r;
    /*<<+stdlib.js:157:0>>*/ }
    /*<<+stdlib.js:162:0>>*/ function caml_register_global(n, v, name_opt){
     /*<<+stdlib.js:163:2>>*/ if(name_opt) /*<<+stdlib.js:163:16>>*/ {
      /*<<+stdlib.js:164:4>>*/  /*<<+stdlib.js:164:13>>*/ var name = name_opt;
      /*<<+stdlib.js:165:4>>*/ if(globalThis.toplevelReloc)
       /*<<+stdlib.js:165:33>>*/ n =
        /*<<+stdlib.js:166:10>>*/ caml_callback
        (globalThis.toplevelReloc, [name]);
     else if(caml_global_data.symbols) /*<<+stdlib.js:168:39>>*/ {
       /*<<+stdlib.js:169:6>>*/ if(! caml_global_data.symidx)
        /*<<+stdlib.js:169:35>>*/ caml_global_data.symidx =
         /*<<+stdlib.js:170:34>>*/ caml_build_symbols
         (caml_global_data.symbols);
       /*<<+stdlib.js:172:6>>*/  /*<<+stdlib.js:172:14>>*/ var
       nid = caml_global_data.symidx[name];
       /*<<+stdlib.js:173:6>>*/ if(nid >= 0)
        /*<<+stdlib.js:174:8>>*/ n = nid;
      else
        /*<<+stdlib.js:175:11>>*/  /*<<+stdlib.js:176:8>>*/ caml_failwith
        ("caml_register_global: cannot locate " + name);
     }
    }
     /*<<+stdlib.js:180:2>>*/ caml_global_data[n + 1] = v;
     /*<<+stdlib.js:181:2>>*/ if(name_opt)
      /*<<+stdlib.js:181:15>>*/ caml_global_data[name_opt] = v;
    /*<<+stdlib.js:182:0>>*/ }
    /*<<+stdlib.js:133:0>>*/ function caml_register_named_value(nm, v){
     /*<<+stdlib.js:134:2>>*/ caml_named_values
     [ /*<<+stdlib.js:134:20>>*/ caml_jsbytes_of_string(nm)]
    = v;
     /*<<+stdlib.js:135:2>>*/ return 0;
    /*<<+stdlib.js:136:0>>*/ }
    /*<<+obj.js:141:0>>*/ function caml_set_oo_id(b){
     /*<<+obj.js:142:2>>*/ b[2] = caml_oo_last_id++;
     /*<<+obj.js:143:2>>*/ return b;
    /*<<+obj.js:144:0>>*/ }
    /*<<+mlBytes.js:675:0>>*/ function caml_string_equal(s1, s2){
     /*<<+mlBytes.js:676:2>>*/ if(s1 === s2)
      /*<<+mlBytes.js:676:16>>*/ return 1;
     /*<<+mlBytes.js:677:2>>*/ return 0;
    /*<<+mlBytes.js:678:0>>*/ }
    /*<<+mlBytes.js:206:0>>*/ function caml_string_bound_error(){
     /*<<+mlBytes.js:207:2>>*/  /*<<+mlBytes.js:207:2>>*/ caml_invalid_argument
     ("index out of bounds");
    /*<<+mlBytes.js:208:0>>*/ }
    /*<<+mlBytes.js:219:0>>*/ function caml_string_get(s, i){
     /*<<+mlBytes.js:220:2>>*/ if
     (i >>> 0 >=  /*<<+mlBytes.js:220:17>>*/ caml_ml_string_length(s))
      /*<<+mlBytes.js:220:43>>*/  /*<<+mlBytes.js:220:43>>*/ caml_string_bound_error
      ();
     /*<<+mlBytes.js:221:2>>*/ return  /*<<+mlBytes.js:221:9>>*/ caml_string_unsafe_get
            (s, i);
    /*<<+mlBytes.js:222:0>>*/ }
    /*<<+mlBytes.js:227:0>>*/ function caml_string_get16(s, i){
     /*<<+mlBytes.js:228:2>>*/ if
     (i >>> 0 >=  /*<<+mlBytes.js:228:17>>*/ caml_ml_string_length(s) - 1)
      /*<<+mlBytes.js:228:47>>*/  /*<<+mlBytes.js:228:47>>*/ caml_string_bound_error
      ();
     /*<<+mlBytes.js:229:2>>*/ var
      /*<<+mlBytes.js:229:9>>*/ b1 =
        /*<<+mlBytes.js:229:11>>*/ caml_string_unsafe_get(s, i),
      /*<<+mlBytes.js:230:9>>*/ b2 =
        /*<<+mlBytes.js:230:11>>*/ caml_string_unsafe_get(s, i + 1);
     /*<<+mlBytes.js:231:2>>*/ return b2 << 8 | b1;
    /*<<+mlBytes.js:232:0>>*/ }
    /*<<+mlBytes.js:539:0>>*/ function caml_string_notequal(s1, s2){
     /*<<+mlBytes.js:539:40>>*/ return 1
           -  /*<<+mlBytes.js:539:49>>*/ caml_string_equal(s1, s2);
    /*<<+mlBytes.js:539:76>>*/ }
    /*<<+sys.js:143:0>>*/  /*<<+sys.js:143:14>>*/ var
    caml_argv =
       /*<<+sys.js:143:17>>*/ function(){
         /*<<+sys.js:144:2>>*/ var
          /*<<+sys.js:144:14>>*/ process = globalThis.process,
          /*<<+sys.js:145:11>>*/ main = "a.out",
          /*<<+sys.js:146:11>>*/ args = [];
         /*<<+sys.js:148:2>>*/ if
         (process && process.argv && process.argv.length > 1) /*<<+sys.js:150:33>>*/ {
          /*<<+sys.js:151:4>>*/  /*<<+sys.js:151:13>>*/ var
          argv = process.argv;
          /*<<+sys.js:153:4>>*/ main = argv[1];
          /*<<+sys.js:154:4>>*/ args =  /*<<+sys.js:154:11>>*/ argv.slice(2);
        }
         /*<<+sys.js:157:2>>*/ var
          /*<<+sys.js:157:8>>*/ p =
            /*<<+sys.js:157:10>>*/ caml_string_of_jsstring(main),
          /*<<+sys.js:158:12>>*/ args2 = [0, p];
         /*<<+sys.js:159:2>>*/ for
        ( /*<<+sys.js:159:12>>*/ var i = 0; i < args.length; i++)
          /*<<+sys.js:160:4>>*/  /*<<+sys.js:160:4>>*/ args2.push
          ( /*<<+sys.js:160:15>>*/ caml_string_of_jsstring(args[i]));
         /*<<+sys.js:161:2>>*/ return args2;
        /*<<+sys.js:143:18>>*/ }
       ();
    /*<<+sys.js:176:0>>*/ function caml_sys_argv(a){
     /*<<+sys.js:177:2>>*/ return caml_argv;
    /*<<+sys.js:178:0>>*/ }
    /*<<+sys.js:259:0>>*/ function caml_sys_const_max_wosize(){
     /*<<+sys.js:259:40>>*/ return 0x7FFFFFFF / 4 | 0;
    /*<<+sys.js:259:66>>*/ }
    /*<<+sys.js:278:0>>*/  /*<<+sys.js:278:12>>*/ var
    os_type =
      globalThis.process && globalThis.process.platform
       && globalThis.process.platform == "win32"
       ? "Cygwin"
       : "Unix";
    /*<<+sys.js:285:0>>*/ function caml_sys_get_config(){
     /*<<+sys.js:286:2>>*/ return [0,
             /*<<+sys.js:286:13>>*/ caml_string_of_jsbytes(os_type),
            32,
            0];
    /*<<+sys.js:287:0>>*/ }
    /*<<+fail.js:66:0>>*/ function caml_raise_not_found(){
     /*<<+fail.js:67:2>>*/  /*<<+fail.js:67:2>>*/ caml_raise_constant
     (caml_global_data.Not_found);
    /*<<+fail.js:67:51>>*/ }
    /*<<+sys.js:128:0>>*/ function caml_sys_getenv(name){
     /*<<+sys.js:129:2>>*/  /*<<+sys.js:129:8>>*/ var
     r =
        /*<<+sys.js:129:10>>*/ jsoo_sys_getenv
        ( /*<<+sys.js:129:26>>*/ caml_jsstring_of_string(name));
     /*<<+sys.js:130:2>>*/ if(r === undefined)
      /*<<+sys.js:131:4>>*/  /*<<+sys.js:131:4>>*/ caml_raise_not_found();
     /*<<+sys.js:132:2>>*/ return  /*<<+sys.js:132:9>>*/ caml_string_of_jsstring
            (r);
    /*<<+sys.js:133:0>>*/ }
    /*<<+sys.js:232:0>>*/ function caml_sys_random_seed(){
     /*<<+sys.js:233:2>>*/ if(globalThis.crypto)
      /*<<+sys.js:233:25>>*/ if(globalThis.crypto.getRandomValues) /*<<+sys.js:234:44>>*/ {
       /*<<+sys.js:235:7>>*/  /*<<+sys.js:235:13>>*/ var
       a =
          /*<<+sys.js:235:15>>*/ globalThis.crypto.getRandomValues
          (new Int32Array(4));
       /*<<+sys.js:236:7>>*/ return [0, a[0], a[1], a[2], a[3]];
     }
     else if(globalThis.crypto.randomBytes) /*<<+sys.js:237:47>>*/ {
       /*<<+sys.js:238:7>>*/  /*<<+sys.js:238:13>>*/ var
       a =
         new
          Int32Array
          ( /*<<+sys.js:238:30>>*/ globalThis.crypto.randomBytes(16).buffer);
       /*<<+sys.js:239:7>>*/ return [0, a[0], a[1], a[2], a[3]];
     }
     /*<<+sys.js:242:2>>*/ var
      /*<<+sys.js:242:10>>*/ now =
        /*<<+sys.js:242:12>>*/ new Date().getTime(),
      /*<<+sys.js:243:8>>*/ x =
       now ^ 0xffffffff *  /*<<+sys.js:243:25>>*/ Math.random();
     /*<<+sys.js:244:2>>*/ return [0, x];
    /*<<+sys.js:245:0>>*/ }
    /*<<+jslib.js:40:0>>*/ function caml_trampoline(res){
     /*<<+jslib.js:41:2>>*/  /*<<+jslib.js:41:8>>*/ var c = 1;
     /*<<+jslib.js:42:2>>*/ while(res && res.joo_tramp) /*<<+jslib.js:42:29>>*/ {
      /*<<+jslib.js:43:4>>*/ res =
       /*<<+jslib.js:43:10>>*/ res.joo_tramp.apply(null, res.joo_args);
      /*<<+jslib.js:44:4>>*/ c++;
    }
     /*<<+jslib.js:46:2>>*/ return res;
    /*<<+jslib.js:47:0>>*/ }
    /*<<+jslib.js:50:0>>*/ function caml_trampoline_return(f, args){
     /*<<+jslib.js:51:2>>*/ return {joo_tramp: f, joo_args: args};
    /*<<+jslib.js:52:0>>*/ }
    /*<<+obj.js:19:0>>*/ function caml_update_dummy(x, y){
     /*<<+obj.js:20:2>>*/ if(y.fun) /*<<+obj.js:20:14>>*/ {
      /*<<+obj.js:20:16>>*/ x.fun = y.fun;
      /*<<+obj.js:20:31>>*/ return 0;
    }
     /*<<+obj.js:21:2>>*/ if(typeof y === "function") /*<<+obj.js:21:30>>*/ {
      /*<<+obj.js:21:32>>*/ x.fun = y;
      /*<<+obj.js:21:43>>*/ return 0;
    }
     /*<<+obj.js:22:2>>*/  /*<<+obj.js:22:8>>*/ var i = y.length;
     /*<<+obj.js:22:20>>*/ while(i--)  /*<<+obj.js:22:32>>*/ x[i] = y[i];
     /*<<+obj.js:22:45>>*/ return 0;
    /*<<+obj.js:23:0>>*/ }
    /*<<+weak.js:26:0>>*/  /*<<+weak.js:26:26>>*/ var
    caml_ephe_data_offset = 2;
    /*<<+weak.js:74:0>>*/ function caml_weak_create(n){
     /*<<+weak.js:75:2>>*/ if(n < 0)
      /*<<+weak.js:75:13>>*/  /*<<+weak.js:75:13>>*/ caml_invalid_argument
      ("Weak.create");
     /*<<+weak.js:76:2>>*/  /*<<+weak.js:76:8>>*/ var
     x = [251, "caml_ephe_list_head"];
     /*<<+weak.js:77:2>>*/ x.length = caml_ephe_key_offset + n;
     /*<<+weak.js:78:2>>*/ return x;
    /*<<+weak.js:79:0>>*/ }
    /*<<+jslib.js:132:0>>*/ function caml_wrap_exception(e){
     /*<<+jslib.js:133:23>>*/ {
      /*<<+jslib.js:134:4>>*/ if(e instanceof Array)
       /*<<+jslib.js:134:27>>*/ return e;
      /*<<+jslib.js:135:4>>*/ var exn;
      /*<<+jslib.js:137:4>>*/ if
      (globalThis.RangeError && e instanceof globalThis.RangeError
       && e.message
       &&  /*<<+jslib.js:140:10>>*/ e.message.match(/maximum call stack/i))
       /*<<+jslib.js:141:6>>*/ exn = caml_global_data.Stack_overflow;
     else if
      (globalThis.InternalError && e instanceof globalThis.InternalError
       && e.message
       &&  /*<<+jslib.js:146:10>>*/ e.message.match(/too much recursion/i))
       /*<<+jslib.js:147:6>>*/ exn = caml_global_data.Stack_overflow;
     else if
      (e instanceof globalThis.Error
       &&  /*<<+jslib.js:149:45>>*/ caml_named_value("jsError"))
       /*<<+jslib.js:150:6>>*/ exn =
       [0,  /*<<+jslib.js:150:15>>*/ caml_named_value("jsError"), e];
     else
       /*<<+jslib.js:153:6>>*/ exn =
       [0,
        caml_global_data.Failure,
         /*<<+jslib.js:153:40>>*/ caml_string_of_jsstring
         ( /*<<+jslib.js:153:65>>*/ String(e))];
      /*<<+jslib.js:155:4>>*/ if(e instanceof globalThis.Error)
       /*<<+jslib.js:156:6>>*/ exn.js_error = e;
      /*<<+jslib.js:157:4>>*/ return exn;
    }
    /*<<+jslib.js:160:0>>*/ }
    /*<<+nat.js:13:0>>*/ function MlNat(x){
     /*<<+nat.js:14:2>>*/ this.data = new Int32Array(x);
     /*<<+nat.js:21:2>>*/ this.length = this.data.length + 2;
    /*<<+nat.js:22:0>>*/ }
    /*<<+nat.js:24:0>>*/ MlNat.prototype.caml_custom = "_nat";
    /*<<+nat.js:50:0>>*/ function create_nat(size){
     /*<<+nat.js:51:2>>*/  /*<<+nat.js:51:10>>*/ var arr = new MlNat(size);
     /*<<+nat.js:52:2>>*/ for( /*<<+nat.js:52:12>>*/ var i = 0; i < size; i++)
      /*<<+nat.js:52:32>>*/ arr.data[i] = - 1;
     /*<<+nat.js:55:2>>*/ return arr;
    /*<<+nat.js:56:0>>*/ }
    /*<<+nat.js:136:0>>*/ function incr_nat(nat, ofs, len, carry_in){
     /*<<+nat.js:137:2>>*/  /*<<+nat.js:137:12>>*/ var carry = carry_in;
     /*<<+nat.js:138:2>>*/ for
    ( /*<<+nat.js:138:12>>*/ var i = 0; i < len; i++) /*<<+nat.js:138:31>>*/ {
      /*<<+nat.js:139:4>>*/  /*<<+nat.js:139:10>>*/ var
      x = (nat.data[ofs + i] >>> 0) + carry;
      /*<<+nat.js:140:4>>*/ nat.data[ofs + i] = x | 0;
      /*<<+nat.js:141:4>>*/ if(x == x >>> 0) /*<<+nat.js:141:23>>*/ {
       /*<<+nat.js:142:6>>*/ carry = 0;
       /*<<+nat.js:143:6>>*/ break;
     }
     else
       /*<<+nat.js:144:11>>*/ carry = 1;
    }
     /*<<+nat.js:148:2>>*/ return carry;
    /*<<+nat.js:149:0>>*/ }
    /*<<+nat.js:402:0>>*/ function serialize_nat(writer, nat, sz){
     /*<<+nat.js:403:2>>*/  /*<<+nat.js:403:10>>*/ var len = nat.data.length;
     /*<<+nat.js:404:2>>*/  /*<<+nat.js:404:2>>*/ writer.write(32, len);
     /*<<+nat.js:405:2>>*/ for
    ( /*<<+nat.js:405:12>>*/ var i = 0; i < len; i++)
      /*<<+nat.js:405:30>>*/  /*<<+nat.js:406:4>>*/ writer.write
      (32, nat.data[i]);
     /*<<+nat.js:408:2>>*/ sz[0] = len * 4;
     /*<<+nat.js:409:2>>*/ sz[1] = len * 8;
    /*<<+nat.js:410:0>>*/ }
    /*<<+nat.js:414:0>>*/ function deserialize_nat(reader, sz){
     /*<<+nat.js:415:2>>*/ var
      /*<<+nat.js:415:10>>*/ len =  /*<<+nat.js:415:12>>*/ reader.read32s(),
      /*<<+nat.js:416:10>>*/ nat = new MlNat(len);
     /*<<+nat.js:417:2>>*/ for
    ( /*<<+nat.js:417:12>>*/ var i = 0; i < len; i++)
      /*<<+nat.js:417:30>>*/ nat.data[i] =
       /*<<+nat.js:418:18>>*/ reader.read32s();
     /*<<+nat.js:420:2>>*/ sz[0] = len * 4;
     /*<<+nat.js:421:2>>*/ return nat;
    /*<<+nat.js:422:0>>*/ }
    /*<<+nat.js:97:0>>*/ function num_digits_nat(nat, ofs, len){
     /*<<+nat.js:98:2>>*/ for
    ( /*<<+nat.js:98:12>>*/ var i = len - 1; i >= 0; i--)
      /*<<+nat.js:98:36>>*/ if(nat.data[ofs + i] != 0)
       /*<<+nat.js:99:29>>*/ return i + 1;
     /*<<+nat.js:101:2>>*/ return 1;
    /*<<+nat.js:102:0>>*/ }
    /*<<+nat.js:28:0>>*/ function caml_hash_nat(x){
     /*<<+nat.js:29:2>>*/ var
      /*<<+nat.js:29:10>>*/ len =
        /*<<+nat.js:29:12>>*/ num_digits_nat(x, 0, x.data.length),
      /*<<+nat.js:30:8>>*/ h = 0;
     /*<<+nat.js:31:2>>*/ for( /*<<+nat.js:31:13>>*/ var i = 0; i < len; i++)
      /*<<+nat.js:31:32>>*/ h =
       /*<<+nat.js:32:8>>*/ caml_hash_mix_int(h, x.data[i]);
     /*<<+nat.js:34:2>>*/ return h;
    /*<<+nat.js:35:0>>*/ }
    /*<<+nat.js:4:0>>*/ function initialize_nat(){
     /*<<+nat.js:5:2>>*/ caml_custom_ops["_nat"] =
     {deserialize: deserialize_nat,
      serialize: serialize_nat,
      hash: caml_hash_nat};
    /*<<+nat.js:10:0>>*/ }
    /*<<+nat.js:75:0>>*/ function set_digit_nat(nat, ofs, digit){
     /*<<+nat.js:76:2>>*/ nat.data[ofs] = digit;
     /*<<+nat.js:77:2>>*/ return 0;
    /*<<+nat.js:78:0>>*/ }
    /*<<+nat.js:59:0>>*/ function set_to_zero_nat(nat, ofs, len){
     /*<<+nat.js:60:2>>*/ for( /*<<+nat.js:60:12>>*/ var i = 0; i < len; i++)
      /*<<+nat.js:60:31>>*/ nat.data[ofs + i] = 0;
     /*<<+nat.js:63:2>>*/ return 0;
    /*<<+nat.js:64:0>>*/ }
    /*<<+sys.js:37:0>>*/ function caml_is_special_exception(exn){
     /*<<+sys.js:38:2>>*/ switch(exn[2]){
      case - 8:
      case - 11:
      case - 12:
        /*<<+sys.js:42:4>>*/ return 1;
      default:  /*<<+sys.js:44:4>>*/ return 0;
    }
    /*<<+sys.js:46:0>>*/ }
    /*<<+sys.js:50:0>>*/ function caml_format_exception(exn){
     /*<<+sys.js:51:2>>*/  /*<<+sys.js:51:8>>*/ var r = "";
     /*<<+sys.js:52:2>>*/ if(exn[0] == 0) /*<<+sys.js:52:18>>*/ {
      /*<<+sys.js:53:4>>*/ r += exn[1][1];
      /*<<+sys.js:54:4>>*/ if
      (exn.length == 3 && exn[2][0] == 0
       &&  /*<<+sys.js:54:44>>*/ caml_is_special_exception(exn[1]))
       /*<<+sys.js:56:6>>*/ var
        /*<<+sys.js:56:17>>*/ bucket = exn[2],
        /*<<+sys.js:57:16>>*/ start = 1;
     else
       /*<<+sys.js:59:6>>*/ var
        /*<<+sys.js:59:16>>*/ start = 2,
        /*<<+sys.js:60:17>>*/ bucket = exn;
      /*<<+sys.js:62:4>>*/ r += "(";
      /*<<+sys.js:63:4>>*/ for
     ( /*<<+sys.js:63:14>>*/ var i = start; i < bucket.length; i++) /*<<+sys.js:63:47>>*/ {
       /*<<+sys.js:64:6>>*/ if(i > start)  /*<<+sys.js:64:20>>*/ r += ", ";
       /*<<+sys.js:65:6>>*/  /*<<+sys.js:65:12>>*/ var v = bucket[i];
       /*<<+sys.js:66:6>>*/ if(typeof v == "number")
        /*<<+sys.js:67:8>>*/ r +=  /*<<+sys.js:67:12>>*/ v.toString();
      else if(v instanceof MlBytes)
        /*<<+sys.js:68:35>>*/ r +=
        '"' +  /*<<+sys.js:69:18>>*/ v.toString() + '"';
      else if(typeof v == "string")
        /*<<+sys.js:71:35>>*/ r +=
        '"' +  /*<<+sys.js:72:18>>*/ v.toString() + '"';
      else
        /*<<+sys.js:74:11>>*/ r += "_";
     }
      /*<<+sys.js:76:4>>*/ r += ")";
    }
    else if(exn[0] == 248)  /*<<+sys.js:77:27>>*/ r += exn[1];
     /*<<+sys.js:80:2>>*/ return r;
    /*<<+sys.js:81:0>>*/ }
    /*<<+sys.js:85:0>>*/ function caml_fatal_uncaught_exception(err){
     /*<<+sys.js:86:2>>*/ if
     (err instanceof Array && (err[0] == 0 || err[0] == 248)) /*<<+sys.js:86:61>>*/ {
      /*<<+sys.js:87:4>>*/  /*<<+sys.js:87:16>>*/ var
      handler =
         /*<<+sys.js:87:18>>*/ caml_named_value
         ("Printexc.handle_uncaught_exception");
      /*<<+sys.js:88:4>>*/ if(handler)
       /*<<+sys.js:88:16>>*/  /*<<+sys.js:88:16>>*/ caml_callback
       (handler, [err, false]);
     else /*<<+sys.js:89:9>>*/ {
       /*<<+sys.js:90:6>>*/ var
        /*<<+sys.js:90:14>>*/ msg =
          /*<<+sys.js:90:16>>*/ caml_format_exception(err),
        /*<<+sys.js:91:18>>*/ at_exit =
          /*<<+sys.js:91:20>>*/ caml_named_value("Pervasives.do_at_exit");
       /*<<+sys.js:92:6>>*/ if(at_exit)
        /*<<+sys.js:92:18>>*/  /*<<+sys.js:92:18>>*/ caml_callback
        (at_exit, [0]);
       /*<<+sys.js:93:6>>*/  /*<<+sys.js:93:6>>*/ console.error
       ("Fatal error: exception " + msg);
       /*<<+sys.js:94:6>>*/ if(err.js_error)
        /*<<+sys.js:94:23>>*/ throw err.js_error;
     }
    }
    else
      /*<<+sys.js:97:7>>*/ throw err;
    /*<<+sys.js:100:0>>*/ }
    /*<<+sys.js:360:0>>*/ function caml_setup_uncaught_exception_handler(){
     /*<<+sys.js:361:2>>*/  /*<<+sys.js:361:14>>*/ var
     process = globalThis.process;
     /*<<+sys.js:362:2>>*/ if(process && process.on)
      /*<<+sys.js:362:28>>*/  /*<<+sys.js:363:4>>*/ process.on
      ("uncaughtException",
       function(err, origin){
         /*<<+sys.js:364:6>>*/  /*<<+sys.js:364:6>>*/ caml_fatal_uncaught_exception
         (err);
         /*<<+sys.js:365:6>>*/  /*<<+sys.js:365:6>>*/ process.exit(2);
        /*<<+sys.js:363:36>>*/ });
    else if(globalThis.addEventListener)
      /*<<+sys.js:368:38>>*/  /*<<+sys.js:369:4>>*/ globalThis.addEventListener
      ("error",
       function(event){
         /*<<+sys.js:370:6>>*/ if(event.error)
          /*<<+sys.js:370:21>>*/  /*<<+sys.js:371:8>>*/ caml_fatal_uncaught_exception
          (event.error);
        /*<<+sys.js:369:41>>*/ });
    /*<<+sys.js:375:0>>*/ }
    /*<<+sys.js:376:0>>*/  /*<<+sys.js:376:0>>*/ caml_setup_uncaught_exception_handler
    ();
   var
    cst$4 = "",
    cst_has_type = "\nhas type\n",
    cst$9 = " ",
    cst$27 = " : ",
    cst$18 = " =",
    cst_a$0 = '"%a"',
    cst_12g = "%.12g",
    cst_Li = "%Li",
    cst_S = "%S",
    cst_a = "%a",
    cst_d = "%d",
    cst_i = "%i",
    cst_li = "%li",
    cst_ni = "%ni",
    cst_s = "%s",
    cst_s_s = "%s : %s\n",
    cst_u = "%u",
    cst_gt = "&gt;",
    cst$20 = "(@[",
    cst_Program_not_linked_with_g_ =
      "(Program not linked with -g, cannot print stack backtrace)\n",
    cst_Some = "(Some ",
    cst$25 = ")",
    cst$23 = "))",
    cst$5 = ", ",
    cst_characters = ", characters ",
    cst$21 = ",@ ",
    cst$10 = "--!>",
    cst$8 = "-->",
    cst$11 = "->",
    cst$0 = ".",
    cst$26 = ":",
    cst_origin_value = ": origin value ",
    cst$15 = ";@ ",
    cst$7 = "<\/",
    cst_2 = "<2>",
    cst_v = "<v>",
    cst$6 = ">",
    cst$13 = "@ ",
    cst$19 = "@ }@]",
    cst$14 = "@,",
    cst$24 = "@,))@]",
    cst$16 = "@,]@]",
    cst$2 = "@[",
    cst_s$0 = "@[%s =@ ",
    cst_2$0 = "@[<2>[",
    cst_2$1 = "@[<2>{ ",
    cst$3 = "@]",
    cst$22 = "@])",
    cst$1 = "@{",
    cst_Assert_failure = "Assert_failure",
    cst_Coq_Init_Logic_eq = "Coq.Init.Logic.eq",
    cst_Division_by_zero = "Division_by_zero",
    cst_End_of_file = "End_of_file",
    cst_Failure = "Failure",
    cst_Fatal_error_exception = "Fatal error: exception ",
    cst_Fatal_error_exception_s = "Fatal error: exception %s\n",
    cst_Invalid_bounds = "Invalid bounds",
    cst_Invalid_argument = "Invalid_argument",
    cst_List_nth = "List.nth",
    cst_Malformed_input = "Malformed input",
    cst_Map_bal = "Map.bal",
    cst_Marshal_from_bytes = "Marshal.from_bytes",
    cst_Match_failure = "Match_failure",
    cst_None = "None",
    cst_Not_found = "Not_found",
    cst_Out_of_memory = "Out_of_memory",
    cst_Re_replace = "Re.replace",
    cst_Re_repn = "Re.repn",
    cst_Set_bal = "Set.bal",
    cst_Stack_overflow = "Stack_overflow",
    cst_Sys_blocked_io = "Sys_blocked_io",
    cst_Sys_error = "Sys_error",
    cst_The_term = "The term\n",
    cst_Too_much_input = "Too much input",
    cst_Undefined_recursive_module = "Undefined_recursive_module",
    cst_Unix_Unix_error = "Unix.Unix_error",
    cst_Wrong_padding = "Wrong padding",
    cst$12 = "]]>",
    cst_actions = "actions",
    cst_ann_print_pp_ml = "ann-print/pp.ml",
    cst_api_lang_ml = "api/lang.ml",
    cst_api_notation_ml = "api/notation.ml",
    cst_camlinternalFormat_ml = "camlinternalFormat.ml",
    cst_clone = "clone",
    cst_close_in = "close_in",
    cst_close_out = "close_out",
    cst_closed = "closed",
    cst_conclusion = "conclusion",
    cst_context = "context",
    cst_count = "count",
    cst_flush = "flush",
    cst_fresh = "fresh",
    cst_getmeta = "getmeta",
    cst_goal = "goal",
    cst_handle = "handle",
    cst_html = "html",
    cst_htmltag = "htmltag",
    cst_input = "input",
    cst_ivariants = "ivariants",
    cst_lib_core_ml = "lib/core.ml",
    cst_movehyp = "movehyp",
    cst_nat = "nat",
    cst_next = "next",
    cst_output = "output",
    cst_parent = "parent",
    cst_phandle = "phandle",
    cst_position = "position",
    cst_proof = "proof",
    cst_setgoalsb = "setgoalsb",
    cst_setmeta = "setmeta",
    cst_subgoals = "subgoals",
    cst_term = "term",
    cst_test = "test `",
    cst_tostring = "tostring",
    cst_tvars = "tvars",
    cst$17 = "{ ";
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : caml_call_gen(f, [a0, a1]);
   }
    /*<<?>>*/ function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : caml_call_gen(f, [a0, a1, a2]);
   }
    /*<<?>>*/ function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : caml_call_gen(f, [a0, a1, a2, a3]);
   }
    /*<<?>>*/ function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
    /*<<?>>*/ function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
    /*<<?>>*/ function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) == 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var undef = undefined;
   caml_fs_init();
   var
    Out_of_memory = [248, cst_Out_of_memory, -1],
    Sys_error = [248, cst_Sys_error, -2],
    Failure = [248, cst_Failure, -3],
    Invalid_argument = [248, cst_Invalid_argument, -4],
    End_of_file = [248, cst_End_of_file, -5],
    Division_by_zero = [248, cst_Division_by_zero, -6],
    Not_found = [248, cst_Not_found, -7],
    Match_failure = [248, cst_Match_failure, -8],
    Stack_overflow = [248, cst_Stack_overflow, -9],
    Sys_blocked_io = [248, cst_Sys_blocked_io, -10],
    Assert_failure = [248, cst_Assert_failure, -11],
    Undefined_recursive_module = [248, cst_Undefined_recursive_module, -12],
    zero$0 = caml_int64_create_lo_mi_hi(0, 0, 0),
    one$0 = caml_int64_create_lo_mi_hi(1, 0, 0),
    partial = [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, 0]]],
    locfmt =
      [0,
       [11,
        'File "',
        [2,
         0,
         [11,
          '", line ',
          [4,
           0,
           0,
           0,
           [11,
            cst_characters,
            [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, [11, ": ", [2, 0, 0]]]]]]]]]],
       'File "%s", line %d, characters %d-%d: %s'],
    shared = [0, cst_clone, cst_next, cst_count],
    _eJ_ = [0, "put", cst_flush, cst_close_out],
    _eL_ = [0, "get", cst_close_in],
    shared$0 = [0, cst_close_in, cst_input],
    at_negative_index_msg = "List: Negative index not allowed",
    at_after_end_msg = "List: Index past end of list",
    cany = [0, [0, 0, 255], 0],
    eps_expr = [0, 0, 0],
    partial$0 = [12, 62, 0],
    partial$1 = [2, 0, [12, 96, [17, [0, cst$14, 0, 0], [2, 0, [17, 0, 0]]]]],
    partial$2 = [15, [17, 0, [17, 0, 0]]],
    partial$3 = [1, [0, [11, cst_v, 0], cst_v]],
    newline$0 = [0, 10, 0],
    space = [0, cst$9, 0, 1, 1],
    mkProp = [6, 892859331],
    mkType = [6, 937565914],
    shared$1 =
      [0,
       cst_tostring,
       cst_term,
       cst_setmeta,
       cst_proof,
       cst_position,
       cst_phandle,
       cst_parent,
       cst_html,
       cst_handle,
       cst_getmeta,
       cst_fresh];
   caml_register_global
    (11, Undefined_recursive_module, cst_Undefined_recursive_module);
   caml_register_global(10, Assert_failure, cst_Assert_failure);
   caml_register_global(9, Sys_blocked_io, cst_Sys_blocked_io);
   caml_register_global(8, Stack_overflow, cst_Stack_overflow);
   caml_register_global(7, Match_failure, cst_Match_failure);
   caml_register_global(6, Not_found, cst_Not_found);
   caml_register_global(5, Division_by_zero, cst_Division_by_zero);
   caml_register_global(4, End_of_file, cst_End_of_file);
   caml_register_global(3, Invalid_argument, cst_Invalid_argument);
   caml_register_global(2, Failure, cst_Failure);
   caml_register_global(1, Sys_error, cst_Sys_error);
   caml_register_global(0, Out_of_memory, cst_Out_of_memory);
   var
    _i_ = cst_input,
    _h_ = "output_substring",
    _g_ = cst_output,
    _f_ = cst$0,
    _d_ = "true",
    _e_ = "false",
    _c_ = "char_of_int",
    _a_ = caml_int64_create_lo_mi_hi(0, 0, 32752),
    _b_ = caml_int64_create_lo_mi_hi(0, 0, 65520),
    _n_ = "option is None",
    _p_ = "\\\\",
    _q_ = "\\'",
    _r_ = "\\b",
    _s_ = "\\t",
    _t_ = "\\n",
    _u_ = "\\r",
    _o_ = "Char.chr",
    _z_ = "List.init",
    _x_ = cst_List_nth,
    _v_ = "nth",
    _w_ = cst_List_nth,
    _E_ = "String.blit / Bytes.blit_string",
    _D_ = "Bytes.blit",
    _C_ = "String.sub / Bytes.sub",
    _F_ = "String.contains_from / Bytes.contains_from",
    _G_ = cst_Marshal_from_bytes,
    _H_ = cst_Marshal_from_bytes,
    _L_ = "Array.blit",
    _K_ = "Array.fill",
    _J_ = "Array.sub",
    _I_ = "Array.init",
    _O_ = caml_int64_create_lo_mi_hi(0, 0, 0),
    _N_ = caml_int64_create_lo_mi_hi(1, 0, 0),
    _M_ = caml_int64_create_lo_mi_hi(1, 0, 0),
    _P_ = cst_Set_bal,
    _Q_ = cst_Set_bal,
    _R_ = cst_Set_bal,
    _S_ = cst_Set_bal,
    _Z_ = "Map.remove_min_elt",
    _V_ = cst_Map_bal,
    _W_ = cst_Map_bal,
    _X_ = cst_Map_bal,
    _Y_ = cst_Map_bal,
    _$_ = "Stdlib.Stack.Empty",
    _aa_ = "Stdlib.Queue.Empty",
    _ad_ = "Buffer.add_substring/add_subbytes",
    _ac_ = "Buffer.add: cannot grow buffer",
    _ab_ = "Buffer.sub",
    _ae_ = "first domain already spawned",
    _an_ = "%c",
    _ao_ = cst_s,
    _ap_ = cst_i,
    _aq_ = cst_li,
    _ar_ = cst_ni,
    _as_ = cst_Li,
    _at_ = "%f",
    _au_ = "%B",
    _av_ = "%{",
    _aw_ = "%}",
    _ax_ = "%(",
    _ay_ = "%)",
    _az_ = cst_a,
    _aA_ = "%t",
    _aB_ = "%?",
    _aC_ = "%r",
    _aD_ = "%_r",
    _aE_ = [0, cst_camlinternalFormat_ml, 850, 23],
    _aP_ = [0, cst_camlinternalFormat_ml, 814, 21],
    _aH_ = [0, cst_camlinternalFormat_ml, 815, 21],
    _aQ_ = [0, cst_camlinternalFormat_ml, 818, 21],
    _aI_ = [0, cst_camlinternalFormat_ml, 819, 21],
    _aR_ = [0, cst_camlinternalFormat_ml, 822, 19],
    _aJ_ = [0, cst_camlinternalFormat_ml, 823, 19],
    _aS_ = [0, cst_camlinternalFormat_ml, 826, 22],
    _aK_ = [0, cst_camlinternalFormat_ml, 827, 22],
    _aT_ = [0, cst_camlinternalFormat_ml, 831, 30],
    _aL_ = [0, cst_camlinternalFormat_ml, 832, 30],
    _aN_ = [0, cst_camlinternalFormat_ml, 836, 26],
    _aF_ = [0, cst_camlinternalFormat_ml, 837, 26],
    _aO_ = [0, cst_camlinternalFormat_ml, 846, 28],
    _aG_ = [0, cst_camlinternalFormat_ml, 847, 28],
    _aM_ = [0, cst_camlinternalFormat_ml, 851, 23],
    _bO_ = [0, cst_camlinternalFormat_ml, 1558, 4],
    _bP_ = "Printf: bad conversion %[",
    _bQ_ = [0, cst_camlinternalFormat_ml, 1626, 39],
    _bR_ = [0, cst_camlinternalFormat_ml, 1649, 31],
    _bS_ = [0, cst_camlinternalFormat_ml, 1650, 31],
    _bT_ = "Printf: bad conversion %_",
    _bU_ = cst$1,
    _bV_ = cst$2,
    _bW_ = cst$1,
    _bX_ = cst$2,
    _bZ_ =
      [0,
       [11, "invalid box description ", [3, 0, 0]],
       "invalid box description %S"],
    _bY_ = [0, 0, 4],
    _bN_ = "nan",
    _bL_ = "neg_infinity",
    _bM_ = "infinity",
    _bK_ = cst$0,
    _bJ_ = [0, 103],
    _bx_ = "%+nd",
    _by_ = "% nd",
    _bA_ = "%+ni",
    _bB_ = "% ni",
    _bC_ = "%nx",
    _bD_ = "%#nx",
    _bE_ = "%nX",
    _bF_ = "%#nX",
    _bG_ = "%no",
    _bH_ = "%#no",
    _bw_ = "%nd",
    _bz_ = cst_ni,
    _bI_ = "%nu",
    _bk_ = "%+ld",
    _bl_ = "% ld",
    _bn_ = "%+li",
    _bo_ = "% li",
    _bp_ = "%lx",
    _bq_ = "%#lx",
    _br_ = "%lX",
    _bs_ = "%#lX",
    _bt_ = "%lo",
    _bu_ = "%#lo",
    _bj_ = "%ld",
    _bm_ = cst_li,
    _bv_ = "%lu",
    _a9_ = "%+Ld",
    _a__ = "% Ld",
    _ba_ = "%+Li",
    _bb_ = "% Li",
    _bc_ = "%Lx",
    _bd_ = "%#Lx",
    _be_ = "%LX",
    _bf_ = "%#LX",
    _bg_ = "%Lo",
    _bh_ = "%#Lo",
    _a8_ = "%Ld",
    _a$_ = cst_Li,
    _bi_ = "%Lu",
    _aW_ = "%+d",
    _aX_ = "% d",
    _aZ_ = "%+i",
    _a0_ = "% i",
    _a1_ = "%x",
    _a2_ = "%#x",
    _a3_ = "%X",
    _a4_ = "%#X",
    _a5_ = "%o",
    _a6_ = "%#o",
    _aV_ = cst_d,
    _aY_ = cst_i,
    _a7_ = cst_u,
    _af_ = cst$3,
    _ag_ = "@}",
    _ah_ = "@?",
    _ai_ = "@\n",
    _aj_ = "@.",
    _ak_ = "@@",
    _al_ = "@%",
    _am_ = "@",
    _aU_ = "CamlinternalFormat.Type_mismatch",
    _b3_ = cst$4,
    _b4_ = [0, [11, cst$5, [2, 0, [2, 0, 0]]], ", %s%s"],
    _cp_ =
      [0,
       [11, cst_Fatal_error_exception, [2, 0, [12, 10, 0]]],
       cst_Fatal_error_exception_s],
    _cq_ =
      [0,
       [11,
        "Fatal error in uncaught exception handler: exception ",
        [2, 0, [12, 10, 0]]],
       "Fatal error in uncaught exception handler: exception %s\n"],
    _co_ = "Fatal error: out of memory in uncaught exception handler",
    _cn_ =
      [0,
       [11, cst_Fatal_error_exception, [2, 0, [12, 10, 0]]],
       cst_Fatal_error_exception_s],
    _ck_ = [0, [2, 0, [12, 10, 0]], "%s\n"],
    _cl_ =
      [0,
       [11, cst_Program_not_linked_with_g_, 0],
       cst_Program_not_linked_with_g_],
    _cc_ = "Raised at",
    _cd_ = "Re-raised at",
    _ce_ = "Raised by primitive operation at",
    _cf_ = "Called from",
    _cg_ = " (inlined)",
    _ci_ = cst$4,
    _ch_ =
      [0,
       [2,
        0,
        [12,
         32,
         [2,
          0,
          [11,
           ' in file "',
           [2,
            0,
            [12,
             34,
             [2,
              0,
              [11, ", line ", [4, 0, 0, 0, [11, cst_characters, partial]]]]]]]]]],
       '%s %s in file "%s"%s, line %d, characters %d-%d'],
    _cj_ = [0, [2, 0, [11, " unknown location", 0]], "%s unknown location"],
    _b9_ = "Out of memory",
    _b__ = "Stack overflow",
    _b$_ = "Pattern matching failed",
    _ca_ = "Assertion failed",
    _cb_ = "Undefined recursive module",
    _b5_ = [0, [12, 40, [2, 0, [2, 0, [12, 41, 0]]]], "(%s%s)"],
    _b6_ = cst$4,
    _b7_ = cst$4,
    _b8_ = [0, [12, 40, [2, 0, [12, 41, 0]]], "(%s)"],
    _b2_ = [0, [4, 0, 0, 0, 0], cst_d],
    _b0_ = [0, [3, 0, 0], cst_S],
    _b1_ = "_",
    _cm_ =
      [0,
       cst$4,
       "(Cannot print locations:\n bytecode executable program file not found)",
       "(Cannot print locations:\n bytecode executable program file appears to be corrupt)",
       "(Cannot print locations:\n bytecode executable program file has wrong magic number)",
       "(Cannot print locations:\n bytecode executable program file cannot be opened;\n -- too many open files. Try running with OCAMLRUNPARAM=b=2)"],
    _cs_ = "Fun.Finally_raised: ",
    _cr_ = "Stdlib.Fun.Finally_raised",
    _cB_ = caml_int64_create_lo_mi_hi(14371852, 15349651, 22696),
    _cC_ = caml_int64_create_lo_mi_hi(12230193, 11438743, 35013),
    _cD_ = caml_int64_create_lo_mi_hi(1424933, 15549263, 2083),
    _cE_ = caml_int64_create_lo_mi_hi(9492471, 4696708, 43520),
    _cA_ = caml_int64_create_lo_mi_hi(0, 0, 0),
    _cz_ = "Random.int",
    _cu_ = caml_int64_create_lo_mi_hi(1, 0, 0),
    _cv_ = caml_int64_create_lo_mi_hi(0, 0, 0),
    _cy_ = caml_int64_create_lo_mi_hi(1, 0, 0),
    _cw_ = caml_int64_create_lo_mi_hi(0, 0, 0),
    _cx_ = caml_int64_create_lo_mi_hi(2, 0, 0),
    _cJ_ = [0, 0],
    _cH_ = cst$4,
    _cP_ = "Weak.Make: hash bucket cannot grow more",
    _cO_ = "Weak.blit",
    _cN_ = "Weak.check",
    _cM_ = "Weak.get",
    _cL_ = "Weak.set",
    _cK_ = "Weak.create",
    _c8_ = [3, 0, 3],
    _c9_ = cst$0,
    _c5_ = cst$6,
    _c6_ = cst$7,
    _c7_ = cst$4,
    _c2_ = cst$6,
    _c3_ = "<",
    _c4_ = cst$4,
    _c1_ = "\n",
    _cX_ = cst$4,
    _cY_ = cst$4,
    _cZ_ = cst$4,
    _c0_ = cst$4,
    _cW_ = [0, cst$4],
    _cS_ = cst$4,
    _cT_ = cst$4,
    _cU_ = cst$4,
    _cV_ = cst$4,
    _cR_ = [0, cst$4, 0, cst$4],
    _cQ_ = "Stdlib.Format.String_tag",
    _c$_ = "-",
    _db_ = "/tmp",
    _dd_ = cst$0,
    _df_ = "nat_of_int",
    _de_ = "make_nat",
    _dk_ = "E2BIG",
    _dm_ = "EACCES",
    _dn_ = "EAGAIN",
    _do_ = "EBADF",
    _dp_ = "EBUSY",
    _dq_ = "ECHILD",
    _dr_ = "EDEADLK",
    _ds_ = "EDOM",
    _dt_ = "EEXIST",
    _du_ = "EFAULT",
    _dv_ = "EFBIG",
    _dw_ = "EINTR",
    _dx_ = "EINVAL",
    _dy_ = "EIO",
    _dz_ = "EISDIR",
    _dA_ = "EMFILE",
    _dB_ = "EMLINK",
    _dC_ = "ENAMETOOLONG",
    _dD_ = "ENFILE",
    _dE_ = "ENODEV",
    _dF_ = "ENOENT",
    _dG_ = "ENOEXEC",
    _dH_ = "ENOLCK",
    _dI_ = "ENOMEM",
    _dJ_ = "ENOSPC",
    _dK_ = "ENOSYS",
    _dL_ = "ENOTDIR",
    _dM_ = "ENOTEMPTY",
    _dN_ = "ENOTTY",
    _dO_ = "ENXIO",
    _dP_ = "EPERM",
    _dQ_ = "EPIPE",
    _dR_ = "ERANGE",
    _dS_ = "EROFS",
    _dT_ = "ESPIPE",
    _dU_ = "ESRCH",
    _dV_ = "EXDEV",
    _dW_ = "EWOULDBLOCK",
    _dX_ = "EINPROGRESS",
    _dY_ = "EALREADY",
    _dZ_ = "ENOTSOCK",
    _d0_ = "EDESTADDRREQ",
    _d1_ = "EMSGSIZE",
    _d2_ = "EPROTOTYPE",
    _d3_ = "ENOPROTOOPT",
    _d4_ = "EPROTONOSUPPORT",
    _d5_ = "ESOCKTNOSUPPORT",
    _d6_ = "EOPNOTSUPP",
    _d7_ = "EPFNOSUPPORT",
    _d8_ = "EAFNOSUPPORT",
    _d9_ = "EADDRINUSE",
    _d__ = "EADDRNOTAVAIL",
    _d$_ = "ENETDOWN",
    _ea_ = "ENETUNREACH",
    _eb_ = "ENETRESET",
    _ec_ = "ECONNABORTED",
    _ed_ = "ECONNRESET",
    _ee_ = "ENOBUFS",
    _ef_ = "EISCONN",
    _eg_ = "ENOTCONN",
    _eh_ = "ESHUTDOWN",
    _ei_ = "ETOOMANYREFS",
    _ej_ = "ETIMEDOUT",
    _ek_ = "ECONNREFUSED",
    _el_ = "EHOSTDOWN",
    _em_ = "EHOSTUNREACH",
    _en_ = "ELOOP",
    _eo_ = "EOVERFLOW",
    _ep_ = [0, [11, "EUNKNOWNERR ", [4, 0, 0, 0, 0]], "EUNKNOWNERR %d"],
    _dl_ =
      [0,
       [11,
        "Unix.Unix_error(Unix.",
        [2, 0, [11, cst$5, [3, 0, [11, cst$5, [3, 0, [12, 41, 0]]]]]]],
       "Unix.Unix_error(Unix.%s, %S, %S)"],
    _dg_ = cst_Unix_Unix_error,
    _dh_ = cst$4,
    _di_ = cst$4,
    _dj_ = cst_Unix_Unix_error,
    _er_ = [0, "src/batInnerWeaktbl.ml", 110, 34],
    _eq_ = "Weaktbl.Stack.push: stack cannot grow",
    _ey_ = "BatIO.output",
    _ex_ = "BatIO.input",
    _ew_ = "BatIO.really_output",
    _es_ = "BatInnerIO.No_more_input",
    _et_ = "BatInnerIO.Input_closed",
    _eu_ = "BatInnerIO.Output_closed",
    _eC_ = cst$4,
    _ez_ = [0, cst_next, cst_count, cst_clone],
    _eA_ = "BatEnum.No_more_elements",
    _eD_ = "pow",
    _eE_ = "BatNumber.Overflow",
    _eF_ = "BatNumber.NaN",
    _eP_ = cst$4,
    _eO_ = cst$4,
    _eN_ = cst$4,
    _eM_ = cst$4,
    _eH_ = [0, cst_flush, cst_output, cst_close_out],
    _eI_ = [0, cst_output, cst_flush, cst_close_out],
    _eK_ = [0, cst_input, cst_close_in],
    _e2_ = cst_Set_bal,
    _e3_ = cst_Set_bal,
    _e4_ = cst_Set_bal,
    _e5_ = cst_Set_bal,
    _e7_ = [0, 0, 0],
    _fa_ = [0, "lib/automata.ml", 360, 21],
    _e__ = [1, 0],
    _fg_ = [0, cst_lib_core_ml, 695, 4],
    _fl_ = cst_Re_replace,
    _fm_ = cst_Re_replace,
    _fi_ = cst_Re_repn,
    _fj_ = cst_Re_repn,
    _fh_ = [0, cst_lib_core_ml, 728, 13],
    _ff_ = [0, cst_lib_core_ml, 493, 35],
    _fb_ = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    _fe_ = [0, 170, [0, 181, [0, 186, [0, 223, [0, 255, 0]]]]],
    _fk_ = "\t ",
    _fY_ =
      [0,
       [12,
        60,
        [16,
         [15,
          [12, 62, [16, [15, [16, [16, [11, cst$7, [2, 0, partial$0]]]]]]]]]],
       "<%t%a>%t%a%t%t<\/%s>"],
    _fZ_ = [0, [11, "<!--", [2, 0, [11, cst$8, 0]]], "<!--%s-->"],
    _f0_ = [0, [12, 38, [2, 0, [12, 59, 0]]], "&%s;"],
    _fW_ = [0, [12, 60, [15, [11, "/>", 0]]], "<%a/>"],
    _fX_ =
      [0,
       [12, 60, [15, [12, 62, [16, [11, cst$7, [2, 0, [12, 62, 0]]]]]]],
       "<%a>%t<\/%s>"],
    _fV_ = [0, [2, 0, [15, [16, 0]]], "%s%a%t"],
    _fU_ = [0, [16, [2, 0, [12, 61, [15, 0]]]], "%t%s=%a"],
    _fQ_ = [0, [12, 34, [15, [12, 34, 0]]], cst_a$0],
    _fR_ = [0, [12, 34, [4, 0, 0, 0, [12, 34, 0]]], '"%d"'],
    _fS_ = [0, [12, 34, [2, 0, [12, 34, 0]]], '"%s"'],
    _fT_ = [0, [12, 34, [15, [12, 34, 0]]], cst_a$0],
    _fP_ = [0, [12, 44, [16, 0]], ",%t"],
    _fO_ = [0, [18, [1, [0, 0, cst$4]], [15, [17, 0, 0]]], "@[%a@]"],
    _fN_ = cst$9,
    _fJ_ = [0, [4, 0, 0, 0, [12, 101, [4, 0, 0, 0, 0]]], "%de%d"],
    _fG_ = "Infinity",
    _fH_ = "-Infinity",
    _fI_ = "NaN",
    _fK_ = [0, [8, [0, 0, 3], 0, [0, 12], 0], cst_12g],
    _fL_ = [0, [8, [0, 0, 3], 0, [0, 15], 0], "%.15g"],
    _fM_ = [0, [8, [0, 0, 3], 0, [0, 18], 0], "%.18g"],
    _fB_ = cst_gt,
    _fC_ = "-&gt;",
    _fD_ = "--&gt;",
    _fE_ = "--!&gt;",
    _fF_ = [0, 1],
    _fr_ = "&lt;",
    _fs_ = cst_gt,
    _ft_ = "&amp;",
    _fo_ = "&quot;",
    _fp_ = "&#",
    _fq_ = ";",
    _fu_ = cst$10,
    _fw_ = cst$8,
    _fy_ = cst$11,
    _fA_ = cst$6,
    _f3_ = cst$4,
    _f4_ = [0, 1],
    _f5_ =
      [0,
       [12, 10, [2, 0, [12, 10, [2, 0, [12, 10, [2, 0, [12, 10, 0]]]]]]],
       "\n%s\n%s\n%s\n"],
    _f2_ = cst$12,
    _f6_ = cst$12,
    _f7_ = "<![CDATA[",
    _f8_ = "//]]>",
    _f9_ = "//<![CDATA[",
    _f__ = "/* ]]> */",
    _f$_ = "/* <![CDATA[ */",
    _gc_ = "Jsoo_runtime.Error.Exn",
    _gd_ = "jsError",
    _ge_ = "function",
    _gn_ = [0, [11, cst_Invalid_bounds, 0], cst_Invalid_bounds],
    _go_ = [0, [11, cst_Wrong_padding, 0], cst_Wrong_padding],
    _gp_ = [0, [11, cst_Malformed_input, 0], cst_Malformed_input],
    _gq_ = [0, [11, cst_Too_much_input, 0], cst_Too_much_input],
    _gg_ = "Length of alphabet must be 64",
    _gh_ = "Alphabet can not contain padding character",
    _gi_ = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
    _gj_ = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
    _gk_ = "Base64.Out_of_bounds",
    _gl_ = "Base64.Too_much_input",
    _gJ_ = "qcheck: user fail:\n",
    _gI_ =
      [0,
       [18,
        [1, [0, 0, cst$4]],
        [11,
         cst_test,
         [2,
          0,
          [12,
           96,
           [17,
            [0, cst$13, 1, 0],
            [11,
             "raised exception `",
             [2,
              0,
              [12, 96, [17, [0, cst$13, 1, 0], [11, "on `", partial$1]]]]]]]]]],
       "@[test `%s`@ raised exception `%s`@ on `%s`@,%s@]"],
    _gH_ =
      [0,
       [18,
        [1, [0, 0, cst$4]],
        [11,
         "negative test `",
         [2,
          0,
          [12,
           96,
           [17, [0, cst$13, 1, 0], [11, "succeeded unexpectedly", [17, 0, 0]]]]]]],
       "@[negative test `%s`@ succeeded unexpectedly@]"],
    _gG_ =
      [0, [18, [1, [0, 0, cst$4]], [15, [17, 0, [17, 2, 0]]]], "@[%a@]@?"],
    _gD_ = [0, [2, 0, [17, [0, cst$14, 0, 0], [15, 0]]], "%s@,%a"],
    _gE_ = [0, [2, 0, [17, [0, cst$14, 0, 0], 0]], "%s@,"],
    _gF_ =
      [0,
       [18,
        [1, [0, 0, cst$4]],
        [11,
         cst_test,
         [2,
          0,
          [12,
           96,
           [17,
            [0, cst$13, 1, 0],
            [11,
             "failed on \xe2\x89\xa5 ",
             [4,
              0,
              0,
              0,
              [11,
               " cases:",
               [17, [0, cst$13, 1, 0], [18, partial$3, partial$2]]]]]]]]]],
       "@[test `%s`@ failed on \xe2\x89\xa5 %d cases:@ @[<v>%a@]@]"],
    _gw_ = "Gen.int_range: origin < low",
    _gx_ = "Gen.int_range: origin > high",
    _gv_ = "Gen.int_range: high < low",
    _gu_ = "Gen.int_bound",
    _gt_ = "Gen.pint",
    _gr_ =
      [0,
       [2,
        0,
        [11,
         cst_origin_value,
         [15, [11, " is lower than low value ", [15, 0]]]]],
       "%s: origin value %a is lower than low value %a"],
    _gs_ =
      [0,
       [2,
        0,
        [11,
         cst_origin_value,
         [15, [11, " is greater than high value ", [15, 0]]]]],
       "%s: origin value %a is greater than high value %a"],
    _gy_ = [0, 0],
    _gz_ = "QCheck2.Test_exceptions.Test_fail",
    _gA_ = "QCheck2.Test_exceptions.Test_error",
    _gB_ = "QCheck2.Test_exceptions.Test_unexpected_success",
    _gC_ = "QCheck2.Test.User_fail",
    _gO_ = [0, cst_ann_print_pp_ml, 347, 8],
    _gN_ = [0, cst_ann_print_pp_ml, 295, 4],
    _gM_ = [0, cst_ann_print_pp_ml, 274, 4],
    _gL_ = [0, cst_ann_print_pp_ml, 149, 2],
    _gK_ = [0, cst_ann_print_pp_ml, 130, 2],
    _iq_ = [6, 937565914],
    _io_ = [0, [15, 0], cst_a],
    _ij_ =
      [0, [11, "Unbound variable\n", [4, 0, 0, 0, 0]], "Unbound variable\n%d"],
    _ik_ = [0, [11, "Unbound constant\n", [2, 0, 0]], "Unbound constant\n%s"],
    _il_ =
      [0,
       [11,
        cst_The_term,
        [2,
         0,
         [11,
          cst_has_type,
          [2,
           0,
           [11, "\nbut a term of type\n", [2, 0, [11, "\nwas expected", 0]]]]]]],
       "The term\n%s\nhas type\n%s\nbut a term of type\n%s\nwas expected"],
    _im_ =
      [0,
       [11,
        cst_The_term,
        [2,
         0,
         [11,
          cst_has_type,
          [2, 0, [11, "\nbut a function type was expected", 0]]]]],
       "The term\n%s\nhas type\n%s\nbut a function type was expected"],
    _in_ =
      [0,
       [11,
        cst_The_term,
        [2,
         0,
         [11,
          cst_has_type,
          [2, 0, [11, "\nbut a sort (Type or Prop) was expected", 0]]]]],
       "The term\n%s\nhas type\n%s\nbut a sort (Type or Prop) was expected"],
    _hH_ = "Lang.Env.Prefix",
    _hI_ = "Lang.Env.Infix",
    _hJ_ = "Lang.Env.Suffix",
    _h2_ = [0, [15, 0], cst_a],
    _hT_ = [0, [12, 59, [17, [0, cst$13, 1, 0], 0]], cst$15],
    _hU_ = [0, [4, 0, 0, 0, 0], cst_d],
    _hS_ = [0, [18, [1, [0, [11, cst_2, 0], cst_2]], [12, 91, 0]], cst_2$0],
    _hV_ = [0, [17, [0, cst$14, 0, 0], [12, 93, [17, 0, 0]]], cst$16],
    _hK_ =
      [0, [18, [1, [0, [11, cst_2, 0], cst_2]], [11, cst$17, 0]], cst_2$1],
    _hL_ = "Lang.Env.symbol",
    _hM_ =
      [0,
       [18,
        [1, [0, 0, cst$4]],
        [2, 0, [11, cst$18, [17, [0, cst$13, 1, 0], 0]]]],
       cst_s$0],
    _hN_ = [0, [3, 0, 0], cst_S],
    _hO_ = [0, [17, 0, 0], cst$3],
    _hP_ = [0, [12, 59, [17, [0, cst$13, 1, 0], 0]], cst$15],
    _hQ_ = "implicit_args",
    _hR_ =
      [0,
       [18,
        [1, [0, 0, cst$4]],
        [2, 0, [11, cst$18, [17, [0, cst$13, 1, 0], 0]]]],
       cst_s$0],
    _hW_ = [0, [17, 0, 0], cst$3],
    _hX_ = [0, [12, 59, [17, [0, cst$13, 1, 0], 0]], cst$15],
    _hY_ = cst_position,
    _hZ_ =
      [0,
       [18,
        [1, [0, 0, cst$4]],
        [2, 0, [11, cst$18, [17, [0, cst$13, 1, 0], 0]]]],
       cst_s$0],
    _h0_ = [0, [17, 0, 0], cst$3],
    _h1_ = [0, [17, [0, cst$13, 1, 0], [12, 125, [17, 0, 0]]], cst$19],
    _hG_ = [0, [15, 0], cst_a],
    _hC_ = [0, [12, 40, [18, [1, [0, 0, cst$4]], 0]], cst$20],
    _hD_ = [0, [12, 44, [17, [0, cst$13, 1, 0], 0]], cst$21],
    _hE_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _hB_ = [0, [12, 59, [17, [0, cst$13, 1, 0], 0]], cst$15],
    _hA_ = [0, [18, [1, [0, [11, cst_2, 0], cst_2]], [12, 91, 0]], cst_2$0],
    _hF_ = [0, [17, [0, cst$14, 0, 0], [12, 93, [17, 0, 0]]], cst$16],
    _hz_ = "Term.mkArrows : got an empty list.",
    _hy_ = [0, cst_api_lang_ml, 82, 4],
    _hx_ = [0, cst_api_lang_ml, 73, 4],
    _hw_ = [0, [15, 0], cst_a],
    _ht_ = "`Type",
    _hu_ = "`Prop",
    _hc_ = [0, [12, 59, [17, [0, cst$13, 1, 0], 0]], cst$15],
    _hb_ = [0, [18, [1, [0, [11, cst_2, 0], cst_2]], [12, 91, 0]], cst_2$0],
    _hd_ = [0, [17, [0, cst$14, 0, 0], [12, 93, [17, 0, 0]]], cst$16],
    _g8_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Lang.Term.Var", [17, [0, cst$13, 1, 0], 0]]]],
       "(@[<2>Lang.Term.Var@ "],
    _g9_ = [0, [4, 0, 0, 0, 0], cst_d],
    _g__ = [0, [17, 0, [12, 41, 0]], cst$22],
    _g$_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Lang.Term.App (", [17, [0, cst$14, 0, 0], 0]]]],
       "(@[<2>Lang.Term.App (@,"],
    _ha_ = [0, [12, 44, [17, [0, cst$13, 1, 0], 0]], cst$21],
    _he_ = [0, [17, [0, cst$14, 0, 0], [11, cst$23, [17, 0, 0]]], cst$24],
    _hf_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Lang.Term.Lambda (", [17, [0, cst$14, 0, 0], 0]]]],
       "(@[<2>Lang.Term.Lambda (@,"],
    _hg_ = [0, [12, 44, [17, [0, cst$13, 1, 0], 0]], cst$21],
    _hh_ = [0, [12, 44, [17, [0, cst$13, 1, 0], 0]], cst$21],
    _hi_ = [0, [17, [0, cst$14, 0, 0], [11, cst$23, [17, 0, 0]]], cst$24],
    _hj_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Lang.Term.Arrow (", [17, [0, cst$14, 0, 0], 0]]]],
       "(@[<2>Lang.Term.Arrow (@,"],
    _hk_ = [0, [12, 44, [17, [0, cst$13, 1, 0], 0]], cst$21],
    _hl_ = [0, [17, [0, cst$14, 0, 0], [11, cst$23, [17, 0, 0]]], cst$24],
    _hm_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Lang.Term.Prod (", [17, [0, cst$14, 0, 0], 0]]]],
       "(@[<2>Lang.Term.Prod (@,"],
    _hn_ = [0, [12, 44, [17, [0, cst$13, 1, 0], 0]], cst$21],
    _ho_ = [0, [12, 44, [17, [0, cst$13, 1, 0], 0]], cst$21],
    _hp_ = [0, [17, [0, cst$14, 0, 0], [11, cst$23, [17, 0, 0]]], cst$24],
    _hq_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Lang.Term.Cst", [17, [0, cst$13, 1, 0], 0]]]],
       "(@[<2>Lang.Term.Cst@ "],
    _hr_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _hs_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Lang.Term.Sort", [17, [0, cst$13, 1, 0], 0]]]],
       "(@[<2>Lang.Term.Sort@ "],
    _hv_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _gR_ = [0, [2, 0, 0], cst_s],
    _gS_ = "!dummy",
    _gT_ = cst_Coq_Init_Logic_eq,
    _gU_ = "Coq.Init.Datatypes.nat",
    _gV_ = "Coq.Init.Datatypes.list",
    _gW_ = "Coq.Init.Logic.and",
    _gX_ = "Coq.Init.Logic.or",
    _gY_ = "Coq.Init.Logic.not",
    _gZ_ = "Coq.Init.Logic.iff",
    _g0_ = "Coq.Init.Logic.ex",
    _g1_ = "Coq.Init.Datatypes.O",
    _g2_ = "Coq.Init.Datatypes.S",
    _g3_ = cst_Coq_Init_Logic_eq,
    _g4_ = "Coq.Init.Logic.True",
    _g5_ = "Coq.Init.Logic.False",
    _g6_ = "Coq.Init.Nat.add",
    _g7_ = "Coq.Init.Nat.mul",
    _h3_ = cst_nat,
    _h4_ = "le",
    _h6_ = "mult",
    _h8_ = "plus",
    _h__ = "Succ",
    _h$_ = "Zero",
    _ia_ = cst_nat,
    _ic_ = "not",
    _ie_ = "and",
    _ig_ = "or",
    _ih_ = "False",
    _ii_ = "True",
    _ip_ = "Api.Lang.Typing.TypingError",
    _kP_ = [0, [15, 0], cst_a],
    _kL_ = [0, [12, 59, [17, [0, cst$13, 1, 0], 0]], cst$15],
    _kK_ = [0, [18, [1, [0, [11, cst_2, 0], cst_2]], [12, 91, 0]], cst_2$0],
    _kM_ = [0, [17, [0, cst$14, 0, 0], [12, 93, [17, 0, 0]]], cst$16],
    _kH_ = [0, [12, 40, [18, [1, [0, 0, cst$4]], 0]], cst$20],
    _kI_ = [0, [3, 0, 0], cst_S],
    _kJ_ = [0, [12, 44, [17, [0, cst$13, 1, 0], 0]], cst$21],
    _kN_ = [0, [12, 44, [17, [0, cst$13, 1, 0], 0]], cst$21],
    _kO_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _kG_ = [0, [15, 0], cst_a],
    _kC_ = [0, [12, 40, [18, [1, [0, 0, cst$4]], 0]], cst$20],
    _kD_ = [0, [12, 44, [17, [0, cst$13, 1, 0], 0]], cst$21],
    _kE_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _kw_ = [0, [12, 40, [18, [1, [0, 0, cst$4]], 0]], cst$20],
    _kx_ = [0, [12, 44, [17, [0, cst$13, 1, 0], 0]], cst$21],
    _ky_ = [0, [12, 44, [17, [0, cst$13, 1, 0], 0]], cst$21],
    _kz_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _kc_ = [0, [12, 40, [18, [1, [0, 0, cst$4]], 0]], cst$20],
    _kd_ = [0, [12, 44, [17, [0, cst$13, 1, 0], 0]], cst$21],
    _ke_ = [0, [4, 0, 0, 0, 0], cst_d],
    _kf_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _j3_ = [0, [12, 40, [18, [1, [0, 0, cst$4]], 0]], cst$20],
    _j4_ = [0, [12, 44, [17, [0, cst$13, 1, 0], 0]], cst$21],
    _j5_ = [0, [12, 44, [17, [0, cst$13, 1, 0], 0]], cst$21],
    _j6_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _jX_ = "Logic.AId",
    _jY_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Logic.ADuplicate", [17, [0, cst$13, 1, 0], 0]]]],
       "(@[<2>Logic.ADuplicate@ "],
    _jZ_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _j0_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Logic.AClear", [17, [0, cst$13, 1, 0], 0]]]],
       "(@[<2>Logic.AClear@ "],
    _j1_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _j2_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Logic.ADef", [17, [0, cst$13, 1, 0], 0]]]],
       "(@[<2>Logic.ADef@ "],
    _j7_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _j8_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Logic.AIntro", [17, [0, cst$13, 1, 0], 0]]]],
       "(@[<2>Logic.AIntro@ "],
    _j9_ = [0, [4, 0, 0, 0, 0], cst_d],
    _j__ = [0, [17, 0, [12, 41, 0]], cst$22],
    _j$_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Logic.AExact", [17, [0, cst$13, 1, 0], 0]]]],
       "(@[<2>Logic.AExact@ "],
    _ka_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _kb_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Logic.AElim", [17, [0, cst$13, 1, 0], 0]]]],
       "(@[<2>Logic.AElim@ "],
    _kg_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _kh_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Logic.AInd", [17, [0, cst$13, 1, 0], 0]]]],
       "(@[<2>Logic.AInd@ "],
    _ki_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _kj_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Logic.ASimpl", [17, [0, cst$13, 1, 0], 0]]]],
       "(@[<2>Logic.ASimpl@ "],
    _kk_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _kl_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Logic.ARed", [17, [0, cst$13, 1, 0], 0]]]],
       "(@[<2>Logic.ARed@ "],
    _km_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _kn_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Logic.AIndt", [17, [0, cst$13, 1, 0], 0]]]],
       "(@[<2>Logic.AIndt@ "],
    _ko_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _kp_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Logic.ACase", [17, [0, cst$13, 1, 0], 0]]]],
       "(@[<2>Logic.ACase@ "],
    _kq_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _kr_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Logic.ACut", [17, [0, cst$13, 1, 0], 0]]]],
       "(@[<2>Logic.ACut@ "],
    _ks_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _kt_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Logic.AGeneralize", [17, [0, cst$13, 1, 0], 0]]]],
       "(@[<2>Logic.AGeneralize@ "],
    _ku_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _kv_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Logic.ALink", [17, [0, cst$13, 1, 0], 0]]]],
       "(@[<2>Logic.ALink@ "],
    _kA_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _kB_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Logic.AInstantiate", [17, [0, cst$13, 1, 0], 0]]]],
       "(@[<2>Logic.AInstantiate@ "],
    _kF_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _jW_ = [0, [15, 0], cst_a],
    _jU_ = [0, [12, 59, [17, [0, cst$13, 1, 0], 0]], cst$15],
    _jT_ = [0, [18, [1, [0, [11, cst_2, 0], cst_2]], [12, 91, 0]], cst_2$0],
    _jV_ = [0, [17, [0, cst$14, 0, 0], [12, 93, [17, 0, 0]]], cst$16],
    _jS_ = [0, [15, 0], cst_a],
    _jL_ = [0, [12, 40, [18, [1, [0, 0, cst$4]], 0]], cst$20],
    _jM_ = [0, [12, 44, [17, [0, cst$13, 1, 0], 0]], cst$21],
    _jN_ = [0, [12, 44, [17, [0, cst$13, 1, 0], 0]], cst$21],
    _jO_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _jK_ = cst_Some,
    _jP_ = cst$25,
    _jQ_ = cst_None,
    _jH_ = [0, [12, 40, [18, [1, [0, 0, cst$4]], 0]], cst$20],
    _jI_ = [0, [4, 0, 0, 0, 0], cst_d],
    _jJ_ = [0, [12, 44, [17, [0, cst$13, 1, 0], 0]], cst$21],
    _jR_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _jF_ = [0, [12, 47, 0], "/"],
    _jG_ =
      [0,
       [4, 0, 0, 0, [12, 47, [2, 0, [12, 35, [2, 0, [12, 58, [15, 0]]]]]]],
       "%d/%s#%s:%a"],
    _jE_ = cst$4,
    _jA_ = "C",
    _jB_ = "H",
    _jC_ = "Vh",
    _jD_ = "Vb",
    _jz_ = [0, [15, 0], cst_a],
    _ju_ = [0, [12, 59, [17, [0, cst$13, 1, 0], 0]], cst$15],
    _jv_ = [0, [4, 0, 0, 0, 0], cst_d],
    _jt_ = [0, [18, [1, [0, [11, cst_2, 0], cst_2]], [12, 91, 0]], cst_2$0],
    _jw_ = [0, [17, [0, cst$14, 0, 0], [12, 93, [17, 0, 0]]], cst$16],
    _jh_ =
      [0, [18, [1, [0, [11, cst_2, 0], cst_2]], [11, cst$17, 0]], cst_2$1],
    _ji_ = "Logic.Path.goal",
    _jj_ =
      [0,
       [18,
        [1, [0, 0, cst$4]],
        [2, 0, [11, cst$18, [17, [0, cst$13, 1, 0], 0]]]],
       cst_s$0],
    _jk_ = [0, [4, 0, 0, 0, 0], cst_d],
    _jl_ = [0, [17, 0, 0], cst$3],
    _jm_ = [0, [12, 59, [17, [0, cst$13, 1, 0], 0]], cst$15],
    _jn_ = "kind",
    _jo_ =
      [0,
       [18,
        [1, [0, 0, cst$4]],
        [2, 0, [11, cst$18, [17, [0, cst$13, 1, 0], 0]]]],
       cst_s$0],
    _jp_ = [0, [17, 0, 0], cst$3],
    _jq_ = [0, [12, 59, [17, [0, cst$13, 1, 0], 0]], cst$15],
    _jr_ = "sub",
    _js_ =
      [0,
       [18,
        [1, [0, 0, cst$4]],
        [2, 0, [11, cst$18, [17, [0, cst$13, 1, 0], 0]]]],
       cst_s$0],
    _jx_ = [0, [17, 0, 0], cst$3],
    _jy_ = [0, [17, [0, cst$13, 1, 0], [12, 125, [17, 0, 0]]], cst$19],
    _jg_ = [0, [15, 0], cst_a],
    _i$_ = "Logic.Path.Concl",
    _ja_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Logic.Path.Hyp", [17, [0, cst$13, 1, 0], 0]]]],
       "(@[<2>Logic.Path.Hyp@ "],
    _jb_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _jc_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Logic.Path.VarHead", [17, [0, cst$13, 1, 0], 0]]]],
       "(@[<2>Logic.Path.VarHead@ "],
    _jd_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _je_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Logic.Path.VarBody", [17, [0, cst$13, 1, 0], 0]]]],
       "(@[<2>Logic.Path.VarBody@ "],
    _jf_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _i__ = [0, [15, 0], cst_a],
    _i6_ = cst_Some,
    _i7_ = cst$25,
    _i8_ = cst_None,
    _iY_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Logic.Concl", [17, [0, cst$13, 1, 0], 0]]]],
       "(@[<2>Logic.Concl@ "],
    _iZ_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _i0_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Logic.Hyp (", [17, [0, cst$14, 0, 0], 0]]]],
       "(@[<2>Logic.Hyp (@,"],
    _i1_ = [0, [12, 44, [17, [0, cst$13, 1, 0], 0]], cst$21],
    _i2_ = [0, [17, [0, cst$14, 0, 0], [11, cst$23, [17, 0, 0]]], cst$24],
    _i3_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Logic.Var (", [17, [0, cst$14, 0, 0], 0]]]],
       "(@[<2>Logic.Var (@,"],
    _i4_ = [0, [12, 44, [17, [0, cst$13, 1, 0], 0]], cst$21],
    _i5_ = [0, [12, 44, [17, [0, cst$13, 1, 0], 0]], cst$21],
    _i9_ = [0, [17, [0, cst$14, 0, 0], [11, cst$23, [17, 0, 0]]], cst$24],
    _iX_ = [0, [15, 0], cst_a],
    _iK_ =
      [0, [18, [1, [0, [11, cst_2, 0], cst_2]], [11, cst$17, 0]], cst_2$1],
    _iL_ = "Logic.l_full",
    _iM_ =
      [0,
       [18,
        [1, [0, 0, cst$4]],
        [2, 0, [11, cst$18, [17, [0, cst$13, 1, 0], 0]]]],
       cst_s$0],
    _iN_ = [0, [17, 0, 0], cst$3],
    _iO_ = [0, [12, 59, [17, [0, cst$13, 1, 0], 0]], cst$15],
    _iP_ = "l_user",
    _iQ_ =
      [0,
       [18,
        [1, [0, 0, cst$4]],
        [2, 0, [11, cst$18, [17, [0, cst$13, 1, 0], 0]]]],
       cst_s$0],
    _iR_ = [0, [17, 0, 0], cst$3],
    _iS_ = [0, [12, 59, [17, [0, cst$13, 1, 0], 0]], cst$15],
    _iT_ = "l_form",
    _iU_ =
      [0,
       [18,
        [1, [0, 0, cst$4]],
        [2, 0, [11, cst$18, [17, [0, cst$13, 1, 0], 0]]]],
       cst_s$0],
    _iV_ = [0, [17, 0, 0], cst$3],
    _iW_ = [0, [17, [0, cst$13, 1, 0], [12, 125, [17, 0, 0]]], cst$19],
    _iJ_ = [0, [15, 0], cst_a],
    _iv_ =
      [0, [18, [1, [0, [11, cst_2, 0], cst_2]], [11, cst$17, 0]], cst_2$1],
    _iw_ = "Logic.h_name",
    _ix_ =
      [0,
       [18,
        [1, [0, 0, cst$4]],
        [2, 0, [11, cst$18, [17, [0, cst$13, 1, 0], 0]]]],
       cst_s$0],
    _iy_ = [0, [17, 0, 0], cst$3],
    _iz_ = [0, [12, 59, [17, [0, cst$13, 1, 0], 0]], cst$15],
    _iA_ = "h_gen",
    _iB_ =
      [0,
       [18,
        [1, [0, 0, cst$4]],
        [2, 0, [11, cst$18, [17, [0, cst$13, 1, 0], 0]]]],
       cst_s$0],
    _iC_ = [0, [4, 0, 0, 0, 0], cst_d],
    _iD_ = [0, [17, 0, 0], cst$3],
    _iE_ = [0, [12, 59, [17, [0, cst$13, 1, 0], 0]], cst$15],
    _iF_ = "h_form",
    _iG_ =
      [0,
       [18,
        [1, [0, 0, cst$4]],
        [2, 0, [11, cst$18, [17, [0, cst$13, 1, 0], 0]]]],
       cst_s$0],
    _iH_ = [0, [17, 0, 0], cst$3],
    _iI_ = [0, [17, [0, cst$13, 1, 0], [12, 125, [17, 0, 0]]], cst$19],
    _it_ = "Api.Logic.InvalidGoalId",
    _iu_ = "Api.Logic.InvalidHyphName",
    _kS_ = [0, cst_api_notation_ml, 72, 9],
    _kU_ = [0, cst_api_notation_ml, 137, 23],
    _kV_ = cst$26,
    _kW_ = "fun",
    _kX_ = "\xe2\x87\x92",
    _kY_ = "\xe2\x86\x92",
    _kZ_ = cst$26,
    _k0_ = "\xe2\x88\x80",
    _k1_ = ",",
    _k2_ = "Type",
    _k3_ = "Prop",
    _kT_ = "id",
    _k6_ = [0, cst_api_notation_ml, 174, 2],
    _k5_ =
      [0,
       [11,
        "Notation.term_to_xml : expected a single Xml element (got ",
        [4, 0, 0, 0, [12, 41, 0]]],
       "Notation.term_to_xml : expected a single Xml element (got %d)"],
    _k4_ = [0, cst_api_notation_ml, 167, 2],
    _kR_ = [0, cst_api_notation_ml, 39, 62],
    _kQ_ = "span",
    _k7_ = cst_None,
    _k9_ = "Proof.xprogress : todo",
    _k8_ = [0, "prover/coreLogic.ml", 47, 10],
    _lC_ = cst$4,
    _lD_ = cst_setgoalsb,
    _lz_ = [0, [2, 0, [11, cst$27, [2, 0, [12, 10, 0]]]], cst_s_s],
    _lx_ = [0, [2, 0, [11, cst$27, [2, 0, [12, 10, 0]]]], cst_s_s],
    _lw_ = "ENV\n",
    _ly_ = "HYPS\n",
    _lA_ = [0, [11, "GOAL\n", [2, 0, [12, 10, 0]]], "GOAL\n%s\n"],
    _lu_ = [0, 0],
    _lv_ = [0, [15, 0], cst_a],
    _lt_ = cst$4,
    _lr_ = cst$4,
    _lp_ =
      [0,
       [11, "Moving hyp [", [2, 0, [11, "] to [", [2, 0, [11, "]\n", 0]]]]],
       "Moving hyp [%s] to [%s]\n"],
    _lo_ = cst$4,
    _lm_ = cst$4,
    _lk_ = [0, [11, "internal error: ", [2, 0, 0]], "internal error: %s"],
    _li_ = "Reordering variables is not supported : ",
    _lj_ = "Invalid goal (typing error)\n",
    _lh_ = "Found",
    _k__ = [0, cst_html, cst_htmltag, cst_tostring],
    _k$_ =
      [0,
       cst_goal,
       cst_movehyp,
       cst_conclusion,
       cst_parent,
       cst_ivariants,
       cst_tvars,
       cst_context,
       cst_setmeta,
       cst_getmeta,
       cst_handle],
    _la_ =
      [0,
       cst_subgoals,
       cst_setmeta,
       cst_proof,
       cst_getmeta,
       cst_closed,
       cst_actions],
    _lb_ =
      [0,
       cst_proof,
       cst_actions,
       cst_subgoals,
       cst_closed,
       cst_setmeta,
       cst_getmeta],
    _lc_ =
      [0,
       cst_html,
       cst_proof,
       cst_position,
       cst_term,
       cst_phandle,
       cst_parent,
       cst_tostring,
       cst_fresh,
       cst_setmeta,
       cst_getmeta,
       cst_handle],
    _ld_ = [0, cst_setgoalsb],
    _le_ = [0, cst_tostring, cst_htmltag, cst_html],
    _lf_ =
      [0,
       cst_tvars,
       cst_setmeta,
       cst_parent,
       cst_movehyp,
       cst_ivariants,
       cst_handle,
       cst_goal,
       cst_getmeta,
       cst_context,
       cst_conclusion],
    _lg_ = "Dune__exe__Jsprover.MoveOnlyHyps",
    _lE_ = "engine";
   function erase_rel(param){
     /*<<?>>*/ if(typeof param === "number")
      /*<<camlinternalFormatBasics.ml:562:20>>*/ return 0;
    switch(param[0]){
      case 0:
       var rest = param[1];
        /*<<camlinternalFormatBasics.ml:533:4>>*/ return [0, erase_rel(rest)];
      case 1:
       var rest$0 = param[1];
        /*<<camlinternalFormatBasics.ml:535:4>>*/ return [1,
               erase_rel(rest$0)];
      case 2:
       var rest$1 = param[1];
        /*<<camlinternalFormatBasics.ml:537:4>>*/ return [2,
               erase_rel(rest$1)];
      case 3:
       var rest$2 = param[1];
        /*<<camlinternalFormatBasics.ml:539:4>>*/ return [3,
               erase_rel(rest$2)];
      case 4:
       var rest$3 = param[1];
        /*<<camlinternalFormatBasics.ml:543:4>>*/ return [4,
               erase_rel(rest$3)];
      case 5:
       var rest$4 = param[1];
        /*<<camlinternalFormatBasics.ml:541:4>>*/ return [5,
               erase_rel(rest$4)];
      case 6:
       var rest$5 = param[1];
        /*<<camlinternalFormatBasics.ml:545:4>>*/ return [6,
               erase_rel(rest$5)];
      case 7:
       var rest$6 = param[1];
        /*<<camlinternalFormatBasics.ml:547:4>>*/ return [7,
               erase_rel(rest$6)];
      case 8:
       var rest$7 = param[2], ty = param[1];
        /*<<camlinternalFormatBasics.ml:549:4>>*/ return [8,
               ty,
               erase_rel(rest$7)];
      case 9:
       var rest$8 = param[3], ty1 = param[1];
        /*<<camlinternalFormatBasics.ml:551:4>>*/ return [9,
               ty1,
               ty1,
               erase_rel(rest$8)];
      case 10:
       var rest$9 = param[1];
        /*<<camlinternalFormatBasics.ml:553:4>>*/ return [10,
               erase_rel(rest$9)];
      case 11:
       var rest$10 = param[1];
        /*<<camlinternalFormatBasics.ml:555:4>>*/ return [11,
               erase_rel(rest$10)];
      case 12:
       var rest$11 = param[1];
        /*<<camlinternalFormatBasics.ml:557:4>>*/ return [12,
               erase_rel(rest$11)];
      case 13:
       var rest$12 = param[1];
        /*<<camlinternalFormatBasics.ml:559:4>>*/ return [13,
               erase_rel(rest$12)];
      default:
       var rest$13 = param[1];
        /*<<camlinternalFormatBasics.ml:561:4>>*/ return [14,
               erase_rel(rest$13)];
    }
   }
   function concat_fmtty(fmtty1, fmtty2){
     /*<<camlinternalFormatBasics.ml:590:21>>*/ if(typeof fmtty1 === "number")
      /*<<camlinternalFormatBasics.ml:621:20>>*/ return fmtty2;
    switch(fmtty1[0]){
      case 0:
       var rest = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:592:4>>*/ return [0,
               concat_fmtty(rest, fmtty2)];
      case 1:
       var rest$0 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:594:4>>*/ return [1,
               concat_fmtty(rest$0, fmtty2)];
      case 2:
       var rest$1 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:596:4>>*/ return [2,
               concat_fmtty(rest$1, fmtty2)];
      case 3:
       var rest$2 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:598:4>>*/ return [3,
               concat_fmtty(rest$2, fmtty2)];
      case 4:
       var rest$3 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:600:4>>*/ return [4,
               concat_fmtty(rest$3, fmtty2)];
      case 5:
       var rest$4 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:602:4>>*/ return [5,
               concat_fmtty(rest$4, fmtty2)];
      case 6:
       var rest$5 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:604:4>>*/ return [6,
               concat_fmtty(rest$5, fmtty2)];
      case 7:
       var rest$6 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:606:4>>*/ return [7,
               concat_fmtty(rest$6, fmtty2)];
      case 8:
       var rest$7 = fmtty1[2], ty = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:618:4>>*/ return [8,
               ty,
               concat_fmtty(rest$7, fmtty2)];
      case 9:
       var rest$8 = fmtty1[3], ty2 = fmtty1[2], ty1 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:620:4>>*/ return [9,
               ty1,
               ty2,
               concat_fmtty(rest$8, fmtty2)];
      case 10:
       var rest$9 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:608:4>>*/ return [10,
               concat_fmtty(rest$9, fmtty2)];
      case 11:
       var rest$10 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:610:4>>*/ return [11,
               concat_fmtty(rest$10, fmtty2)];
      case 12:
       var rest$11 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:612:4>>*/ return [12,
               concat_fmtty(rest$11, fmtty2)];
      case 13:
       var rest$12 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:614:4>>*/ return [13,
               concat_fmtty(rest$12, fmtty2)];
      default:
       var rest$13 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:616:4>>*/ return [14,
               concat_fmtty(rest$13, fmtty2)];
    }
    /*<<camlinternalFormatBasics.ml:621:26>>*/ }
   function concat_fmt(fmt1, fmt2){
     /*<<camlinternalFormatBasics.ml:631:17>>*/ if(typeof fmt1 === "number")
      /*<<camlinternalFormatBasics.ml:690:4>>*/ return fmt2;
    switch(fmt1[0]){
      case 0:
       var rest = fmt1[1];
        /*<<camlinternalFormatBasics.ml:649:4>>*/ return [0,
               concat_fmt(rest, fmt2)];
      case 1:
       var rest$0 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:651:4>>*/ return [1,
               concat_fmt(rest$0, fmt2)];
      case 2:
       var rest$1 = fmt1[2], pad = fmt1[1];
        /*<<camlinternalFormatBasics.ml:633:4>>*/ return [2,
               pad,
               concat_fmt(rest$1, fmt2)];
      case 3:
       var rest$2 = fmt1[2], pad$0 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:635:4>>*/ return [3,
               pad$0,
               concat_fmt(rest$2, fmt2)];
      case 4:
       var rest$3 = fmt1[4], prec = fmt1[3], pad$1 = fmt1[2], iconv = fmt1[1];
        /*<<camlinternalFormatBasics.ml:638:4>>*/ return [4,
               iconv,
               pad$1,
               prec,
               concat_fmt(rest$3, fmt2)];
      case 5:
       var
        rest$4 = fmt1[4],
        prec$0 = fmt1[3],
        pad$2 = fmt1[2],
        iconv$0 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:640:4>>*/ return [5,
               iconv$0,
               pad$2,
               prec$0,
               concat_fmt(rest$4, fmt2)];
      case 6:
       var
        rest$5 = fmt1[4],
        prec$1 = fmt1[3],
        pad$3 = fmt1[2],
        iconv$1 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:642:4>>*/ return [6,
               iconv$1,
               pad$3,
               prec$1,
               concat_fmt(rest$5, fmt2)];
      case 7:
       var
        rest$6 = fmt1[4],
        prec$2 = fmt1[3],
        pad$4 = fmt1[2],
        iconv$2 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:644:4>>*/ return [7,
               iconv$2,
               pad$4,
               prec$2,
               concat_fmt(rest$6, fmt2)];
      case 8:
       var
        rest$7 = fmt1[4],
        prec$3 = fmt1[3],
        pad$5 = fmt1[2],
        fconv = fmt1[1];
        /*<<camlinternalFormatBasics.ml:646:4>>*/ return [8,
               fconv,
               pad$5,
               prec$3,
               concat_fmt(rest$7, fmt2)];
      case 9:
       var rest$8 = fmt1[2], pad$6 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:653:4>>*/ return [9,
               pad$6,
               concat_fmt(rest$8, fmt2)];
      case 10:
       var rest$9 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:663:4>>*/ return [10,
               concat_fmt(rest$9, fmt2)];
      case 11:
       var rest$10 = fmt1[2], str = fmt1[1];
        /*<<camlinternalFormatBasics.ml:666:4>>*/ return [11,
               str,
               concat_fmt(rest$10, fmt2)];
      case 12:
       var rest$11 = fmt1[2], chr = fmt1[1];
        /*<<camlinternalFormatBasics.ml:668:4>>*/ return [12,
               chr,
               concat_fmt(rest$11, fmt2)];
      case 13:
       var rest$12 = fmt1[3], fmtty = fmt1[2], pad$7 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:671:4>>*/ return [13,
               pad$7,
               fmtty,
               concat_fmt(rest$12, fmt2)];
      case 14:
       var rest$13 = fmt1[3], fmtty$0 = fmt1[2], pad$8 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:673:4>>*/ return [14,
               pad$8,
               fmtty$0,
               concat_fmt(rest$13, fmt2)];
      case 15:
       var rest$14 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:655:4>>*/ return [15,
               concat_fmt(rest$14, fmt2)];
      case 16:
       var rest$15 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:657:4>>*/ return [16,
               concat_fmt(rest$15, fmt2)];
      case 17:
       var rest$16 = fmt1[2], fmting_lit = fmt1[1];
        /*<<camlinternalFormatBasics.ml:685:4>>*/ return [17,
               fmting_lit,
               concat_fmt(rest$16, fmt2)];
      case 18:
       var rest$17 = fmt1[2], fmting_gen = fmt1[1];
        /*<<camlinternalFormatBasics.ml:687:4>>*/ return [18,
               fmting_gen,
               concat_fmt(rest$17, fmt2)];
      case 19:
       var rest$18 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:661:4>>*/ return [19,
               concat_fmt(rest$18, fmt2)];
      case 20:
       var rest$19 = fmt1[3], char_set = fmt1[2], width_opt = fmt1[1];
        /*<<camlinternalFormatBasics.ml:676:4>>*/ return [20,
               width_opt,
               char_set,
               concat_fmt(rest$19, fmt2)];
      case 21:
       var rest$20 = fmt1[2], counter = fmt1[1];
        /*<<camlinternalFormatBasics.ml:678:4>>*/ return [21,
               counter,
               concat_fmt(rest$20, fmt2)];
      case 22:
       var rest$21 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:680:4>>*/ return [22,
               concat_fmt(rest$21, fmt2)];
      case 23:
       var rest$22 = fmt1[2], ign = fmt1[1];
        /*<<camlinternalFormatBasics.ml:682:4>>*/ return [23,
               ign,
               concat_fmt(rest$22, fmt2)];
      default:
       var rest$23 = fmt1[3], f = fmt1[2], arity = fmt1[1];
        /*<<camlinternalFormatBasics.ml:659:4>>*/ return [24,
               arity,
               f,
               concat_fmt(rest$23, fmt2)];
    }
    /*<<camlinternalFormatBasics.ml:690:8>>*/ }
   function failwith(s){
     /*<<stdlib.ml:29:17>>*/ throw  /*<<stdlib.ml:29:17>>*/ caml_maybe_attach_backtrace
           ([0, Failure, s], 1);
    /*<<stdlib.ml:29:33>>*/ }
   function invalid_arg(s){
     /*<<stdlib.ml:30:20>>*/ throw  /*<<stdlib.ml:30:20>>*/ caml_maybe_attach_backtrace
           ([0, Invalid_argument, s], 1);
    /*<<stdlib.ml:30:45>>*/ }
   function min(x, y){
     /*<<stdlib.ml:74:14>>*/ return  /*<<stdlib.ml:74:17>>*/ caml_lessequal
             (x, y)
            ? x
            : y;
    /*<<stdlib.ml:74:37>>*/ }
   function max(x, y){
     /*<<stdlib.ml:75:14>>*/ return  /*<<stdlib.ml:75:17>>*/ caml_greaterequal
             (x, y)
            ? x
            : y;
    /*<<stdlib.ml:75:37>>*/ }
   function abs(x){
     /*<<stdlib.ml:98:12>>*/ return 0 <= x ? x : - x | 0;
    /*<<stdlib.ml:98:36>>*/ }
    /*<<stdlib.ml:180:2>>*/ var
    infinity = 2147483647,
     /*<<stdlib.ml:180:2>>*/ infinity$0 =
       /*<<stdlib.ml:180:2>>*/ caml_int64_float_of_bits(_a_),
     /*<<stdlib.ml:182:2>>*/ neg_infinity =
       /*<<stdlib.ml:182:2>>*/ caml_int64_float_of_bits(_b_);
   function symbol(s1, s2){
     /*<<stdlib.ml:213:2>>*/ var
     l1 = caml_ml_string_length(s1),
     l2 = caml_ml_string_length(s2),
      /*<<stdlib.ml:214:10>>*/ s =
        /*<<stdlib.ml:214:10>>*/ caml_create_bytes(l1 + l2 | 0);
     /*<<stdlib.ml:215:2>>*/  /*<<stdlib.ml:215:2>>*/ caml_blit_string
     (s1, 0, s, 0, l1);
     /*<<stdlib.ml:216:2>>*/  /*<<stdlib.ml:216:2>>*/ caml_blit_string
     (s2, 0, s, l1, l2);
    return caml_string_of_bytes(s);
    /*<<stdlib.ml:217:26>>*/ }
   function char_of_int(n){
     /*<<stdlib.ml:224:2>>*/ if(0 <= n && 255 >= n)
      /*<<stdlib.ml:224:58>>*/ return n;
     /*<<stdlib.ml:224:27>>*/ return invalid_arg(_c_);
    /*<<stdlib.ml:224:78>>*/ }
   function string_of_bool(b){
     /*<<stdlib.ml:254:2>>*/ return b ? _d_ : _e_;
    /*<<stdlib.ml:254:31>>*/ }
   function string_of_int(n){
     /*<<stdlib.ml:266:2>>*/ return "" + n;
    /*<<stdlib.ml:266:19>>*/ }
   function valid_float_lexem(s){
     /*<<stdlib.ml:278:2>>*/ var l = caml_ml_string_length(s);
    function loop(i){
      /*<<stdlib.ml:280:4>>*/ var i$0 = i;
      /*<<stdlib.ml:280:4>>*/ for(;;){
      if(l <= i$0)  /*<<stdlib.ml:280:19>>*/ return symbol(s, _f_);
       /*<<stdlib.ml:281:10>>*/  /*<<stdlib.ml:281:10>>*/ var
       match =  /*<<stdlib.ml:281:10>>*/ caml_string_get(s, i$0);
      a:
      {
       if(48 <= match){if(58 > match) break a;} else if(45 === match) break a;
        /*<<stdlib.ml:279:2>>*/ return s;
      }
       /*<<stdlib.ml:282:26>>*/ var
        /*<<stdlib.ml:282:26>>*/ i$1 = i$0 + 1 | 0,
       i$0 = i$1;
     }
     /*<<stdlib.ml:283:12>>*/ }
     /*<<stdlib.ml:285:2>>*/ return loop(0);
    /*<<stdlib.ml:285:8>>*/ }
   function string_of_float(f){
     /*<<stdlib.ml:287:24>>*/ return valid_float_lexem
            ( /*<<stdlib.ml:287:42>>*/ caml_format_float(cst_12g, f));
    /*<<stdlib.ml:287:66>>*/ }
   function symbol$0(l1, l2){
     /*<<stdlib.ml:299:2>>*/ if(! l1)  /*<<stdlib.ml:300:10>>*/ return l2;
    var _Dy_ = l1[2], h1 = l1[1];
    if(! _Dy_)  /*<<stdlib.ml:301:16>>*/ return [0, h1, l2];
    var match = _Dy_[2], h2 = _Dy_[1];
    if(! match)  /*<<stdlib.ml:302:22>>*/ return [0, h1, [0, h2, l2]];
     /*<<stdlib.ml:303:40>>*/ var
     tl = match[2],
     h3 = match[1],
      /*<<stdlib.ml:303:40>>*/ block = [0, h3, 24029];
     /*<<stdlib.ml:303:46>>*/ dps(block, 1, tl, l2);
     /*<<stdlib.ml:303:28>>*/ return [0, h1, [0, h2, block]];
    /*<<stdlib.ml:303:55>>*/ }
   function dps(dst, offset, l1, l2){
     /*<<stdlib.ml:299:2>>*/ var dst$0 = dst, offset$0 = offset, l1$0 = l1;
     /*<<stdlib.ml:299:2>>*/ for(;;){
     if(! l1$0){dst$0[1 + offset$0] = l2; return;}
     var _Dx_ = l1$0[2], h1 = l1$0[1];
     if(! _Dx_){dst$0[1 + offset$0] = [0, h1, l2]; return;}
     var match = _Dx_[2], h2 = _Dx_[1];
     if(! match){dst$0[1 + offset$0] = [0, h1, [0, h2, l2]]; return;}
      /*<<stdlib.ml:303:40>>*/ var
      tl = match[2],
      h3 = match[1],
       /*<<stdlib.ml:303:40>>*/ dst$1 = [0, h3, 24029];
     dst$0[1 + offset$0] = [0, h1, [0, h2, dst$1]];
     var dst$0 = dst$1, offset$0 = 1, l1$0 = tl;
    }
    /*<<stdlib.ml:303:55>>*/ }
    /*<<stdlib.ml:314:12>>*/ var
     /*<<stdlib.ml:314:12>>*/ stdin =
       /*<<stdlib.ml:314:12>>*/ caml_ml_open_descriptor_in(0),
     /*<<stdlib.ml:315:13>>*/ stdout =
       /*<<stdlib.ml:315:13>>*/ caml_ml_open_descriptor_out(1),
     /*<<stdlib.ml:316:13>>*/ stderr =
       /*<<stdlib.ml:316:13>>*/ caml_ml_open_descriptor_out(2);
   function flush_all(param){
    function iter(param){
      /*<<stdlib.ml:347:17>>*/ var param$0 = param;
      /*<<stdlib.ml:347:17>>*/ for(;;){
      if(! param$0)  /*<<stdlib.ml:348:12>>*/ return 0;
      var l = param$0[2], a = param$0[1];
       /*<<stdlib.ml:350:8>>*/ try{
        /*<<stdlib.ml:351:12>>*/  /*<<stdlib.ml:351:12>>*/ caml_ml_flush(a);
      }
      catch(_Dw_){
       var _Dv_ = caml_wrap_exception(_Dw_);
       if(_Dv_[1] !== Sys_error) throw caml_maybe_attach_backtrace(_Dv_, 0);
      }
      var param$0 = l;
     }
     /*<<stdlib.ml:355:14>>*/ }
     /*<<stdlib.ml:356:10>>*/ return iter
            ( /*<<stdlib.ml:356:10>>*/ caml_ml_out_channels_list(0));
    /*<<stdlib.ml:356:32>>*/ }
   function output_string(oc, s){
     /*<<stdlib.ml:369:2>>*/  /*<<stdlib.ml:369:2>>*/ caml_ml_output
     (oc, s, 0, caml_ml_string_length(s));
     /*<<stdlib.ml:369:2>>*/ return;
    /*<<stdlib.ml:369:47>>*/ }
   function output(oc, s, ofs, len){
     /*<<stdlib.ml:372:2>>*/ if
     (0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs){
      /*<<stdlib.ml:374:7>>*/  /*<<stdlib.ml:374:7>>*/ caml_ml_output_bytes
      (oc, s, ofs, len);
      /*<<stdlib.ml:374:7>>*/ return;
    }
     /*<<stdlib.ml:373:7>>*/ return invalid_arg(_g_);
    /*<<stdlib.ml:374:33>>*/ }
   function output_substring(oc, s, ofs, len){
     /*<<stdlib.ml:377:2>>*/ if
     (0 <= ofs && 0 <= len && (caml_ml_string_length(s) - len | 0) >= ofs)
      /*<<stdlib.ml:379:7>>*/ return  /*<<stdlib.ml:379:7>>*/ caml_ml_output
             (oc, s, ofs, len);
     /*<<stdlib.ml:378:7>>*/ return invalid_arg(_h_);
    /*<<stdlib.ml:379:40>>*/ }
   function close_out(oc){
     /*<<stdlib.ml:392:19>>*/  /*<<stdlib.ml:392:19>>*/ caml_ml_flush(oc);
     /*<<stdlib.ml:392:29>>*/ return  /*<<stdlib.ml:392:29>>*/ caml_ml_close_channel
            (oc);
    /*<<stdlib.ml:392:49>>*/ }
   function input(ic, s, ofs, len){
     /*<<stdlib.ml:421:2>>*/ if
     (0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
      /*<<stdlib.ml:423:7>>*/ return  /*<<stdlib.ml:423:7>>*/ caml_ml_input
             (ic, s, ofs, len);
     /*<<stdlib.ml:422:7>>*/ return invalid_arg(_i_);
    /*<<stdlib.ml:423:32>>*/ }
   function prerr_endline(s){
     /*<<stdlib.ml:503:2>>*/ output_string(stderr, s);
     /*<<stdlib.ml:503:26>>*/  /*<<stdlib.ml:503:26>>*/ caml_ml_output_char
     (stderr, 10);
     /*<<stdlib.ml:503:51>>*/ return  /*<<stdlib.ml:503:51>>*/ caml_ml_flush
            (stderr);
    /*<<stdlib.ml:503:63>>*/ }
    /*<<stdlib.ml:559:20>>*/  /*<<stdlib.ml:559:20>>*/ var
    exit_function = [0, flush_all];
   function at_exit(f){
     /*<<stdlib.ml:563:2>>*/ for(;;){
      /*<<stdlib.ml:563:21>>*/ var
       /*<<stdlib.ml:563:21>>*/ f_yet_to_run = [0, 1],
       /*<<stdlib.ml:564:2>>*/ old_exit =
         /*<<stdlib.ml:564:2>>*/ caml_atomic_load(exit_function);
     let f_yet_to_run$0 = f_yet_to_run, old_exit$0 = old_exit;
      /*<<stdlib.ml:570:2>>*/ var
      new_exit =
        function(param){
          /*<<stdlib.ml:566:4>>*/ if(caml_atomic_cas(f_yet_to_run$0, 1, 0))
           /*<<stdlib.ml:566:59>>*/  /*<<stdlib.ml:566:59>>*/ caml_call1(f, 0);
          /*<<stdlib.ml:566:59>>*/ return  /*<<stdlib.ml:566:59>>*/ caml_call1
                 (old_exit$0, 0);
         /*<<stdlib.ml:567:15>>*/ },
      success = caml_atomic_cas(exit_function, old_exit, new_exit),
       /*<<stdlib.ml:570:2>>*/ _Du_ = 1 - success;
     if(! _Du_)  /*<<stdlib.ml:570:2>>*/ return _Du_;
    }
    /*<<stdlib.ml:570:31>>*/ }
    /*<<stdlib.ml:572:30>>*/  /*<<stdlib.ml:572:30>>*/ var
    do_domain_local_at_exit =
      [0,
       function(param){
         /*<<stdlib.ml:572:45>>*/ return;
        /*<<stdlib.ml:572:47>>*/ }];
   function do_at_exit(param){
     /*<<stdlib.ml:575:2>>*/  /*<<stdlib.ml:575:2>>*/ caml_call1
     (do_domain_local_at_exit[1], 0);
     /*<<stdlib.ml:575:2>>*/ return  /*<<stdlib.ml:575:2>>*/ caml_call1
            (caml_atomic_load(exit_function), 0);
    /*<<stdlib.ml:576:31>>*/ }
    /*<<stdlib.ml:582:8>>*/  /*<<stdlib.ml:582:8>>*/ caml_register_named_value
    ("Pervasives.do_at_exit", do_at_exit);
   function close_in(_Dt_){ /*<<?>>*/ return caml_ml_close_channel(_Dt_);}
   function input_char(_Ds_){ /*<<?>>*/ return caml_ml_input_char(_Ds_);}
   function output_char(_Dr_, _Dq_){
     /*<<?>>*/ return caml_ml_output_char(_Dr_, _Dq_);
   }
   function flush(_Dp_){ /*<<?>>*/ return caml_ml_flush(_Dp_);}
   var
    min_int = -2147483648,
    os_type$0 =  /*<<sys.ml.in:37:22>>*/ caml_sys_get_config(0)[1],
    max_array_length = caml_sys_const_max_wosize(0),
    max_string_length = (4 * max_array_length | 0) - 1 | 0,
    length_of_digit = 32;
   function is_block(a){
     /*<<obj.ml:26:34>>*/ return 1 - (typeof a === "number" ? 1 : 0);
    /*<<obj.ml:26:48>>*/ }
   var max_ephe_length = max_array_length - 2 | 0;
   function _k_(_Do_, _Dn_, _Dm_){
     /*<<?>>*/ return caml_atomic_cas(_Do_, _Dn_, _Dm_);
   }
   function _l_(_Dl_){ /*<<?>>*/ return caml_atomic_load(_Dl_);}
   function _m_(_Dk_){ /*<<atomic.ml:17:0>>*/ return [0, _Dk_];}
   function _j_(_Dj_, _Di_){
     /*<<?>>*/ return caml_atomic_fetch_add(_Dj_, _Di_);
   }
   function empty(param){
     /*<<seq.ml:24:15>>*/ return 0;
    /*<<seq.ml:24:18>>*/ }
   function map(f, seq, param){
     /*<<seq.ml:35:23>>*/  /*<<seq.ml:35:29>>*/ var
     match =  /*<<seq.ml:35:29>>*/ caml_call1(seq, 0);
    if(! match)  /*<<seq.ml:36:11>>*/ return 0;
    var next = match[2], x = match[1];
     /*<<seq.ml:37:22>>*/ return [0,
             /*<<seq.ml:37:28>>*/ caml_call1(f, x),
            function(_Dh_){ /*<<?>>*/ return map(f, next, _Dh_);}];
    /*<<seq.ml:37:44>>*/ }
   function iter(f, seq){
     /*<<seq.ml:73:2>>*/ var seq$0 = seq;
     /*<<seq.ml:73:2>>*/ for(;;){
      /*<<seq.ml:73:8>>*/  /*<<seq.ml:73:8>>*/ var
      match =  /*<<seq.ml:73:8>>*/ caml_call1(seq$0, 0);
     if(! match)  /*<<seq.ml:74:13>>*/ return;
     var next = match[2], x = match[1];
      /*<<seq.ml:76:8>>*/  /*<<seq.ml:76:8>>*/ caml_call1(f, x);
     var seq$0 = next;
    }
    /*<<seq.ml:77:19>>*/ }
   function get(param){
     /*<<option.ml:21:10>>*/ if(! param)
      /*<<option.ml:21:41>>*/ return invalid_arg(_n_);
    var v = param[1];
     /*<<option.ml:21:29>>*/ return v;
    /*<<option.ml:21:69>>*/ }
   function chr(n){
     /*<<char.ml:22:2>>*/ if(0 <= n && 255 >= n)
      /*<<char.ml:22:55>>*/ return n;
     /*<<char.ml:22:27>>*/ return invalid_arg(_o_);
    /*<<char.ml:22:67>>*/ }
   function escaped(c){
     /*<<char.ml:29:14>>*/ a:
    {
     if(40 <= c){
      if(92 === c)  /*<<char.ml:31:12>>*/ return _p_;
      if(127 > c) break a;
     }
     else{
      if(32 <= c){if(39 <= c)  /*<<char.ml:30:12>>*/ return _q_; break a;}
      if(14 > c)
       switch(c){
         case 8:
           /*<<char.ml:35:12>>*/ return _r_;
         case 9:
           /*<<char.ml:33:12>>*/ return _s_;
         case 10:
           /*<<char.ml:32:12>>*/ return _t_;
         case 13:
           /*<<char.ml:34:12>>*/ return _u_;
       }
     }
      /*<<char.ml:42:14>>*/  /*<<char.ml:42:14>>*/ var
      s =  /*<<char.ml:42:14>>*/ caml_create_bytes(4);
     caml_bytes_unsafe_set(s, 0, 92);
     caml_bytes_unsafe_set(s, 1, 48 + (c / 100 | 0) | 0);
     caml_bytes_unsafe_set(s, 2, 48 + ((c / 10 | 0) % 10 | 0) | 0);
     caml_bytes_unsafe_set(s, 3, 48 + (c % 10 | 0) | 0);
     return caml_string_of_bytes(s);
    }
     /*<<char.ml:37:14>>*/  /*<<char.ml:37:14>>*/ var
     s$0 =  /*<<char.ml:37:14>>*/ caml_create_bytes(1);
    caml_bytes_unsafe_set(s$0, 0, c);
    return caml_string_of_bytes(s$0);
    /*<<char.ml:47:24>>*/ }
   function uppercase_ascii(c){
     /*<<char.ml:53:22>>*/ return 25 < c - 97 >>> 0 ? c : c - 32 | 0;
    /*<<char.ml:55:10>>*/ }
   function compare(c1, c2){
     /*<<char.ml:59:20>>*/ return c1 - c2 | 0;
    /*<<char.ml:59:37>>*/ }
   function length_aux(len, param){
    var len$0 = len, param$0 = param;
    for(;;){
     if(! param$0)  /*<<list.ml:22:10>>*/ return len$0;
      /*<<list.ml:23:12>>*/ var
      l = param$0[2],
       /*<<list.ml:23:12>>*/ len$1 = len$0 + 1 | 0,
      len$0 = len$1,
      param$0 = l;
    }
   }
   function length(l){
     /*<<list.ml:25:15>>*/ return length_aux(0, l);
    /*<<list.ml:25:29>>*/ }
   function cons(a, l){
     /*<<list.ml:27:15>>*/ return [0, a, l];
    /*<<list.ml:27:19>>*/ }
   function nth(l, n){
     /*<<list.ml:38:2>>*/ if(0 > n)
      /*<<list.ml:38:16>>*/ return invalid_arg(_w_);
     /*<<list.ml:39:2>>*/ function nth_aux(l, n){
      /*<<list.ml:40:4>>*/ var l$0 = l, n$0 = n;
      /*<<list.ml:40:4>>*/ for(;;){
      if(! l$0)  /*<<list.ml:41:12>>*/ return failwith(_v_);
      var l$1 = l$0[2], a = l$0[1];
       /*<<list.ml:42:14>>*/ if(0 === n$0)  /*<<list.ml:42:28>>*/ return a;
       /*<<list.ml:42:35>>*/ var
        /*<<list.ml:42:35>>*/ n$1 = n$0 - 1 | 0,
       l$0 = l$1,
       n$0 = n$1;
     }
     /*<<list.ml:42:50>>*/ }
     /*<<list.ml:43:5>>*/ return nth_aux(l, n);
    /*<<list.ml:43:16>>*/ }
   function nth_opt(l, n){
     /*<<list.ml:46:2>>*/ if(0 > n)
      /*<<list.ml:46:16>>*/ return invalid_arg(_x_);
     /*<<list.ml:47:2>>*/ function nth_aux(l, n){
      /*<<list.ml:48:4>>*/ var l$0 = l, n$0 = n;
      /*<<list.ml:48:4>>*/ for(;;){
      if(! l$0)  /*<<list.ml:49:12>>*/ return 0;
      var l$1 = l$0[2], a = l$0[1];
       /*<<list.ml:50:14>>*/ if(0 === n$0)
        /*<<list.ml:50:28>>*/ return [0, a];
       /*<<list.ml:50:40>>*/ var
        /*<<list.ml:50:40>>*/ n$1 = n$0 - 1 | 0,
       l$0 = l$1,
       n$0 = n$1;
     }
     /*<<list.ml:50:55>>*/ }
     /*<<list.ml:51:5>>*/ return nth_aux(l, n);
    /*<<list.ml:51:16>>*/ }
   function rev_append(l1, l2){
     /*<<list.ml:56:2>>*/ var l1$0 = l1, l2$0 = l2;
     /*<<list.ml:56:2>>*/ for(;;){
     if(! l1$0)  /*<<list.ml:57:10>>*/ return l2$0;
      /*<<list.ml:58:27>>*/ var
      l1$1 = l1$0[2],
      a = l1$0[1],
       /*<<list.ml:58:27>>*/ l2$1 = [0, a, l2$0],
      l1$0 = l1$1,
      l2$0 = l2$1;
    }
    /*<<list.ml:58:36>>*/ }
   function rev(l){
     /*<<list.ml:60:12>>*/ return rev_append(l, 0);
    /*<<list.ml:60:27>>*/ }
   function _y_(i, last, f){
     /*<<list.ml:63:2>>*/ if(last < i)  /*<<list.ml:63:19>>*/ return 0;
    if(i === last)
      /*<<list.ml:64:24>>*/ return [0,
              /*<<list.ml:64:25>>*/ caml_call1(f, i),
             0];
     /*<<list.ml:66:13>>*/ var
      /*<<list.ml:66:13>>*/ r1 =  /*<<list.ml:66:13>>*/ caml_call1(f, i),
      /*<<list.ml:67:13>>*/ r2 =
        /*<<list.ml:67:13>>*/ caml_call1(f, i + 1 | 0),
      /*<<list.ml:68:10>>*/ block = [0, r2, 24029];
     /*<<list.ml:68:16>>*/ init_dps(block, 1, i + 2 | 0, last, f);
     /*<<list.ml:68:4>>*/ return [0, r1, block];
    /*<<list.ml:68:33>>*/ }
   function init_dps(dst, offset, i, last, f){
     /*<<list.ml:63:2>>*/ var dst$0 = dst, offset$0 = offset, i$0 = i;
     /*<<list.ml:63:2>>*/ for(;;){
     if(last < i$0){dst$0[1 + offset$0] = 0; return;}
     if(i$0 === last){
      dst$0[1 + offset$0] = [0,  /*<<list.ml:64:25>>*/ caml_call1(f, i$0), 0];
      return;
     }
      /*<<list.ml:66:13>>*/ var
       /*<<list.ml:66:13>>*/ r1 =  /*<<list.ml:66:13>>*/ caml_call1(f, i$0),
       /*<<list.ml:67:13>>*/ r2 =
         /*<<list.ml:67:13>>*/ caml_call1(f, i$0 + 1 | 0),
       /*<<list.ml:68:10>>*/ dst$1 = [0, r2, 24029];
     dst$0[1 + offset$0] = [0, r1, dst$1];
     var i$1 = i$0 + 2 | 0, dst$0 = dst$1, offset$0 = 1, i$0 = i$1;
    }
    /*<<list.ml:68:33>>*/ }
   function init(len, f){
     /*<<list.ml:71:2>>*/ return 0 <= len
            ? _y_(0, len - 1 | 0, f)
            : invalid_arg(_z_);
    /*<<list.ml:72:20>>*/ }
   function flatten(param){
     /*<<list.ml:74:18>>*/ if(! param)  /*<<list.ml:75:10>>*/ return 0;
    var r = param[2], l = param[1];
     /*<<list.ml:76:16>>*/ return symbol$0(l, flatten(r));
    /*<<list.ml:76:25>>*/ }
   function map$0(f, param){
     /*<<?>>*/ if(! param)  /*<<list.ml:81:10>>*/ return 0;
    var match = param[2], a1 = param[1];
    if(match){
      /*<<list.ml:86:15>>*/ var
      l = match[2],
      a2 = match[1],
       /*<<list.ml:86:15>>*/ r1 =  /*<<list.ml:86:15>>*/ caml_call1(f, a1),
       /*<<list.ml:87:15>>*/ r2 =  /*<<list.ml:87:15>>*/ caml_call1(f, a2),
       /*<<list.ml:88:10>>*/ block = [0, r2, 24029];
      /*<<list.ml:88:14>>*/ map_dps(block, 1, f, l);
      /*<<list.ml:88:6>>*/ return [0, r1, block];
    }
     /*<<list.ml:83:15>>*/  /*<<list.ml:83:15>>*/ var
     r1$0 =  /*<<list.ml:83:15>>*/ caml_call1(f, a1);
     /*<<list.ml:84:6>>*/ return [0, r1$0, 0];
   }
   function map_dps(dst, offset, f, param){
    var dst$0 = dst, offset$0 = offset, param$0 = param;
    for(;;){
     if(! param$0){dst$0[1 + offset$0] = 0; return;}
     var match = param$0[2], a1 = param$0[1];
     if(! match){
       /*<<list.ml:83:15>>*/  /*<<list.ml:83:15>>*/ var
       r1$0 =  /*<<list.ml:83:15>>*/ caml_call1(f, a1);
      dst$0[1 + offset$0] = [0, r1$0, 0];
      return;
     }
      /*<<list.ml:86:15>>*/ var
      l = match[2],
      a2 = match[1],
       /*<<list.ml:86:15>>*/ r1 =  /*<<list.ml:86:15>>*/ caml_call1(f, a1),
       /*<<list.ml:87:15>>*/ r2 =  /*<<list.ml:87:15>>*/ caml_call1(f, a2),
       /*<<list.ml:88:10>>*/ dst$1 = [0, r2, 24029];
     dst$0[1 + offset$0] = [0, r1, dst$1];
     var dst$0 = dst$1, offset$0 = 1, param$0 = l;
    }
   }
   function _A_(i, f, param){
     /*<<?>>*/ if(! param)  /*<<list.ml:91:10>>*/ return 0;
    var match = param[2], a1 = param[1];
    if(match){
      /*<<list.ml:96:15>>*/ var
      l = match[2],
      a2 = match[1],
       /*<<list.ml:96:15>>*/ r1 =  /*<<list.ml:96:15>>*/ caml_call2(f, i, a1),
       /*<<list.ml:97:15>>*/ r2 =
         /*<<list.ml:97:15>>*/ caml_call2(f, i + 1 | 0, a2),
       /*<<list.ml:98:10>>*/ block = [0, r2, 24029];
      /*<<list.ml:98:14>>*/ mapi_dps(block, 1, i + 2 | 0, f, l);
      /*<<list.ml:98:6>>*/ return [0, r1, block];
    }
     /*<<list.ml:93:15>>*/  /*<<list.ml:93:15>>*/ var
     r1$0 =  /*<<list.ml:93:15>>*/ caml_call2(f, i, a1);
     /*<<list.ml:94:6>>*/ return [0, r1$0, 0];
   }
   function mapi_dps(dst, offset, i, f, param){
    var dst$0 = dst, offset$0 = offset, i$0 = i, param$0 = param;
    for(;;){
     if(! param$0){dst$0[1 + offset$0] = 0; return;}
     var match = param$0[2], a1 = param$0[1];
     if(! match){
       /*<<list.ml:93:15>>*/  /*<<list.ml:93:15>>*/ var
       r1$0 =  /*<<list.ml:93:15>>*/ caml_call2(f, i$0, a1);
      dst$0[1 + offset$0] = [0, r1$0, 0];
      return;
     }
      /*<<list.ml:96:15>>*/ var
      l = match[2],
      a2 = match[1],
       /*<<list.ml:96:15>>*/ r1 =
         /*<<list.ml:96:15>>*/ caml_call2(f, i$0, a1),
       /*<<list.ml:97:15>>*/ r2 =
         /*<<list.ml:97:15>>*/ caml_call2(f, i$0 + 1 | 0, a2),
       /*<<list.ml:98:10>>*/ dst$1 = [0, r2, 24029];
     dst$0[1 + offset$0] = [0, r1, dst$1];
     var
      i$1 = i$0 + 2 | 0,
      dst$0 = dst$1,
      offset$0 = 1,
      i$0 = i$1,
      param$0 = l;
    }
   }
   function mapi(f, l){
     /*<<list.ml:100:15>>*/ return _A_(0, f, l);
    /*<<list.ml:100:25>>*/ }
   function iter$0(f, param){
    var param$0 = param;
    for(;;){
     if(! param$0)  /*<<list.ml:111:10>>*/ return 0;
     var l = param$0[2], a = param$0[1];
      /*<<list.ml:112:12>>*/  /*<<list.ml:112:12>>*/ caml_call1(f, a);
     var param$0 = l;
    }
   }
   function _B_(i, f, param){
    var i$0 = i, param$0 = param;
    for(;;){
     if(! param$0)  /*<<list.ml:115:10>>*/ return;
     var l = param$0[2], a = param$0[1];
      /*<<list.ml:116:12>>*/  /*<<list.ml:116:12>>*/ caml_call2(f, i$0, a);
     var i$1 = i$0 + 1 | 0, i$0 = i$1, param$0 = l;
    }
   }
   function iteri(f, l){
     /*<<list.ml:118:16>>*/ return _B_(0, f, l);
    /*<<list.ml:118:27>>*/ }
   function fold_left(f, accu, l){
     /*<<list.ml:121:2>>*/ var accu$0 = accu, l$0 = l;
     /*<<list.ml:121:2>>*/ for(;;){
     if(! l$0)  /*<<list.ml:122:10>>*/ return accu$0;
      /*<<list.ml:123:24>>*/ var
      l$1 = l$0[2],
      a = l$0[1],
       /*<<list.ml:123:24>>*/ accu$1 =
         /*<<list.ml:123:24>>*/ caml_call2(f, accu$0, a),
      accu$0 = accu$1,
      l$0 = l$1;
    }
    /*<<list.ml:123:36>>*/ }
   function fold_right(f, l, accu){
     /*<<list.ml:126:2>>*/ if(! l)  /*<<list.ml:127:10>>*/ return accu;
    var l$0 = l[2], a = l[1];
     /*<<list.ml:128:16>>*/ return  /*<<list.ml:128:16>>*/ caml_call2
            (f, a, fold_right(f, l$0, accu));
    /*<<list.ml:128:37>>*/ }
   function for_all(p, param){
    var param$0 = param;
    for(;;){
     if(! param$0)  /*<<list.ml:171:10>>*/ return 1;
      /*<<list.ml:172:12>>*/ var
      l = param$0[2],
      a = param$0[1],
       /*<<list.ml:172:12>>*/ _Dg_ =  /*<<list.ml:172:12>>*/ caml_call1(p, a);
      /*<<list.ml:172:12>>*/ if(! _Dg_)  /*<<list.ml:172:12>>*/ return _Dg_;
     var param$0 = l;
    }
   }
   function exists(p, param){
    var param$0 = param;
    for(;;){
     if(! param$0)  /*<<list.ml:175:10>>*/ return 0;
      /*<<list.ml:176:12>>*/ var
      l = param$0[2],
      a = param$0[1],
       /*<<list.ml:176:12>>*/ _Df_ =  /*<<list.ml:176:12>>*/ caml_call1(p, a);
      /*<<list.ml:176:12>>*/ if(_Df_)  /*<<list.ml:176:12>>*/ return _Df_;
     var param$0 = l;
    }
   }
   function mem(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0)  /*<<list.ml:191:10>>*/ return 0;
     var
      l = param$0[2],
      a = param$0[1],
      _De_ = 0 ===  /*<<list.ml:192:12>>*/ caml_compare(a, x) ? 1 : 0;
     if(_De_) return _De_;
     var param$0 = l;
    }
   }
   function memq(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0)  /*<<list.ml:195:10>>*/ return 0;
     var l = param$0[2], a = param$0[1], _Dd_ = a === x ? 1 : 0;
     if(_Dd_) return _Dd_;
     var param$0 = l;
    }
   }
   function assoc(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0)
       /*<<list.ml:199:10>>*/ throw  /*<<list.ml:199:10>>*/ caml_maybe_attach_backtrace
             (Not_found, 1);
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
      /*<<list.ml:200:19>>*/ if
      (0 ===  /*<<list.ml:200:19>>*/ caml_compare(a, x))
       /*<<list.ml:200:40>>*/ return b;
     var param$0 = l;
    }
   }
   function assq(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0)
       /*<<list.ml:207:10>>*/ throw  /*<<list.ml:207:10>>*/ caml_maybe_attach_backtrace
             (Not_found, 1);
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
     if(a === x)  /*<<list.ml:208:31>>*/ return b;
     var param$0 = l;
    }
   }
   function remove_assq(x, param){
     /*<<?>>*/ if(! param)  /*<<list.ml:228:10>>*/ return 0;
    var l = param[2], pair = param[1], a = pair[1];
    return a === x ? l : [0, pair, remove_assq(x, l)];
   }
   function find_all(p, param){
    var param$0 = param;
    for(;;){
     if(! param$0)  /*<<list.ml:264:10>>*/ return 0;
     var l = param$0[2], x = param$0[1];
      /*<<list.ml:265:17>>*/ if( /*<<list.ml:265:17>>*/ caml_call1(p, x)){
       /*<<list.ml:265:26>>*/  /*<<list.ml:265:26>>*/ var
       block = [0, x, 24029];
       /*<<list.ml:265:31>>*/ find_all_dps(block, 1, p, l);
       /*<<list.ml:265:31>>*/ return block;
     }
     var param$0 = l;
    }
   }
   function find_all_dps(dst, offset, p, param){
    var dst$0 = dst, offset$0 = offset, param$0 = param;
    for(;;){
     if(! param$0){dst$0[1 + offset$0] = 0; return;}
     var l = param$0[2], x = param$0[1];
      /*<<list.ml:265:17>>*/ if( /*<<list.ml:265:17>>*/ caml_call1(p, x)){
       /*<<list.ml:265:26>>*/  /*<<list.ml:265:26>>*/ var
       dst$1 = [0, x, 24029];
      dst$0[1 + offset$0] = dst$1;
      var dst$0 = dst$1, offset$0 = 1, param$0 = l;
     }
     else
      var param$0 = l;
    }
   }
   function stable_sort(cmp, l){
    function rev_merge(l1, l2, accu){
      /*<<list.ml:342:4>>*/ var l1$0 = l1, l2$0 = l2, accu$0 = accu;
      /*<<list.ml:342:4>>*/ for(;;){
      if(! l1$0)  /*<<list.ml:343:16>>*/ return rev_append(l2$0, accu$0);
      if(! l2$0)  /*<<list.ml:344:16>>*/ return rev_append(l1$0, accu$0);
      var t2 = l2$0[2], h2 = l2$0[1], t1 = l1$0[2], h1 = l1$0[1];
       /*<<list.ml:346:11>>*/ if
       (0 <  /*<<list.ml:346:11>>*/ caml_call2(cmp, h1, h2))
        /*<<list.ml:348:29>>*/ var
         /*<<list.ml:348:29>>*/ accu$1 = [0, h2, accu$0],
        l2$0 = t2,
        accu$0 = accu$1;
      else
        /*<<list.ml:347:29>>*/ var
         /*<<list.ml:347:29>>*/ accu$2 = [0, h1, accu$0],
        l1$0 = t1,
        accu$0 = accu$2;
     }
     /*<<list.ml:348:39>>*/ }
    function rev_merge_rev(l1, l2, accu){
      /*<<list.ml:351:4>>*/ var l1$0 = l1, l2$0 = l2, accu$0 = accu;
      /*<<list.ml:351:4>>*/ for(;;){
      if(! l1$0)  /*<<list.ml:352:16>>*/ return rev_append(l2$0, accu$0);
      if(! l2$0)  /*<<list.ml:353:16>>*/ return rev_append(l1$0, accu$0);
      var t2 = l2$0[2], h2 = l2$0[1], t1 = l1$0[2], h1 = l1$0[1];
       /*<<list.ml:355:11>>*/ if
       (0 <  /*<<list.ml:355:11>>*/ caml_call2(cmp, h1, h2))
        /*<<list.ml:356:33>>*/ var
         /*<<list.ml:356:33>>*/ accu$1 = [0, h1, accu$0],
        l1$0 = t1,
        accu$0 = accu$1;
      else
        /*<<list.ml:357:33>>*/ var
         /*<<list.ml:357:33>>*/ accu$2 = [0, h2, accu$0],
        l2$0 = t2,
        accu$0 = accu$2;
     }
     /*<<list.ml:357:43>>*/ }
    function sort(n, l){
      /*<<list.ml:360:4>>*/ if(2 === n){
      if(l){
       var match = l[2];
       if(match){
         /*<<list.ml:362:19>>*/ var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
          /*<<list.ml:362:19>>*/ s =
           0 <  /*<<list.ml:362:19>>*/ caml_call2(cmp, x1, x2)
            ? [0, x2, [0, x1, 0]]
            : [0, x1, [0, x2, 0]];
         /*<<list.ml:363:8>>*/ return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _Dc_ = l[2];
      if(_Dc_){
       var match$2 = _Dc_[2];
       if(match$2){
         /*<<list.ml:366:13>>*/ var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _Dc_[1],
         x1$0 = l[1],
          /*<<list.ml:366:13>>*/ s$0 =
           0 <  /*<<list.ml:366:13>>*/ caml_call2(cmp, x1$0, x2$0)
            ? 0
              <  /*<<list.ml:370:18>>*/ caml_call2(cmp, x1$0, x3)
              ? 0
                <  /*<<list.ml:371:18>>*/ caml_call2(cmp, x2$0, x3)
                ? [0, x3, [0, x2$0, [0, x1$0, 0]]]
                : [0, x2$0, [0, x3, [0, x1$0, 0]]]
              : [0, x2$0, [0, x1$0, [0, x3, 0]]]
            : 0
              <  /*<<list.ml:367:15>>*/ caml_call2(cmp, x2$0, x3)
              ? 0
                <  /*<<list.ml:368:20>>*/ caml_call2(cmp, x1$0, x3)
                ? [0, x3, [0, x1$0, [0, x2$0, 0]]]
                : [0, x1$0, [0, x3, [0, x2$0, 0]]]
              : [0, x1$0, [0, x2$0, [0, x3, 0]]];
         /*<<list.ml:374:8>>*/ return [0, s$0, tl$1];
       }
      }
     }
      /*<<list.ml:378:21>>*/ var
      n1 = n >> 1,
      n2 = n - n1 | 0,
       /*<<list.ml:378:21>>*/ match$0 = rev_sort(n1, l),
      l2 = match$0[2],
      s1 = match$0[1],
       /*<<list.ml:379:21>>*/ match$1 = rev_sort(n2, l2),
      tl$0 = match$1[2],
      s2 = match$1[1];
      /*<<list.ml:380:8>>*/ return [0, rev_merge_rev(s1, s2, 0), tl$0];
     /*<<list.ml:380:36>>*/ }
    function rev_sort(n, l){
      /*<<list.ml:382:4>>*/ if(2 === n){
      if(l){
       var match = l[2];
       if(match){
         /*<<list.ml:384:19>>*/ var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
          /*<<list.ml:384:19>>*/ s =
           0 <  /*<<list.ml:384:19>>*/ caml_call2(cmp, x1, x2)
            ? [0, x1, [0, x2, 0]]
            : [0, x2, [0, x1, 0]];
         /*<<list.ml:385:8>>*/ return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _Db_ = l[2];
      if(_Db_){
       var match$2 = _Db_[2];
       if(match$2){
         /*<<list.ml:388:13>>*/ var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _Db_[1],
         x1$0 = l[1],
          /*<<list.ml:388:13>>*/ s$0 =
           0 <  /*<<list.ml:388:13>>*/ caml_call2(cmp, x1$0, x2$0)
            ? 0
              <  /*<<list.ml:389:15>>*/ caml_call2(cmp, x2$0, x3)
              ? [0, x1$0, [0, x2$0, [0, x3, 0]]]
              : 0
                <  /*<<list.ml:390:20>>*/ caml_call2(cmp, x1$0, x3)
                ? [0, x1$0, [0, x3, [0, x2$0, 0]]]
                : [0, x3, [0, x1$0, [0, x2$0, 0]]]
            : 0
              <  /*<<list.ml:392:18>>*/ caml_call2(cmp, x1$0, x3)
              ? [0, x2$0, [0, x1$0, [0, x3, 0]]]
              : 0
                <  /*<<list.ml:393:18>>*/ caml_call2(cmp, x2$0, x3)
                ? [0, x2$0, [0, x3, [0, x1$0, 0]]]
                : [0, x3, [0, x2$0, [0, x1$0, 0]]];
         /*<<list.ml:396:8>>*/ return [0, s$0, tl$1];
       }
      }
     }
      /*<<list.ml:400:21>>*/ var
      n1 = n >> 1,
      n2 = n - n1 | 0,
       /*<<list.ml:400:21>>*/ match$0 = sort(n1, l),
      l2 = match$0[2],
      s1 = match$0[1],
       /*<<list.ml:401:21>>*/ match$1 = sort(n2, l2),
      tl$0 = match$1[2],
      s2 = match$1[1];
      /*<<list.ml:402:8>>*/ return [0, rev_merge(s1, s2, 0), tl$0];
     /*<<list.ml:402:32>>*/ }
     /*<<list.ml:404:12>>*/  /*<<list.ml:404:12>>*/ var len = length(l);
     /*<<list.ml:405:2>>*/ return 2 <= len ? sort(len, l)[1] : l;
    /*<<list.ml:405:41>>*/ }
   function is_empty(param){
     /*<<list.ml:543:15>>*/ return param ? 0 : 1;
    /*<<list.ml:545:19>>*/ }
   function equal(_Da_, _C$_){ /*<<?>>*/ return _Da_ === _C$_ ? 1 : 0;}
   function compare$0(_C__, _C9_){
     /*<<?>>*/ return caml_int_compare(_C__, _C9_);
   }
   function min$0(x, y){
     /*<<int.ml:41:18>>*/ return x <= y ? x : y;
    /*<<int.ml:41:41>>*/ }
   function max$0(x, y){
     /*<<int.ml:42:18>>*/ return y <= x ? x : y;
    /*<<int.ml:42:41>>*/ }
   function to_string(x){
     /*<<int.ml:52:18>>*/ return "" + x;
    /*<<int.ml:52:35>>*/ }
   function make(n, c){
     /*<<bytes.ml:42:2>>*/  /*<<bytes.ml:42:10>>*/ var
     s =  /*<<bytes.ml:42:10>>*/ caml_create_bytes(n);
     /*<<bytes.ml:43:2>>*/  /*<<bytes.ml:43:2>>*/ caml_fill_bytes(s, 0, n, c);
     /*<<bytes.ml:43:2>>*/ return s;
    /*<<bytes.ml:44:3>>*/ }
   function init$0(n, f){
     /*<<bytes.ml:47:2>>*/ var
      /*<<bytes.ml:47:10>>*/ s =  /*<<bytes.ml:47:10>>*/ caml_create_bytes(n),
      /*<<bytes.ml:48:2>>*/ _C7_ = n - 1 | 0,
      /*<<bytes.ml:47:10>>*/ _C6_ = 0;
    if(_C7_ >= 0){
     var i = _C6_;
     for(;;){
      caml_bytes_unsafe_set(s, i,  /*<<bytes.ml:49:19>>*/ caml_call1(f, i));
       /*<<bytes.ml:48:2>>*/  /*<<bytes.ml:48:2>>*/ var _C8_ = i + 1 | 0;
      if(_C7_ === i) break;
      var i = _C8_;
     }
    }
     /*<<bytes.ml:51:2>>*/ return s;
    /*<<bytes.ml:51:3>>*/ }
   function copy(s){
     /*<<bytes.ml:56:2>>*/ var
     len = caml_ml_bytes_length(s),
      /*<<bytes.ml:57:10>>*/ r =
        /*<<bytes.ml:57:10>>*/ caml_create_bytes(len);
     /*<<bytes.ml:58:2>>*/  /*<<bytes.ml:58:2>>*/ caml_blit_bytes
     (s, 0, r, 0, len);
     /*<<bytes.ml:58:2>>*/ return r;
    /*<<bytes.ml:59:3>>*/ }
   function to_string$0(b){
     /*<<bytes.ml:61:18>>*/  /*<<bytes.ml:61:35>>*/ caml_string_of_bytes
     (copy(b));
     /*<<bytes.ml:61:35>>*/ return;
    /*<<bytes.ml:61:43>>*/ }
   function of_string(s){
     /*<<bytes.ml:62:18>>*/ return copy(caml_bytes_of_string(s));
    /*<<bytes.ml:62:43>>*/ }
   function sub(s, ofs, len){
     /*<<bytes.ml:65:2>>*/ if
     (0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs){
      /*<<bytes.ml:68:12>>*/  /*<<bytes.ml:68:12>>*/ var
      r =  /*<<bytes.ml:68:12>>*/ caml_create_bytes(len);
      /*<<bytes.ml:69:4>>*/  /*<<bytes.ml:69:4>>*/ caml_blit_bytes
      (s, ofs, r, 0, len);
      /*<<bytes.ml:69:4>>*/ return r;
    }
     /*<<bytes.ml:66:7>>*/ return invalid_arg(_C_);
    /*<<bytes.ml:71:5>>*/ }
   function sub_string(b, ofs, len){
     /*<<bytes.ml:73:27>>*/ return  /*<<bytes.ml:73:44>>*/ caml_string_of_bytes
            (sub(b, ofs, len));
    /*<<bytes.ml:73:59>>*/ }
   function blit(s1, ofs1, s2, ofs2, len){
     /*<<bytes.ml:97:2>>*/ if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (caml_ml_bytes_length(s1) - len | 0) >= ofs1
        && 0 <= ofs2 && (caml_ml_bytes_length(s2) - len | 0) >= ofs2){
      /*<<bytes.ml:100:7>>*/  /*<<bytes.ml:100:7>>*/ caml_blit_bytes
      (s1, ofs1, s2, ofs2, len);
      /*<<bytes.ml:100:7>>*/ return;
    }
     /*<<bytes.ml:99:7>>*/ return invalid_arg(_D_);
    /*<<bytes.ml:100:38>>*/ }
   function blit_string(s1, ofs1, s2, ofs2, len){
     /*<<bytes.ml:103:2>>*/ if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (caml_ml_string_length(s1) - len | 0) >= ofs1
        && 0 <= ofs2 && (caml_ml_bytes_length(s2) - len | 0) >= ofs2){
      /*<<bytes.ml:106:7>>*/  /*<<bytes.ml:106:7>>*/ caml_blit_string
      (s1, ofs1, s2, ofs2, len);
      /*<<bytes.ml:106:7>>*/ return;
    }
     /*<<bytes.ml:105:7>>*/ return invalid_arg(_E_);
    /*<<bytes.ml:106:45>>*/ }
   function unsafe_escape(s){
     /*<<bytes.ml:184:2>>*/ var
      /*<<bytes.ml:184:10>>*/ n = [0, 0],
     _CZ_ = caml_ml_bytes_length(s) - 1 | 0,
      /*<<bytes.ml:184:10>>*/ _CY_ = 0;
    if(_CZ_ >= 0){
     var i$0 = _CY_;
     for(;;){
      var match = caml_bytes_unsafe_get(s, i$0);
      a:
      {
       b:
       {
        c:
        {
         if(32 <= match){
          var _C3_ = match - 34 | 0;
          if(58 < _C3_ >>> 0){
           if(93 <= _C3_) break c;
          }
          else if(56 < _C3_ - 1 >>> 0) break b;
          var _C4_ = 1;
          break a;
         }
         if(11 <= match){
          if(13 === match) break b;
         }
         else if(8 <= match) break b;
        }
        var _C4_ = 4;
        break a;
       }
       var _C4_ = 2;
      }
      n[1] = n[1] + _C4_ | 0;
       /*<<bytes.ml:185:2>>*/  /*<<bytes.ml:185:2>>*/ var _C5_ = i$0 + 1 | 0;
      if(_CZ_ === i$0) break;
      var i$0 = _C5_;
     }
    }
    if(n[1] === caml_ml_bytes_length(s))  /*<<bytes.ml:192:24>>*/ return s;
     /*<<bytes.ml:194:13>>*/  /*<<bytes.ml:194:13>>*/ var
     s$0 =  /*<<bytes.ml:194:13>>*/ caml_create_bytes(n[1]);
    n[1] = 0;
     /*<<bytes.ml:196:4>>*/ var
     _C1_ = caml_ml_bytes_length(s) - 1 | 0,
      /*<<bytes.ml:196:4>>*/ _C0_ = 0;
    if(_C1_ >= 0){
     var i = _C0_;
     for(;;){
      var c = caml_bytes_unsafe_get(s, i);
      a:
      {
       b:
       {
        c:
        {
         if(35 <= c){
          if(92 !== c){if(127 <= c) break c; break b;}
         }
         else{
          if(32 > c){
           if(14 <= c) break c;
           switch(c){
             case 8:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 98);
              break a;
             case 9:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 116);
              break a;
             case 10:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 110);
              break a;
             case 13:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 114);
              break a;
             default: break c;
           }
          }
          if(34 > c) break b;
         }
         caml_bytes_unsafe_set(s$0, n[1], 92);
         n[1]++;
         caml_bytes_unsafe_set(s$0, n[1], c);
         break a;
        }
        caml_bytes_unsafe_set(s$0, n[1], 92);
        n[1]++;
        caml_bytes_unsafe_set(s$0, n[1], 48 + (c / 100 | 0) | 0);
        n[1]++;
        caml_bytes_unsafe_set(s$0, n[1], 48 + ((c / 10 | 0) % 10 | 0) | 0);
        n[1]++;
        caml_bytes_unsafe_set(s$0, n[1], 48 + (c % 10 | 0) | 0);
        break a;
       }
       caml_bytes_unsafe_set(s$0, n[1], c);
      }
      n[1]++;
       /*<<bytes.ml:196:4>>*/  /*<<bytes.ml:196:4>>*/ var _C2_ = i + 1 | 0;
      if(_C1_ === i) break;
      var i = _C2_;
     }
    }
     /*<<bytes.ml:221:4>>*/ return s$0;
    /*<<bytes.ml:222:5>>*/ }
   function map$1(f, s){
     /*<<bytes.ml:231:2>>*/ var l = caml_ml_bytes_length(s);
     /*<<bytes.ml:232:2>>*/ if(0 === l)  /*<<bytes.ml:232:16>>*/ return s;
     /*<<bytes.ml:233:12>>*/ var
      /*<<bytes.ml:233:12>>*/ r =
        /*<<bytes.ml:233:12>>*/ caml_create_bytes(l),
      /*<<bytes.ml:234:4>>*/ _CW_ = l - 1 | 0,
      /*<<bytes.ml:233:12>>*/ _CV_ = 0;
    if(_CW_ >= 0){
     var i = _CV_;
     for(;;){
      caml_bytes_unsafe_set
       (r,
        i,
         /*<<bytes.ml:234:41>>*/ caml_call1(f, caml_bytes_unsafe_get(s, i)));
       /*<<bytes.ml:234:4>>*/  /*<<bytes.ml:234:4>>*/ var _CX_ = i + 1 | 0;
      if(_CW_ === i) break;
      var i = _CX_;
     }
    }
     /*<<bytes.ml:235:4>>*/ return r;
    /*<<bytes.ml:236:5>>*/ }
   function uppercase_ascii$0(s){
     /*<<bytes.ml:276:24>>*/ return map$1(uppercase_ascii, s);
    /*<<bytes.ml:276:50>>*/ }
   function get_int64_le(b, i){
     /*<<bytes.ml:508:2>>*/ return  /*<<bytes.ml:509:7>>*/ caml_bytes_get64
            (b, i);
    /*<<bytes.ml:509:23>>*/ }
   function set_int64_le(b, i, x){
     /*<<bytes.ml:542:2>>*/  /*<<bytes.ml:543:7>>*/ caml_bytes_set64(b, i, x);
     /*<<bytes.ml:543:7>>*/ return;
    /*<<bytes.ml:543:25>>*/ }
   function unsafe_of_string(_CU_){
     /*<<?>>*/ return caml_bytes_of_string(_CU_);
   }
   function unsafe_to_string(_CT_){
     /*<<?>>*/ return caml_string_of_bytes(_CT_);
   }
   function make$0(n, c){
     /*<<string.ml:36:2>>*/ return unsafe_to_string(make(n, c));
    /*<<string.ml:36:19>>*/ }
   function sub$0(s, ofs, len){
     /*<<string.ml:43:2>>*/ return unsafe_to_string
            (sub(unsafe_of_string(s), ofs, len));
    /*<<string.ml:43:30>>*/ }
   function iter$1(f, s){
     /*<<string.ml:74:2>>*/ var
     _CR_ = caml_ml_string_length(s) - 1 | 0,
      /*<<string.ml:74:2>>*/ _CQ_ = 0;
    if(_CR_ >= 0){
     var i = _CQ_;
     for(;;){
       /*<<string.ml:74:31>>*/  /*<<string.ml:74:31>>*/ caml_call1
       (f, caml_string_unsafe_get(s, i));
       /*<<string.ml:74:31>>*/  /*<<string.ml:74:31>>*/ var _CS_ = i + 1 | 0;
      if(_CR_ === i) break;
      var i = _CS_;
     }
    }
    return;
    /*<<string.ml:74:54>>*/ }
   function iteri$0(f, s){
     /*<<string.ml:78:2>>*/ var
     _CO_ = caml_ml_string_length(s) - 1 | 0,
      /*<<string.ml:78:2>>*/ _CN_ = 0;
    if(_CO_ >= 0){
     var i = _CN_;
     for(;;){
       /*<<string.ml:78:31>>*/  /*<<string.ml:78:31>>*/ caml_call2
       (f, i, caml_string_unsafe_get(s, i));
       /*<<string.ml:78:31>>*/  /*<<string.ml:78:31>>*/ var _CP_ = i + 1 | 0;
      if(_CO_ === i) break;
      var i = _CP_;
     }
    }
    return;
    /*<<string.ml:78:56>>*/ }
   function escaped$0(s){
     /*<<string.ml:108:2>>*/  /*<<string.ml:108:10>>*/ var
     b = unsafe_of_string(s);
     /*<<string.ml:111:6>>*/ return unsafe_to_string(unsafe_escape(b));
    /*<<string.ml:111:25>>*/ }
   function index_rec(s, lim, i, c){
     /*<<string.ml:115:2>>*/ var i$0 = i;
     /*<<string.ml:115:2>>*/ for(;;){
     if(lim <= i$0)
       /*<<string.ml:115:19>>*/ throw  /*<<string.ml:115:19>>*/ caml_maybe_attach_backtrace
             (Not_found, 1);
     if(caml_string_unsafe_get(s, i$0) === c)
       /*<<string.ml:116:29>>*/ return i$0;
     var i$1 = i$0 + 1 | 0, i$0 = i$1;
    }
    /*<<string.ml:116:61>>*/ }
   function contains_from(s, i, c){
     /*<<string.ml:175:2>>*/ var l = caml_ml_string_length(s);
    if(0 <= i && l >= i)
      /*<<string.ml:179:4>>*/ try{
       /*<<string.ml:179:15>>*/ index_rec(s, l, i, c);
       /*<<string.ml:179:36>>*/  /*<<string.ml:179:36>>*/ var _CL_ = 1;
       /*<<string.ml:179:36>>*/ return _CL_;
     }
     catch(_CM_){
      var _CK_ = caml_wrap_exception(_CM_);
      if(_CK_ === Not_found)  /*<<string.ml:179:59>>*/ return 0;
      throw caml_maybe_attach_backtrace(_CK_, 0);
     }
     /*<<string.ml:177:4>>*/ return invalid_arg(_F_);
    /*<<string.ml:179:64>>*/ }
   function contains(s, c){
     /*<<string.ml:182:19>>*/ return contains_from(s, 0, c);
    /*<<string.ml:182:38>>*/ }
   function uppercase_ascii$1(s){
     /*<<string.ml:192:2>>*/ return unsafe_to_string
            (uppercase_ascii$0(unsafe_of_string(s)));
    /*<<string.ml:192:34>>*/ }
   function compare$1(x, y){
     /*<<string.ml:238:28>>*/ return  /*<<string.ml:238:28>>*/ caml_string_compare
            (x, y);
    /*<<string.ml:238:46>>*/ }
   function get_int64_le$0(s, i){
     /*<<string.ml:275:23>>*/ return get_int64_le(unsafe_of_string(s), i);
    /*<<string.ml:275:47>>*/ }
   function from_bytes(buff, ofs){
     /*<<marshal.ml:56:2>>*/ if
     (0 <= ofs && (caml_ml_bytes_length(buff) - 16 | 0) >= ofs){
      /*<<marshal.ml:59:14>>*/  /*<<marshal.ml:59:14>>*/ var
      len =  /*<<marshal.ml:59:14>>*/ caml_marshal_data_size(buff, ofs);
     return (caml_ml_bytes_length(buff) - (16 + len | 0) | 0) < ofs
             ? invalid_arg(_H_)
             :  /*<<marshal.ml:62:9>>*/ caml_input_value_from_bytes(buff, ofs);
    }
     /*<<marshal.ml:57:7>>*/ return invalid_arg(_G_);
    /*<<marshal.ml:63:5>>*/ }
   function from_string(buff, ofs){
     /*<<marshal.ml:68:2>>*/ return from_bytes(unsafe_of_string(buff), ofs);
    /*<<marshal.ml:68:46>>*/ }
   function init$1(l, f){
     /*<<array.ml:48:2>>*/ if(0 === l)  /*<<array.ml:48:16>>*/ return [0];
    if(0 > l)  /*<<array.ml:49:16>>*/ return invalid_arg(_I_);
     /*<<array.ml:53:13>>*/ var
      /*<<array.ml:53:13>>*/ res =
        /*<<array.ml:53:13>>*/ caml_make_vect
        (l,  /*<<array.ml:53:22>>*/ caml_call1(f, 0)),
      /*<<array.ml:54:3>>*/ _CI_ = l - 1 | 0,
      /*<<array.ml:53:13>>*/ _CH_ = 1;
    if(_CI_ >= 1){
     var i = _CH_;
     for(;;){
       /*<<array.ml:55:5>>*/ res[1 + i] =
        /*<<array.ml:55:22>>*/ caml_call1(f, i);
       /*<<array.ml:55:5>>*/  /*<<array.ml:55:5>>*/ var _CJ_ = i + 1 | 0;
      if(_CI_ === i) break;
      var i = _CJ_;
     }
    }
     /*<<array.ml:57:3>>*/ return res;
    /*<<array.ml:57:6>>*/ }
   function sub$1(a, ofs, len){
     /*<<array.ml:76:2>>*/ if
     (0 <= ofs && 0 <= len && (a.length - 1 - len | 0) >= ofs)
      /*<<array.ml:78:7>>*/ return  /*<<array.ml:78:7>>*/ caml_array_sub
             (a, ofs, len);
     /*<<array.ml:77:7>>*/ return invalid_arg(_J_);
    /*<<array.ml:78:27>>*/ }
   function fill(a, ofs, len, v){
     /*<<array.ml:81:2>>*/ if
     (0 <= ofs && 0 <= len && (a.length - 1 - len | 0) >= ofs){
      /*<<array.ml:83:7>>*/  /*<<array.ml:83:7>>*/ caml_array_fill
      (a, ofs, len, v);
      /*<<array.ml:83:7>>*/ return;
    }
     /*<<array.ml:82:7>>*/ return invalid_arg(_K_);
    /*<<array.ml:83:30>>*/ }
   function blit$0(a1, ofs1, a2, ofs2, len){
     /*<<array.ml:86:2>>*/ if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (a1.length - 1 - len | 0) >= ofs1
        && 0 <= ofs2 && (a2.length - 1 - len | 0) >= ofs2){
      /*<<array.ml:89:7>>*/  /*<<array.ml:89:7>>*/ caml_array_blit
      (a1, ofs1, a2, ofs2, len);
      /*<<array.ml:89:7>>*/ return;
    }
     /*<<array.ml:88:7>>*/ return invalid_arg(_L_);
    /*<<array.ml:89:38>>*/ }
   function iter$2(f, a){
     /*<<array.ml:92:2>>*/ var
     _CF_ = a.length - 1 - 1 | 0,
      /*<<array.ml:92:2>>*/ _CE_ = 0;
    if(_CF_ >= 0){
     var i = _CE_;
     for(;;){
       /*<<array.ml:92:31>>*/  /*<<array.ml:92:31>>*/ caml_call1(f, a[1 + i]);
       /*<<array.ml:92:31>>*/  /*<<array.ml:92:31>>*/ var _CG_ = i + 1 | 0;
      if(_CF_ === i) break;
      var i = _CG_;
     }
    }
    return 0;
    /*<<array.ml:92:53>>*/ }
   function map$2(f, a){
     /*<<array.ml:101:2>>*/ var l = a.length - 1;
     /*<<array.ml:102:2>>*/ if(0 === l)  /*<<array.ml:102:16>>*/ return [0];
     /*<<array.ml:103:12>>*/ var
      /*<<array.ml:103:12>>*/ r =
        /*<<array.ml:103:12>>*/ caml_make_vect
        (l,  /*<<array.ml:103:21>>*/ caml_call1(f, a[1])),
      /*<<array.ml:104:4>>*/ _CC_ = l - 1 | 0,
      /*<<array.ml:103:12>>*/ _CB_ = 1;
    if(_CC_ >= 1){
     var i = _CB_;
     for(;;){
       /*<<array.ml:105:6>>*/ r[1 + i] =
        /*<<array.ml:105:21>>*/ caml_call1(f, a[1 + i]);
       /*<<array.ml:105:6>>*/  /*<<array.ml:105:6>>*/ var _CD_ = i + 1 | 0;
      if(_CC_ === i) break;
      var i = _CD_;
     }
    }
     /*<<array.ml:107:4>>*/ return r;
    /*<<array.ml:108:5>>*/ }
   function iteri$1(f, a){
     /*<<array.ml:136:2>>*/ var
     _Cz_ = a.length - 1 - 1 | 0,
      /*<<array.ml:136:2>>*/ _Cy_ = 0;
    if(_Cz_ >= 0){
     var i = _Cy_;
     for(;;){
       /*<<array.ml:136:31>>*/  /*<<array.ml:136:31>>*/ caml_call2
       (f, i, a[1 + i]);
       /*<<array.ml:136:31>>*/  /*<<array.ml:136:31>>*/ var _CA_ = i + 1 | 0;
      if(_Cz_ === i) break;
      var i = _CA_;
     }
    }
    return;
    /*<<array.ml:136:56>>*/ }
   function list_length(accu, param){
    var accu$0 = accu, param$0 = param;
    for(;;){
     if(! param$0)  /*<<array.ml:155:10>>*/ return accu$0;
      /*<<array.ml:156:12>>*/ var
      t = param$0[2],
       /*<<array.ml:156:12>>*/ accu$1 = accu$0 + 1 | 0,
      accu$0 = accu$1,
      param$0 = t;
    }
   }
   function of_list(l){
     /*<<array.ml:158:14>>*/ if(! l)  /*<<array.ml:159:10>>*/ return [0];
     /*<<array.ml:161:14>>*/ var
     tl = l[2],
     hd = l[1],
      /*<<array.ml:161:14>>*/ a =
        /*<<array.ml:161:14>>*/ caml_make_vect(list_length(0, l), hd);
     /*<<array.ml:162:6>>*/ function fill(i, param){
     var i$0 = i, param$0 = param;
     for(;;){
      if(! param$0)  /*<<array.ml:162:6>>*/ return a;
      var tl = param$0[2], hd = param$0[1];
       /*<<array.ml:164:20>>*/ a[1 + i$0] = hd;
       /*<<array.ml:162:6>>*/ var
        /*<<array.ml:162:6>>*/ i$1 = i$0 + 1 | 0,
       i$0 = i$1,
       param$0 = tl;
     }
    }
     /*<<array.ml:165:6>>*/ return fill(1, tl);
    /*<<array.ml:165:15>>*/ }
   function fold_right$0(f, a, x){
     /*<<array.ml:189:2>>*/ var
      /*<<array.ml:189:10>>*/ r = [0, x],
      /*<<array.ml:190:2>>*/ _Cw_ = a.length - 1 - 1 | 0;
    if(_Cw_ >= 0){
     var i = _Cw_;
     for(;;){
      r[1] =  /*<<array.ml:191:9>>*/ caml_call2(f, a[1 + i], r[1]);
       /*<<array.ml:190:2>>*/  /*<<array.ml:190:2>>*/ var _Cx_ = i - 1 | 0;
      if(0 === i) break;
      var i = _Cx_;
     }
    }
    return r[1];
    /*<<array.ml:193:4>>*/ }
   var zero = 0, one = 1;
   function succ(n){
     /*<<int32.ml:48:13>>*/ return n + 1 | 0;
    /*<<int32.ml:48:21>>*/ }
   function pred(n){
     /*<<int32.ml:49:13>>*/ return n - 1 | 0;
    /*<<int32.ml:49:21>>*/ }
   function abs$0(n){
     /*<<int32.ml:50:12>>*/ return  /*<<int32.ml:50:15>>*/ caml_greaterequal
             (n, 0)
            ? n
            : - n | 0;
    /*<<int32.ml:50:40>>*/ }
   function to_string$1(n){
     /*<<int32.ml:72:18>>*/ return  /*<<int32.ml:72:18>>*/ caml_format_int
            (cst_d, n);
    /*<<int32.ml:72:31>>*/ }
   function compare$2(x, y){
     /*<<int32.ml:83:28>>*/ return  /*<<int32.ml:83:28>>*/ caml_int_compare
            (x, y);
    /*<<int32.ml:83:46>>*/ }
   function succ$0(n){
     /*<<int64.ml:46:13>>*/ return  /*<<int64.ml:46:13>>*/ caml_int64_add
            (n, _M_);
    /*<<int64.ml:46:21>>*/ }
   function pred$0(n){
     /*<<int64.ml:47:13>>*/ return  /*<<int64.ml:47:13>>*/ caml_int64_sub
            (n, _N_);
    /*<<int64.ml:47:21>>*/ }
   function abs$1(n){
     /*<<int64.ml:48:12>>*/ return  /*<<int64.ml:48:15>>*/ caml_greaterequal
             (n, _O_)
            ? n
            :  /*<<int64.ml:48:35>>*/ caml_int64_neg(n);
    /*<<int64.ml:48:40>>*/ }
   function to_string$2(n){
     /*<<int64.ml:62:18>>*/ return  /*<<int64.ml:62:18>>*/ caml_int64_format
            (cst_d, n);
    /*<<int64.ml:62:31>>*/ }
   function compare$3(x, y){
     /*<<int64.ml:82:28>>*/ return  /*<<int64.ml:82:28>>*/ caml_int64_compare
            (x, y);
    /*<<int64.ml:82:46>>*/ }
   var zero$1 = 0, one$1 = 1;
   function succ$1(n){
     /*<<nativeint.ml:44:13>>*/ return n + 1 | 0;
    /*<<nativeint.ml:44:21>>*/ }
   function pred$1(n){
     /*<<nativeint.ml:45:13>>*/ return n - 1 | 0;
    /*<<nativeint.ml:45:21>>*/ }
   function abs$2(n){
     /*<<nativeint.ml:46:12>>*/ return  /*<<nativeint.ml:46:15>>*/ caml_greaterequal
             (n, 0)
            ? n
            : - n | 0;
    /*<<nativeint.ml:46:40>>*/ }
   function to_string$3(n){
     /*<<nativeint.ml:61:18>>*/ return  /*<<nativeint.ml:61:18>>*/ caml_format_int
            (cst_d, n);
    /*<<nativeint.ml:61:31>>*/ }
   function compare$4(x, y){
     /*<<nativeint.ml:72:28>>*/ return  /*<<nativeint.ml:72:28>>*/ caml_int_compare
            (x, y);
    /*<<nativeint.ml:72:46>>*/ }
   function Make(Ord){
    function height(param){
      /*<<set.ml:81:17>>*/ if(! param)  /*<<set.ml:82:17>>*/ return 0;
     var h = param[4];
      /*<<set.ml:83:20>>*/ return h;
     /*<<set.ml:83:21>>*/ }
    function create(l, v, r){
      /*<<set.ml:91:6>>*/ if(l) var h = l[4], hl = h; else var hl = 0;
      /*<<set.ml:92:6>>*/ if(r) var h$0 = r[4], hr = h$0; else var hr = 0;
     var _Cv_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
      /*<<set.ml:93:10>>*/ return [0, l, v, r, _Cv_];
     /*<<set.ml:93:60>>*/ }
    function bal(l, v, r){
      /*<<set.ml:101:6>>*/ if(l) var h = l[4], hl = h; else var hl = 0;
      /*<<set.ml:102:6>>*/ if(r) var h$0 = r[4], hr = h$0; else var hr = 0;
     if((hr + 2 | 0) < hl){
      if(! l)  /*<<set.ml:105:19>>*/ return invalid_arg(_Q_);
       /*<<set.ml:107:28>>*/ var
       lr = l[3],
       lv = l[2],
       ll = l[1],
        /*<<set.ml:107:28>>*/ _Cq_ = height(lr);
      if(_Cq_ <= height(ll))
        /*<<set.ml:108:27>>*/ return create(ll, lv, create(lr, v, r));
      if(! lr)  /*<<set.ml:111:25>>*/ return invalid_arg(_P_);
       /*<<set.ml:113:48>>*/ var
       lrr = lr[3],
       lrv = lr[2],
       lrl = lr[1],
        /*<<set.ml:113:48>>*/ _Cr_ = create(lrr, v, r);
       /*<<set.ml:113:48>>*/ return create(create(ll, lv, lrl), lrv, _Cr_);
     }
     if((hl + 2 | 0) >= hr){
      var _Cu_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
       /*<<set.ml:128:12>>*/ return [0, l, v, r, _Cu_];
     }
     if(! r)  /*<<set.ml:117:19>>*/ return invalid_arg(_S_);
      /*<<set.ml:119:28>>*/ var
      rr = r[3],
      rv = r[2],
      rl = r[1],
       /*<<set.ml:119:28>>*/ _Cs_ = height(rl);
     if(_Cs_ <= height(rr))
       /*<<set.ml:120:14>>*/ return create(create(l, v, rl), rv, rr);
     if(! rl)  /*<<set.ml:123:25>>*/ return invalid_arg(_R_);
      /*<<set.ml:125:46>>*/ var
      rlr = rl[3],
      rlv = rl[2],
      rll = rl[1],
       /*<<set.ml:125:46>>*/ _Ct_ = create(rlr, rv, rr);
      /*<<set.ml:125:46>>*/ return create(create(l, v, rll), rlv, _Ct_);
     /*<<set.ml:128:62>>*/ }
    function add(x, t){
      /*<<?>>*/ if(! t)  /*<<set.ml:133:21>>*/ return [0, 0, x, 0, 1];
      /*<<set.ml:135:18>>*/ var
      r = t[3],
      v = t[2],
      l = t[1],
       /*<<set.ml:135:18>>*/ c =
         /*<<set.ml:135:18>>*/ caml_call2(Ord[1], x, v);
      /*<<set.ml:136:10>>*/ if(0 === c)  /*<<set.ml:136:24>>*/ return t;
     if(0 <= c){
       /*<<set.ml:141:21>>*/  /*<<set.ml:141:21>>*/ var rr = add(x, r);
      return r === rr ? t : bal(l, v, rr);
     }
      /*<<set.ml:138:21>>*/  /*<<set.ml:138:21>>*/ var ll = add(x, l);
     return l === ll ? t : bal(ll, v, r);
    }
    function mem(x, param){
     var param$0 = param;
     for(;;){
      if(! param$0)  /*<<set.ml:248:17>>*/ return 0;
       /*<<set.ml:250:18>>*/ var
       r = param$0[3],
       v = param$0[2],
       l = param$0[1],
        /*<<set.ml:250:18>>*/ c =
          /*<<set.ml:250:18>>*/ caml_call2(Ord[1], x, v),
       _Cp_ = 0 === c ? 1 : 0;
      if(_Cp_) return _Cp_;
      var r$0 = 0 <= c ? r : l, param$0 = r$0;
     }
    }
     /*<<set.ml:74:2>>*/ return [0,
            ,
            ,
            ,
            add,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            0,
            ,
            mem];
   }
   function _U_(_Cn_){
    var _Co_ = Make(_Cn_);
    return [0,
            _Co_[17],
            _Co_[4],
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            _Co_[19]];
   }
   function Make$0(Ord){
    function height(param){
      /*<<map.ml:81:17>>*/ if(! param)  /*<<map.ml:82:17>>*/ return 0;
     var h = param[5];
      /*<<map.ml:83:20>>*/ return h;
     /*<<map.ml:83:21>>*/ }
    function create(l, x, d, r){
      /*<<map.ml:86:6>>*/ var
       /*<<map.ml:86:15>>*/ hl = height(l),
       /*<<map.ml:86:33>>*/ hr = height(r),
      _Cm_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
      /*<<map.ml:87:10>>*/ return [0, l, x, d, r, _Cm_];
     /*<<map.ml:87:65>>*/ }
    function bal(l, x, d, r){
      /*<<map.ml:92:6>>*/ if(l) var h = l[5], hl = h; else var hl = 0;
      /*<<map.ml:93:6>>*/ if(r) var h$0 = r[5], hr = h$0; else var hr = 0;
     if((hr + 2 | 0) < hl){
      if(! l)  /*<<map.ml:96:19>>*/ return invalid_arg(_W_);
       /*<<map.ml:98:28>>*/ var
       lr = l[4],
       ld = l[3],
       lv = l[2],
       ll = l[1],
        /*<<map.ml:98:28>>*/ _Ch_ = height(lr);
      if(_Ch_ <= height(ll))
        /*<<map.ml:99:30>>*/ return create(ll, lv, ld, create(lr, x, d, r));
      if(! lr)  /*<<map.ml:102:25>>*/ return invalid_arg(_V_);
       /*<<map.ml:104:55>>*/ var
       lrr = lr[4],
       lrd = lr[3],
       lrv = lr[2],
       lrl = lr[1],
        /*<<map.ml:104:55>>*/ _Ci_ = create(lrr, x, d, r);
       /*<<map.ml:104:55>>*/ return create
              (create(ll, lv, ld, lrl), lrv, lrd, _Ci_);
     }
     if((hl + 2 | 0) >= hr){
      var _Cl_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
       /*<<map.ml:119:12>>*/ return [0, l, x, d, r, _Cl_];
     }
     if(! r)  /*<<map.ml:108:19>>*/ return invalid_arg(_Y_);
      /*<<map.ml:110:28>>*/ var
      rr = r[4],
      rd = r[3],
      rv = r[2],
      rl = r[1],
       /*<<map.ml:110:28>>*/ _Cj_ = height(rl);
     if(_Cj_ <= height(rr))
       /*<<map.ml:111:14>>*/ return create(create(l, x, d, rl), rv, rd, rr);
     if(! rl)  /*<<map.ml:114:25>>*/ return invalid_arg(_X_);
      /*<<map.ml:116:52>>*/ var
      rlr = rl[4],
      rld = rl[3],
      rlv = rl[2],
      rll = rl[1],
       /*<<map.ml:116:52>>*/ _Ck_ = create(rlr, rv, rd, rr);
      /*<<map.ml:116:52>>*/ return create
             (create(l, x, d, rll), rlv, rld, _Ck_);
     /*<<map.ml:119:67>>*/ }
    function is_empty(param){
      /*<<map.ml:123:19>>*/ return param ? 0 : 1;
     /*<<map.ml:123:54>>*/ }
    function add(x, data, m){
      /*<<?>>*/ if(! m)  /*<<map.ml:127:14>>*/ return [0, 0, x, data, 0, 1];
      /*<<map.ml:129:18>>*/ var
      h = m[5],
      r = m[4],
      d = m[3],
      v = m[2],
      l = m[1],
       /*<<map.ml:129:18>>*/ c =
         /*<<map.ml:129:18>>*/ caml_call2(Ord[1], x, v);
      /*<<map.ml:130:10>>*/ if(0 === c)
      return d === data ? m : [0, l, x, data, r, h];
     if(0 <= c){
       /*<<map.ml:136:21>>*/  /*<<map.ml:136:21>>*/ var rr = add(x, data, r);
      return r === rr ? m : bal(l, v, d, rr);
     }
      /*<<map.ml:133:21>>*/  /*<<map.ml:133:21>>*/ var ll = add(x, data, l);
     return l === ll ? m : bal(ll, v, d, r);
    }
    function find(x, param){
     var param$0 = param;
     for(;;){
      if(! param$0)
        /*<<map.ml:141:10>>*/ throw  /*<<map.ml:141:10>>*/ caml_maybe_attach_backtrace
              (Not_found, 1);
       /*<<map.ml:143:18>>*/ var
       r = param$0[4],
       d = param$0[3],
       v = param$0[2],
       l = param$0[1],
        /*<<map.ml:143:18>>*/ c =
          /*<<map.ml:143:18>>*/ caml_call2(Ord[1], x, v);
       /*<<map.ml:144:10>>*/ if(0 === c)  /*<<map.ml:144:24>>*/ return d;
      var r$0 = 0 <= c ? r : l, param$0 = r$0;
     }
    }
    function find_opt(x, param){
     var param$0 = param;
     for(;;){
      if(! param$0)  /*<<map.ml:221:10>>*/ return 0;
       /*<<map.ml:223:18>>*/ var
       r = param$0[4],
       d = param$0[3],
       v = param$0[2],
       l = param$0[1],
        /*<<map.ml:223:18>>*/ c =
          /*<<map.ml:223:18>>*/ caml_call2(Ord[1], x, v);
       /*<<map.ml:224:10>>*/ if(0 === c)  /*<<map.ml:224:24>>*/ return [0, d];
      var r$0 = 0 <= c ? r : l, param$0 = r$0;
     }
    }
    function mem(x, param){
     var param$0 = param;
     for(;;){
      if(! param$0)  /*<<map.ml:229:10>>*/ return 0;
       /*<<map.ml:231:18>>*/ var
       r = param$0[4],
       v = param$0[2],
       l = param$0[1],
        /*<<map.ml:231:18>>*/ c =
          /*<<map.ml:231:18>>*/ caml_call2(Ord[1], x, v),
       _Cg_ = 0 === c ? 1 : 0;
      if(_Cg_) return _Cg_;
      var r$0 = 0 <= c ? r : l, param$0 = r$0;
     }
    }
    function min_binding(param){
      /*<<map.ml:234:26>>*/ var param$0 = param;
      /*<<map.ml:234:26>>*/ for(;;){
      if(! param$0)
        /*<<map.ml:235:17>>*/ throw  /*<<map.ml:235:17>>*/ caml_maybe_attach_backtrace
              (Not_found, 1);
      var l = param$0[1];
      if(! l){
       var d = param$0[3], v = param$0[2];
        /*<<map.ml:236:32>>*/ return [0, v, d];
      }
      var param$0 = l;
     }
     /*<<map.ml:237:33>>*/ }
    function remove_min_binding(param){
      /*<<map.ml:254:33>>*/ if(! param)
       /*<<map.ml:255:17>>*/ return invalid_arg(_Z_);
     var l = param[1];
     if(l){
      var r = param[4], d = param[3], v = param[2];
       /*<<map.ml:257:29>>*/ return bal(remove_min_binding(l), v, d, r);
     }
     var r$0 = param[4];
      /*<<map.ml:256:29>>*/ return r$0;
     /*<<map.ml:257:61>>*/ }
    function _Cd_(t1, t2){
      /*<<map.ml:260:6>>*/ if(! t1)  /*<<map.ml:261:22>>*/ return t2;
     if(! t2)  /*<<map.ml:262:22>>*/ return t1;
      /*<<map.ml:264:23>>*/ var
       /*<<map.ml:264:23>>*/ match = min_binding(t2),
      d = match[2],
      x = match[1];
      /*<<map.ml:265:21>>*/ return bal(t1, x, d, remove_min_binding(t2));
     /*<<map.ml:265:44>>*/ }
    function remove(x, m){
      /*<<?>>*/ if(! m)  /*<<map.ml:269:10>>*/ return 0;
      /*<<map.ml:271:18>>*/ var
      r = m[4],
      d = m[3],
      v = m[2],
      l = m[1],
       /*<<map.ml:271:18>>*/ c =
         /*<<map.ml:271:18>>*/ caml_call2(Ord[1], x, v);
      /*<<map.ml:272:10>>*/ if(0 === c)
       /*<<map.ml:272:24>>*/ return _Cd_(l, r);
     if(0 <= c){
       /*<<map.ml:276:21>>*/  /*<<map.ml:276:21>>*/ var rr = remove(x, r);
      return r === rr ? m : bal(l, v, d, rr);
     }
      /*<<map.ml:274:21>>*/  /*<<map.ml:274:21>>*/ var ll = remove(x, l);
     return l === ll ? m : bal(ll, v, d, r);
    }
    function iter(f, param){
     var param$0 = param;
     for(;;){
      if(! param$0)  /*<<map.ml:303:17>>*/ return;
      var r = param$0[4], d = param$0[3], v = param$0[2], l = param$0[1];
       /*<<map.ml:305:10>>*/ iter(f, l);
       /*<<map.ml:305:20>>*/  /*<<map.ml:305:20>>*/ caml_call2(f, v, d);
      var param$0 = r;
     }
    }
    function fold(f, m, accu){
      /*<<map.ml:326:6>>*/ var m$0 = m, accu$0 = accu;
      /*<<map.ml:326:6>>*/ for(;;){
      if(! m$0)  /*<<map.ml:327:17>>*/ return accu$0;
       /*<<map.ml:329:19>>*/ var
       r = m$0[4],
       d = m$0[3],
       v = m$0[2],
       l = m$0[1],
        /*<<map.ml:329:19>>*/ accu$1 =
          /*<<map.ml:329:19>>*/ caml_call3(f, v, d, fold(f, l, accu$0)),
       m$0 = r,
       accu$0 = accu$1;
     }
     /*<<map.ml:329:42>>*/ }
    function cons_enum(m, e){
      /*<<map.ml:464:6>>*/ var m$0 = m, e$0 = e;
      /*<<map.ml:464:6>>*/ for(;;){
      if(! m$0)  /*<<map.ml:465:17>>*/ return e$0;
       /*<<map.ml:466:41>>*/ var
       r = m$0[4],
       d = m$0[3],
       v = m$0[2],
       l = m$0[1],
        /*<<map.ml:466:41>>*/ e$1 = [0, v, d, r, e$0],
       m$0 = l,
       e$0 = e$1;
     }
     /*<<map.ml:466:59>>*/ }
    function compare(cmp, m1, m2){
     function compare_aux(e1, e2){
       /*<<map.ml:470:10>>*/ var e1$0 = e1, e2$0 = e2;
       /*<<map.ml:470:10>>*/ for(;;){
       if(! e1$0){
        if(e2$0)  /*<<map.ml:472:23>>*/ return;
         /*<<map.ml:471:24>>*/ return;
       }
       if(! e2$0)  /*<<map.ml:473:22>>*/ return;
        /*<<map.ml:475:20>>*/ var
        e2$1 = e2$0[4],
        r2 = e2$0[3],
        d2 = e2$0[2],
        v2 = e2$0[1],
        e1$1 = e1$0[4],
        r1 = e1$0[3],
        d1 = e1$0[2],
        v1 = e1$0[1],
         /*<<map.ml:475:20>>*/ c =
           /*<<map.ml:475:20>>*/ caml_call2(Ord[1], v1, v2);
        /*<<map.ml:476:12>>*/ if(0 !== c)  /*<<map.ml:476:27>>*/ return c;
        /*<<map.ml:477:20>>*/  /*<<map.ml:477:20>>*/ var
        c$0 =  /*<<map.ml:477:20>>*/ caml_call2(cmp, d1, d2);
        /*<<map.ml:478:12>>*/ if(0 !== c$0)  /*<<map.ml:478:27>>*/ return c$0;
        /*<<map.ml:479:42>>*/ var
         /*<<map.ml:479:42>>*/ e2$2 = cons_enum(r2, e2$1),
         /*<<map.ml:479:24>>*/ e1$2 = cons_enum(r1, e1$1),
        e1$0 = e1$2,
        e2$0 = e2$2;
      }
      /*<<map.ml:479:59>>*/ }
      /*<<map.ml:480:40>>*/  /*<<map.ml:480:40>>*/ var
      _Cf_ = cons_enum(m2, 0);
      /*<<map.ml:480:40>>*/ return compare_aux(cons_enum(m1, 0), _Cf_);
     /*<<map.ml:480:58>>*/ }
    function equal(cmp, m1, m2){
     function equal_aux(e1, e2){
       /*<<map.ml:484:10>>*/ var e1$0 = e1, e2$0 = e2;
       /*<<map.ml:484:10>>*/ for(;;){
       if(! e1$0){
        if(e2$0)  /*<<map.ml:486:23>>*/ return;
         /*<<map.ml:485:24>>*/ return;
       }
       if(! e2$0)  /*<<map.ml:487:22>>*/ return;
       var
        e2$1 = e2$0[4],
        r2 = e2$0[3],
        d2 = e2$0[2],
        v2 = e2$0[1],
        e1$1 = e1$0[4],
        r1 = e1$0[3],
        d1 = e1$0[2],
        v1 = e1$0[1];
        /*<<map.ml:489:37>>*/ if
        (0 ===  /*<<map.ml:489:12>>*/ caml_call2(Ord[1], v1, v2)
         &&  /*<<map.ml:489:37>>*/ caml_call2(cmp, d1, d2)){
         /*<<map.ml:490:40>>*/ var
          /*<<map.ml:490:40>>*/ e2$2 = cons_enum(r2, e2$1),
          /*<<map.ml:490:22>>*/ e1$2 = cons_enum(r1, e1$1),
         e1$0 = e1$2,
         e2$0 = e2$2;
        continue;
       }
        /*<<map.ml:489:37>>*/ return;
      }
      /*<<map.ml:490:57>>*/ }
      /*<<map.ml:491:38>>*/  /*<<map.ml:491:38>>*/ var
      _Ce_ = cons_enum(m2, 0);
      /*<<map.ml:491:38>>*/ return equal_aux(cons_enum(m1, 0), _Ce_);
     /*<<map.ml:491:56>>*/ }
    function bindings_aux(accu, param){
     var accu$0 = accu, param$0 = param;
     for(;;){
      if(! param$0)  /*<<map.ml:498:17>>*/ return accu$0;
       /*<<map.ml:499:42>>*/ var
       r = param$0[4],
       d = param$0[3],
       v = param$0[2],
       l = param$0[1],
        /*<<map.ml:499:42>>*/ accu$1 = [0, [0, v, d], bindings_aux(accu$0, r)],
       accu$0 = accu$1,
       param$0 = l;
     }
    }
    function bindings(s){
      /*<<map.ml:502:6>>*/ return bindings_aux(0, s);
     /*<<map.ml:502:23>>*/ }
     /*<<map.ml:73:32>>*/ return [0,
            ,
            ,
            ,
            ,
            0,
            is_empty,
            add,
            find,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            find_opt,
            mem,
            ,
            ,
            ,
            ,
            ,
            remove,
            ,
            ,
            iter,
            ,
            ,
            fold,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            compare,
            equal,
            ,
            ,
            bindings];
   }
   function ___(_Cb_){
    var _Cc_ = Make$0(_Cb_);
    return [0,
            _Cc_[5],
            _Cc_[7],
            ,
            ,
            ,
            _Cc_[24],
            ,
            ,
            ,
            _Cc_[49],
            ,
            ,
            ,
            ,
            ,
            ,
            _Cc_[8],
            _Cc_[17],
            ,
            ,
            ,
            ,
            _Cc_[27],
            _Cc_[30],
            ,
            ,
            ,
            ,
            ,
            ,
            _Cc_[6],
            _Cc_[18],
            _Cc_[46],
            _Cc_[45]];
   }
    /*<<stack.ml:18:0>>*/  /*<<stack.ml:18:0>>*/ var
    Empty = [248, _$_, caml_fresh_oo_id(0)];
   function create(param){
     /*<<stack.ml:20:16>>*/ return [0, 0, 0];
    /*<<stack.ml:20:36>>*/ }
   function clear(s){
     /*<<stack.ml:22:14>>*/ s[1] = 0;
    s[2] = 0;
    return;
    /*<<stack.ml:22:35>>*/ }
   function push(x, s){
     /*<<stack.ml:26:15>>*/ s[1] = [0, x, s[1]];
    s[2] = s[2] + 1 | 0;
    return 0;
    /*<<stack.ml:26:50>>*/ }
   function pop(s){
     /*<<stack.ml:29:2>>*/ var match = s[1];
    if(! match)
      /*<<stack.ml:31:14>>*/ throw  /*<<stack.ml:31:14>>*/ caml_maybe_attach_backtrace
            (Empty, 1);
    var tl = match[2], hd = match[1];
    s[1] = tl;
    s[2] = s[2] - 1 | 0;
     /*<<stack.ml:30:45>>*/ return hd;
    /*<<stack.ml:31:25>>*/ }
   function pop_opt(s){
     /*<<stack.ml:34:2>>*/ var match = s[1];
    if(! match)  /*<<stack.ml:36:14>>*/ return 0;
    var tl = match[2], hd = match[1];
    s[1] = tl;
    s[2] = s[2] - 1 | 0;
     /*<<stack.ml:35:45>>*/ return [0, hd];
    /*<<stack.ml:36:18>>*/ }
   function top(s){
     /*<<stack.ml:44:2>>*/ var match = s[1];
    if(! match)
      /*<<stack.ml:46:13>>*/ throw  /*<<stack.ml:46:13>>*/ caml_maybe_attach_backtrace
            (Empty, 1);
    var hd = match[1];
     /*<<stack.ml:45:13>>*/ return hd;
    /*<<stack.ml:46:24>>*/ }
   function top_opt(s){
     /*<<stack.ml:49:2>>*/ var match = s[1];
    if(! match)  /*<<stack.ml:51:13>>*/ return 0;
    var hd = match[1];
     /*<<stack.ml:50:13>>*/ return [0, hd];
    /*<<stack.ml:51:17>>*/ }
   function length$0(s){
     /*<<stack.ml:55:15>>*/ return s[2];
    /*<<stack.ml:55:20>>*/ }
   function iter$3(f, s){
     /*<<stack.ml:57:15>>*/ return iter$0(f, s[1]);
    /*<<stack.ml:57:30>>*/ }
    /*<<queue.ml:17:0>>*/  /*<<queue.ml:17:0>>*/ var
    Empty$0 = [248, _aa_, caml_fresh_oo_id(0)];
   function create$0(param){
     /*<<queue.ml:29:16>>*/ return [0, 0, 0, 0];
    /*<<queue.ml:33:1>>*/ }
   function clear$0(q){
     /*<<queue.ml:36:2>>*/ q[1] = 0;
    q[2] = 0;
    q[3] = 0;
    return;
    /*<<queue.ml:38:15>>*/ }
   function add(x, q){
     /*<<queue.ml:41:2>>*/ var
      /*<<queue.ml:41:18>>*/ cell = [0, x, 0],
      /*<<queue.ml:45:2>>*/ match = q[3];
    return match
            ? (q[1] = q[1] + 1 | 0, match[2] = cell, q[3] = cell, 0)
            : (q[1] = 1, q[2] = cell, q[3] = cell, 0);
    /*<<queue.ml:53:18>>*/ }
   function peek_opt(q){
     /*<<queue.ml:64:2>>*/ var match = q[2];
    if(! match)  /*<<queue.ml:65:11>>*/ return 0;
    var content = match[1];
     /*<<queue.ml:66:24>>*/ return [0, content];
    /*<<queue.ml:66:36>>*/ }
   function take(q){
     /*<<queue.ml:72:2>>*/ var _Ca_ = q[2];
    if(! _Ca_)
      /*<<queue.ml:73:11>>*/ throw  /*<<queue.ml:73:11>>*/ caml_maybe_attach_backtrace
            (Empty$0, 1);
    if(_Ca_[2]){
     var next = _Ca_[2];
     q[1] = q[1] - 1 | 0;
     q[2] = next;
      /*<<queue.ml:80:4>>*/ return;
    }
     /*<<queue.ml:75:4>>*/ clear$0(q);
     /*<<queue.ml:75:4>>*/ return;
    /*<<queue.ml:80:11>>*/ }
   function take_opt(q){
     /*<<queue.ml:83:2>>*/ var _B$_ = q[2];
    if(! _B$_)  /*<<queue.ml:84:11>>*/ return 0;
    var content = _B$_[1];
    if(_B$_[2]){
     var next = _B$_[2];
     q[1] = q[1] - 1 | 0;
     q[2] = next;
      /*<<queue.ml:91:4>>*/ return [0, content];
    }
     /*<<queue.ml:86:4>>*/ clear$0(q);
     /*<<queue.ml:87:4>>*/ return [0, content];
    /*<<queue.ml:91:16>>*/ }
   function create$1(n){
     /*<<buffer.ml:41:1>>*/ var
     n$0 = 1 <= n ? n : 1,
     n$1 = max_string_length < n$0 ? max_string_length : n$0,
      /*<<buffer.ml:43:9>>*/ s =
        /*<<buffer.ml:43:9>>*/ caml_create_bytes(n$1);
     /*<<buffer.ml:44:1>>*/ return [0, [0, s, n$1], 0, s];
    /*<<buffer.ml:44:71>>*/ }
   function contents(b){
     /*<<buffer.ml:46:17>>*/ return sub_string(b[1][1], 0, b[2]);
    /*<<buffer.ml:46:61>>*/ }
   function sub$2(b, ofs, len){
     /*<<buffer.ml:50:2>>*/ if
     (0 <= ofs && 0 <= len && (b[2] - len | 0) >= ofs)
      /*<<buffer.ml:52:7>>*/ return sub_string(b[1][1], ofs, len);
     /*<<buffer.ml:51:7>>*/ return invalid_arg(_ab_);
    /*<<buffer.ml:52:46>>*/ }
   function length$1(b){
     /*<<buffer.ml:71:15>>*/ return b[2];
    /*<<buffer.ml:71:25>>*/ }
   function clear$1(b){
     /*<<buffer.ml:73:14>>*/ b[2] = 0;
    return 0;
    /*<<buffer.ml:73:29>>*/ }
   function reset(b){
     /*<<buffer.ml:76:2>>*/ b[2] = 0;
     /*<<buffer.ml:78:4>>*/  /*<<buffer.ml:78:4>>*/ var
     inner = [0, b[3], caml_ml_bytes_length(b[3])];
    b[1] = inner;
    return;
    /*<<buffer.ml:80:18>>*/ }
   function resize(b, more){
     /*<<buffer.ml:87:2>>*/ var
     old_pos = b[2],
     old_len = b[1][2],
      /*<<buffer.ml:89:16>>*/ new_len = [0, old_len];
    for(;;){
     if(new_len[1] >= (old_pos + more | 0)) break;
     new_len[1] = 2 * new_len[1] | 0;
    }
    if(max_string_length < new_len[1])
     if((old_pos + more | 0) <= max_string_length)
      new_len[1] = max_string_length;
     else
       /*<<buffer.ml:94:9>>*/ failwith(_ac_);
     /*<<buffer.ml:96:19>>*/  /*<<buffer.ml:96:19>>*/ var
     new_buffer =  /*<<buffer.ml:96:19>>*/ caml_create_bytes(new_len[1]);
     /*<<buffer.ml:99:2>>*/ blit(b[1][1], 0, new_buffer, 0, b[2]);
    b[1] = [0, new_buffer, new_len[1]];
    return;
    /*<<buffer.ml:100:55>>*/ }
   function add_char(b, c){
     /*<<buffer.ml:113:2>>*/ var
     pos = b[2],
      /*<<buffer.ml:114:2>>*/ match = b[1],
     length = match[2],
     buffer = match[1];
    if(length <= pos){
      /*<<buffer.ml:116:4>>*/ resize(b, 1);
      /*<<buffer.ml:117:4>>*/  /*<<buffer.ml:117:4>>*/ caml_bytes_set
      (b[1][1], b[2], c);
    }
    else
     caml_bytes_unsafe_set(buffer, pos, c);
    b[2] = pos + 1 | 0;
    return 0;
    /*<<buffer.ml:120:23>>*/ }
   function add_substring(b, s, offset, len){
     /*<<buffer.ml:150:2>>*/ var _B8_ = offset < 0 ? 1 : 0;
    if(_B8_)
     var _B9_ = _B8_;
    else
     var
      _B__ = len < 0 ? 1 : 0,
      _B9_ = _B__ || ((caml_ml_string_length(s) - len | 0) < offset ? 1 : 0);
    if(_B9_)  /*<<buffer.ml:151:7>>*/ invalid_arg(_ad_);
     /*<<buffer.ml:153:2>>*/ var
     position = b[2],
      /*<<buffer.ml:153:2>>*/ match = b[1],
     length = match[2],
     buffer = match[1],
     new_position = position + len | 0;
    if(length < new_position){
      /*<<buffer.ml:156:4>>*/ resize(b, len);
      /*<<buffer.ml:157:4>>*/ blit_string(s, offset, b[1][1], b[2], len);
    }
    else
      /*<<buffer.ml:159:4>>*/  /*<<buffer.ml:159:4>>*/ caml_blit_string
      (s, offset, buffer, position, len);
    b[2] = new_position;
    return 0;
    /*<<buffer.ml:160:28>>*/ }
   function add_string(b, s){
     /*<<buffer.ml:166:2>>*/ var
     len = caml_ml_string_length(s),
      /*<<buffer.ml:167:2>>*/ position = b[2],
      /*<<buffer.ml:168:2>>*/ match = b[1],
     length = match[2],
     buffer = match[1],
     new_position = position + len | 0;
    if(length < new_position){
      /*<<buffer.ml:171:4>>*/ resize(b, len);
      /*<<buffer.ml:172:4>>*/ blit_string(s, 0, b[1][1], b[2], len);
    }
    else
      /*<<buffer.ml:174:4>>*/  /*<<buffer.ml:174:4>>*/ caml_blit_string
      (s, 0, buffer, position, len);
    b[2] = new_position;
    return 0;
    /*<<buffer.ml:175:28>>*/ }
    /*<<domain.ml:51:30>>*/  /*<<domain.ml:51:30>>*/ var
    unique_value = [0, 0];
   function create_dls(param){
     /*<<domain.ml:59:4>>*/  /*<<domain.ml:59:13>>*/ var
     st =  /*<<domain.ml:59:13>>*/ caml_make_vect(8, unique_value);
     /*<<domain.ml:60:4>>*/  /*<<domain.ml:60:4>>*/ caml_domain_dls_set(st);
     /*<<domain.ml:60:4>>*/ return;
    /*<<domain.ml:60:20>>*/ }
    /*<<domain.ml:62:10>>*/ create_dls(0);
    /*<<domain.ml:66:20>>*/ var
     /*<<domain.ml:66:20>>*/ key_counter = _m_(0),
     /*<<domain.ml:71:20>>*/ parent_keys = _m_(0);
   function add_parent_key(ki){
     /*<<domain.ml:74:4>>*/ for(;;){
      /*<<domain.ml:74:12>>*/ var
       /*<<domain.ml:74:12>>*/ l = _l_(parent_keys),
       /*<<domain.ml:75:11>>*/ _B7_ = 1 - _k_(parent_keys, l, [0, ki, l]);
     if(! _B7_)  /*<<domain.ml:75:11>>*/ return _B7_;
    }
    /*<<domain.ml:76:26>>*/ }
   function new_key(split_from_parent, init_orphan){
     /*<<domain.ml:79:4>>*/ var
      /*<<domain.ml:79:14>>*/ idx = _j_(key_counter, 1),
      /*<<domain.ml:80:12>>*/ k = [0, idx, init_orphan];
     /*<<domain.ml:81:4>>*/ if(split_from_parent){
     var split = split_from_parent[1];
      /*<<domain.ml:83:20>>*/ add_parent_key([0, k, split]);
    }
     /*<<domain.ml:85:4>>*/ return k;
    /*<<domain.ml:85:5>>*/ }
   function maybe_grow(idx){
     /*<<domain.ml:90:4>>*/ var
     st = caml_domain_dls_get(0),
      /*<<domain.ml:91:4>>*/ sz = st.length - 1;
    if(idx < sz)  /*<<domain.ml:92:21>>*/ return st;
    function compute_new_size(s){
      /*<<domain.ml:95:8>>*/ var s$0 = s;
      /*<<domain.ml:95:8>>*/ for(;;){
      if(idx < s$0)  /*<<domain.ml:95:24>>*/ return s$0;
      var s$1 = 2 * s$0 | 0, s$0 = s$1;
     }
     /*<<domain.ml:95:55>>*/ }
     /*<<domain.ml:97:19>>*/ var
      /*<<domain.ml:97:19>>*/ new_sz = compute_new_size(sz),
      /*<<domain.ml:98:19>>*/ new_st =
        /*<<domain.ml:98:19>>*/ caml_make_vect(new_sz, unique_value);
     /*<<domain.ml:99:6>>*/ blit$0(st, 0, new_st, 0, sz);
     /*<<domain.ml:100:6>>*/  /*<<domain.ml:100:6>>*/ caml_domain_dls_set
     (new_st);
     /*<<domain.ml:100:6>>*/ return new_st;
    /*<<domain.ml:102:7>>*/ }
   function set(param, x){
     /*<<domain.ml:105:13>>*/ var
     idx = param[1],
      /*<<domain.ml:105:13>>*/ st = maybe_grow(idx);
     /*<<domain.ml:109:4>>*/ caml_check_bound(st, idx)[1 + idx] = x;
     /*<<domain.ml:109:4>>*/ return;
   }
   function get$0(param){
     /*<<domain.ml:112:13>>*/ var
     init = param[2],
     idx = param[1],
      /*<<domain.ml:112:13>>*/ st = maybe_grow(idx),
      /*<<domain.ml:113:12>>*/ v = caml_check_bound(st, idx)[1 + idx];
    if(v !== unique_value)  /*<<domain.ml:118:9>>*/ return v;
     /*<<domain.ml:115:24>>*/  /*<<domain.ml:115:24>>*/ var
     v$0 =  /*<<domain.ml:115:24>>*/ caml_call1(init, 0);
     /*<<domain.ml:116:6>>*/ caml_check_bound(st, idx)[1 + idx] = v$0;
     /*<<domain.ml:116:6>>*/ return v$0;
   }
    /*<<domain.ml:145:27>>*/  /*<<domain.ml:145:27>>*/ var
    first_domain_spawned = _m_(0);
   function before_first_spawn(f){
     /*<<domain.ml:150:2>>*/ if(_l_(first_domain_spawned))
      /*<<domain.ml:151:4>>*/ throw  /*<<domain.ml:151:4>>*/ caml_maybe_attach_backtrace
            ([0, Invalid_argument, _ae_], 1);
    return;
    /*<<domain.ml:156:5>>*/ }
    /*<<domain.ml:166:18>>*/  /*<<domain.ml:166:18>>*/ var
    at_exit_key =
      new_key
       (0,
        function(param, _B6_){
          /*<<domain.ml:166:52>>*/ return 0;
         /*<<domain.ml:166:54>>*/ });
   function at_exit$0(f){
     /*<<domain.ml:169:2>>*/  /*<<domain.ml:169:32>>*/ var
     old_exit = get$0(at_exit_key);
    function new_exit(param){
      /*<<domain.ml:175:4>>*/  /*<<domain.ml:175:4>>*/ caml_call1(f, 0);
      /*<<domain.ml:175:4>>*/ return  /*<<domain.ml:175:4>>*/ caml_call1
             (old_exit, 0);
     /*<<domain.ml:175:21>>*/ }
     /*<<domain.ml:177:2>>*/ return set(at_exit_key, new_exit);
    /*<<domain.ml:177:30>>*/ }
   function do_at_exit$0(param){
     /*<<domain.ml:180:2>>*/  /*<<domain.ml:180:25>>*/ var
     f = get$0(at_exit_key);
     /*<<domain.ml:181:2>>*/ return  /*<<domain.ml:181:2>>*/ caml_call1(f, 0);
    /*<<domain.ml:181:6>>*/ }
   do_domain_local_at_exit[1] = do_at_exit$0;
   function default_float_precision(fconv){
     /*<<camlinternalFormat.ml:221:2>>*/ return 5 === fconv[2] ? 12 : -6;
    /*<<camlinternalFormat.ml:227:17>>*/ }
   function buffer_create(init_size){
     /*<<camlinternalFormat.ml:256:30>>*/ return [0,
            0,
             /*<<camlinternalFormat.ml:256:49>>*/ caml_create_bytes(init_size)];
    /*<<camlinternalFormat.ml:256:73>>*/ }
   function buffer_check_size(buf, overhead){
     /*<<camlinternalFormat.ml:260:2>>*/ var
     len = caml_ml_bytes_length(buf[2]),
     min_len = buf[1] + overhead | 0;
    if(len < min_len){
      /*<<camlinternalFormat.ml:263:18>>*/ var
       /*<<camlinternalFormat.ml:263:18>>*/ new_len =
        max$0(len * 2 | 0, min_len),
       /*<<camlinternalFormat.ml:264:18>>*/ new_str =
         /*<<camlinternalFormat.ml:264:18>>*/ caml_create_bytes(new_len);
      /*<<camlinternalFormat.ml:265:4>>*/ blit(buf[2], 0, new_str, 0, len);
     buf[2] = new_str;
    }
    return;
    /*<<camlinternalFormat.ml:267:3>>*/ }
   function buffer_add_char(buf, c){
     /*<<camlinternalFormat.ml:271:2>>*/ buffer_check_size(buf, 1);
     /*<<camlinternalFormat.ml:272:2>>*/  /*<<camlinternalFormat.ml:272:2>>*/ caml_bytes_set
     (buf[2], buf[1], c);
    buf[1] = buf[1] + 1 | 0;
    return;
    /*<<camlinternalFormat.ml:273:24>>*/ }
   function buffer_add_string(buf, s){
     /*<<camlinternalFormat.ml:277:2>>*/ var
     str_len = caml_ml_string_length(s);
     /*<<camlinternalFormat.ml:278:2>>*/ buffer_check_size(buf, str_len);
     /*<<camlinternalFormat.ml:279:2>>*/ blit_string
     (s, 0, buf[2], buf[1], str_len);
    buf[1] = buf[1] + str_len | 0;
    return;
    /*<<camlinternalFormat.ml:280:30>>*/ }
   function buffer_contents(buf){
     /*<<camlinternalFormat.ml:284:2>>*/ return sub_string(buf[2], 0, buf[1]);
    /*<<camlinternalFormat.ml:284:38>>*/ }
   function char_of_fconv(opt, fconv){
     /*<<camlinternalFormat.ml:296:36>>*/ if(opt)
     var sth = opt[1], cF = sth;
    else
     var cF = 70;
    switch(fconv[2]){
      case 0:
        /*<<camlinternalFormat.ml:297:15>>*/ return 102;
      case 1:
        /*<<camlinternalFormat.ml:297:32>>*/ return 101;
      case 2:
        /*<<camlinternalFormat.ml:298:15>>*/ return 69;
      case 3:
        /*<<camlinternalFormat.ml:298:32>>*/ return 103;
      case 4:
        /*<<camlinternalFormat.ml:299:15>>*/ return 71;
      case 5:
        /*<<camlinternalFormat.ml:299:32>>*/ return cF;
      case 6:
        /*<<camlinternalFormat.ml:300:15>>*/ return 104;
      case 7:
        /*<<camlinternalFormat.ml:300:32>>*/ return 72;
      default:  /*<<camlinternalFormat.ml:301:16>>*/ return 70;
    }
    /*<<camlinternalFormat.ml:301:19>>*/ }
   function bprint_fconv_flag(buf, fconv){
     /*<<camlinternalFormat.ml:445:2>>*/ switch(fconv[1]){
      case 0: break;
      case 1:
        /*<<camlinternalFormat.ml:446:20>>*/ buffer_add_char(buf, 43); break;
      default:  /*<<camlinternalFormat.ml:447:20>>*/ buffer_add_char(buf, 32);
    }
    if(8 <= fconv[2])
      /*<<camlinternalFormat.ml:450:16>>*/ return buffer_add_char(buf, 35);
     /*<<camlinternalFormat.ml:452:35>>*/ return;
    /*<<camlinternalFormat.ml:452:37>>*/ }
   function string_of_formatting_lit(formatting_lit){
     /*<<camlinternalFormat.ml:465:46>>*/ if
     (typeof formatting_lit === "number")
     switch(formatting_lit){
       case 0:
         /*<<camlinternalFormat.ml:466:28>>*/ return _af_;
       case 1:
         /*<<camlinternalFormat.ml:467:28>>*/ return _ag_;
       case 2:
         /*<<camlinternalFormat.ml:469:28>>*/ return _ah_;
       case 3:
         /*<<camlinternalFormat.ml:470:28>>*/ return _ai_;
       case 4:
         /*<<camlinternalFormat.ml:471:28>>*/ return _aj_;
       case 5:
         /*<<camlinternalFormat.ml:473:28>>*/ return _ak_;
       default:  /*<<camlinternalFormat.ml:474:28>>*/ return _al_;
     }
    switch(formatting_lit[0]){
      case 0:
       var str = formatting_lit[1];
        /*<<camlinternalFormat.ml:468:28>>*/ return str;
      case 1:
       var str$0 = formatting_lit[1];
        /*<<camlinternalFormat.ml:472:28>>*/ return str$0;
      default:
       var c = formatting_lit[1];
        /*<<camlinternalFormat.ml:475:26>>*/ return symbol(_am_, make$0(1, c));
    }
    /*<<camlinternalFormat.ml:475:43>>*/ }
   function bprint_fmtty(buf, fmtty){
     /*<<camlinternalFormat.ml:496:17>>*/ var fmtty$0 = fmtty;
     /*<<camlinternalFormat.ml:496:17>>*/ for(;;){
     if(typeof fmtty$0 === "number")
       /*<<camlinternalFormat.ml:521:20>>*/ return;
     switch(fmtty$0[0]){
       case 0:
        var fmtty$1 = fmtty$0[1];
         /*<<camlinternalFormat.ml:497:25>>*/ buffer_add_string(buf, _an_);
        var fmtty$0 = fmtty$1;
        break;
       case 1:
        var fmtty$2 = fmtty$0[1];
         /*<<camlinternalFormat.ml:498:25>>*/ buffer_add_string(buf, _ao_);
        var fmtty$0 = fmtty$2;
        break;
       case 2:
        var fmtty$3 = fmtty$0[1];
         /*<<camlinternalFormat.ml:499:25>>*/ buffer_add_string(buf, _ap_);
        var fmtty$0 = fmtty$3;
        break;
       case 3:
        var fmtty$4 = fmtty$0[1];
         /*<<camlinternalFormat.ml:500:25>>*/ buffer_add_string(buf, _aq_);
        var fmtty$0 = fmtty$4;
        break;
       case 4:
        var fmtty$5 = fmtty$0[1];
         /*<<camlinternalFormat.ml:501:25>>*/ buffer_add_string(buf, _ar_);
        var fmtty$0 = fmtty$5;
        break;
       case 5:
        var fmtty$6 = fmtty$0[1];
         /*<<camlinternalFormat.ml:502:25>>*/ buffer_add_string(buf, _as_);
        var fmtty$0 = fmtty$6;
        break;
       case 6:
        var fmtty$7 = fmtty$0[1];
         /*<<camlinternalFormat.ml:503:25>>*/ buffer_add_string(buf, _at_);
        var fmtty$0 = fmtty$7;
        break;
       case 7:
        var fmtty$8 = fmtty$0[1];
         /*<<camlinternalFormat.ml:504:25>>*/ buffer_add_string(buf, _au_);
        var fmtty$0 = fmtty$8;
        break;
       case 8:
        var fmtty$9 = fmtty$0[2], sub_fmtty = fmtty$0[1];
         /*<<camlinternalFormat.ml:515:4>>*/ buffer_add_string(buf, _av_);
         /*<<camlinternalFormat.ml:515:32>>*/ bprint_fmtty(buf, sub_fmtty);
         /*<<camlinternalFormat.ml:516:4>>*/ buffer_add_string(buf, _aw_);
        var fmtty$0 = fmtty$9;
        break;
       case 9:
        var fmtty$10 = fmtty$0[3], sub_fmtty$0 = fmtty$0[1];
         /*<<camlinternalFormat.ml:518:4>>*/ buffer_add_string(buf, _ax_);
         /*<<camlinternalFormat.ml:518:32>>*/ bprint_fmtty(buf, sub_fmtty$0);
         /*<<camlinternalFormat.ml:519:4>>*/ buffer_add_string(buf, _ay_);
        var fmtty$0 = fmtty$10;
        break;
       case 10:
        var fmtty$11 = fmtty$0[1];
         /*<<camlinternalFormat.ml:505:25>>*/ buffer_add_string(buf, _az_);
        var fmtty$0 = fmtty$11;
        break;
       case 11:
        var fmtty$12 = fmtty$0[1];
         /*<<camlinternalFormat.ml:506:25>>*/ buffer_add_string(buf, _aA_);
        var fmtty$0 = fmtty$12;
        break;
       case 12:
        var fmtty$13 = fmtty$0[1];
         /*<<camlinternalFormat.ml:507:25>>*/ buffer_add_string(buf, _aB_);
        var fmtty$0 = fmtty$13;
        break;
       case 13:
        var fmtty$14 = fmtty$0[1];
         /*<<camlinternalFormat.ml:508:25>>*/ buffer_add_string(buf, _aC_);
        var fmtty$0 = fmtty$14;
        break;
       default:
        var fmtty$15 = fmtty$0[1];
         /*<<camlinternalFormat.ml:511:4>>*/ buffer_add_string(buf, _aD_);
        var fmtty$0 = fmtty$15;
     }
    }
    /*<<camlinternalFormat.ml:521:22>>*/ }
   function symm(param){
     /*<<?>>*/ if(typeof param === "number")
      /*<<camlinternalFormat.ml:680:20>>*/ return 0;
    switch(param[0]){
      case 0:
       var rest = param[1];
        /*<<camlinternalFormat.ml:663:20>>*/ return [0, symm(rest)];
      case 1:
       var rest$0 = param[1];
        /*<<camlinternalFormat.ml:670:22>>*/ return [1, symm(rest$0)];
      case 2:
       var rest$1 = param[1];
        /*<<camlinternalFormat.ml:664:19>>*/ return [2, symm(rest$1)];
      case 3:
       var rest$2 = param[1];
        /*<<camlinternalFormat.ml:665:21>>*/ return [3, symm(rest$2)];
      case 4:
       var rest$3 = param[1];
        /*<<camlinternalFormat.ml:667:25>>*/ return [4, symm(rest$3)];
      case 5:
       var rest$4 = param[1];
        /*<<camlinternalFormat.ml:666:21>>*/ return [5, symm(rest$4)];
      case 6:
       var rest$5 = param[1];
        /*<<camlinternalFormat.ml:668:21>>*/ return [6, symm(rest$5)];
      case 7:
       var rest$6 = param[1];
        /*<<camlinternalFormat.ml:669:20>>*/ return [7, symm(rest$6)];
      case 8:
       var rest$7 = param[2], ty = param[1];
        /*<<camlinternalFormat.ml:677:4>>*/ return [8, ty, symm(rest$7)];
      case 9:
       var rest$8 = param[3], ty2 = param[2], ty1 = param[1];
        /*<<camlinternalFormat.ml:679:4>>*/ return [9, ty2, ty1, symm(rest$8)];
      case 10:
       var rest$9 = param[1];
        /*<<camlinternalFormat.ml:672:21>>*/ return [10, symm(rest$9)];
      case 11:
       var rest$10 = param[1];
        /*<<camlinternalFormat.ml:671:21>>*/ return [11, symm(rest$10)];
      case 12:
       var rest$11 = param[1];
        /*<<camlinternalFormat.ml:673:19>>*/ return [12, symm(rest$11)];
      case 13:
       var rest$12 = param[1];
        /*<<camlinternalFormat.ml:674:22>>*/ return [13, symm(rest$12)];
      default:
       var rest$13 = param[1];
        /*<<camlinternalFormat.ml:675:30>>*/ return [14, symm(rest$13)];
    }
   }
   function fmtty_rel_det(param){
     /*<<?>>*/ if(typeof param === "number")
      /*<<camlinternalFormat.ml:691:4>>*/ return [0,
             function(param){
               /*<<camlinternalFormat.ml:691:17>>*/ return;
              /*<<camlinternalFormat.ml:691:21>>*/ },
             function(param){
               /*<<camlinternalFormat.ml:692:17>>*/ return;
              /*<<camlinternalFormat.ml:692:21>>*/ },
             function(param){
               /*<<camlinternalFormat.ml:693:17>>*/ return;
              /*<<camlinternalFormat.ml:693:21>>*/ },
             function(param){
               /*<<camlinternalFormat.ml:694:17>>*/ return;
              /*<<camlinternalFormat.ml:694:21>>*/ }];
    switch(param[0]){
      case 0:
        /*<<camlinternalFormat.ml:696:25>>*/ var
        rest = param[1],
         /*<<camlinternalFormat.ml:696:25>>*/ match = fmtty_rel_det(rest),
        de = match[4],
        ed = match[3],
        af = match[2],
        fa = match[1];
        /*<<camlinternalFormat.ml:697:4>>*/ return [0,
               function(param){
                 /*<<camlinternalFormat.ml:697:17>>*/ fa(0);
                 /*<<camlinternalFormat.ml:697:39>>*/ return;
                /*<<camlinternalFormat.ml:697:43>>*/ },
               function(param){
                 /*<<camlinternalFormat.ml:698:17>>*/ af(0);
                 /*<<camlinternalFormat.ml:698:39>>*/ return;
                /*<<camlinternalFormat.ml:698:43>>*/ },
               ed,
               de];
      case 1:
        /*<<camlinternalFormat.ml:701:25>>*/ var
        rest$0 = param[1],
         /*<<camlinternalFormat.ml:701:25>>*/ match$0 = fmtty_rel_det(rest$0),
        de$0 = match$0[4],
        ed$0 = match$0[3],
        af$0 = match$0[2],
        fa$0 = match$0[1];
        /*<<camlinternalFormat.ml:702:4>>*/ return [0,
               function(param){
                 /*<<camlinternalFormat.ml:702:17>>*/ fa$0(0);
                 /*<<camlinternalFormat.ml:702:39>>*/ return;
                /*<<camlinternalFormat.ml:702:43>>*/ },
               function(param){
                 /*<<camlinternalFormat.ml:703:17>>*/ af$0(0);
                 /*<<camlinternalFormat.ml:703:39>>*/ return;
                /*<<camlinternalFormat.ml:703:43>>*/ },
               ed$0,
               de$0];
      case 2:
        /*<<camlinternalFormat.ml:706:25>>*/ var
        rest$1 = param[1],
         /*<<camlinternalFormat.ml:706:25>>*/ match$1 = fmtty_rel_det(rest$1),
        de$1 = match$1[4],
        ed$1 = match$1[3],
        af$1 = match$1[2],
        fa$1 = match$1[1];
        /*<<camlinternalFormat.ml:707:4>>*/ return [0,
               function(param){
                 /*<<camlinternalFormat.ml:707:17>>*/ fa$1(0);
                 /*<<camlinternalFormat.ml:707:39>>*/ return;
                /*<<camlinternalFormat.ml:707:43>>*/ },
               function(param){
                 /*<<camlinternalFormat.ml:708:17>>*/ af$1(0);
                 /*<<camlinternalFormat.ml:708:39>>*/ return;
                /*<<camlinternalFormat.ml:708:43>>*/ },
               ed$1,
               de$1];
      case 3:
        /*<<camlinternalFormat.ml:711:25>>*/ var
        rest$2 = param[1],
         /*<<camlinternalFormat.ml:711:25>>*/ match$2 = fmtty_rel_det(rest$2),
        de$2 = match$2[4],
        ed$2 = match$2[3],
        af$2 = match$2[2],
        fa$2 = match$2[1];
        /*<<camlinternalFormat.ml:712:4>>*/ return [0,
               function(param){
                 /*<<camlinternalFormat.ml:712:17>>*/ fa$2(0);
                 /*<<camlinternalFormat.ml:712:39>>*/ return;
                /*<<camlinternalFormat.ml:712:43>>*/ },
               function(param){
                 /*<<camlinternalFormat.ml:713:17>>*/ af$2(0);
                 /*<<camlinternalFormat.ml:713:39>>*/ return;
                /*<<camlinternalFormat.ml:713:43>>*/ },
               ed$2,
               de$2];
      case 4:
        /*<<camlinternalFormat.ml:721:25>>*/ var
        rest$3 = param[1],
         /*<<camlinternalFormat.ml:721:25>>*/ match$3 = fmtty_rel_det(rest$3),
        de$3 = match$3[4],
        ed$3 = match$3[3],
        af$3 = match$3[2],
        fa$3 = match$3[1];
        /*<<camlinternalFormat.ml:722:4>>*/ return [0,
               function(param){
                 /*<<camlinternalFormat.ml:722:17>>*/ fa$3(0);
                 /*<<camlinternalFormat.ml:722:39>>*/ return;
                /*<<camlinternalFormat.ml:722:43>>*/ },
               function(param){
                 /*<<camlinternalFormat.ml:723:17>>*/ af$3(0);
                 /*<<camlinternalFormat.ml:723:39>>*/ return;
                /*<<camlinternalFormat.ml:723:43>>*/ },
               ed$3,
               de$3];
      case 5:
        /*<<camlinternalFormat.ml:716:25>>*/ var
        rest$4 = param[1],
         /*<<camlinternalFormat.ml:716:25>>*/ match$4 = fmtty_rel_det(rest$4),
        de$4 = match$4[4],
        ed$4 = match$4[3],
        af$4 = match$4[2],
        fa$4 = match$4[1];
        /*<<camlinternalFormat.ml:717:4>>*/ return [0,
               function(param){
                 /*<<camlinternalFormat.ml:717:17>>*/ fa$4(0);
                 /*<<camlinternalFormat.ml:717:39>>*/ return;
                /*<<camlinternalFormat.ml:717:43>>*/ },
               function(param){
                 /*<<camlinternalFormat.ml:718:17>>*/ af$4(0);
                 /*<<camlinternalFormat.ml:718:39>>*/ return;
                /*<<camlinternalFormat.ml:718:43>>*/ },
               ed$4,
               de$4];
      case 6:
        /*<<camlinternalFormat.ml:726:25>>*/ var
        rest$5 = param[1],
         /*<<camlinternalFormat.ml:726:25>>*/ match$5 = fmtty_rel_det(rest$5),
        de$5 = match$5[4],
        ed$5 = match$5[3],
        af$5 = match$5[2],
        fa$5 = match$5[1];
        /*<<camlinternalFormat.ml:727:4>>*/ return [0,
               function(param){
                 /*<<camlinternalFormat.ml:727:17>>*/ fa$5(0);
                 /*<<camlinternalFormat.ml:727:39>>*/ return;
                /*<<camlinternalFormat.ml:727:43>>*/ },
               function(param){
                 /*<<camlinternalFormat.ml:728:17>>*/ af$5(0);
                 /*<<camlinternalFormat.ml:728:39>>*/ return;
                /*<<camlinternalFormat.ml:728:43>>*/ },
               ed$5,
               de$5];
      case 7:
        /*<<camlinternalFormat.ml:731:25>>*/ var
        rest$6 = param[1],
         /*<<camlinternalFormat.ml:731:25>>*/ match$6 = fmtty_rel_det(rest$6),
        de$6 = match$6[4],
        ed$6 = match$6[3],
        af$6 = match$6[2],
        fa$6 = match$6[1];
        /*<<camlinternalFormat.ml:732:4>>*/ return [0,
               function(param){
                 /*<<camlinternalFormat.ml:732:17>>*/ fa$6(0);
                 /*<<camlinternalFormat.ml:732:39>>*/ return;
                /*<<camlinternalFormat.ml:732:43>>*/ },
               function(param){
                 /*<<camlinternalFormat.ml:733:17>>*/ af$6(0);
                 /*<<camlinternalFormat.ml:733:39>>*/ return;
                /*<<camlinternalFormat.ml:733:43>>*/ },
               ed$6,
               de$6];
      case 8:
        /*<<camlinternalFormat.ml:764:25>>*/ var
        rest$7 = param[2],
         /*<<camlinternalFormat.ml:764:25>>*/ match$7 = fmtty_rel_det(rest$7),
        de$7 = match$7[4],
        ed$7 = match$7[3],
        af$7 = match$7[2],
        fa$7 = match$7[1];
        /*<<camlinternalFormat.ml:765:4>>*/ return [0,
               function(param){
                 /*<<camlinternalFormat.ml:765:17>>*/ fa$7(0);
                 /*<<camlinternalFormat.ml:765:39>>*/ return;
                /*<<camlinternalFormat.ml:765:43>>*/ },
               function(param){
                 /*<<camlinternalFormat.ml:766:17>>*/ af$7(0);
                 /*<<camlinternalFormat.ml:766:39>>*/ return;
                /*<<camlinternalFormat.ml:766:43>>*/ },
               ed$7,
               de$7];
      case 9:
        /*<<camlinternalFormat.ml:769:25>>*/ var
        rest$8 = param[3],
        ty2 = param[2],
        ty1 = param[1],
         /*<<camlinternalFormat.ml:769:25>>*/ match$8 = fmtty_rel_det(rest$8),
        de$8 = match$8[4],
        ed$8 = match$8[3],
        af$8 = match$8[2],
        fa$8 = match$8[1],
         /*<<camlinternalFormat.ml:770:13>>*/ ty = trans(symm(ty1), ty2),
         /*<<camlinternalFormat.ml:771:25>>*/ match$9 = fmtty_rel_det(ty),
        jd = match$9[4],
        dj = match$9[3],
        ga = match$9[2],
        ag = match$9[1];
        /*<<camlinternalFormat.ml:772:4>>*/ return [0,
               function(param){
                 /*<<camlinternalFormat.ml:772:17>>*/ fa$8(0);
                 /*<<camlinternalFormat.ml:772:50>>*/ ag(0);
                 /*<<camlinternalFormat.ml:772:61>>*/ return;
                /*<<camlinternalFormat.ml:772:65>>*/ },
               function(param){
                 /*<<camlinternalFormat.ml:773:17>>*/ ga(0);
                 /*<<camlinternalFormat.ml:773:50>>*/ af$8(0);
                 /*<<camlinternalFormat.ml:773:61>>*/ return;
                /*<<camlinternalFormat.ml:773:65>>*/ },
               function(param){
                 /*<<camlinternalFormat.ml:774:17>>*/ ed$8(0);
                 /*<<camlinternalFormat.ml:774:50>>*/ dj(0);
                 /*<<camlinternalFormat.ml:774:61>>*/ return;
                /*<<camlinternalFormat.ml:774:65>>*/ },
               function(param){
                 /*<<camlinternalFormat.ml:775:17>>*/ jd(0);
                 /*<<camlinternalFormat.ml:775:50>>*/ de$8(0);
                 /*<<camlinternalFormat.ml:775:61>>*/ return;
                /*<<camlinternalFormat.ml:775:65>>*/ }];
      case 10:
        /*<<camlinternalFormat.ml:742:25>>*/ var
        rest$9 = param[1],
         /*<<camlinternalFormat.ml:742:25>>*/ match$10 = fmtty_rel_det(rest$9),
        de$9 = match$10[4],
        ed$9 = match$10[3],
        af$9 = match$10[2],
        fa$9 = match$10[1];
        /*<<camlinternalFormat.ml:743:4>>*/ return [0,
               function(param){
                 /*<<camlinternalFormat.ml:743:17>>*/ fa$9(0);
                 /*<<camlinternalFormat.ml:743:39>>*/ return;
                /*<<camlinternalFormat.ml:743:43>>*/ },
               function(param){
                 /*<<camlinternalFormat.ml:744:17>>*/ af$9(0);
                 /*<<camlinternalFormat.ml:744:39>>*/ return;
                /*<<camlinternalFormat.ml:744:43>>*/ },
               ed$9,
               de$9];
      case 11:
        /*<<camlinternalFormat.ml:737:25>>*/ var
        rest$10 = param[1],
         /*<<camlinternalFormat.ml:737:25>>*/ match$11 =
          fmtty_rel_det(rest$10),
        de$10 = match$11[4],
        ed$10 = match$11[3],
        af$10 = match$11[2],
        fa$10 = match$11[1];
        /*<<camlinternalFormat.ml:738:4>>*/ return [0,
               function(param){
                 /*<<camlinternalFormat.ml:738:17>>*/ fa$10(0);
                 /*<<camlinternalFormat.ml:738:39>>*/ return;
                /*<<camlinternalFormat.ml:738:43>>*/ },
               function(param){
                 /*<<camlinternalFormat.ml:739:17>>*/ af$10(0);
                 /*<<camlinternalFormat.ml:739:39>>*/ return;
                /*<<camlinternalFormat.ml:739:43>>*/ },
               ed$10,
               de$10];
      case 12:
        /*<<camlinternalFormat.ml:747:25>>*/ var
        rest$11 = param[1],
         /*<<camlinternalFormat.ml:747:25>>*/ match$12 =
          fmtty_rel_det(rest$11),
        de$11 = match$12[4],
        ed$11 = match$12[3],
        af$11 = match$12[2],
        fa$11 = match$12[1];
        /*<<camlinternalFormat.ml:748:4>>*/ return [0,
               function(param){
                 /*<<camlinternalFormat.ml:748:17>>*/ fa$11(0);
                 /*<<camlinternalFormat.ml:748:39>>*/ return;
                /*<<camlinternalFormat.ml:748:43>>*/ },
               function(param){
                 /*<<camlinternalFormat.ml:749:17>>*/ af$11(0);
                 /*<<camlinternalFormat.ml:749:39>>*/ return;
                /*<<camlinternalFormat.ml:749:43>>*/ },
               ed$11,
               de$11];
      case 13:
        /*<<camlinternalFormat.ml:752:25>>*/ var
        rest$12 = param[1],
         /*<<camlinternalFormat.ml:752:25>>*/ match$13 =
          fmtty_rel_det(rest$12),
        de$12 = match$13[4],
        ed$12 = match$13[3],
        af$12 = match$13[2],
        fa$12 = match$13[1];
        /*<<camlinternalFormat.ml:753:4>>*/ return [0,
               function(param){
                 /*<<camlinternalFormat.ml:753:17>>*/ fa$12(0);
                 /*<<camlinternalFormat.ml:753:39>>*/ return;
                /*<<camlinternalFormat.ml:753:43>>*/ },
               function(param){
                 /*<<camlinternalFormat.ml:754:17>>*/ af$12(0);
                 /*<<camlinternalFormat.ml:754:39>>*/ return;
                /*<<camlinternalFormat.ml:754:43>>*/ },
               function(param){
                 /*<<camlinternalFormat.ml:755:17>>*/ ed$12(0);
                 /*<<camlinternalFormat.ml:755:39>>*/ return;
                /*<<camlinternalFormat.ml:755:43>>*/ },
               function(param){
                 /*<<camlinternalFormat.ml:756:17>>*/ de$12(0);
                 /*<<camlinternalFormat.ml:756:39>>*/ return;
                /*<<camlinternalFormat.ml:756:43>>*/ }];
      default:
        /*<<camlinternalFormat.ml:758:25>>*/ var
        rest$13 = param[1],
         /*<<camlinternalFormat.ml:758:25>>*/ match$14 =
          fmtty_rel_det(rest$13),
        de$13 = match$14[4],
        ed$13 = match$14[3],
        af$13 = match$14[2],
        fa$13 = match$14[1];
        /*<<camlinternalFormat.ml:759:4>>*/ return [0,
               function(param){
                 /*<<camlinternalFormat.ml:759:17>>*/ fa$13(0);
                 /*<<camlinternalFormat.ml:759:39>>*/ return;
                /*<<camlinternalFormat.ml:759:43>>*/ },
               function(param){
                 /*<<camlinternalFormat.ml:760:17>>*/ af$13(0);
                 /*<<camlinternalFormat.ml:760:39>>*/ return;
                /*<<camlinternalFormat.ml:760:43>>*/ },
               function(param){
                 /*<<camlinternalFormat.ml:761:17>>*/ ed$13(0);
                 /*<<camlinternalFormat.ml:761:39>>*/ return;
                /*<<camlinternalFormat.ml:761:43>>*/ },
               function(param){
                 /*<<camlinternalFormat.ml:762:17>>*/ de$13(0);
                 /*<<camlinternalFormat.ml:762:39>>*/ return;
                /*<<camlinternalFormat.ml:762:43>>*/ }];
    }
   }
   function trans(ty1, ty2){
     /*<<camlinternalFormat.ml:803:17>>*/ a:
    {
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           if(typeof ty1 !== "number"){
            switch(ty1[0]){
              case 0:
               var rest1 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 0:
                   var rest2 = ty2[1];
                    /*<<camlinternalFormat.ml:804:36>>*/ return [0,
                           trans(rest1, rest2)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 1:
               var rest1$0 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 1:
                   var rest2$0 = ty2[1];
                    /*<<camlinternalFormat.ml:805:40>>*/ return [1,
                           trans(rest1$0, rest2$0)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 2:
               var rest1$1 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 2:
                   var rest2$1 = ty2[1];
                    /*<<camlinternalFormat.ml:807:34>>*/ return [2,
                           trans(rest1$1, rest2$1)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 3:
               var rest1$2 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 3:
                   var rest2$2 = ty2[1];
                    /*<<camlinternalFormat.ml:808:38>>*/ return [3,
                           trans(rest1$2, rest2$2)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 4:
               var rest1$3 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 4:
                   var rest2$3 = ty2[1];
                    /*<<camlinternalFormat.ml:810:46>>*/ return [4,
                           trans(rest1$3, rest2$3)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 5:
               var rest1$4 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 5:
                   var rest2$4 = ty2[1];
                    /*<<camlinternalFormat.ml:809:38>>*/ return [5,
                           trans(rest1$4, rest2$4)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 6:
               var rest1$5 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 6:
                   var rest2$5 = ty2[1];
                    /*<<camlinternalFormat.ml:811:38>>*/ return [6,
                           trans(rest1$5, rest2$5)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 7:
               var rest1$6 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 7:
                   var rest2$6 = ty2[1];
                    /*<<camlinternalFormat.ml:806:36>>*/ return [7,
                           trans(rest1$6, rest2$6)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 8:
               var rest1$7 = ty1[2], ty1$0 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 8:
                    /*<<camlinternalFormat.ml:835:34>>*/ var
                    rest2$7 = ty2[2],
                    ty2$0 = ty2[1],
                     /*<<camlinternalFormat.ml:835:34>>*/ _B5_ =
                      trans(rest1$7, rest2$7);
                    /*<<camlinternalFormat.ml:835:4>>*/ return [8,
                           trans(ty1$0, ty2$0),
                           _B5_];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
                /*<<camlinternalFormat.ml:836:26>>*/ throw  /*<<camlinternalFormat.ml:836:26>>*/ caml_maybe_attach_backtrace
                      ([0, Assert_failure, _aN_], 1);
              case 9:
               var rest1$8 = ty1[3], ty12 = ty1[2], ty11 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 8:
                   break f;
                  case 9:
                    /*<<camlinternalFormat.ml:841:13>>*/ var
                    rest2$8 = ty2[3],
                    ty22 = ty2[2],
                    ty21 = ty2[1],
                     /*<<camlinternalFormat.ml:841:13>>*/ ty =
                      trans(symm(ty12), ty21),
                     /*<<camlinternalFormat.ml:842:23>>*/ match =
                      fmtty_rel_det(ty),
                    f4 = match[4],
                    f2 = match[2];
                    /*<<camlinternalFormat.ml:843:15>>*/ f2(0);
                    /*<<camlinternalFormat.ml:844:15>>*/ f4(0);
                    /*<<camlinternalFormat.ml:845:4>>*/ return [9,
                           ty11,
                           ty22,
                           trans(rest1$8, rest2$8)];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
                /*<<camlinternalFormat.ml:846:28>>*/ throw  /*<<camlinternalFormat.ml:846:28>>*/ caml_maybe_attach_backtrace
                      ([0, Assert_failure, _aO_], 1);
              case 10:
               var rest1$9 = ty1[1];
               if(typeof ty2 !== "number" && 10 === ty2[0]){
                var rest2$9 = ty2[1];
                 /*<<camlinternalFormat.ml:813:38>>*/ return [10,
                        trans(rest1$9, rest2$9)];
               }
                /*<<camlinternalFormat.ml:814:21>>*/ throw  /*<<camlinternalFormat.ml:814:21>>*/ caml_maybe_attach_backtrace
                      ([0, Assert_failure, _aP_], 1);
              case 11:
               var rest1$10 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   var rest2$10 = ty2[1];
                    /*<<camlinternalFormat.ml:817:38>>*/ return [11,
                           trans(rest1$10, rest2$10)];
                }
                /*<<camlinternalFormat.ml:818:21>>*/ throw  /*<<camlinternalFormat.ml:818:21>>*/ caml_maybe_attach_backtrace
                      ([0, Assert_failure, _aQ_], 1);
              case 12:
               var rest1$11 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   var rest2$11 = ty2[1];
                    /*<<camlinternalFormat.ml:821:34>>*/ return [12,
                           trans(rest1$11, rest2$11)];
                }
                /*<<camlinternalFormat.ml:822:19>>*/ throw  /*<<camlinternalFormat.ml:822:19>>*/ caml_maybe_attach_backtrace
                      ([0, Assert_failure, _aR_], 1);
              case 13:
               var rest1$12 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   var rest2$12 = ty2[1];
                    /*<<camlinternalFormat.ml:825:40>>*/ return [13,
                           trans(rest1$12, rest2$12)];
                }
                /*<<camlinternalFormat.ml:826:22>>*/ throw  /*<<camlinternalFormat.ml:826:22>>*/ caml_maybe_attach_backtrace
                      ([0, Assert_failure, _aS_], 1);
              default:
               var rest1$13 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   var rest2$13 = ty2[1];
                    /*<<camlinternalFormat.ml:830:4>>*/ return [14,
                           trans(rest1$13, rest2$13)];
                }
                /*<<camlinternalFormat.ml:831:30>>*/ throw  /*<<camlinternalFormat.ml:831:30>>*/ caml_maybe_attach_backtrace
                      ([0, Assert_failure, _aT_], 1);
            }
             /*<<camlinternalFormat.ml:851:23>>*/ throw  /*<<camlinternalFormat.ml:851:23>>*/ caml_maybe_attach_backtrace
                   ([0, Assert_failure, _aM_], 1);
           }
           if(typeof ty2 === "number")
             /*<<camlinternalFormat.ml:849:34>>*/ return 0;
           switch(ty2[0]){
             case 10:
              break a;
             case 11:
              break b;
             case 12:
              break c;
             case 13:
              break d;
             case 14:
              break e;
             case 8:
              break f;
             case 9: break;
             default:
               /*<<camlinternalFormat.ml:850:23>>*/ throw  /*<<camlinternalFormat.ml:850:23>>*/ caml_maybe_attach_backtrace
                     ([0, Assert_failure, _aE_], 1);
           }
          }
           /*<<camlinternalFormat.ml:847:28>>*/ throw  /*<<camlinternalFormat.ml:847:28>>*/ caml_maybe_attach_backtrace
                 ([0, Assert_failure, _aG_], 1);
         }
          /*<<camlinternalFormat.ml:837:26>>*/ throw  /*<<camlinternalFormat.ml:837:26>>*/ caml_maybe_attach_backtrace
                ([0, Assert_failure, _aF_], 1);
        }
         /*<<camlinternalFormat.ml:832:30>>*/ throw  /*<<camlinternalFormat.ml:832:30>>*/ caml_maybe_attach_backtrace
               ([0, Assert_failure, _aL_], 1);
       }
        /*<<camlinternalFormat.ml:827:22>>*/ throw  /*<<camlinternalFormat.ml:827:22>>*/ caml_maybe_attach_backtrace
              ([0, Assert_failure, _aK_], 1);
      }
       /*<<camlinternalFormat.ml:823:19>>*/ throw  /*<<camlinternalFormat.ml:823:19>>*/ caml_maybe_attach_backtrace
             ([0, Assert_failure, _aJ_], 1);
     }
      /*<<camlinternalFormat.ml:819:21>>*/ throw  /*<<camlinternalFormat.ml:819:21>>*/ caml_maybe_attach_backtrace
            ([0, Assert_failure, _aI_], 1);
    }
     /*<<camlinternalFormat.ml:815:21>>*/ throw  /*<<camlinternalFormat.ml:815:21>>*/ caml_maybe_attach_backtrace
           ([0, Assert_failure, _aH_], 1);
    /*<<camlinternalFormat.ml:851:35>>*/ }
    /*<<camlinternalFormat.ml:969:0>>*/  /*<<camlinternalFormat.ml:969:0>>*/ var
    Type_mismatch = [248, _aU_, caml_fresh_oo_id(0)];
   function type_padding(pad, fmtty){
     /*<<camlinternalFormat.ml:977:17>>*/ if(typeof pad === "number")
      /*<<camlinternalFormat.ml:978:21>>*/ return [0, 0, fmtty];
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
      /*<<camlinternalFormat.ml:979:33>>*/ return [0, [0, padty, w], fmtty];
    }
    if(typeof fmtty !== "number" && 2 === fmtty[0]){
     var rest = fmtty[1], padty$0 = pad[1];
      /*<<camlinternalFormat.ml:980:38>>*/ return [0, [1, padty$0], rest];
    }
     /*<<camlinternalFormat.ml:981:9>>*/ throw  /*<<camlinternalFormat.ml:981:9>>*/ caml_maybe_attach_backtrace
           (Type_mismatch, 1);
    /*<<camlinternalFormat.ml:981:28>>*/ }
   function type_padprec(pad, prec, fmtty){
     /*<<camlinternalFormat.ml:989:22>>*/  /*<<camlinternalFormat.ml:989:34>>*/ var
     match = type_padding(pad, fmtty);
    if(typeof prec !== "number"){
     var rest$1 = match[2], pad$2 = match[1], p = prec[1];
      /*<<camlinternalFormat.ml:993:4>>*/ return [0, pad$2, [0, p], rest$1];
    }
    if(! prec){
     var rest$0 = match[2], pad$1 = match[1];
      /*<<camlinternalFormat.ml:991:4>>*/ return [0, pad$1, 0, rest$0];
    }
    var match$0 = match[2];
    if(typeof match$0 !== "number" && 2 === match$0[0]){
     var rest = match$0[1], pad$0 = match[1];
      /*<<camlinternalFormat.ml:995:4>>*/ return [0, pad$0, 1, rest];
    }
     /*<<camlinternalFormat.ml:996:35>>*/ throw  /*<<camlinternalFormat.ml:996:35>>*/ caml_maybe_attach_backtrace
           (Type_mismatch, 1);
    /*<<camlinternalFormat.ml:996:54>>*/ }
   function type_format(fmt, fmtty){
     /*<<camlinternalFormat.ml:1008:19>>*/  /*<<camlinternalFormat.ml:1008:25>>*/ var
     _B4_ = type_format_gen(fmt, fmtty);
    if(typeof _B4_[2] !== "number")
      /*<<camlinternalFormat.ml:1010:9>>*/ throw  /*<<camlinternalFormat.ml:1010:9>>*/ caml_maybe_attach_backtrace
            (Type_mismatch, 1);
    var fmt$0 = _B4_[1];
     /*<<camlinternalFormat.ml:1009:42>>*/ return fmt$0;
    /*<<camlinternalFormat.ml:1010:28>>*/ }
   function type_format_gen(fmt, fmtty){
     /*<<camlinternalFormat.ml:1018:19>>*/ if(typeof fmt === "number")
      /*<<camlinternalFormat.ml:1133:33>>*/ return [0, 0, fmtty];
    switch(fmt[0]){
      case 0:
       if(typeof fmtty !== "number" && 0 === fmtty[0]){
         /*<<camlinternalFormat.ml:1020:39>>*/ var
         fmtty_rest = fmtty[1],
         fmt_rest = fmt[1],
          /*<<camlinternalFormat.ml:1020:39>>*/ match =
           type_format_gen(fmt_rest, fmtty_rest),
         fmtty$0 = match[2],
         fmt$0 = match[1];
         /*<<camlinternalFormat.ml:1021:4>>*/ return [0, [0, fmt$0], fmtty$0];
       }
       break;
      case 1:
       if(typeof fmtty !== "number" && 0 === fmtty[0]){
         /*<<camlinternalFormat.ml:1023:39>>*/ var
         fmtty_rest$0 = fmtty[1],
         fmt_rest$0 = fmt[1],
          /*<<camlinternalFormat.ml:1023:39>>*/ match$0 =
           type_format_gen(fmt_rest$0, fmtty_rest$0),
         fmtty$1 = match$0[2],
         fmt$1 = match$0[1];
         /*<<camlinternalFormat.ml:1024:4>>*/ return [0, [1, fmt$1], fmtty$1];
       }
       break;
      case 2:
        /*<<camlinternalFormat.ml:1026:10>>*/ var
        fmt_rest$1 = fmt[2],
        pad = fmt[1],
         /*<<camlinternalFormat.ml:1026:10>>*/ match$1 =
          type_padding(pad, fmtty),
        pad$0 = match$1[1],
        match$2 = match$1[2];
       if(typeof match$2 !== "number" && 1 === match$2[0]){
         /*<<camlinternalFormat.ml:1028:41>>*/ var
         fmtty_rest$1 = match$2[1],
          /*<<camlinternalFormat.ml:1028:41>>*/ match$3 =
           type_format_gen(fmt_rest$1, fmtty_rest$1),
         fmtty$2 = match$3[2],
         fmt$2 = match$3[1];
         /*<<camlinternalFormat.ml:1029:6>>*/ return [0,
                [2, pad$0, fmt$2],
                fmtty$2];
       }
        /*<<camlinternalFormat.ml:1030:34>>*/ throw  /*<<camlinternalFormat.ml:1030:34>>*/ caml_maybe_attach_backtrace
              (Type_mismatch, 1);
      case 3:
        /*<<camlinternalFormat.ml:1033:10>>*/ var
        fmt_rest$2 = fmt[2],
        pad$1 = fmt[1],
         /*<<camlinternalFormat.ml:1033:10>>*/ match$4 =
          type_padding(pad$1, fmtty),
        pad$2 = match$4[1],
        match$5 = match$4[2];
       if(typeof match$5 !== "number" && 1 === match$5[0]){
         /*<<camlinternalFormat.ml:1035:41>>*/ var
         fmtty_rest$2 = match$5[1],
          /*<<camlinternalFormat.ml:1035:41>>*/ match$6 =
           type_format_gen(fmt_rest$2, fmtty_rest$2),
         fmtty$3 = match$6[2],
         fmt$3 = match$6[1];
         /*<<camlinternalFormat.ml:1036:6>>*/ return [0,
                [3, pad$2, fmt$3],
                fmtty$3];
       }
        /*<<camlinternalFormat.ml:1037:34>>*/ throw  /*<<camlinternalFormat.ml:1037:34>>*/ caml_maybe_attach_backtrace
              (Type_mismatch, 1);
      case 4:
        /*<<camlinternalFormat.ml:1040:10>>*/ var
        fmt_rest$3 = fmt[4],
        prec = fmt[3],
        pad$3 = fmt[2],
        iconv = fmt[1],
         /*<<camlinternalFormat.ml:1040:10>>*/ match$7 =
          type_padprec(pad$3, prec, fmtty),
        pad$4 = match$7[1],
        match$8 = match$7[3];
       if(typeof match$8 !== "number" && 2 === match$8[0]){
         /*<<camlinternalFormat.ml:1042:41>>*/ var
         fmtty_rest$3 = match$8[1],
         prec$0 = match$7[2],
          /*<<camlinternalFormat.ml:1042:41>>*/ match$9 =
           type_format_gen(fmt_rest$3, fmtty_rest$3),
         fmtty$4 = match$9[2],
         fmt$4 = match$9[1];
         /*<<camlinternalFormat.ml:1043:6>>*/ return [0,
                [4, iconv, pad$4, prec$0, fmt$4],
                fmtty$4];
       }
        /*<<camlinternalFormat.ml:1044:37>>*/ throw  /*<<camlinternalFormat.ml:1044:37>>*/ caml_maybe_attach_backtrace
              (Type_mismatch, 1);
      case 5:
        /*<<camlinternalFormat.ml:1047:10>>*/ var
        fmt_rest$4 = fmt[4],
        prec$1 = fmt[3],
        pad$5 = fmt[2],
        iconv$0 = fmt[1],
         /*<<camlinternalFormat.ml:1047:10>>*/ match$10 =
          type_padprec(pad$5, prec$1, fmtty),
        pad$6 = match$10[1],
        match$11 = match$10[3];
       if(typeof match$11 !== "number" && 3 === match$11[0]){
         /*<<camlinternalFormat.ml:1049:41>>*/ var
         fmtty_rest$4 = match$11[1],
         prec$2 = match$10[2],
          /*<<camlinternalFormat.ml:1049:41>>*/ match$12 =
           type_format_gen(fmt_rest$4, fmtty_rest$4),
         fmtty$5 = match$12[2],
         fmt$5 = match$12[1];
         /*<<camlinternalFormat.ml:1050:6>>*/ return [0,
                [5, iconv$0, pad$6, prec$2, fmt$5],
                fmtty$5];
       }
        /*<<camlinternalFormat.ml:1051:37>>*/ throw  /*<<camlinternalFormat.ml:1051:37>>*/ caml_maybe_attach_backtrace
              (Type_mismatch, 1);
      case 6:
        /*<<camlinternalFormat.ml:1054:10>>*/ var
        fmt_rest$5 = fmt[4],
        prec$3 = fmt[3],
        pad$7 = fmt[2],
        iconv$1 = fmt[1],
         /*<<camlinternalFormat.ml:1054:10>>*/ match$13 =
          type_padprec(pad$7, prec$3, fmtty),
        pad$8 = match$13[1],
        match$14 = match$13[3];
       if(typeof match$14 !== "number" && 4 === match$14[0]){
         /*<<camlinternalFormat.ml:1056:41>>*/ var
         fmtty_rest$5 = match$14[1],
         prec$4 = match$13[2],
          /*<<camlinternalFormat.ml:1056:41>>*/ match$15 =
           type_format_gen(fmt_rest$5, fmtty_rest$5),
         fmtty$6 = match$15[2],
         fmt$6 = match$15[1];
         /*<<camlinternalFormat.ml:1057:6>>*/ return [0,
                [6, iconv$1, pad$8, prec$4, fmt$6],
                fmtty$6];
       }
        /*<<camlinternalFormat.ml:1058:37>>*/ throw  /*<<camlinternalFormat.ml:1058:37>>*/ caml_maybe_attach_backtrace
              (Type_mismatch, 1);
      case 7:
        /*<<camlinternalFormat.ml:1061:10>>*/ var
        fmt_rest$6 = fmt[4],
        prec$5 = fmt[3],
        pad$9 = fmt[2],
        iconv$2 = fmt[1],
         /*<<camlinternalFormat.ml:1061:10>>*/ match$16 =
          type_padprec(pad$9, prec$5, fmtty),
        pad$10 = match$16[1],
        match$17 = match$16[3];
       if(typeof match$17 !== "number" && 5 === match$17[0]){
         /*<<camlinternalFormat.ml:1063:41>>*/ var
         fmtty_rest$6 = match$17[1],
         prec$6 = match$16[2],
          /*<<camlinternalFormat.ml:1063:41>>*/ match$18 =
           type_format_gen(fmt_rest$6, fmtty_rest$6),
         fmtty$7 = match$18[2],
         fmt$7 = match$18[1];
         /*<<camlinternalFormat.ml:1064:6>>*/ return [0,
                [7, iconv$2, pad$10, prec$6, fmt$7],
                fmtty$7];
       }
        /*<<camlinternalFormat.ml:1065:37>>*/ throw  /*<<camlinternalFormat.ml:1065:37>>*/ caml_maybe_attach_backtrace
              (Type_mismatch, 1);
      case 8:
        /*<<camlinternalFormat.ml:1068:10>>*/ var
        fmt_rest$7 = fmt[4],
        prec$7 = fmt[3],
        pad$11 = fmt[2],
        fconv = fmt[1],
         /*<<camlinternalFormat.ml:1068:10>>*/ match$19 =
          type_padprec(pad$11, prec$7, fmtty),
        pad$12 = match$19[1],
        match$20 = match$19[3];
       if(typeof match$20 !== "number" && 6 === match$20[0]){
         /*<<camlinternalFormat.ml:1070:41>>*/ var
         fmtty_rest$7 = match$20[1],
         prec$8 = match$19[2],
          /*<<camlinternalFormat.ml:1070:41>>*/ match$21 =
           type_format_gen(fmt_rest$7, fmtty_rest$7),
         fmtty$8 = match$21[2],
         fmt$8 = match$21[1];
         /*<<camlinternalFormat.ml:1071:6>>*/ return [0,
                [8, fconv, pad$12, prec$8, fmt$8],
                fmtty$8];
       }
        /*<<camlinternalFormat.ml:1072:37>>*/ throw  /*<<camlinternalFormat.ml:1072:37>>*/ caml_maybe_attach_backtrace
              (Type_mismatch, 1);
      case 9:
        /*<<camlinternalFormat.ml:1075:10>>*/ var
        fmt_rest$8 = fmt[2],
        pad$13 = fmt[1],
         /*<<camlinternalFormat.ml:1075:10>>*/ match$22 =
          type_padding(pad$13, fmtty),
        pad$14 = match$22[1],
        match$23 = match$22[2];
       if(typeof match$23 !== "number" && 7 === match$23[0]){
         /*<<camlinternalFormat.ml:1077:41>>*/ var
         fmtty_rest$8 = match$23[1],
          /*<<camlinternalFormat.ml:1077:41>>*/ match$24 =
           type_format_gen(fmt_rest$8, fmtty_rest$8),
         fmtty$9 = match$24[2],
         fmt$9 = match$24[1];
         /*<<camlinternalFormat.ml:1078:6>>*/ return [0,
                [9, pad$14, fmt$9],
                fmtty$9];
       }
        /*<<camlinternalFormat.ml:1079:34>>*/ throw  /*<<camlinternalFormat.ml:1079:34>>*/ caml_maybe_attach_backtrace
              (Type_mismatch, 1);
      case 10:
        /*<<camlinternalFormat.ml:1082:39>>*/ var
        fmt_rest$9 = fmt[1],
         /*<<camlinternalFormat.ml:1082:39>>*/ match$25 =
          type_format_gen(fmt_rest$9, fmtty),
        fmtty$10 = match$25[2],
        fmt$10 = match$25[1];
        /*<<camlinternalFormat.ml:1083:4>>*/ return [0,
               [10, fmt$10],
               fmtty$10];
      case 11:
        /*<<camlinternalFormat.ml:1086:39>>*/ var
        fmt_rest$10 = fmt[2],
        str = fmt[1],
         /*<<camlinternalFormat.ml:1086:39>>*/ match$26 =
          type_format_gen(fmt_rest$10, fmtty),
        fmtty$11 = match$26[2],
        fmt$11 = match$26[1];
        /*<<camlinternalFormat.ml:1087:4>>*/ return [0,
               [11, str, fmt$11],
               fmtty$11];
      case 12:
        /*<<camlinternalFormat.ml:1089:39>>*/ var
        fmt_rest$11 = fmt[2],
        chr = fmt[1],
         /*<<camlinternalFormat.ml:1089:39>>*/ match$27 =
          type_format_gen(fmt_rest$11, fmtty),
        fmtty$12 = match$27[2],
        fmt$12 = match$27[1];
        /*<<camlinternalFormat.ml:1090:4>>*/ return [0,
               [12, chr, fmt$12],
               fmtty$12];
      case 13:
       if(typeof fmtty !== "number" && 8 === fmtty[0]){
        var
         fmtty_rest$9 = fmtty[2],
         sub_fmtty = fmtty[1],
         fmt_rest$12 = fmt[3],
         sub_fmtty$0 = fmt[2],
         pad_opt = fmt[1];
         /*<<camlinternalFormat.ml:1094:7>>*/ if
         ( /*<<camlinternalFormat.ml:1094:7>>*/ caml_notequal
           ([0, sub_fmtty$0], [0, sub_fmtty]))
          /*<<camlinternalFormat.ml:1094:56>>*/ throw  /*<<camlinternalFormat.ml:1094:56>>*/ caml_maybe_attach_backtrace
                (Type_mismatch, 1);
         /*<<camlinternalFormat.ml:1095:39>>*/ var
          /*<<camlinternalFormat.ml:1095:39>>*/ match$28 =
           type_format_gen(fmt_rest$12, fmtty_rest$9),
         fmtty$13 = match$28[2],
         fmt$13 = match$28[1];
         /*<<camlinternalFormat.ml:1096:4>>*/ return [0,
                [13, pad_opt, sub_fmtty, fmt$13],
                fmtty$13];
       }
       break;
      case 14:
       if(typeof fmtty !== "number" && 9 === fmtty[0]){
         /*<<camlinternalFormat.ml:1099:42>>*/ var
         fmtty_rest$10 = fmtty[3],
         sub_fmtty1 = fmtty[1],
         fmt_rest$13 = fmt[3],
         sub_fmtty$1 = fmt[2],
         pad_opt$0 = fmt[1],
          /*<<camlinternalFormat.ml:1099:42>>*/ _B3_ =
           [0, erase_rel(sub_fmtty1)];
         /*<<camlinternalFormat.ml:1099:7>>*/ if
         ( /*<<camlinternalFormat.ml:1099:7>>*/ caml_notequal
           ([0, erase_rel(sub_fmtty$1)], _B3_))
          /*<<camlinternalFormat.ml:1100:6>>*/ throw  /*<<camlinternalFormat.ml:1100:6>>*/ caml_maybe_attach_backtrace
                (Type_mismatch, 1);
         /*<<camlinternalFormat.ml:1102:6>>*/ var
          /*<<camlinternalFormat.ml:1102:6>>*/ match$29 =
           type_format_gen(fmt_rest$13, erase_rel(fmtty_rest$10)),
         fmtty$14 = match$29[2],
         fmt$14 = match$29[1];
         /*<<camlinternalFormat.ml:1104:4>>*/ return [0,
                [14, pad_opt$0, sub_fmtty1, fmt$14],
                fmtty$14];
       }
       break;
      case 15:
       if(typeof fmtty !== "number" && 10 === fmtty[0]){
         /*<<camlinternalFormat.ml:1107:39>>*/ var
         fmtty_rest$11 = fmtty[1],
         fmt_rest$14 = fmt[1],
          /*<<camlinternalFormat.ml:1107:39>>*/ match$30 =
           type_format_gen(fmt_rest$14, fmtty_rest$11),
         fmtty$15 = match$30[2],
         fmt$15 = match$30[1];
         /*<<camlinternalFormat.ml:1108:4>>*/ return [0,
                [15, fmt$15],
                fmtty$15];
       }
       break;
      case 16:
       if(typeof fmtty !== "number" && 11 === fmtty[0]){
         /*<<camlinternalFormat.ml:1110:39>>*/ var
         fmtty_rest$12 = fmtty[1],
         fmt_rest$15 = fmt[1],
          /*<<camlinternalFormat.ml:1110:39>>*/ match$31 =
           type_format_gen(fmt_rest$15, fmtty_rest$12),
         fmtty$16 = match$31[2],
         fmt$16 = match$31[1];
         /*<<camlinternalFormat.ml:1111:4>>*/ return [0,
                [16, fmt$16],
                fmtty$16];
       }
       break;
      case 17:
        /*<<camlinternalFormat.ml:1115:39>>*/ var
        fmt_rest$16 = fmt[2],
        formatting_lit = fmt[1],
         /*<<camlinternalFormat.ml:1115:39>>*/ match$32 =
          type_format_gen(fmt_rest$16, fmtty),
        fmtty$17 = match$32[2],
        fmt$17 = match$32[1];
        /*<<camlinternalFormat.ml:1116:4>>*/ return [0,
               [17, formatting_lit, fmt$17],
               fmtty$17];
      case 18:
       var fmt_rest$17 = fmt[2], formatting_gen = fmt[1];
        /*<<camlinternalFormat.ml:1118:4>>*/ return type_formatting_gen
               (formatting_gen, fmt_rest$17, fmtty);
      case 19:
       if(typeof fmtty !== "number" && 13 === fmtty[0]){
         /*<<camlinternalFormat.ml:1122:39>>*/ var
         fmtty_rest$13 = fmtty[1],
         fmt_rest$18 = fmt[1],
          /*<<camlinternalFormat.ml:1122:39>>*/ match$33 =
           type_format_gen(fmt_rest$18, fmtty_rest$13),
         fmtty$18 = match$33[2],
         fmt$18 = match$33[1];
         /*<<camlinternalFormat.ml:1123:4>>*/ return [0,
                [19, fmt$18],
                fmtty$18];
       }
       break;
      case 20:
       if(typeof fmtty !== "number" && 1 === fmtty[0]){
         /*<<camlinternalFormat.ml:1125:39>>*/ var
         fmtty_rest$14 = fmtty[1],
         fmt_rest$19 = fmt[3],
         char_set = fmt[2],
         width_opt = fmt[1],
          /*<<camlinternalFormat.ml:1125:39>>*/ match$34 =
           type_format_gen(fmt_rest$19, fmtty_rest$14),
         fmtty$19 = match$34[2],
         fmt$19 = match$34[1];
         /*<<camlinternalFormat.ml:1126:4>>*/ return [0,
                [20, width_opt, char_set, fmt$19],
                fmtty$19];
       }
       break;
      case 21:
       if(typeof fmtty !== "number" && 2 === fmtty[0]){
         /*<<camlinternalFormat.ml:1128:39>>*/ var
         fmtty_rest$15 = fmtty[1],
         fmt_rest$20 = fmt[2],
         counter = fmt[1],
          /*<<camlinternalFormat.ml:1128:39>>*/ match$35 =
           type_format_gen(fmt_rest$20, fmtty_rest$15),
         fmtty$20 = match$35[2],
         fmt$20 = match$35[1];
         /*<<camlinternalFormat.ml:1129:4>>*/ return [0,
                [21, counter, fmt$20],
                fmtty$20];
       }
       break;
      case 23:
       var rest = fmt[2], ign = fmt[1];
        /*<<camlinternalFormat.ml:1131:4>>*/ return type_ignored_param
               (ign, rest, fmtty);
    }
     /*<<camlinternalFormat.ml:1135:9>>*/ throw  /*<<camlinternalFormat.ml:1135:9>>*/ caml_maybe_attach_backtrace
           (Type_mismatch, 1);
    /*<<camlinternalFormat.ml:1135:28>>*/ }
   function type_formatting_gen(formatting_gen, fmt0, fmtty0){
     /*<<camlinternalFormat.ml:1142:34>>*/ if(0 === formatting_gen[0]){
      /*<<camlinternalFormat.ml:1144:39>>*/ var
      match = formatting_gen[1],
      str = match[2],
      fmt1 = match[1],
       /*<<camlinternalFormat.ml:1144:39>>*/ match$0 =
        type_format_gen(fmt1, fmtty0),
      fmtty2 = match$0[2],
      fmt2 = match$0[1],
       /*<<camlinternalFormat.ml:1145:39>>*/ match$1 =
        type_format_gen(fmt0, fmtty2),
      fmtty3 = match$1[2],
      fmt3 = match$1[1];
      /*<<camlinternalFormat.ml:1146:4>>*/ return [0,
             [18, [0, [0, fmt2, str]], fmt3],
             fmtty3];
    }
     /*<<camlinternalFormat.ml:1148:39>>*/ var
     match$2 = formatting_gen[1],
     str$0 = match$2[2],
     fmt1$0 = match$2[1],
      /*<<camlinternalFormat.ml:1148:39>>*/ match$3 =
       type_format_gen(fmt1$0, fmtty0),
     fmtty2$0 = match$3[2],
     fmt2$0 = match$3[1],
      /*<<camlinternalFormat.ml:1149:39>>*/ match$4 =
       type_format_gen(fmt0, fmtty2$0),
     fmtty3$0 = match$4[2],
     fmt3$0 = match$4[1];
     /*<<camlinternalFormat.ml:1150:4>>*/ return [0,
            [18, [1, [0, fmt2$0, str$0]], fmt3$0],
            fmtty3$0];
    /*<<camlinternalFormat.ml:1150:80>>*/ }
   function type_ignored_param(ign, fmt, fmtty){
     /*<<camlinternalFormat.ml:1158:21>>*/ if(typeof ign !== "number")
     switch(ign[0]){
       case 0:
         /*<<camlinternalFormat.ml:1161:42>>*/ return type_ignored_param_one
                (ign, fmt, fmtty);
       case 1:
         /*<<camlinternalFormat.ml:1162:42>>*/ return type_ignored_param_one
                (ign, fmt, fmtty);
       case 2:
         /*<<camlinternalFormat.ml:1163:42>>*/ return type_ignored_param_one
                (ign, fmt, fmtty);
       case 3:
         /*<<camlinternalFormat.ml:1164:42>>*/ return type_ignored_param_one
                (ign, fmt, fmtty);
       case 4:
         /*<<camlinternalFormat.ml:1165:42>>*/ return type_ignored_param_one
                (ign, fmt, fmtty);
       case 5:
         /*<<camlinternalFormat.ml:1166:42>>*/ return type_ignored_param_one
                (ign, fmt, fmtty);
       case 6:
         /*<<camlinternalFormat.ml:1167:42>>*/ return type_ignored_param_one
                (ign, fmt, fmtty);
       case 7:
         /*<<camlinternalFormat.ml:1168:42>>*/ return type_ignored_param_one
                (ign, fmt, fmtty);
       case 8:
        var sub_fmtty = ign[2], pad_opt = ign[1];
         /*<<camlinternalFormat.ml:1173:4>>*/ return type_ignored_param_one
                ([8, pad_opt, sub_fmtty], fmt, fmtty);
       case 9:
         /*<<camlinternalFormat.ml:1176:6>>*/ var
         sub_fmtty$0 = ign[2],
         pad_opt$0 = ign[1],
          /*<<camlinternalFormat.ml:1176:6>>*/ _B2_ =
           type_ignored_format_substituti(sub_fmtty$0, fmt, fmtty),
         match$0 = _B2_[2],
         fmtty$1 = match$0[2],
         fmt$1 = match$0[1],
         sub_fmtty$1 = _B2_[1];
         /*<<camlinternalFormat.ml:1177:4>>*/ return [0,
                [23, [9, pad_opt$0, sub_fmtty$1], fmt$1],
                fmtty$1];
       case 10:
         /*<<camlinternalFormat.ml:1169:42>>*/ return type_ignored_param_one
                (ign, fmt, fmtty);
       default:
         /*<<camlinternalFormat.ml:1170:42>>*/ return type_ignored_param_one
                (ign, fmt, fmtty);
     }
    switch(ign){
      case 0:
        /*<<camlinternalFormat.ml:1159:42>>*/ return type_ignored_param_one
               (ign, fmt, fmtty);
      case 1:
        /*<<camlinternalFormat.ml:1160:42>>*/ return type_ignored_param_one
               (ign, fmt, fmtty);
      case 2:
       if(typeof fmtty !== "number" && 14 === fmtty[0]){
         /*<<camlinternalFormat.ml:1183:41>>*/ var
         fmtty_rest = fmtty[1],
          /*<<camlinternalFormat.ml:1183:41>>*/ match =
           type_format_gen(fmt, fmtty_rest),
         fmtty$0 = match[2],
         fmt$0 = match[1];
         /*<<camlinternalFormat.ml:1184:6>>*/ return [0,
                [23, 2, fmt$0],
                fmtty$0];
       }
        /*<<camlinternalFormat.ml:1185:11>>*/ throw  /*<<camlinternalFormat.ml:1185:11>>*/ caml_maybe_attach_backtrace
              (Type_mismatch, 1);
      default:
        /*<<camlinternalFormat.ml:1171:42>>*/ return type_ignored_param_one
               (ign, fmt, fmtty);
    }
    /*<<camlinternalFormat.ml:1186:3>>*/ }
   function type_ignored_param_one(ign, fmt, fmtty){
     /*<<camlinternalFormat.ml:1194:2>>*/ var
      /*<<camlinternalFormat.ml:1194:37>>*/ match =
       type_format_gen(fmt, fmtty),
     fmtty$0 = match[2],
     fmt$0 = match[1];
     /*<<camlinternalFormat.ml:1195:2>>*/ return [0,
            [23, ign, fmt$0],
            fmtty$0];
    /*<<camlinternalFormat.ml:1195:51>>*/ }
   function type_ignored_format_substituti(sub_fmtty, fmt, fmtty){
     /*<<camlinternalFormat.ml:1202:27>>*/ if(typeof sub_fmtty === "number")
      /*<<camlinternalFormat.ml:1276:4>>*/ return [0,
             0,
             type_format_gen(fmt, fmtty)];
    switch(sub_fmtty[0]){
      case 0:
       if(typeof fmtty !== "number" && 0 === fmtty[0]){
         /*<<camlinternalFormat.ml:1205:6>>*/ var
         fmtty_rest = fmtty[1],
         sub_fmtty_rest = sub_fmtty[1],
          /*<<camlinternalFormat.ml:1205:6>>*/ match =
           type_ignored_format_substituti(sub_fmtty_rest, fmt, fmtty_rest),
         fmt$0 = match[2],
         sub_fmtty_rest$0 = match[1];
         /*<<camlinternalFormat.ml:1206:4>>*/ return [0,
                [0, sub_fmtty_rest$0],
                fmt$0];
       }
       break;
      case 1:
       if(typeof fmtty !== "number" && 1 === fmtty[0]){
         /*<<camlinternalFormat.ml:1209:6>>*/ var
         fmtty_rest$0 = fmtty[1],
         sub_fmtty_rest$1 = sub_fmtty[1],
          /*<<camlinternalFormat.ml:1209:6>>*/ match$0 =
           type_ignored_format_substituti(sub_fmtty_rest$1, fmt, fmtty_rest$0),
         fmt$1 = match$0[2],
         sub_fmtty_rest$2 = match$0[1];
         /*<<camlinternalFormat.ml:1210:4>>*/ return [0,
                [1, sub_fmtty_rest$2],
                fmt$1];
       }
       break;
      case 2:
       if(typeof fmtty !== "number" && 2 === fmtty[0]){
         /*<<camlinternalFormat.ml:1213:6>>*/ var
         fmtty_rest$1 = fmtty[1],
         sub_fmtty_rest$3 = sub_fmtty[1],
          /*<<camlinternalFormat.ml:1213:6>>*/ match$1 =
           type_ignored_format_substituti(sub_fmtty_rest$3, fmt, fmtty_rest$1),
         fmt$2 = match$1[2],
         sub_fmtty_rest$4 = match$1[1];
         /*<<camlinternalFormat.ml:1214:4>>*/ return [0,
                [2, sub_fmtty_rest$4],
                fmt$2];
       }
       break;
      case 3:
       if(typeof fmtty !== "number" && 3 === fmtty[0]){
         /*<<camlinternalFormat.ml:1217:6>>*/ var
         fmtty_rest$2 = fmtty[1],
         sub_fmtty_rest$5 = sub_fmtty[1],
          /*<<camlinternalFormat.ml:1217:6>>*/ match$2 =
           type_ignored_format_substituti(sub_fmtty_rest$5, fmt, fmtty_rest$2),
         fmt$3 = match$2[2],
         sub_fmtty_rest$6 = match$2[1];
         /*<<camlinternalFormat.ml:1218:4>>*/ return [0,
                [3, sub_fmtty_rest$6],
                fmt$3];
       }
       break;
      case 4:
       if(typeof fmtty !== "number" && 4 === fmtty[0]){
         /*<<camlinternalFormat.ml:1221:6>>*/ var
         fmtty_rest$3 = fmtty[1],
         sub_fmtty_rest$7 = sub_fmtty[1],
          /*<<camlinternalFormat.ml:1221:6>>*/ match$3 =
           type_ignored_format_substituti(sub_fmtty_rest$7, fmt, fmtty_rest$3),
         fmt$4 = match$3[2],
         sub_fmtty_rest$8 = match$3[1];
         /*<<camlinternalFormat.ml:1222:4>>*/ return [0,
                [4, sub_fmtty_rest$8],
                fmt$4];
       }
       break;
      case 5:
       if(typeof fmtty !== "number" && 5 === fmtty[0]){
         /*<<camlinternalFormat.ml:1225:6>>*/ var
         fmtty_rest$4 = fmtty[1],
         sub_fmtty_rest$9 = sub_fmtty[1],
          /*<<camlinternalFormat.ml:1225:6>>*/ match$4 =
           type_ignored_format_substituti(sub_fmtty_rest$9, fmt, fmtty_rest$4),
         fmt$5 = match$4[2],
         sub_fmtty_rest$10 = match$4[1];
         /*<<camlinternalFormat.ml:1226:4>>*/ return [0,
                [5, sub_fmtty_rest$10],
                fmt$5];
       }
       break;
      case 6:
       if(typeof fmtty !== "number" && 6 === fmtty[0]){
         /*<<camlinternalFormat.ml:1229:6>>*/ var
         fmtty_rest$5 = fmtty[1],
         sub_fmtty_rest$11 = sub_fmtty[1],
          /*<<camlinternalFormat.ml:1229:6>>*/ match$5 =
           type_ignored_format_substituti
            (sub_fmtty_rest$11, fmt, fmtty_rest$5),
         fmt$6 = match$5[2],
         sub_fmtty_rest$12 = match$5[1];
         /*<<camlinternalFormat.ml:1230:4>>*/ return [0,
                [6, sub_fmtty_rest$12],
                fmt$6];
       }
       break;
      case 7:
       if(typeof fmtty !== "number" && 7 === fmtty[0]){
         /*<<camlinternalFormat.ml:1233:6>>*/ var
         fmtty_rest$6 = fmtty[1],
         sub_fmtty_rest$13 = sub_fmtty[1],
          /*<<camlinternalFormat.ml:1233:6>>*/ match$6 =
           type_ignored_format_substituti
            (sub_fmtty_rest$13, fmt, fmtty_rest$6),
         fmt$7 = match$6[2],
         sub_fmtty_rest$14 = match$6[1];
         /*<<camlinternalFormat.ml:1234:4>>*/ return [0,
                [7, sub_fmtty_rest$14],
                fmt$7];
       }
       break;
      case 8:
       if(typeof fmtty !== "number" && 8 === fmtty[0]){
        var
         fmtty_rest$7 = fmtty[2],
         sub2_fmtty = fmtty[1],
         sub_fmtty_rest$15 = sub_fmtty[2],
         sub2_fmtty$0 = sub_fmtty[1];
         /*<<camlinternalFormat.ml:1254:7>>*/ if
         ( /*<<camlinternalFormat.ml:1254:7>>*/ caml_notequal
           ([0, sub2_fmtty$0], [0, sub2_fmtty]))
          /*<<camlinternalFormat.ml:1254:58>>*/ throw  /*<<camlinternalFormat.ml:1254:58>>*/ caml_maybe_attach_backtrace
                (Type_mismatch, 1);
         /*<<camlinternalFormat.ml:1256:6>>*/ var
          /*<<camlinternalFormat.ml:1256:6>>*/ match$7 =
           type_ignored_format_substituti
            (sub_fmtty_rest$15, fmt, fmtty_rest$7),
         fmt$8 = match$7[2],
         sub_fmtty_rest$16 = match$7[1];
         /*<<camlinternalFormat.ml:1257:4>>*/ return [0,
                [8, sub2_fmtty, sub_fmtty_rest$16],
                fmt$8];
       }
       break;
      case 9:
       if(typeof fmtty !== "number" && 9 === fmtty[0]){
         /*<<camlinternalFormat.ml:1261:43>>*/ var
         fmtty_rest$8 = fmtty[3],
         sub2_fmtty$1 = fmtty[2],
         sub1_fmtty = fmtty[1],
         sub_fmtty_rest$17 = sub_fmtty[3],
         sub2_fmtty$2 = sub_fmtty[2],
         sub1_fmtty$0 = sub_fmtty[1],
          /*<<camlinternalFormat.ml:1261:43>>*/ _B0_ =
           [0, erase_rel(sub1_fmtty)];
         /*<<camlinternalFormat.ml:1261:7>>*/ if
         ( /*<<camlinternalFormat.ml:1261:7>>*/ caml_notequal
           ([0, erase_rel(sub1_fmtty$0)], _B0_))
          /*<<camlinternalFormat.ml:1262:9>>*/ throw  /*<<camlinternalFormat.ml:1262:9>>*/ caml_maybe_attach_backtrace
                (Type_mismatch, 1);
         /*<<camlinternalFormat.ml:1263:43>>*/  /*<<camlinternalFormat.ml:1263:43>>*/ var
         _B1_ = [0, erase_rel(sub2_fmtty$1)];
         /*<<camlinternalFormat.ml:1263:7>>*/ if
         ( /*<<camlinternalFormat.ml:1263:7>>*/ caml_notequal
           ([0, erase_rel(sub2_fmtty$2)], _B1_))
          /*<<camlinternalFormat.ml:1264:9>>*/ throw  /*<<camlinternalFormat.ml:1264:9>>*/ caml_maybe_attach_backtrace
                (Type_mismatch, 1);
         /*<<camlinternalFormat.ml:1265:21>>*/ var
          /*<<camlinternalFormat.ml:1265:21>>*/ sub_fmtty$0 =
           trans(symm(sub1_fmtty), sub2_fmtty$1),
          /*<<camlinternalFormat.ml:1266:23>>*/ match$8 =
           fmtty_rel_det(sub_fmtty$0),
         f4 = match$8[4],
         f2 = match$8[2];
         /*<<camlinternalFormat.ml:1267:15>>*/ f2(0);
         /*<<camlinternalFormat.ml:1268:15>>*/ f4(0);
         /*<<camlinternalFormat.ml:1270:6>>*/ var
          /*<<camlinternalFormat.ml:1270:6>>*/ match$9 =
           type_ignored_format_substituti
            (erase_rel(sub_fmtty_rest$17), fmt, fmtty_rest$8),
         fmt$9 = match$9[2],
         sub_fmtty_rest$18 = match$9[1];
         /*<<camlinternalFormat.ml:1272:4>>*/ return [0,
                [9, sub1_fmtty, sub2_fmtty$1, symm(sub_fmtty_rest$18)],
                fmt$9];
       }
       break;
      case 10:
       if(typeof fmtty !== "number" && 10 === fmtty[0]){
         /*<<camlinternalFormat.ml:1237:6>>*/ var
         fmtty_rest$9 = fmtty[1],
         sub_fmtty_rest$19 = sub_fmtty[1],
          /*<<camlinternalFormat.ml:1237:6>>*/ match$10 =
           type_ignored_format_substituti
            (sub_fmtty_rest$19, fmt, fmtty_rest$9),
         fmt$10 = match$10[2],
         sub_fmtty_rest$20 = match$10[1];
         /*<<camlinternalFormat.ml:1238:4>>*/ return [0,
                [10, sub_fmtty_rest$20],
                fmt$10];
       }
       break;
      case 11:
       if(typeof fmtty !== "number" && 11 === fmtty[0]){
         /*<<camlinternalFormat.ml:1241:6>>*/ var
         fmtty_rest$10 = fmtty[1],
         sub_fmtty_rest$21 = sub_fmtty[1],
          /*<<camlinternalFormat.ml:1241:6>>*/ match$11 =
           type_ignored_format_substituti
            (sub_fmtty_rest$21, fmt, fmtty_rest$10),
         fmt$11 = match$11[2],
         sub_fmtty_rest$22 = match$11[1];
         /*<<camlinternalFormat.ml:1242:4>>*/ return [0,
                [11, sub_fmtty_rest$22],
                fmt$11];
       }
       break;
      case 13:
       if(typeof fmtty !== "number" && 13 === fmtty[0]){
         /*<<camlinternalFormat.ml:1245:6>>*/ var
         fmtty_rest$11 = fmtty[1],
         sub_fmtty_rest$23 = sub_fmtty[1],
          /*<<camlinternalFormat.ml:1245:6>>*/ match$12 =
           type_ignored_format_substituti
            (sub_fmtty_rest$23, fmt, fmtty_rest$11),
         fmt$12 = match$12[2],
         sub_fmtty_rest$24 = match$12[1];
         /*<<camlinternalFormat.ml:1246:4>>*/ return [0,
                [13, sub_fmtty_rest$24],
                fmt$12];
       }
       break;
      case 14:
       if(typeof fmtty !== "number" && 14 === fmtty[0]){
         /*<<camlinternalFormat.ml:1249:6>>*/ var
         fmtty_rest$12 = fmtty[1],
         sub_fmtty_rest$25 = sub_fmtty[1],
          /*<<camlinternalFormat.ml:1249:6>>*/ match$13 =
           type_ignored_format_substituti
            (sub_fmtty_rest$25, fmt, fmtty_rest$12),
         fmt$13 = match$13[2],
         sub_fmtty_rest$26 = match$13[1];
         /*<<camlinternalFormat.ml:1250:4>>*/ return [0,
                [14, sub_fmtty_rest$26],
                fmt$13];
       }
       break;
    }
     /*<<camlinternalFormat.ml:1277:9>>*/ throw  /*<<camlinternalFormat.ml:1277:9>>*/ caml_maybe_attach_backtrace
           (Type_mismatch, 1);
    /*<<camlinternalFormat.ml:1277:28>>*/ }
   function recast(fmt, fmtty){
     /*<<camlinternalFormat.ml:1312:2>>*/ return type_format
            (fmt, erase_rel(symm(fmtty)));
    /*<<camlinternalFormat.ml:1312:42>>*/ }
   function fix_padding(padty, width, str){
     /*<<camlinternalFormat.ml:1319:2>>*/ var
     len = caml_ml_string_length(str),
      /*<<camlinternalFormat.ml:1320:2>>*/ padty$0 = 0 <= width ? padty : 0,
      /*<<camlinternalFormat.ml:1321:4>>*/ width$0 = abs(width);
    if(width$0 <= len)  /*<<camlinternalFormat.ml:1332:23>>*/ return str;
     /*<<camlinternalFormat.ml:1333:14>>*/ var
     _BZ_ = 2 === padty$0 ? 48 : 32,
      /*<<camlinternalFormat.ml:1333:14>>*/ res = make(width$0, _BZ_);
     /*<<camlinternalFormat.ml:1334:4>>*/ switch(padty$0){
      case 0:
        /*<<camlinternalFormat.ml:1335:15>>*/ blit_string(str, 0, res, 0, len);
       break;
      case 1:
        /*<<camlinternalFormat.ml:1336:15>>*/ blit_string
        (str, 0, res, width$0 - len | 0, len);
       break;
      default:
       a:
       if(0 < len){
         /*<<camlinternalFormat.ml:1337:63>>*/ if
         (43
          !==  /*<<camlinternalFormat.ml:1337:29>>*/ caml_string_get(str, 0)
          &&
           45
           !==  /*<<camlinternalFormat.ml:1337:46>>*/ caml_string_get(str, 0)
           &&
            32
            !==  /*<<camlinternalFormat.ml:1337:63>>*/ caml_string_get(str, 0))
         break a;
         /*<<camlinternalFormat.ml:1338:6>>*/  /*<<camlinternalFormat.ml:1338:6>>*/ caml_bytes_set
         (res,
          0,
           /*<<camlinternalFormat.ml:1338:22>>*/ caml_string_get(str, 0));
         /*<<camlinternalFormat.ml:1339:6>>*/ blit_string
         (str, 1, res, (width$0 - len | 0) + 1 | 0, len - 1 | 0);
        break;
       }
       a:
       if
        (1 < len
         &&
          48
          ===  /*<<camlinternalFormat.ml:1340:28>>*/ caml_string_get(str, 0)){
         /*<<camlinternalFormat.ml:1340:63>>*/ if
         (120
          !==  /*<<camlinternalFormat.ml:1340:46>>*/ caml_string_get(str, 1)
          &&
           88
           !==  /*<<camlinternalFormat.ml:1340:63>>*/ caml_string_get(str, 1))
         break a;
         /*<<camlinternalFormat.ml:1341:6>>*/  /*<<camlinternalFormat.ml:1341:6>>*/ caml_bytes_set
         (res,
          1,
           /*<<camlinternalFormat.ml:1341:22>>*/ caml_string_get(str, 1));
         /*<<camlinternalFormat.ml:1342:6>>*/ blit_string
         (str, 2, res, (width$0 - len | 0) + 2 | 0, len - 2 | 0);
        break;
       }
        /*<<camlinternalFormat.ml:1344:6>>*/ blit_string
        (str, 0, res, width$0 - len | 0, len);
    }
     /*<<camlinternalFormat.ml:1346:4>>*/ return unsafe_to_string(res);
    /*<<camlinternalFormat.ml:1346:30>>*/ }
   function fix_int_precision(prec, str){
     /*<<camlinternalFormat.ml:1350:2>>*/ var
      /*<<camlinternalFormat.ml:1350:13>>*/ prec$0 = abs(prec),
      /*<<camlinternalFormat.ml:1351:2>>*/ len =
        /*<<camlinternalFormat.ml:1351:2>>*/ caml_ml_string_length(str),
      /*<<camlinternalFormat.ml:1352:8>>*/ c =
        /*<<camlinternalFormat.ml:1352:8>>*/ caml_string_get(str, 0);
    a:
    {
     b:
     {
      if(58 > c){
       if(32 !== c){
        if(43 > c) break a;
        switch(c - 43 | 0){
          case 5:
           c:
           if(len < (prec$0 + 2 | 0) && 1 < len){
             /*<<camlinternalFormat.ml:1358:60>>*/ if
             (120
              !==
                /*<<camlinternalFormat.ml:1358:43>>*/ caml_string_get(str, 1)
              &&
               88
               !==
                 /*<<camlinternalFormat.ml:1358:60>>*/ caml_string_get(str, 1))
             break c;
             /*<<camlinternalFormat.ml:1359:14>>*/  /*<<camlinternalFormat.ml:1359:14>>*/ var
             res$1 = make(prec$0 + 2 | 0, 48);
             /*<<camlinternalFormat.ml:1360:4>>*/  /*<<camlinternalFormat.ml:1360:4>>*/ caml_bytes_set
             (res$1,
              1,
               /*<<camlinternalFormat.ml:1360:20>>*/ caml_string_get(str, 1));
             /*<<camlinternalFormat.ml:1361:4>>*/ blit_string
             (str, 2, res$1, (prec$0 - len | 0) + 4 | 0, len - 2 | 0);
             /*<<camlinternalFormat.ml:1361:4>>*/ return unsafe_to_string
                    (res$1);
           }
           break b;
          case 0:
          case 2: break;
          case 1:
          case 3:
          case 4:
           break a;
          default: break b;
        }
       }
       if(len >= (prec$0 + 1 | 0)) break a;
        /*<<camlinternalFormat.ml:1354:14>>*/  /*<<camlinternalFormat.ml:1354:14>>*/ var
        res$0 = make(prec$0 + 1 | 0, 48);
        /*<<camlinternalFormat.ml:1355:4>>*/  /*<<camlinternalFormat.ml:1355:4>>*/ caml_bytes_set
        (res$0, 0, c);
        /*<<camlinternalFormat.ml:1356:4>>*/ blit_string
        (str, 1, res$0, (prec$0 - len | 0) + 2 | 0, len - 1 | 0);
        /*<<camlinternalFormat.ml:1356:4>>*/ return unsafe_to_string(res$0);
      }
      if(71 <= c){if(5 < c - 97 >>> 0) break a;} else if(65 > c) break a;
     }
     if(len < prec$0){
       /*<<camlinternalFormat.ml:1364:14>>*/  /*<<camlinternalFormat.ml:1364:14>>*/ var
       res = make(prec$0, 48);
       /*<<camlinternalFormat.ml:1365:4>>*/ blit_string
       (str, 0, res, prec$0 - len | 0, len);
       /*<<camlinternalFormat.ml:1365:4>>*/ return unsafe_to_string(res);
     }
    }
     /*<<camlinternalFormat.ml:1368:4>>*/ return str;
    /*<<camlinternalFormat.ml:1368:7>>*/ }
   function string_to_caml_string(str){
     /*<<camlinternalFormat.ml:1372:2>>*/ var
      /*<<camlinternalFormat.ml:1372:12>>*/ str$0 = escaped$0(str),
      /*<<camlinternalFormat.ml:1373:2>>*/ l =
        /*<<camlinternalFormat.ml:1373:2>>*/ caml_ml_string_length(str$0),
      /*<<camlinternalFormat.ml:1374:12>>*/ res = make(l + 2 | 0, 34);
     /*<<camlinternalFormat.ml:1375:2>>*/  /*<<camlinternalFormat.ml:1375:2>>*/ caml_blit_string
     (str$0, 0, res, 1, l);
     /*<<camlinternalFormat.ml:1375:2>>*/ return unsafe_to_string(res);
    /*<<camlinternalFormat.ml:1376:28>>*/ }
   function format_of_iconv(param){
     /*<<camlinternalFormat.ml:1380:22>>*/ switch(param){
      case 1:
        /*<<camlinternalFormat.ml:1381:39>>*/ return _aW_;
      case 2:
        /*<<camlinternalFormat.ml:1381:57>>*/ return _aX_;
      case 4:
        /*<<camlinternalFormat.ml:1382:39>>*/ return _aZ_;
      case 5:
        /*<<camlinternalFormat.ml:1382:57>>*/ return _a0_;
      case 6:
        /*<<camlinternalFormat.ml:1383:13>>*/ return _a1_;
      case 7:
        /*<<camlinternalFormat.ml:1383:30>>*/ return _a2_;
      case 8:
        /*<<camlinternalFormat.ml:1384:13>>*/ return _a3_;
      case 9:
        /*<<camlinternalFormat.ml:1384:30>>*/ return _a4_;
      case 10:
        /*<<camlinternalFormat.ml:1385:13>>*/ return _a5_;
      case 11:
        /*<<camlinternalFormat.ml:1385:30>>*/ return _a6_;
      case 0:
      case 13:
        /*<<camlinternalFormat.ml:1381:22>>*/ return _aV_;
      case 3:
      case 14:
        /*<<camlinternalFormat.ml:1382:22>>*/ return _aY_;
      default:  /*<<camlinternalFormat.ml:1386:22>>*/ return _a7_;
    }
    /*<<camlinternalFormat.ml:1386:26>>*/ }
   function format_of_iconvL(param){
     /*<<camlinternalFormat.ml:1388:23>>*/ switch(param){
      case 1:
        /*<<camlinternalFormat.ml:1389:40>>*/ return _a9_;
      case 2:
        /*<<camlinternalFormat.ml:1389:59>>*/ return _a__;
      case 4:
        /*<<camlinternalFormat.ml:1390:40>>*/ return _ba_;
      case 5:
        /*<<camlinternalFormat.ml:1390:59>>*/ return _bb_;
      case 6:
        /*<<camlinternalFormat.ml:1391:13>>*/ return _bc_;
      case 7:
        /*<<camlinternalFormat.ml:1391:31>>*/ return _bd_;
      case 8:
        /*<<camlinternalFormat.ml:1392:13>>*/ return _be_;
      case 9:
        /*<<camlinternalFormat.ml:1392:31>>*/ return _bf_;
      case 10:
        /*<<camlinternalFormat.ml:1393:13>>*/ return _bg_;
      case 11:
        /*<<camlinternalFormat.ml:1393:31>>*/ return _bh_;
      case 0:
      case 13:
        /*<<camlinternalFormat.ml:1389:22>>*/ return _a8_;
      case 3:
      case 14:
        /*<<camlinternalFormat.ml:1390:22>>*/ return _a$_;
      default:  /*<<camlinternalFormat.ml:1394:22>>*/ return _bi_;
    }
    /*<<camlinternalFormat.ml:1394:27>>*/ }
   function format_of_iconvl(param){
     /*<<camlinternalFormat.ml:1396:23>>*/ switch(param){
      case 1:
        /*<<camlinternalFormat.ml:1397:40>>*/ return _bk_;
      case 2:
        /*<<camlinternalFormat.ml:1397:59>>*/ return _bl_;
      case 4:
        /*<<camlinternalFormat.ml:1398:40>>*/ return _bn_;
      case 5:
        /*<<camlinternalFormat.ml:1398:59>>*/ return _bo_;
      case 6:
        /*<<camlinternalFormat.ml:1399:13>>*/ return _bp_;
      case 7:
        /*<<camlinternalFormat.ml:1399:31>>*/ return _bq_;
      case 8:
        /*<<camlinternalFormat.ml:1400:13>>*/ return _br_;
      case 9:
        /*<<camlinternalFormat.ml:1400:31>>*/ return _bs_;
      case 10:
        /*<<camlinternalFormat.ml:1401:13>>*/ return _bt_;
      case 11:
        /*<<camlinternalFormat.ml:1401:31>>*/ return _bu_;
      case 0:
      case 13:
        /*<<camlinternalFormat.ml:1397:22>>*/ return _bj_;
      case 3:
      case 14:
        /*<<camlinternalFormat.ml:1398:22>>*/ return _bm_;
      default:  /*<<camlinternalFormat.ml:1402:22>>*/ return _bv_;
    }
    /*<<camlinternalFormat.ml:1402:27>>*/ }
   function format_of_iconvn(param){
     /*<<camlinternalFormat.ml:1404:23>>*/ switch(param){
      case 1:
        /*<<camlinternalFormat.ml:1405:40>>*/ return _bx_;
      case 2:
        /*<<camlinternalFormat.ml:1405:59>>*/ return _by_;
      case 4:
        /*<<camlinternalFormat.ml:1406:40>>*/ return _bA_;
      case 5:
        /*<<camlinternalFormat.ml:1406:59>>*/ return _bB_;
      case 6:
        /*<<camlinternalFormat.ml:1407:13>>*/ return _bC_;
      case 7:
        /*<<camlinternalFormat.ml:1407:31>>*/ return _bD_;
      case 8:
        /*<<camlinternalFormat.ml:1408:13>>*/ return _bE_;
      case 9:
        /*<<camlinternalFormat.ml:1408:31>>*/ return _bF_;
      case 10:
        /*<<camlinternalFormat.ml:1409:13>>*/ return _bG_;
      case 11:
        /*<<camlinternalFormat.ml:1409:31>>*/ return _bH_;
      case 0:
      case 13:
        /*<<camlinternalFormat.ml:1405:22>>*/ return _bw_;
      case 3:
      case 14:
        /*<<camlinternalFormat.ml:1406:22>>*/ return _bz_;
      default:  /*<<camlinternalFormat.ml:1410:22>>*/ return _bI_;
    }
    /*<<camlinternalFormat.ml:1410:27>>*/ }
   function format_of_fconv(fconv, prec){
     /*<<camlinternalFormat.ml:1414:4>>*/ var
      /*<<camlinternalFormat.ml:1414:15>>*/ prec$0 = abs(prec),
      /*<<camlinternalFormat.ml:1415:15>>*/ symb = char_of_fconv(_bJ_, fconv),
      /*<<camlinternalFormat.ml:1416:14>>*/ buf = buffer_create(16);
     /*<<camlinternalFormat.ml:1417:4>>*/ buffer_add_char(buf, 37);
     /*<<camlinternalFormat.ml:1418:4>>*/ bprint_fconv_flag(buf, fconv);
     /*<<camlinternalFormat.ml:1419:4>>*/ buffer_add_char(buf, 46);
     /*<<camlinternalFormat.ml:1420:4>>*/ buffer_add_string
     (buf, to_string(prec$0));
     /*<<camlinternalFormat.ml:1421:4>>*/ buffer_add_char(buf, symb);
     /*<<camlinternalFormat.ml:1421:4>>*/ return buffer_contents(buf);
    /*<<camlinternalFormat.ml:1422:23>>*/ }
   function transform_int_alt(iconv, s){
     /*<<camlinternalFormat.ml:1425:2>>*/ if(13 > iconv)
      /*<<camlinternalFormat.ml:1447:9>>*/ return s;
     /*<<camlinternalFormat.ml:1428:14>>*/ var
      /*<<camlinternalFormat.ml:1428:14>>*/ n = [0, 0],
     _BU_ = caml_ml_string_length(s) - 1 | 0,
      /*<<camlinternalFormat.ml:1428:14>>*/ _BT_ = 0;
    if(_BU_ >= 0){
     var i$0 = _BT_;
     for(;;){
      if(9 >= caml_string_unsafe_get(s, i$0) - 48 >>> 0) n[1]++;
       /*<<camlinternalFormat.ml:1429:6>>*/  /*<<camlinternalFormat.ml:1429:6>>*/ var
       _BY_ = i$0 + 1 | 0;
      if(_BU_ === i$0) break;
      var i$0 = _BY_;
     }
    }
     /*<<camlinternalFormat.ml:1436:14>>*/ var
     digits = n[1],
      /*<<camlinternalFormat.ml:1436:14>>*/ buf =
        /*<<camlinternalFormat.ml:1436:14>>*/ caml_create_bytes
        (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
      /*<<camlinternalFormat.ml:1437:14>>*/ pos = [0, 0];
    function put(c){
      /*<<camlinternalFormat.ml:1438:16>>*/  /*<<camlinternalFormat.ml:1438:16>>*/ caml_bytes_set
      (buf, pos[1], c);
     pos[1]++;
     return;
     /*<<camlinternalFormat.ml:1438:46>>*/ }
     /*<<camlinternalFormat.ml:1439:15>>*/ var
      /*<<camlinternalFormat.ml:1439:15>>*/ left =
       [0, ((digits - 1 | 0) % 3 | 0) + 1 | 0],
     _BW_ = caml_ml_string_length(s) - 1 | 0,
      /*<<camlinternalFormat.ml:1439:15>>*/ _BV_ = 0;
    if(_BW_ >= 0){
     var i = _BV_;
     for(;;){
      var c = caml_string_unsafe_get(s, i);
      if(9 < c - 48 >>> 0)
        /*<<camlinternalFormat.ml:1444:13>>*/ put(c);
      else{
       if(0 === left[1]){
         /*<<camlinternalFormat.ml:1443:29>>*/ put(95);
        left[1] = 3;
       }
       left[1] += -1;
        /*<<camlinternalFormat.ml:1443:61>>*/ put(c);
      }
       /*<<camlinternalFormat.ml:1440:4>>*/  /*<<camlinternalFormat.ml:1440:4>>*/ var
       _BX_ = i + 1 | 0;
      if(_BW_ === i) break;
      var i = _BX_;
     }
    }
     /*<<camlinternalFormat.ml:1446:4>>*/ return unsafe_to_string(buf);
    /*<<camlinternalFormat.ml:1447:10>>*/ }
   function convert_int(iconv, n){
     /*<<camlinternalFormat.ml:1451:2>>*/ return transform_int_alt
            (iconv,
              /*<<camlinternalFormat.ml:1451:26>>*/ caml_format_int
              (format_of_iconv(iconv), n));
    /*<<camlinternalFormat.ml:1451:64>>*/ }
   function convert_int32(iconv, n){
     /*<<camlinternalFormat.ml:1453:2>>*/ return transform_int_alt
            (iconv,
              /*<<camlinternalFormat.ml:1453:26>>*/ caml_format_int
              (format_of_iconvl(iconv), n));
    /*<<camlinternalFormat.ml:1453:67>>*/ }
   function convert_nativeint(iconv, n){
     /*<<camlinternalFormat.ml:1455:2>>*/ return transform_int_alt
            (iconv,
              /*<<camlinternalFormat.ml:1455:26>>*/ caml_format_int
              (format_of_iconvn(iconv), n));
    /*<<camlinternalFormat.ml:1455:71>>*/ }
   function convert_int64(iconv, n){
     /*<<camlinternalFormat.ml:1457:2>>*/ return transform_int_alt
            (iconv,
              /*<<camlinternalFormat.ml:1457:26>>*/ caml_int64_format
              (format_of_iconvL(iconv), n));
    /*<<camlinternalFormat.ml:1457:67>>*/ }
   function convert_float(fconv, prec, x){
    function hex(param){
      /*<<camlinternalFormat.ml:1463:4>>*/ switch(fconv[1]){
       case 0:
        var sign = 45; break;
       case 1:
        var sign = 43; break;
       default: var sign = 32;
     }
      /*<<camlinternalFormat.ml:1468:4>>*/ return  /*<<camlinternalFormat.ml:1468:4>>*/ caml_hexstring_of_float
             (x, prec, sign);
     /*<<camlinternalFormat.ml:1468:34>>*/ }
     /*<<camlinternalFormat.ml:1469:2>>*/ function add_dot_if_needed(str){
      /*<<camlinternalFormat.ml:1470:4>>*/ var
      len = caml_ml_string_length(str);
     function is_valid(i){
       /*<<camlinternalFormat.ml:1472:6>>*/ var i$0 = i;
       /*<<camlinternalFormat.ml:1472:6>>*/ for(;;){
       if(i$0 === len)  /*<<camlinternalFormat.ml:1472:22>>*/ return 0;
        /*<<camlinternalFormat.ml:1473:14>>*/  /*<<camlinternalFormat.ml:1473:14>>*/ var
        _BS_ =
           /*<<camlinternalFormat.ml:1473:14>>*/ caml_string_get(str, i$0)
          - 46
          | 0;
       a:
       {
        if(23 < _BS_ >>> 0){
         if(55 === _BS_) break a;
        }
        else if(21 < _BS_ - 1 >>> 0) break a;
         /*<<camlinternalFormat.ml:1475:15>>*/ var
          /*<<camlinternalFormat.ml:1475:15>>*/ i$1 = i$0 + 1 | 0,
         i$0 = i$1;
        continue;
       }
        /*<<camlinternalFormat.ml:1474:29>>*/ return 1;
      }
      /*<<camlinternalFormat.ml:1475:31>>*/ }
      /*<<camlinternalFormat.ml:1476:7>>*/ return is_valid(0)
             ? str
             : symbol(str, _bK_);
     /*<<camlinternalFormat.ml:1476:41>>*/ }
     /*<<camlinternalFormat.ml:1477:2>>*/ function caml_special_val(str){
      /*<<camlinternalFormat.ml:1477:29>>*/  /*<<camlinternalFormat.ml:1477:35>>*/ var
      match =  /*<<camlinternalFormat.ml:1477:35>>*/ caml_classify_float(x);
     return 3 === match ? x < 0. ? _bL_ : _bM_ : 4 <= match ? _bN_ : str;
     /*<<camlinternalFormat.ml:1480:21>>*/ }
    switch(fconv[2]){
      case 5:
        /*<<camlinternalFormat.ml:1486:14>>*/  /*<<camlinternalFormat.ml:1486:14>>*/ var
        str =
           /*<<camlinternalFormat.ml:1486:14>>*/ caml_format_float
           (format_of_fconv(fconv, prec), x);
        /*<<camlinternalFormat.ml:1487:21>>*/ return caml_special_val
               (add_dot_if_needed(str));
      case 6:
        /*<<camlinternalFormat.ml:1482:15>>*/ return hex(0);
      case 7:
        /*<<camlinternalFormat.ml:1483:38>>*/ return uppercase_ascii$1(hex(0));
      case 8:
        /*<<camlinternalFormat.ml:1484:33>>*/ return caml_special_val(hex(0));
      default:
        /*<<camlinternalFormat.ml:1489:4>>*/ return  /*<<camlinternalFormat.ml:1489:4>>*/ caml_format_float
               (format_of_fconv(fconv, prec), x);
    }
    /*<<camlinternalFormat.ml:1489:47>>*/ }
   function format_caml_char(c){
     /*<<camlinternalFormat.ml:1493:2>>*/ var
      /*<<camlinternalFormat.ml:1493:12>>*/ str = escaped(c),
      /*<<camlinternalFormat.ml:1494:2>>*/ l =
        /*<<camlinternalFormat.ml:1494:2>>*/ caml_ml_string_length(str),
      /*<<camlinternalFormat.ml:1495:12>>*/ res = make(l + 2 | 0, 39);
     /*<<camlinternalFormat.ml:1496:2>>*/  /*<<camlinternalFormat.ml:1496:2>>*/ caml_blit_string
     (str, 0, res, 1, l);
     /*<<camlinternalFormat.ml:1496:2>>*/ return unsafe_to_string(res);
    /*<<camlinternalFormat.ml:1497:28>>*/ }
   function string_of_fmtty(fmtty){
     /*<<camlinternalFormat.ml:1501:2>>*/  /*<<camlinternalFormat.ml:1501:12>>*/ var
     buf = buffer_create(16);
     /*<<camlinternalFormat.ml:1502:2>>*/ bprint_fmtty(buf, fmtty);
     /*<<camlinternalFormat.ml:1502:2>>*/ return buffer_contents(buf);
    /*<<camlinternalFormat.ml:1503:21>>*/ }
   function make_printf$0(counter, k, acc, fmt){
     /*<<camlinternalFormat.ml:1518:17>>*/ var
     k$0 = k,
     acc$0 = acc,
     fmt$0 = fmt;
     /*<<camlinternalFormat.ml:1518:17>>*/ for(;;){
     if(typeof fmt$0 === "number")
       /*<<camlinternalFormat.ml:1605:4>>*/ return  /*<<camlinternalFormat.ml:1605:4>>*/ caml_call1
              (k$0, acc$0);
     switch(fmt$0[0]){
       case 0:
        var rest = fmt$0[1];
         /*<<camlinternalFormat.ml:1520:4>>*/ return function(c){
          /*<<camlinternalFormat.ml:1521:6>>*/  /*<<camlinternalFormat.ml:1521:20>>*/ var
          new_acc = [5, acc$0, c];
          /*<<camlinternalFormat.ml:1522:6>>*/ return make_printf
                 (k$0, new_acc, rest); /*<<camlinternalFormat.ml:1522:32>>*/ };
       case 1:
        var rest$0 = fmt$0[1];
         /*<<camlinternalFormat.ml:1524:4>>*/ return function(c){
          /*<<camlinternalFormat.ml:1525:6>>*/  /*<<camlinternalFormat.ml:1525:20>>*/ var
          new_acc = [4, acc$0, format_caml_char(c)];
          /*<<camlinternalFormat.ml:1526:6>>*/ return make_printf
                 (k$0, new_acc, rest$0); /*<<camlinternalFormat.ml:1526:32>>*/ };
       case 2:
        var rest$1 = fmt$0[2], pad = fmt$0[1];
         /*<<camlinternalFormat.ml:1528:32>>*/ return make_padding
                (k$0,
                 acc$0,
                 rest$1,
                 pad,
                 function(str){
                   /*<<camlinternalFormat.ml:1528:44>>*/ return str;
                  /*<<camlinternalFormat.ml:1528:47>>*/ });
       case 3:
        var rest$2 = fmt$0[2], pad$0 = fmt$0[1];
         /*<<camlinternalFormat.ml:1530:4>>*/ return make_padding
                (k$0, acc$0, rest$2, pad$0, string_to_caml_string);
       case 4:
        var
         rest$3 = fmt$0[4],
         prec = fmt$0[3],
         pad$1 = fmt$0[2],
         iconv = fmt$0[1];
         /*<<camlinternalFormat.ml:1532:4>>*/ return make_int_padding_precision
                (k$0, acc$0, rest$3, pad$1, prec, convert_int, iconv);
       case 5:
        var
         rest$4 = fmt$0[4],
         prec$0 = fmt$0[3],
         pad$2 = fmt$0[2],
         iconv$0 = fmt$0[1];
         /*<<camlinternalFormat.ml:1534:4>>*/ return make_int_padding_precision
                (k$0, acc$0, rest$4, pad$2, prec$0, convert_int32, iconv$0);
       case 6:
        var
         rest$5 = fmt$0[4],
         prec$1 = fmt$0[3],
         pad$3 = fmt$0[2],
         iconv$1 = fmt$0[1];
         /*<<camlinternalFormat.ml:1536:4>>*/ return make_int_padding_precision
                (k$0,
                 acc$0,
                 rest$5,
                 pad$3,
                 prec$1,
                 convert_nativeint,
                 iconv$1);
       case 7:
        var
         rest$6 = fmt$0[4],
         prec$2 = fmt$0[3],
         pad$4 = fmt$0[2],
         iconv$2 = fmt$0[1];
         /*<<camlinternalFormat.ml:1538:4>>*/ return make_int_padding_precision
                (k$0, acc$0, rest$6, pad$4, prec$2, convert_int64, iconv$2);
       case 8:
        var
         rest$7 = fmt$0[4],
         prec$3 = fmt$0[3],
         pad$5 = fmt$0[2],
         fconv = fmt$0[1];
         /*<<camlinternalFormat.ml:1540:4>>*/ return make_float_padding_precision
                (k$0, acc$0, rest$7, pad$5, prec$3, fconv);
       case 9:
        var rest$8 = fmt$0[2], pad$6 = fmt$0[1];
         /*<<camlinternalFormat.ml:1542:4>>*/ return make_padding
                (k$0, acc$0, rest$8, pad$6, string_of_bool);
       case 10:
         /*<<camlinternalFormat.ml:1560:18>>*/ var
         rest$9 = fmt$0[1],
          /*<<camlinternalFormat.ml:1560:18>>*/ acc$1 = [7, acc$0],
         acc$0 = acc$1,
         fmt$0 = rest$9;
        break;
       case 11:
         /*<<camlinternalFormat.ml:1563:18>>*/ var
         rest$10 = fmt$0[2],
         str = fmt$0[1],
          /*<<camlinternalFormat.ml:1563:18>>*/ acc$2 = [2, acc$0, str],
         acc$0 = acc$2,
         fmt$0 = rest$10;
        break;
       case 12:
         /*<<camlinternalFormat.ml:1565:18>>*/ var
         rest$11 = fmt$0[2],
         chr = fmt$0[1],
          /*<<camlinternalFormat.ml:1565:18>>*/ acc$3 = [3, acc$0, chr],
         acc$0 = acc$3,
         fmt$0 = rest$11;
        break;
       case 13:
         /*<<camlinternalFormat.ml:1568:13>>*/ var
         rest$12 = fmt$0[3],
         sub_fmtty = fmt$0[2],
          /*<<camlinternalFormat.ml:1568:13>>*/ ty =
           string_of_fmtty(sub_fmtty);
         /*<<camlinternalFormat.ml:1569:4>>*/ return function(str){
          /*<<camlinternalFormat.ml:1570:6>>*/ return make_printf
                 (k$0, [4, acc$0, ty], rest$12); /*<<camlinternalFormat.ml:1571:52>>*/ };
       case 14:
        var rest$13 = fmt$0[3], fmtty = fmt$0[2];
         /*<<camlinternalFormat.ml:1573:4>>*/ return function(param){
          /*<<camlinternalFormat.ml:1573:4>>*/ var fmt = param[1];
          /*<<camlinternalFormat.ml:1574:6>>*/ return make_printf
                 (k$0, acc$0, concat_fmt(recast(fmt, fmtty), rest$13)); /*<<camlinternalFormat.ml:1574:42>>*/ };
       case 15:
        var rest$14 = fmt$0[1];
         /*<<camlinternalFormat.ml:1544:4>>*/ return function(f, x){
          /*<<camlinternalFormat.ml:1544:15>>*/ return make_printf
                 (k$0,
                  [6,
                   acc$0,
                   function(o){
                     /*<<camlinternalFormat.ml:1544:55>>*/ return caml_call2
                            (f, o, x);
                    /*<<camlinternalFormat.ml:1544:60>>*/ }],
                  rest$14); /*<<camlinternalFormat.ml:1544:67>>*/ };
       case 16:
        var rest$15 = fmt$0[1];
         /*<<camlinternalFormat.ml:1546:4>>*/ return function(f){
          /*<<camlinternalFormat.ml:1546:13>>*/ return make_printf
                 (k$0, [6, acc$0, f], rest$15); /*<<camlinternalFormat.ml:1546:52>>*/ };
       case 17:
         /*<<camlinternalFormat.ml:1594:18>>*/ var
         rest$16 = fmt$0[2],
         fmting_lit = fmt$0[1],
          /*<<camlinternalFormat.ml:1594:18>>*/ acc$4 = [0, acc$0, fmting_lit],
         acc$0 = acc$4,
         fmt$0 = rest$16;
        break;
       case 18:
        var _BQ_ = fmt$0[1];
        if(0 === _BQ_[0]){
         var rest$17 = fmt$0[2], fmt$1 = _BQ_[1][1];
         let acc = acc$0, k = k$0, rest = rest$17;
         var
          k$1 =
            function(kacc){
              /*<<camlinternalFormat.ml:1597:6>>*/ return make_printf
                     (k, [1, acc, [0, kacc]], rest);
             /*<<camlinternalFormat.ml:1597:70>>*/ },
          k$0 = k$1,
          acc$0 = 0,
          fmt$0 = fmt$1;
        }
        else{
         var rest$18 = fmt$0[2], fmt$2 = _BQ_[1][1];
         let acc = acc$0, k = k$0, rest = rest$18;
         var
          k$2 =
            function(kacc){
              /*<<camlinternalFormat.ml:1601:6>>*/ return make_printf
                     (k, [1, acc, [1, kacc]], rest);
             /*<<camlinternalFormat.ml:1601:70>>*/ },
          k$0 = k$2,
          acc$0 = 0,
          fmt$0 = fmt$2;
        }
        break;
       case 19:
         /*<<camlinternalFormat.ml:1558:4>>*/ throw  /*<<camlinternalFormat.ml:1558:4>>*/ caml_maybe_attach_backtrace
               ([0, Assert_failure, _bO_], 1);
       case 20:
         /*<<camlinternalFormat.ml:1577:18>>*/ var
         rest$19 = fmt$0[3],
          /*<<camlinternalFormat.ml:1577:18>>*/ new_acc = [8, acc$0, _bP_];
         /*<<camlinternalFormat.ml:1578:4>>*/ return function(param){
          /*<<camlinternalFormat.ml:1578:13>>*/ return make_printf
                 (k$0, new_acc, rest$19); /*<<camlinternalFormat.ml:1578:39>>*/ };
       case 21:
        var rest$20 = fmt$0[2];
         /*<<camlinternalFormat.ml:1583:4>>*/ return function(n){
          /*<<camlinternalFormat.ml:1584:6>>*/  /*<<camlinternalFormat.ml:1584:20>>*/ var
          new_acc =
            [4,
             acc$0,
              /*<<camlinternalFormat.ml:1584:42>>*/ caml_format_int(cst_u, n)];
          /*<<camlinternalFormat.ml:1585:6>>*/ return make_printf
                 (k$0, new_acc, rest$20); /*<<camlinternalFormat.ml:1585:32>>*/ };
       case 22:
        var rest$21 = fmt$0[1];
         /*<<camlinternalFormat.ml:1587:4>>*/ return function(c){
          /*<<camlinternalFormat.ml:1588:6>>*/  /*<<camlinternalFormat.ml:1588:20>>*/ var
          new_acc = [5, acc$0, c];
          /*<<camlinternalFormat.ml:1589:6>>*/ return make_printf
                 (k$0, new_acc, rest$21); /*<<camlinternalFormat.ml:1589:32>>*/ };
       case 23:
        var rest$22 = fmt$0[2], ign = fmt$0[1];
         /*<<camlinternalFormat.ml:1591:4>>*/ if(counter >= 50)
          /*<<camlinternalFormat.ml:1591:4>>*/ return  /*<<camlinternalFormat.ml:1591:4>>*/ caml_trampoline_return
                 (make_ignored_param, [0, k$0, acc$0, ign, rest$22]);
        var counter$1 = counter + 1 | 0;
         /*<<camlinternalFormat.ml:1591:4>>*/ return make_ignored_param
                (counter$1, k$0, acc$0, ign, rest$22);
       default:
         /*<<camlinternalFormat.ml:1548:33>>*/ var
         rest$23 = fmt$0[3],
         f = fmt$0[2],
         arity = fmt$0[1],
          /*<<camlinternalFormat.ml:1548:33>>*/ _BR_ =
            /*<<camlinternalFormat.ml:1548:33>>*/ caml_call1(f, 0);
         /*<<camlinternalFormat.ml:1548:33>>*/ if(counter >= 50)
          /*<<camlinternalFormat.ml:1548:33>>*/ return  /*<<camlinternalFormat.ml:1548:33>>*/ caml_trampoline_return
                 (make_custom$0, [0, k$0, acc$0, rest$23, arity, _BR_]);
        var counter$0 = counter + 1 | 0;
         /*<<camlinternalFormat.ml:1548:33>>*/ return make_custom$0
                (counter$0, k$0, acc$0, rest$23, arity, _BR_);
     }
    }
    /*<<camlinternalFormat.ml:1605:9>>*/ }
   function make_printf(k, acc, fmt){
     /*<<?>>*/ return caml_trampoline(make_printf$0(0, k, acc, fmt));
   }
   function make_ignored_param(counter, k, acc, ign, fmt){
     /*<<camlinternalFormat.ml:1613:21>>*/ if(typeof ign === "number")
     switch(ign){
       case 0:
         /*<<camlinternalFormat.ml:1614:39>>*/ if(counter >= 50)
          /*<<camlinternalFormat.ml:1614:39>>*/ return  /*<<camlinternalFormat.ml:1614:39>>*/ caml_trampoline_return
                 (make_invalid_arg, [0, k, acc, fmt]);
        var counter$0 = counter + 1 | 0;
         /*<<camlinternalFormat.ml:1614:39>>*/ return make_invalid_arg
                (counter$0, k, acc, fmt);
       case 1:
         /*<<camlinternalFormat.ml:1615:39>>*/ if(counter >= 50)
          /*<<camlinternalFormat.ml:1615:39>>*/ return  /*<<camlinternalFormat.ml:1615:39>>*/ caml_trampoline_return
                 (make_invalid_arg, [0, k, acc, fmt]);
        var counter$1 = counter + 1 | 0;
         /*<<camlinternalFormat.ml:1615:39>>*/ return make_invalid_arg
                (counter$1, k, acc, fmt);
       case 2:
         /*<<camlinternalFormat.ml:1626:39>>*/ throw  /*<<camlinternalFormat.ml:1626:39>>*/ caml_maybe_attach_backtrace
               ([0, Assert_failure, _bQ_], 1);
       default:
         /*<<camlinternalFormat.ml:1629:39>>*/ if(counter >= 50)
          /*<<camlinternalFormat.ml:1629:39>>*/ return  /*<<camlinternalFormat.ml:1629:39>>*/ caml_trampoline_return
                 (make_invalid_arg, [0, k, acc, fmt]);
        var counter$2 = counter + 1 | 0;
         /*<<camlinternalFormat.ml:1629:39>>*/ return make_invalid_arg
                (counter$2, k, acc, fmt);
     }
    switch(ign[0]){
      case 0:
        /*<<camlinternalFormat.ml:1616:39>>*/ if(counter >= 50)
         /*<<camlinternalFormat.ml:1616:39>>*/ return  /*<<camlinternalFormat.ml:1616:39>>*/ caml_trampoline_return
                (make_invalid_arg, [0, k, acc, fmt]);
       var counter$3 = counter + 1 | 0;
        /*<<camlinternalFormat.ml:1616:39>>*/ return make_invalid_arg
               (counter$3, k, acc, fmt);
      case 1:
        /*<<camlinternalFormat.ml:1617:39>>*/ if(counter >= 50)
         /*<<camlinternalFormat.ml:1617:39>>*/ return  /*<<camlinternalFormat.ml:1617:39>>*/ caml_trampoline_return
                (make_invalid_arg, [0, k, acc, fmt]);
       var counter$4 = counter + 1 | 0;
        /*<<camlinternalFormat.ml:1617:39>>*/ return make_invalid_arg
               (counter$4, k, acc, fmt);
      case 2:
        /*<<camlinternalFormat.ml:1618:39>>*/ if(counter >= 50)
         /*<<camlinternalFormat.ml:1618:39>>*/ return  /*<<camlinternalFormat.ml:1618:39>>*/ caml_trampoline_return
                (make_invalid_arg, [0, k, acc, fmt]);
       var counter$5 = counter + 1 | 0;
        /*<<camlinternalFormat.ml:1618:39>>*/ return make_invalid_arg
               (counter$5, k, acc, fmt);
      case 3:
        /*<<camlinternalFormat.ml:1619:39>>*/ if(counter >= 50)
         /*<<camlinternalFormat.ml:1619:39>>*/ return  /*<<camlinternalFormat.ml:1619:39>>*/ caml_trampoline_return
                (make_invalid_arg, [0, k, acc, fmt]);
       var counter$6 = counter + 1 | 0;
        /*<<camlinternalFormat.ml:1619:39>>*/ return make_invalid_arg
               (counter$6, k, acc, fmt);
      case 4:
        /*<<camlinternalFormat.ml:1620:39>>*/ if(counter >= 50)
         /*<<camlinternalFormat.ml:1620:39>>*/ return  /*<<camlinternalFormat.ml:1620:39>>*/ caml_trampoline_return
                (make_invalid_arg, [0, k, acc, fmt]);
       var counter$7 = counter + 1 | 0;
        /*<<camlinternalFormat.ml:1620:39>>*/ return make_invalid_arg
               (counter$7, k, acc, fmt);
      case 5:
        /*<<camlinternalFormat.ml:1621:39>>*/ if(counter >= 50)
         /*<<camlinternalFormat.ml:1621:39>>*/ return  /*<<camlinternalFormat.ml:1621:39>>*/ caml_trampoline_return
                (make_invalid_arg, [0, k, acc, fmt]);
       var counter$8 = counter + 1 | 0;
        /*<<camlinternalFormat.ml:1621:39>>*/ return make_invalid_arg
               (counter$8, k, acc, fmt);
      case 6:
        /*<<camlinternalFormat.ml:1622:39>>*/ if(counter >= 50)
         /*<<camlinternalFormat.ml:1622:39>>*/ return  /*<<camlinternalFormat.ml:1622:39>>*/ caml_trampoline_return
                (make_invalid_arg, [0, k, acc, fmt]);
       var counter$9 = counter + 1 | 0;
        /*<<camlinternalFormat.ml:1622:39>>*/ return make_invalid_arg
               (counter$9, k, acc, fmt);
      case 7:
        /*<<camlinternalFormat.ml:1623:39>>*/ if(counter >= 50)
         /*<<camlinternalFormat.ml:1623:39>>*/ return  /*<<camlinternalFormat.ml:1623:39>>*/ caml_trampoline_return
                (make_invalid_arg, [0, k, acc, fmt]);
       var counter$10 = counter + 1 | 0;
        /*<<camlinternalFormat.ml:1623:39>>*/ return make_invalid_arg
               (counter$10, k, acc, fmt);
      case 8:
        /*<<camlinternalFormat.ml:1624:39>>*/ if(counter >= 50)
         /*<<camlinternalFormat.ml:1624:39>>*/ return  /*<<camlinternalFormat.ml:1624:39>>*/ caml_trampoline_return
                (make_invalid_arg, [0, k, acc, fmt]);
       var counter$11 = counter + 1 | 0;
        /*<<camlinternalFormat.ml:1624:39>>*/ return make_invalid_arg
               (counter$11, k, acc, fmt);
      case 9:
       var fmtty = ign[2];
        /*<<camlinternalFormat.ml:1625:39>>*/ if(counter >= 50)
         /*<<camlinternalFormat.ml:1625:39>>*/ return  /*<<camlinternalFormat.ml:1625:39>>*/ caml_trampoline_return
                (make_from_fmtty$0, [0, k, acc, fmtty, fmt]);
       var counter$14 = counter + 1 | 0;
        /*<<camlinternalFormat.ml:1625:39>>*/ return make_from_fmtty$0
               (counter$14, k, acc, fmtty, fmt);
      case 10:
        /*<<camlinternalFormat.ml:1627:39>>*/ if(counter >= 50)
         /*<<camlinternalFormat.ml:1627:39>>*/ return  /*<<camlinternalFormat.ml:1627:39>>*/ caml_trampoline_return
                (make_invalid_arg, [0, k, acc, fmt]);
       var counter$12 = counter + 1 | 0;
        /*<<camlinternalFormat.ml:1627:39>>*/ return make_invalid_arg
               (counter$12, k, acc, fmt);
      default:
        /*<<camlinternalFormat.ml:1628:39>>*/ if(counter >= 50)
         /*<<camlinternalFormat.ml:1628:39>>*/ return  /*<<camlinternalFormat.ml:1628:39>>*/ caml_trampoline_return
                (make_invalid_arg, [0, k, acc, fmt]);
       var counter$13 = counter + 1 | 0;
        /*<<camlinternalFormat.ml:1628:39>>*/ return make_invalid_arg
               (counter$13, k, acc, fmt);
    }
    /*<<camlinternalFormat.ml:1629:65>>*/ }
   function make_from_fmtty$0(counter, k, acc, fmtty, fmt){
     /*<<camlinternalFormat.ml:1637:23>>*/ if(typeof fmtty !== "number")
     switch(fmtty[0]){
       case 0:
        var rest = fmtty[1];
         /*<<camlinternalFormat.ml:1638:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1638:40>>*/ return make_from_fmtty
                 (k, acc, rest, fmt); /*<<camlinternalFormat.ml:1638:70>>*/ };
       case 1:
        var rest$0 = fmtty[1];
         /*<<camlinternalFormat.ml:1639:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1639:40>>*/ return make_from_fmtty
                 (k, acc, rest$0, fmt); /*<<camlinternalFormat.ml:1639:70>>*/ };
       case 2:
        var rest$1 = fmtty[1];
         /*<<camlinternalFormat.ml:1640:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1640:40>>*/ return make_from_fmtty
                 (k, acc, rest$1, fmt); /*<<camlinternalFormat.ml:1640:70>>*/ };
       case 3:
        var rest$2 = fmtty[1];
         /*<<camlinternalFormat.ml:1641:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1641:40>>*/ return make_from_fmtty
                 (k, acc, rest$2, fmt); /*<<camlinternalFormat.ml:1641:70>>*/ };
       case 4:
        var rest$3 = fmtty[1];
         /*<<camlinternalFormat.ml:1642:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1642:40>>*/ return make_from_fmtty
                 (k, acc, rest$3, fmt); /*<<camlinternalFormat.ml:1642:70>>*/ };
       case 5:
        var rest$4 = fmtty[1];
         /*<<camlinternalFormat.ml:1643:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1643:40>>*/ return make_from_fmtty
                 (k, acc, rest$4, fmt); /*<<camlinternalFormat.ml:1643:70>>*/ };
       case 6:
        var rest$5 = fmtty[1];
         /*<<camlinternalFormat.ml:1644:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1644:40>>*/ return make_from_fmtty
                 (k, acc, rest$5, fmt); /*<<camlinternalFormat.ml:1644:70>>*/ };
       case 7:
        var rest$6 = fmtty[1];
         /*<<camlinternalFormat.ml:1645:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1645:40>>*/ return make_from_fmtty
                 (k, acc, rest$6, fmt); /*<<camlinternalFormat.ml:1645:70>>*/ };
       case 8:
        var rest$7 = fmtty[2];
         /*<<camlinternalFormat.ml:1651:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1651:40>>*/ return make_from_fmtty
                 (k, acc, rest$7, fmt); /*<<camlinternalFormat.ml:1651:70>>*/ };
       case 9:
         /*<<camlinternalFormat.ml:1654:13>>*/ var
         rest$8 = fmtty[3],
         ty2 = fmtty[2],
         ty1 = fmtty[1],
          /*<<camlinternalFormat.ml:1654:13>>*/ ty = trans(symm(ty1), ty2);
         /*<<camlinternalFormat.ml:1655:4>>*/ return function(param){
          /*<<camlinternalFormat.ml:1655:13>>*/ return make_from_fmtty
                 (k, acc, concat_fmtty(ty, rest$8), fmt); /*<<camlinternalFormat.ml:1655:61>>*/ };
       case 10:
        var rest$9 = fmtty[1];
         /*<<camlinternalFormat.ml:1646:31>>*/ return function(param, _BP_){
          /*<<camlinternalFormat.ml:1646:42>>*/ return make_from_fmtty
                 (k, acc, rest$9, fmt); /*<<camlinternalFormat.ml:1646:72>>*/ };
       case 11:
        var rest$10 = fmtty[1];
         /*<<camlinternalFormat.ml:1647:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1647:40>>*/ return make_from_fmtty
                 (k, acc, rest$10, fmt); /*<<camlinternalFormat.ml:1647:70>>*/ };
       case 12:
        var rest$11 = fmtty[1];
         /*<<camlinternalFormat.ml:1648:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1648:40>>*/ return make_from_fmtty
                 (k, acc, rest$11, fmt); /*<<camlinternalFormat.ml:1648:70>>*/ };
       case 13:
         /*<<camlinternalFormat.ml:1649:31>>*/ throw  /*<<camlinternalFormat.ml:1649:31>>*/ caml_maybe_attach_backtrace
               ([0, Assert_failure, _bR_], 1);
       default:
         /*<<camlinternalFormat.ml:1650:31>>*/ throw  /*<<camlinternalFormat.ml:1650:31>>*/ caml_maybe_attach_backtrace
               ([0, Assert_failure, _bS_], 1);
     }
     /*<<camlinternalFormat.ml:1652:31>>*/ if(counter >= 50)
      /*<<camlinternalFormat.ml:1652:31>>*/ return  /*<<camlinternalFormat.ml:1652:31>>*/ caml_trampoline_return
             (make_invalid_arg, [0, k, acc, fmt]);
    var counter$0 = counter + 1 | 0;
     /*<<camlinternalFormat.ml:1652:31>>*/ return make_invalid_arg
            (counter$0, k, acc, fmt);
    /*<<camlinternalFormat.ml:1655:61>>*/ }
   function make_from_fmtty(k, acc, fmtty, fmt){
     /*<<?>>*/ return caml_trampoline
            (make_from_fmtty$0(0, k, acc, fmtty, fmt));
   }
   function make_invalid_arg(counter, k, acc, fmt){
     /*<<camlinternalFormat.ml:1663:2>>*/  /*<<camlinternalFormat.ml:1663:16>>*/ var
     _BO_ = [8, acc, _bT_];
     /*<<camlinternalFormat.ml:1663:2>>*/ if(counter >= 50)
      /*<<camlinternalFormat.ml:1663:2>>*/ return  /*<<camlinternalFormat.ml:1663:2>>*/ caml_trampoline_return
             (make_printf$0, [0, k, _BO_, fmt]);
    var counter$0 = counter + 1 | 0;
     /*<<camlinternalFormat.ml:1663:2>>*/ return make_printf$0
            (counter$0, k, _BO_, fmt);
    /*<<camlinternalFormat.ml:1663:72>>*/ }
   function make_padding(k, acc, fmt, pad, trans){
     /*<<camlinternalFormat.ml:1670:29>>*/ if(typeof pad === "number")
      /*<<camlinternalFormat.ml:1672:4>>*/ return function(x){
       /*<<camlinternalFormat.ml:1673:6>>*/  /*<<camlinternalFormat.ml:1673:20>>*/ var
       new_acc =
         [4, acc,  /*<<camlinternalFormat.ml:1673:42>>*/ caml_call1(trans, x)];
       /*<<camlinternalFormat.ml:1674:6>>*/ return make_printf
              (k, new_acc, fmt); /*<<camlinternalFormat.ml:1674:31>>*/ };
    if(0 === pad[0]){
     var width = pad[2], padty = pad[1];
      /*<<camlinternalFormat.ml:1676:4>>*/ return function(x){
       /*<<camlinternalFormat.ml:1677:6>>*/  /*<<camlinternalFormat.ml:1677:20>>*/ var
       new_acc =
         [4,
          acc,
          fix_padding
           (padty,
            width,
             /*<<camlinternalFormat.ml:1677:66>>*/ caml_call1(trans, x))];
       /*<<camlinternalFormat.ml:1678:6>>*/ return make_printf
              (k, new_acc, fmt); /*<<camlinternalFormat.ml:1678:31>>*/ };
    }
    var padty$0 = pad[1];
     /*<<camlinternalFormat.ml:1680:4>>*/ return function(w, x){
      /*<<camlinternalFormat.ml:1681:6>>*/  /*<<camlinternalFormat.ml:1681:20>>*/ var
      new_acc =
        [4,
         acc,
         fix_padding
          (padty$0,
           w,
            /*<<camlinternalFormat.ml:1681:62>>*/ caml_call1(trans, x))];
      /*<<camlinternalFormat.ml:1682:6>>*/ return make_printf(k, new_acc, fmt); /*<<camlinternalFormat.ml:1682:31>>*/ };
    /*<<camlinternalFormat.ml:1682:31>>*/ }
   function make_int_padding_precision(k, acc, fmt, pad, prec, trans, iconv){
     /*<<camlinternalFormat.ml:1691:40>>*/ if(typeof pad === "number"){
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                 /*<<camlinternalFormat.ml:1702:6>>*/  /*<<camlinternalFormat.ml:1702:16>>*/ var
                 str =
                   fix_int_precision
                    (p,
                      /*<<camlinternalFormat.ml:1702:36>>*/ caml_call2
                      (trans, iconv, x));
                 /*<<camlinternalFormat.ml:1703:6>>*/ return make_printf
                        (k, [4, acc, str], fmt);
                /*<<camlinternalFormat.ml:1703:52>>*/ }
              : function
               (x){
                 /*<<camlinternalFormat.ml:1694:6>>*/  /*<<camlinternalFormat.ml:1694:16>>*/ var
                 str =
                    /*<<camlinternalFormat.ml:1694:16>>*/ caml_call2
                    (trans, iconv, x);
                 /*<<camlinternalFormat.ml:1695:6>>*/ return make_printf
                        (k, [4, acc, str], fmt);
                /*<<camlinternalFormat.ml:1695:52>>*/ };
     var p = prec[1];
      /*<<camlinternalFormat.ml:1697:4>>*/ return function(x){
       /*<<camlinternalFormat.ml:1698:6>>*/  /*<<camlinternalFormat.ml:1698:16>>*/ var
       str =
         fix_int_precision
          (p,
            /*<<camlinternalFormat.ml:1698:36>>*/ caml_call2(trans, iconv, x));
       /*<<camlinternalFormat.ml:1699:6>>*/ return make_printf
              (k, [4, acc, str], fmt); /*<<camlinternalFormat.ml:1699:52>>*/ };
    }
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                 /*<<camlinternalFormat.ml:1714:6>>*/  /*<<camlinternalFormat.ml:1714:16>>*/ var
                 str =
                   fix_padding
                    (padty,
                     w,
                     fix_int_precision
                      (p,
                        /*<<camlinternalFormat.ml:1714:57>>*/ caml_call2
                        (trans, iconv, x)));
                 /*<<camlinternalFormat.ml:1715:6>>*/ return make_printf
                        (k, [4, acc, str], fmt);
                /*<<camlinternalFormat.ml:1715:52>>*/ }
              : function
               (x){
                 /*<<camlinternalFormat.ml:1706:6>>*/  /*<<camlinternalFormat.ml:1706:16>>*/ var
                 str =
                   fix_padding
                    (padty,
                     w,
                      /*<<camlinternalFormat.ml:1706:36>>*/ caml_call2
                      (trans, iconv, x));
                 /*<<camlinternalFormat.ml:1707:6>>*/ return make_printf
                        (k, [4, acc, str], fmt);
                /*<<camlinternalFormat.ml:1707:52>>*/ };
     var p$0 = prec[1];
      /*<<camlinternalFormat.ml:1709:4>>*/ return function(x){
       /*<<camlinternalFormat.ml:1710:6>>*/  /*<<camlinternalFormat.ml:1710:16>>*/ var
       str =
         fix_padding
          (padty,
           w,
           fix_int_precision
            (p$0,
              /*<<camlinternalFormat.ml:1710:57>>*/ caml_call2
              (trans, iconv, x)));
       /*<<camlinternalFormat.ml:1711:6>>*/ return make_printf
              (k, [4, acc, str], fmt); /*<<camlinternalFormat.ml:1711:52>>*/ };
    }
    var padty$0 = pad[1];
    if(typeof prec === "number")
     return prec
             ? function
              (w, p, x){
                /*<<camlinternalFormat.ml:1726:6>>*/  /*<<camlinternalFormat.ml:1726:16>>*/ var
                str =
                  fix_padding
                   (padty$0,
                    w,
                    fix_int_precision
                     (p,
                       /*<<camlinternalFormat.ml:1726:57>>*/ caml_call2
                       (trans, iconv, x)));
                /*<<camlinternalFormat.ml:1727:6>>*/ return make_printf
                       (k, [4, acc, str], fmt);
               /*<<camlinternalFormat.ml:1727:52>>*/ }
             : function
              (w, x){
                /*<<camlinternalFormat.ml:1718:6>>*/  /*<<camlinternalFormat.ml:1718:16>>*/ var
                str =
                  fix_padding
                   (padty$0,
                    w,
                     /*<<camlinternalFormat.ml:1718:36>>*/ caml_call2
                     (trans, iconv, x));
                /*<<camlinternalFormat.ml:1719:6>>*/ return make_printf
                       (k, [4, acc, str], fmt);
               /*<<camlinternalFormat.ml:1719:52>>*/ };
    var p$1 = prec[1];
     /*<<camlinternalFormat.ml:1721:4>>*/ return function(w, x){
      /*<<camlinternalFormat.ml:1722:6>>*/  /*<<camlinternalFormat.ml:1722:16>>*/ var
      str =
        fix_padding
         (padty$0,
          w,
          fix_int_precision
           (p$1,
             /*<<camlinternalFormat.ml:1722:57>>*/ caml_call2(trans, iconv, x)));
      /*<<camlinternalFormat.ml:1723:6>>*/ return make_printf
             (k, [4, acc, str], fmt); /*<<camlinternalFormat.ml:1723:52>>*/ };
    /*<<camlinternalFormat.ml:1727:52>>*/ }
   function make_float_padding_precision(k, acc, fmt, pad, prec, fconv){
     /*<<camlinternalFormat.ml:1735:34>>*/ if(typeof pad === "number"){
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                 /*<<camlinternalFormat.ml:1746:6>>*/  /*<<camlinternalFormat.ml:1746:16>>*/ var
                 str = convert_float(fconv, p, x);
                 /*<<camlinternalFormat.ml:1747:6>>*/ return make_printf
                        (k, [4, acc, str], fmt);
                /*<<camlinternalFormat.ml:1747:52>>*/ }
              : function
               (x){
                 /*<<camlinternalFormat.ml:1738:6>>*/  /*<<camlinternalFormat.ml:1738:16>>*/ var
                 str = convert_float(fconv, default_float_precision(fconv), x);
                 /*<<camlinternalFormat.ml:1739:6>>*/ return make_printf
                        (k, [4, acc, str], fmt);
                /*<<camlinternalFormat.ml:1739:52>>*/ };
     var p = prec[1];
      /*<<camlinternalFormat.ml:1741:4>>*/ return function(x){
       /*<<camlinternalFormat.ml:1742:6>>*/  /*<<camlinternalFormat.ml:1742:16>>*/ var
       str = convert_float(fconv, p, x);
       /*<<camlinternalFormat.ml:1743:6>>*/ return make_printf
              (k, [4, acc, str], fmt); /*<<camlinternalFormat.ml:1743:52>>*/ };
    }
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                 /*<<camlinternalFormat.ml:1759:6>>*/  /*<<camlinternalFormat.ml:1759:16>>*/ var
                 str = fix_padding(padty, w, convert_float(fconv, p, x));
                 /*<<camlinternalFormat.ml:1760:6>>*/ return make_printf
                        (k, [4, acc, str], fmt);
                /*<<camlinternalFormat.ml:1760:52>>*/ }
              : function
               (x){
                 /*<<camlinternalFormat.ml:1750:6>>*/ var
                  /*<<camlinternalFormat.ml:1750:16>>*/ str =
                   convert_float(fconv, default_float_precision(fconv), x),
                  /*<<camlinternalFormat.ml:1751:17>>*/ str$0 =
                   fix_padding(padty, w, str);
                 /*<<camlinternalFormat.ml:1752:6>>*/ return make_printf
                        (k, [4, acc, str$0], fmt);
                /*<<camlinternalFormat.ml:1752:53>>*/ };
     var p$0 = prec[1];
      /*<<camlinternalFormat.ml:1754:4>>*/ return function(x){
       /*<<camlinternalFormat.ml:1755:6>>*/  /*<<camlinternalFormat.ml:1755:16>>*/ var
       str = fix_padding(padty, w, convert_float(fconv, p$0, x));
       /*<<camlinternalFormat.ml:1756:6>>*/ return make_printf
              (k, [4, acc, str], fmt); /*<<camlinternalFormat.ml:1756:52>>*/ };
    }
    var padty$0 = pad[1];
    if(typeof prec === "number")
     return prec
             ? function
              (w, p, x){
                /*<<camlinternalFormat.ml:1772:6>>*/  /*<<camlinternalFormat.ml:1772:16>>*/ var
                str = fix_padding(padty$0, w, convert_float(fconv, p, x));
                /*<<camlinternalFormat.ml:1773:6>>*/ return make_printf
                       (k, [4, acc, str], fmt);
               /*<<camlinternalFormat.ml:1773:52>>*/ }
             : function
              (w, x){
                /*<<camlinternalFormat.ml:1763:6>>*/ var
                 /*<<camlinternalFormat.ml:1763:16>>*/ str =
                  convert_float(fconv, default_float_precision(fconv), x),
                 /*<<camlinternalFormat.ml:1764:17>>*/ str$0 =
                  fix_padding(padty$0, w, str);
                /*<<camlinternalFormat.ml:1765:6>>*/ return make_printf
                       (k, [4, acc, str$0], fmt);
               /*<<camlinternalFormat.ml:1765:53>>*/ };
    var p$1 = prec[1];
     /*<<camlinternalFormat.ml:1767:4>>*/ return function(w, x){
      /*<<camlinternalFormat.ml:1768:6>>*/  /*<<camlinternalFormat.ml:1768:16>>*/ var
      str = fix_padding(padty$0, w, convert_float(fconv, p$1, x));
      /*<<camlinternalFormat.ml:1769:6>>*/ return make_printf
             (k, [4, acc, str], fmt); /*<<camlinternalFormat.ml:1769:52>>*/ };
    /*<<camlinternalFormat.ml:1773:52>>*/ }
   function make_custom$0(counter, k, acc, rest, arity, f){
     /*<<camlinternalFormat.ml:1778:28>>*/ if(arity){
     var arity$0 = arity[1];
      /*<<camlinternalFormat.ml:1781:4>>*/ return function(x){
       /*<<camlinternalFormat.ml:1782:6>>*/ return make_custom
              (k,
               acc,
               rest,
               arity$0,
                /*<<camlinternalFormat.ml:1782:35>>*/ caml_call1(f, x)); /*<<camlinternalFormat.ml:1782:40>>*/ };
    }
     /*<<camlinternalFormat.ml:1779:33>>*/  /*<<camlinternalFormat.ml:1779:33>>*/ var
     _BN_ = [4, acc, f];
     /*<<camlinternalFormat.ml:1779:19>>*/ if(counter >= 50)
      /*<<camlinternalFormat.ml:1779:19>>*/ return  /*<<camlinternalFormat.ml:1779:19>>*/ caml_trampoline_return
             (make_printf$0, [0, k, _BN_, rest]);
    var counter$0 = counter + 1 | 0;
     /*<<camlinternalFormat.ml:1779:19>>*/ return make_printf$0
            (counter$0, k, _BN_, rest);
    /*<<camlinternalFormat.ml:1782:40>>*/ }
   function make_custom(k, acc, rest, arity, f){
     /*<<?>>*/ return caml_trampoline
            (make_custom$0(0, k, acc, rest, arity, f));
   }
   function output_acc(o, acc){
     /*<<camlinternalFormat.ml:1897:27>>*/ var acc$0 = acc;
     /*<<camlinternalFormat.ml:1897:27>>*/ for(;;){
     if(typeof acc$0 === "number")
       /*<<camlinternalFormat.ml:1912:32>>*/ return;
     switch(acc$0[0]){
       case 0:
         /*<<camlinternalFormat.ml:1899:12>>*/ var
         fmting_lit = acc$0[2],
         p = acc$0[1],
          /*<<camlinternalFormat.ml:1899:12>>*/ s =
           string_of_formatting_lit(fmting_lit);
         /*<<camlinternalFormat.ml:1900:4>>*/ output_acc(o, p);
         /*<<camlinternalFormat.ml:1900:4>>*/ return output_string(o, s);
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
         var acc$1 = match[1];
          /*<<camlinternalFormat.ml:1902:4>>*/ output_acc(o, p$0);
          /*<<camlinternalFormat.ml:1902:20>>*/ output_string(o, _bU_);
         var acc$0 = acc$1;
        }
        else{
         var acc$2 = match[1];
          /*<<camlinternalFormat.ml:1904:4>>*/ output_acc(o, p$0);
          /*<<camlinternalFormat.ml:1904:20>>*/ output_string(o, _bV_);
         var acc$0 = acc$2;
        }
        break;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
         /*<<camlinternalFormat.ml:1909:32>>*/ output_acc(o, p$3);
         /*<<camlinternalFormat.ml:1909:32>>*/ return  /*<<camlinternalFormat.ml:1909:32>>*/ caml_call1
                (f, o);
       case 7:
        var p$4 = acc$0[1];
         /*<<camlinternalFormat.ml:1910:32>>*/ output_acc(o, p$4);
         /*<<camlinternalFormat.ml:1910:32>>*/ return flush(o);
       case 8:
        var msg = acc$0[2], p$5 = acc$0[1];
         /*<<camlinternalFormat.ml:1911:32>>*/ output_acc(o, p$5);
         /*<<camlinternalFormat.ml:1911:32>>*/ return invalid_arg(msg);
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
         /*<<camlinternalFormat.ml:1906:32>>*/ output_acc(o, p$1);
         /*<<camlinternalFormat.ml:1906:32>>*/ return output_string(o, s$0);
       default:
        var c = acc$0[2], p$2 = acc$0[1];
         /*<<camlinternalFormat.ml:1908:32>>*/ output_acc(o, p$2);
         /*<<camlinternalFormat.ml:1908:32>>*/ return output_char(o, c);
     }
    }
    /*<<camlinternalFormat.ml:1912:34>>*/ }
   function strput_acc(b, acc){
     /*<<camlinternalFormat.ml:1938:27>>*/ var acc$0 = acc;
     /*<<camlinternalFormat.ml:1938:27>>*/ for(;;){
     if(typeof acc$0 === "number")
       /*<<camlinternalFormat.ml:1953:32>>*/ return;
     switch(acc$0[0]){
       case 0:
         /*<<camlinternalFormat.ml:1940:12>>*/ var
         fmting_lit = acc$0[2],
         p = acc$0[1],
          /*<<camlinternalFormat.ml:1940:12>>*/ s =
           string_of_formatting_lit(fmting_lit);
         /*<<camlinternalFormat.ml:1941:4>>*/ strput_acc(b, p);
         /*<<camlinternalFormat.ml:1941:4>>*/ return add_string(b, s);
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
         var acc$1 = match[1];
          /*<<camlinternalFormat.ml:1943:4>>*/ strput_acc(b, p$0);
          /*<<camlinternalFormat.ml:1943:20>>*/ add_string(b, _bW_);
         var acc$0 = acc$1;
        }
        else{
         var acc$2 = match[1];
          /*<<camlinternalFormat.ml:1945:4>>*/ strput_acc(b, p$0);
          /*<<camlinternalFormat.ml:1945:20>>*/ add_string(b, _bX_);
         var acc$0 = acc$2;
        }
        break;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
         /*<<camlinternalFormat.ml:1950:32>>*/ strput_acc(b, p$3);
         /*<<camlinternalFormat.ml:1950:68>>*/ return add_string
                (b,  /*<<camlinternalFormat.ml:1950:68>>*/ caml_call1(f, 0));
       case 7:
        var acc$3 = acc$0[1], acc$0 = acc$3; break;
       case 8:
        var msg = acc$0[2], p$4 = acc$0[1];
         /*<<camlinternalFormat.ml:1952:32>>*/ strput_acc(b, p$4);
         /*<<camlinternalFormat.ml:1952:32>>*/ return invalid_arg(msg);
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
         /*<<camlinternalFormat.ml:1947:32>>*/ strput_acc(b, p$1);
         /*<<camlinternalFormat.ml:1947:32>>*/ return add_string(b, s$0);
       default:
        var c = acc$0[2], p$2 = acc$0[1];
         /*<<camlinternalFormat.ml:1949:32>>*/ strput_acc(b, p$2);
         /*<<camlinternalFormat.ml:1949:32>>*/ return add_char(b, c);
     }
    }
    /*<<camlinternalFormat.ml:1953:34>>*/ }
   function failwith_message(param){
     /*<<camlinternalFormat.ml:1960:12>>*/ var
     fmt = param[1],
      /*<<camlinternalFormat.ml:1960:12>>*/ buf = create$1(256);
    function k(acc){
      /*<<camlinternalFormat.ml:1961:14>>*/ strput_acc(buf, acc);
      /*<<camlinternalFormat.ml:1961:43>>*/ return failwith(contents(buf));
     /*<<camlinternalFormat.ml:1961:64>>*/ }
     /*<<camlinternalFormat.ml:1962:2>>*/ return make_printf(k, 0, fmt);
   }
   function open_box_of_string(str){
     /*<<camlinternalFormat.ml:1969:2>>*/ if
     ( /*<<camlinternalFormat.ml:1969:5>>*/ caml_string_equal(str, cst$4))
      /*<<camlinternalFormat.ml:1969:19>>*/ return _bY_;
    var len = caml_ml_string_length(str);
    function invalid_box(param){
      /*<<camlinternalFormat.ml:1971:25>>*/ return  /*<<camlinternalFormat.ml:1971:4>>*/ caml_call1
             (failwith_message(_bZ_), str);
     /*<<camlinternalFormat.ml:1971:74>>*/ }
    function parse_spaces(i){
      /*<<camlinternalFormat.ml:1973:6>>*/ var i$0 = i;
      /*<<camlinternalFormat.ml:1973:6>>*/ for(;;){
      if(i$0 === len)  /*<<camlinternalFormat.ml:1973:22>>*/ return i$0;
       /*<<camlinternalFormat.ml:1974:14>>*/  /*<<camlinternalFormat.ml:1974:14>>*/ var
       match =
          /*<<camlinternalFormat.ml:1974:14>>*/ caml_string_get(str, i$0);
      if(9 !== match && 32 !== match)
        /*<<camlinternalFormat.ml:1976:15>>*/ return i$0;
       /*<<camlinternalFormat.ml:1975:24>>*/ var
        /*<<camlinternalFormat.ml:1975:24>>*/ i$1 = i$0 + 1 | 0,
       i$0 = i$1;
     }
     /*<<camlinternalFormat.ml:1976:16>>*/ }
    function parse_lword(i, j){
      /*<<camlinternalFormat.ml:1978:6>>*/ var j$0 = j;
      /*<<camlinternalFormat.ml:1978:6>>*/ for(;;){
      if(j$0 === len)  /*<<camlinternalFormat.ml:1978:22>>*/ return j$0;
      if
       (25
        <
          /*<<camlinternalFormat.ml:1979:14>>*/ caml_string_get(str, j$0) - 97
         >>> 0)
        /*<<camlinternalFormat.ml:1981:15>>*/ return j$0;
       /*<<camlinternalFormat.ml:1980:24>>*/ var
        /*<<camlinternalFormat.ml:1980:24>>*/ j$1 = j$0 + 1 | 0,
       j$0 = j$1;
     }
     /*<<camlinternalFormat.ml:1981:16>>*/ }
    function parse_int(i, j){
      /*<<camlinternalFormat.ml:1983:6>>*/ var j$0 = j;
      /*<<camlinternalFormat.ml:1983:6>>*/ for(;;){
      if(j$0 === len)  /*<<camlinternalFormat.ml:1983:22>>*/ return j$0;
       /*<<camlinternalFormat.ml:1984:14>>*/  /*<<camlinternalFormat.ml:1984:14>>*/ var
       match =
          /*<<camlinternalFormat.ml:1984:14>>*/ caml_string_get(str, j$0);
      a:
      {
       if(48 <= match){if(58 > match) break a;} else if(45 === match) break a;
        /*<<camlinternalFormat.ml:1986:15>>*/ return j$0;
      }
       /*<<camlinternalFormat.ml:1985:30>>*/ var
        /*<<camlinternalFormat.ml:1985:30>>*/ j$1 = j$0 + 1 | 0,
       j$0 = j$1;
     }
     /*<<camlinternalFormat.ml:1986:16>>*/ }
     /*<<camlinternalFormat.ml:1987:17>>*/ var
      /*<<camlinternalFormat.ml:1987:17>>*/ wstart = parse_spaces(0),
      /*<<camlinternalFormat.ml:1988:15>>*/ wend = parse_lword(wstart, wstart),
      /*<<camlinternalFormat.ml:1989:19>>*/ box_name =
       sub$0(str, wstart, wend - wstart | 0),
      /*<<camlinternalFormat.ml:1990:17>>*/ nstart = parse_spaces(wend),
      /*<<camlinternalFormat.ml:1991:15>>*/ nend = parse_int(nstart, nstart);
    if(nstart === nend)
     var indent = 0;
    else
      /*<<camlinternalFormat.ml:1994:8>>*/ try{
       /*<<camlinternalFormat.ml:1994:12>>*/ var
        /*<<camlinternalFormat.ml:1994:12>>*/ _BL_ =
          /*<<camlinternalFormat.ml:1994:12>>*/ caml_int_of_string
          (sub$0(str, nstart, nend - nstart | 0)),
       indent = _BL_;
     }
     catch(_BM_){
      var _BJ_ = caml_wrap_exception(_BM_);
      if(_BJ_[1] !== Failure) throw caml_maybe_attach_backtrace(_BJ_, 0);
       /*<<camlinternalFormat.ml:1995:26>>*/ var
        /*<<camlinternalFormat.ml:1995:26>>*/ _BK_ = invalid_box(0),
       indent = _BK_;
     }
     /*<<camlinternalFormat.ml:1996:18>>*/  /*<<camlinternalFormat.ml:1996:18>>*/ var
     exp_end = parse_spaces(nend);
    if(exp_end !== len)  /*<<camlinternalFormat.ml:1997:27>>*/ invalid_box(0);
    a:
    {
     if
      (caml_string_notequal(box_name, cst$4)
       && caml_string_notequal(box_name, "b")){
      if(! caml_string_notequal(box_name, "h")){var box_type = 0; break a;}
      if(! caml_string_notequal(box_name, "hov")){var box_type = 3; break a;}
      if(! caml_string_notequal(box_name, "hv")){var box_type = 2; break a;}
      if(caml_string_notequal(box_name, "v")){
       var box_type = invalid_box(0);
       break a;
      }
      var box_type = 1;
      break a;
     }
     var box_type = 4;
    }
     /*<<camlinternalFormat.ml:2005:4>>*/ return [0, indent, box_type];
    /*<<camlinternalFormat.ml:2005:22>>*/ }
   function kfprintf(k, o, param){
    var fmt = param[1];
     /*<<printf.ml:20:2>>*/ return make_printf
            (function(acc){
               /*<<printf.ml:20:26>>*/ output_acc(o, acc);
              return caml_call1(k, o);
              /*<<printf.ml:20:47>>*/ },
             0,
             fmt);
   }
   function fprintf(oc, fmt){
     /*<<printf.ml:27:21>>*/ return kfprintf
            (function(_BI_){ /*<<?>>*/ return 0;}, oc, fmt);
    /*<<printf.ml:27:43>>*/ }
   function eprintf(fmt){
     /*<<printf.ml:32:18>>*/ return fprintf(stderr, fmt);
    /*<<printf.ml:32:36>>*/ }
   function ksprintf(k, param){
    var fmt = param[1];
     /*<<printf.ml:35:2>>*/ function k$0(acc){
      /*<<printf.ml:36:4>>*/  /*<<printf.ml:36:14>>*/ var buf = create$1(64);
      /*<<printf.ml:37:4>>*/ strput_acc(buf, acc);
      /*<<printf.ml:38:6>>*/ return  /*<<printf.ml:38:6>>*/ caml_call1
             (k, contents(buf));
     /*<<printf.ml:38:27>>*/ }
     /*<<printf.ml:39:2>>*/ return make_printf(k$0, 0, fmt);
   }
   function sprintf(fmt){
     /*<<printf.ml:41:18>>*/ return ksprintf
            (function(s){
               /*<<printf.ml:41:37>>*/ return s;
              /*<<printf.ml:41:38>>*/ },
             fmt);
    /*<<printf.ml:41:43>>*/ }
    /*<<printexc.ml:20:15>>*/  /*<<printexc.ml:20:15>>*/ var
    printers = _m_(0);
   function field(x, i){
     /*<<printexc.ml:25:2>>*/  /*<<printexc.ml:25:10>>*/ var f = x[1 + i];
     /*<<printexc.ml:26:9>>*/ return is_block(f)
            ?  /*<<printexc.ml:28:10>>*/ caml_obj_tag
               (f)
              === 252
              ?  /*<<printexc.ml:29:4>>*/ caml_call1(sprintf(_b0_), f)
              :  /*<<printexc.ml:30:10>>*/ caml_obj_tag
                 (f)
                === 253
                ? string_of_float(f)
                : _b1_
            :  /*<<printexc.ml:27:4>>*/ caml_call1(sprintf(_b2_), f);
    /*<<printexc.ml:33:7>>*/ }
   function other_fields(x, i){
     /*<<printexc.ml:36:2>>*/ if(x.length - 1 <= i)
      /*<<printexc.ml:36:26>>*/ return _b3_;
     /*<<printexc.ml:37:36>>*/ var
      /*<<printexc.ml:37:36>>*/ _BG_ = other_fields(x, i + 1 | 0),
      /*<<printexc.ml:37:24>>*/ _BH_ = field(x, i);
     /*<<printexc.ml:37:36>>*/ return  /*<<printexc.ml:37:36>>*/ caml_call2
            (sprintf(_b4_), _BH_, _BG_);
    /*<<printexc.ml:37:58>>*/ }
   function fields(x){
     /*<<printexc.ml:40:2>>*/ var match = x.length - 1;
    if(2 >= match >>> 0)
     switch(match){
       case 0:
         /*<<printexc.ml:41:9>>*/ return _b6_;
       case 1:
         /*<<printexc.ml:42:9>>*/ return _b7_;
       default:
         /*<<printexc.ml:43:24>>*/  /*<<printexc.ml:43:24>>*/ var
         _BF_ = field(x, 1);
         /*<<printexc.ml:43:24>>*/ return  /*<<printexc.ml:43:24>>*/ caml_call1
                (sprintf(_b8_), _BF_);
     }
     /*<<printexc.ml:44:38>>*/ var
      /*<<printexc.ml:44:38>>*/ _BD_ = other_fields(x, 2),
      /*<<printexc.ml:44:26>>*/ _BE_ = field(x, 1);
     /*<<printexc.ml:44:38>>*/ return  /*<<printexc.ml:44:38>>*/ caml_call2
            (sprintf(_b5_), _BE_, _BD_);
    /*<<printexc.ml:44:56>>*/ }
   function use_printers(x){
    function conv(param){
      /*<<printexc.ml:47:17>>*/ var param$0 = param;
      /*<<printexc.ml:47:17>>*/ for(;;){
      if(! param$0)  /*<<printexc.ml:52:12>>*/ return 0;
      var tl = param$0[2], hd = param$0[1];
      a:
      {
        /*<<printexc.ml:49:8>>*/ try{
         /*<<printexc.ml:49:15>>*/  /*<<printexc.ml:49:15>>*/ var
         val =  /*<<printexc.ml:49:15>>*/ caml_call1(hd, x);
       }
       catch(_BC_){break a;}
       if(val){var s = val[1];  /*<<printexc.ml:51:21>>*/ return [0, s];}
      }
      var param$0 = tl;
     }
     /*<<printexc.ml:52:16>>*/ }
     /*<<printexc.ml:53:7>>*/ return conv(_l_(printers));
    /*<<printexc.ml:53:28>>*/ }
   function destruct_ext_constructor(x){
     /*<<printexc.ml:56:2>>*/ if
     (0 !==  /*<<printexc.ml:56:5>>*/ caml_obj_tag(x))
      /*<<printexc.ml:57:4>>*/ return [0, x[1], 0];
     /*<<printexc.ml:60:17>>*/  /*<<printexc.ml:60:17>>*/ var
     constructor = x[1][1];
     /*<<printexc.ml:61:4>>*/ return [0, constructor, [0, fields(x)]];
    /*<<printexc.ml:61:34>>*/ }
   function string_of_extension_constructo(t){
     /*<<printexc.ml:64:2>>*/ var
      /*<<printexc.ml:64:32>>*/ match = destruct_ext_constructor(t),
     fields_opt = match[2],
     constructor = match[1];
     /*<<printexc.ml:65:2>>*/ if(! fields_opt)
      /*<<printexc.ml:66:12>>*/ return constructor;
    var f = fields_opt[1];
     /*<<printexc.ml:67:14>>*/ return symbol(constructor, f);
    /*<<printexc.ml:67:29>>*/ }
   function to_string_default(x){
     /*<<printexc.ml:69:24>>*/ if(x === Out_of_memory)
      /*<<printexc.ml:70:21>>*/ return _b9_;
    if(x === Stack_overflow)  /*<<printexc.ml:71:22>>*/ return _b__;
    if(x[1] === Match_failure){
     var match = x[2], char$0 = match[3], line = match[2], file = match[1];
      /*<<printexc.ml:73:6>>*/ return  /*<<printexc.ml:73:6>>*/ caml_call5
             (sprintf(locfmt), file, line, char$0, char$0 + 5 | 0, _b$_);
    }
    if(x[1] === Assert_failure){
     var
      match$0 = x[2],
      char$1 = match$0[3],
      line$0 = match$0[2],
      file$0 = match$0[1];
      /*<<printexc.ml:75:6>>*/ return  /*<<printexc.ml:75:6>>*/ caml_call5
             (sprintf(locfmt), file$0, line$0, char$1, char$1 + 6 | 0, _ca_);
    }
    if(x[1] !== Undefined_recursive_module)
      /*<<printexc.ml:79:6>>*/ return string_of_extension_constructo(x);
    var
     match$1 = x[2],
     char$2 = match$1[3],
     line$1 = match$1[2],
     file$1 = match$1[1];
     /*<<printexc.ml:77:6>>*/ return  /*<<printexc.ml:77:6>>*/ caml_call5
            (sprintf(locfmt), file$1, line$1, char$2, char$2 + 6 | 0, _cb_);
    /*<<printexc.ml:79:50>>*/ }
   function to_string$4(e){
     /*<<printexc.ml:82:2>>*/  /*<<printexc.ml:82:8>>*/ var
     match = use_printers(e);
    if(! match)  /*<<printexc.ml:84:12>>*/ return to_string_default(e);
    var s = match[1];
     /*<<printexc.ml:83:14>>*/ return s;
    /*<<printexc.ml:84:31>>*/ }
   function convert_raw_backtrace(bt){
     /*<<printexc.ml:141:2>>*/  /*<<printexc.ml:141:6>>*/ var
     _BB_ = [0,  /*<<printexc.ml:141:11>>*/ caml_convert_raw_backtrace(bt)];
     /*<<printexc.ml:141:6>>*/ return _BB_;
    /*<<printexc.ml:142:24>>*/ }
   function format_backtrace_slot(pos, slot){
    function info(is_raise){
      /*<<printexc.ml:146:4>>*/ return is_raise
             ? 0 === pos ? _cc_ : _cd_
             : 0 === pos ? _ce_ : _cf_;
     /*<<printexc.ml:149:75>>*/ }
     /*<<printexc.ml:151:2>>*/ if(0 === slot[0]){
      /*<<printexc.ml:159:14>>*/ var
      _Bt_ = slot[5],
      _Bu_ = slot[4],
      _Bv_ = slot[3],
      _Bw_ = slot[6] ? _cg_ : _ci_,
      _Bx_ = slot[2],
      _By_ = slot[7],
       /*<<printexc.ml:159:14>>*/ _Bz_ = info(slot[1]);
      /*<<printexc.ml:158:6>>*/ return [0,
              /*<<printexc.ml:158:11>>*/ caml_call7
              (sprintf(_ch_), _Bz_, _By_, _Bx_, _Bw_, _Bv_, _Bu_, _Bt_)];
    }
    if(slot[1])  /*<<printexc.ml:154:50>>*/ return 0;
     /*<<printexc.ml:156:44>>*/  /*<<printexc.ml:156:44>>*/ var
     _BA_ = info(0);
     /*<<printexc.ml:156:8>>*/ return [0,
             /*<<printexc.ml:156:13>>*/ caml_call1(sprintf(_cj_), _BA_)];
    /*<<printexc.ml:161:52>>*/ }
   function print_exception_backtrace(outchan, backtrace){
     /*<<printexc.ml:164:2>>*/ if(! backtrace)
      /*<<printexc.ml:166:6>>*/ return fprintf(outchan, _cl_);
    var a = backtrace[1], _Br_ = a.length - 1 - 1 | 0, _Bq_ = 0;
    if(_Br_ >= 0){
     var i = _Bq_;
     for(;;){
       /*<<printexc.ml:170:14>>*/  /*<<printexc.ml:170:14>>*/ var
       match = format_backtrace_slot(i, caml_check_bound(a, i)[1 + i]);
      if(match){
       var str = match[1];
        /*<<printexc.ml:172:24>>*/  /*<<printexc.ml:172:24>>*/ caml_call1
        (fprintf(outchan, _ck_), str);
      }
       /*<<printexc.ml:169:6>>*/  /*<<printexc.ml:169:6>>*/ var
       _Bs_ = i + 1 | 0;
      if(_Br_ === i) break;
      var i = _Bs_;
     }
    }
    return;
    /*<<printexc.ml:173:10>>*/ }
   function print_raw_backtrace(outchan, raw_backtrace){
     /*<<printexc.ml:176:2>>*/ return print_exception_backtrace
            (outchan, convert_raw_backtrace(raw_backtrace));
    /*<<printexc.ml:176:73>>*/ }
   function register_printer(fn){
     /*<<printexc.ml:277:2>>*/ for(;;){
      /*<<printexc.ml:277:21>>*/ var
       /*<<printexc.ml:277:21>>*/ old_printers = _l_(printers),
       /*<<printexc.ml:278:21>>*/ new_printers = [0, fn, old_printers],
       /*<<printexc.ml:279:16>>*/ success =
        _k_(printers, old_printers, new_printers),
       /*<<printexc.ml:280:2>>*/ _Bp_ = 1 - success;
     if(! _Bp_)  /*<<printexc.ml:280:2>>*/ return _Bp_;
    }
    /*<<printexc.ml:280:41>>*/ }
   var errors = _cm_.slice();
   function default_uncaught_exception_han(exn, raw_backtrace){
     /*<<printexc.ml:316:2>>*/  /*<<printexc.ml:316:40>>*/ var
     _Bn_ = to_string$4(exn);
     /*<<printexc.ml:316:2>>*/  /*<<printexc.ml:316:2>>*/ caml_call1
     (eprintf(_cn_), _Bn_);
     /*<<printexc.ml:317:2>>*/ print_raw_backtrace(stderr, raw_backtrace);
     /*<<printexc.ml:318:15>>*/  /*<<printexc.ml:318:15>>*/ var
     status =  /*<<printexc.ml:318:15>>*/ caml_ml_debug_info_status(0);
    if(status < 0){
      /*<<printexc.ml:320:26>>*/  /*<<printexc.ml:320:26>>*/ var
      _Bo_ = abs(status);
      /*<<printexc.ml:320:4>>*/ prerr_endline
      (caml_check_bound(errors, _Bo_)[1 + _Bo_]);
    }
     /*<<printexc.ml:320:4>>*/ return flush(stderr);
    /*<<printexc.ml:321:14>>*/ }
   var empty_backtrace = [0];
   function try_get_raw_backtrace(param){
     /*<<printexc.ml:330:2>>*/  /*<<printexc.ml:331:4>>*/ var
     _Bm_ =  /*<<printexc.ml:331:4>>*/ caml_get_exception_raw_backtrace(0);
     /*<<printexc.ml:331:4>>*/ return _Bm_;
    /*<<printexc.ml:333:19>>*/ }
   function handle_uncaught_exception(exn, debugger_in_use){
     /*<<printexc.ml:336:2>>*/ try{
     var
      raw_backtrace =
        debugger_in_use ? empty_backtrace : try_get_raw_backtrace(0);
      /*<<printexc.ml:345:4>>*/ try{ /*<<printexc.ml:345:9>>*/ do_at_exit(0);}
     catch(_Bl_){}
      /*<<printexc.ml:346:4>>*/ try{
       /*<<printexc.ml:347:6>>*/ var
        /*<<printexc.ml:347:6>>*/ _Bj_ =
         default_uncaught_exception_han(exn, raw_backtrace),
       _Bi_ = _Bj_;
     }
     catch(exn$1){
       /*<<printexc.ml:349:27>>*/ var
       exn$0 = caml_wrap_exception(exn$1),
        /*<<printexc.ml:349:27>>*/ raw_backtrace$0 = try_get_raw_backtrace(0),
        /*<<printexc.ml:350:44>>*/ _Bg_ = to_string$4(exn);
       /*<<printexc.ml:350:6>>*/  /*<<printexc.ml:350:6>>*/ caml_call1
       (eprintf(_cp_), _Bg_);
       /*<<printexc.ml:351:6>>*/ print_raw_backtrace(stderr, raw_backtrace);
       /*<<printexc.ml:353:8>>*/  /*<<printexc.ml:353:8>>*/ var
       _Bh_ = to_string$4(exn$0);
       /*<<printexc.ml:352:6>>*/  /*<<printexc.ml:352:6>>*/ caml_call1
       (eprintf(_cq_), _Bh_);
       /*<<printexc.ml:354:6>>*/ print_raw_backtrace(stderr, raw_backtrace$0);
      var _Bi_ = flush(stderr);
     }
      /*<<printexc.ml:355:6>>*/ return _Bi_;
    }
    catch(_Bk_){
     var _Bf_ = caml_wrap_exception(_Bk_);
     if(_Bf_ === Out_of_memory)
       /*<<printexc.ml:358:8>>*/ return prerr_endline(_co_);
     throw caml_maybe_attach_backtrace(_Bf_, 0);
    }
    /*<<printexc.ml:359:68>>*/ }
   function handle_uncaught_exception$0(exn, debugger_in_use){
     /*<<printexc.ml:364:2>>*/ try{
      /*<<printexc.ml:365:4>>*/  /*<<printexc.ml:365:4>>*/ var
      _Bd_ = handle_uncaught_exception(exn, debugger_in_use);
      /*<<printexc.ml:365:4>>*/ return _Bd_;
    }
    catch(_Be_){ /*<<printexc.ml:368:4>>*/ return 0;}
    /*<<printexc.ml:368:6>>*/ }
    /*<<printexc.ml:374:2>>*/  /*<<printexc.ml:374:2>>*/ caml_register_named_value
    ("Printexc.handle_uncaught_exception", handle_uncaught_exception$0);
   function flip(f, x, y){
     /*<<fun.ml:18:17>>*/ return  /*<<fun.ml:18:17>>*/ caml_call2(f, y, x);
    /*<<fun.ml:18:22>>*/ }
    /*<<fun.ml:21:0>>*/  /*<<fun.ml:21:0>>*/ var
    Finally_raised = [248, _cr_, caml_fresh_oo_id(0)];
    /*<<fun.ml:23:9>>*/ register_printer
    (function(param){
       /*<<fun.ml:23:38>>*/ if(param[1] !== Finally_raised)
        /*<<fun.ml:25:7>>*/ return 0;
      var exn = param[2];
       /*<<fun.ml:24:24>>*/ return [0, symbol(_cs_, to_string$4(exn))];
      /*<<fun.ml:25:11>>*/ });
   function _ct_(_Bc_, _Bb_){
     /*<<?>>*/ return caml_final_register(_Bc_, _Bb_);
   }
   function string(str){
     /*<<digest.ml:27:2>>*/ return  /*<<digest.ml:27:2>>*/ caml_md5_string
            (str, 0, caml_ml_string_length(str));
    /*<<digest.ml:27:41>>*/ }
   function bytes(b){
     /*<<digest.ml:29:14>>*/ return string(unsafe_to_string(b));
    /*<<digest.ml:29:47>>*/ }
   function create$2(kind, layout, dim){
     /*<<bigarray.ml:181:4>>*/ return  /*<<bigarray.ml:181:4>>*/ caml_ba_create
            (kind, layout, [0, dim]);
    /*<<bigarray.ml:181:39>>*/ }
   function create$3(param){
     /*<<random.ml:31:4>>*/ return create$2(7, 0, 4);
    /*<<random.ml:31:34>>*/ }
   function set$0(s, i1, i2, i3, i4){
     /*<<random.ml:34:4>>*/  /*<<random.ml:34:4>>*/ caml_ba_set_1
     (s, 0,  /*<<random.ml:34:26>>*/ caml_int64_or(i1, _cu_));
     /*<<random.ml:35:4>>*/  /*<<random.ml:35:4>>*/ caml_ba_set_1(s, 1, i2);
     /*<<random.ml:36:30>>*/  /*<<random.ml:36:30>>*/ var
     i3$0 =  /*<<random.ml:36:30>>*/ caml_notequal(i3, _cv_) ? i3 : _cy_;
     /*<<random.ml:36:4>>*/  /*<<random.ml:36:4>>*/ caml_ba_set_1(s, 2, i3$0);
     /*<<random.ml:37:30>>*/  /*<<random.ml:37:30>>*/ var
     i4$0 =  /*<<random.ml:37:30>>*/ caml_notequal(i4, _cw_) ? i4 : _cx_;
     /*<<random.ml:37:4>>*/  /*<<random.ml:37:4>>*/ caml_ba_set_1(s, 3, i4$0);
     /*<<random.ml:37:4>>*/ return;
    /*<<random.ml:37:55>>*/ }
   function mk(i1, i2, i3, i4){
     /*<<random.ml:40:4>>*/  /*<<random.ml:40:12>>*/ var s = create$3(0);
     /*<<random.ml:41:4>>*/ set$0(s, i1, i2, i3, i4);
     /*<<random.ml:41:4>>*/ return s;
    /*<<random.ml:41:24>>*/ }
   function reinit(s, seed){
     /*<<random.ml:97:4>>*/ var
     n = seed.length - 1,
      /*<<random.ml:98:12>>*/ b =
        /*<<random.ml:98:12>>*/ caml_create_bytes((n * 8 | 0) + 1 | 0),
      /*<<random.ml:99:4>>*/ _A8_ = n - 1 | 0,
      /*<<random.ml:98:12>>*/ _A7_ = 0;
    if(_A8_ >= 0){
     var i = _A7_;
     for(;;){
       /*<<random.ml:100:6>>*/ set_int64_le
       (b,
        i * 8 | 0,
         /*<<random.ml:100:35>>*/ caml_int64_of_int32
         (caml_check_bound(seed, i)[1 + i]));
       /*<<random.ml:100:6>>*/  /*<<random.ml:100:6>>*/ var _Ba_ = i + 1 | 0;
      if(_A8_ === i) break;
      var i = _Ba_;
     }
    }
     /*<<random.ml:102:4>>*/  /*<<random.ml:102:4>>*/ caml_bytes_set
     (b, n * 8 | 0, 1);
     /*<<random.ml:103:13>>*/  /*<<random.ml:103:13>>*/ var d1 = bytes(b);
     /*<<random.ml:104:4>>*/  /*<<random.ml:104:4>>*/ caml_bytes_set
     (b, n * 8 | 0, 2);
     /*<<random.ml:105:13>>*/ var
      /*<<random.ml:105:13>>*/ d2 = bytes(b),
      /*<<random.ml:109:10>>*/ _A9_ = get_int64_le$0(d2, 8),
      /*<<random.ml:108:10>>*/ _A__ = get_int64_le$0(d2, 0),
      /*<<random.ml:107:10>>*/ _A$_ = get_int64_le$0(d1, 8);
     /*<<random.ml:109:10>>*/ return set$0
            (s, get_int64_le$0(d1, 0), _A$_, _A__, _A9_);
    /*<<random.ml:109:36>>*/ }
   function make$1(seed){
     /*<<random.ml:112:4>>*/  /*<<random.ml:112:12>>*/ var s = create$3(0);
     /*<<random.ml:112:24>>*/ reinit(s, seed);
     /*<<random.ml:112:24>>*/ return s;
    /*<<random.ml:112:40>>*/ }
   function make_self_init(param){
     /*<<random.ml:115:4>>*/ return make$1
            ( /*<<random.ml:115:9>>*/ caml_sys_random_seed(0));
    /*<<random.ml:115:25>>*/ }
   function bits(s){
     /*<<random.ml:119:4>>*/ return  /*<<random.ml:119:17>>*/ caml_int64_to_int32
            ( /*<<random.ml:119:17>>*/ caml_lxm_next(s))
           & 1073741823;
    /*<<random.ml:119:42>>*/ }
   function intaux(s, n){
     /*<<random.ml:123:4>>*/ for(;;){
      /*<<random.ml:123:12>>*/ var
       /*<<random.ml:123:12>>*/ r = bits(s),
      v = caml_mod(r, n);
     if(((1073741823 - n | 0) + 1 | 0) >= (r - v | 0))
       /*<<random.ml:125:55>>*/ return v;
    }
    /*<<random.ml:125:56>>*/ }
   function int$0(s, bound){
     /*<<random.ml:128:4>>*/ if(1073741823 >= bound && 0 < bound)
      /*<<random.ml:130:9>>*/ return intaux(s, bound);
     /*<<random.ml:129:9>>*/ return invalid_arg(_cz_);
    /*<<random.ml:130:23>>*/ }
   function bits64(s){
     /*<<random.ml:166:4>>*/ return  /*<<random.ml:166:4>>*/ caml_lxm_next(s);
    /*<<random.ml:166:10>>*/ }
   function rawfloat(s){
     /*<<random.ml:196:4>>*/ for(;;){
      /*<<random.ml:196:12>>*/ var
       /*<<random.ml:196:12>>*/ b =  /*<<random.ml:196:12>>*/ caml_lxm_next(s),
       /*<<random.ml:197:12>>*/ n =
         /*<<random.ml:197:12>>*/ caml_int64_shift_right_unsigned(b, 11);
      /*<<random.ml:198:7>>*/ if
      ( /*<<random.ml:198:7>>*/ caml_notequal(n, _cA_))
       /*<<random.ml:198:20>>*/ return  /*<<random.ml:198:20>>*/ caml_int64_to_float
              (n)
             * 1.1102230246251565e-16;
    }
    /*<<random.ml:198:64>>*/ }
   function float$0(s, bound){
     /*<<random.ml:201:22>>*/ return rawfloat(s) * bound;
    /*<<random.ml:201:41>>*/ }
   function split(s){
     /*<<random.ml:208:4>>*/ var
      /*<<random.ml:208:13>>*/ i1 = bits64(s),
      /*<<random.ml:208:34>>*/ i2 = bits64(s),
      /*<<random.ml:209:13>>*/ i3 = bits64(s),
      /*<<random.ml:209:34>>*/ i4 = bits64(s);
     /*<<random.ml:210:4>>*/ return mk(i1, i2, i3, i4);
    /*<<random.ml:210:18>>*/ }
   function mk_default(param){
     /*<<random.ml:215:2>>*/ return mk(_cE_, _cD_, _cC_, _cB_);
    /*<<random.ml:218:31>>*/ }
    /*<<random.ml:221:2>>*/ new_key([0, split], mk_default);
   function ongoing_traversal(h){
     /*<<hashtbl.ml:41:2>>*/ var
     _A5_ = h.length - 1 < 4 ? 1 : 0,
     _A6_ = _A5_ || (h[4] < 0 ? 1 : 0);
    return _A6_;
    /*<<hashtbl.ml:42:23>>*/ }
   try{
     /*<<hashtbl.ml:51:8>>*/ var
      /*<<hashtbl.ml:51:8>>*/ _lJ_ =
        /*<<hashtbl.ml:51:8>>*/ caml_sys_getenv("OCAMLRUNPARAM"),
     params = _lJ_;
   }
   catch(_A3_){
    var _cF_ = caml_wrap_exception(_A3_);
    if(_cF_ !== Not_found) throw caml_maybe_attach_backtrace(_cF_, 0);
     /*<<hashtbl.ml:52:4>>*/ try{
      /*<<hashtbl.ml:52:8>>*/ var
       /*<<hashtbl.ml:52:8>>*/ _lI_ =
         /*<<hashtbl.ml:52:8>>*/ caml_sys_getenv("CAMLRUNPARAM"),
      _cI_ = _lI_;
    }
    catch(_A4_){
     var _cG_ = caml_wrap_exception(_A4_);
     if(_cG_ !== Not_found) throw caml_maybe_attach_backtrace(_cG_, 0);
     var _cI_ = _cH_;
    }
    var params = _cI_;
   }
    /*<<hashtbl.ml:53:2>>*/ var
     /*<<hashtbl.ml:53:2>>*/ randomized_default = contains(params, 82),
     /*<<hashtbl.ml:55:17>>*/ randomized = _m_(randomized_default),
     /*<<hashtbl.ml:60:15>>*/ prng_key = new_key(0, make_self_init);
   function power_2_above(x, n){
     /*<<hashtbl.ml:69:2>>*/ var x$0 = x;
     /*<<hashtbl.ml:69:2>>*/ for(;;){
     if(n <= x$0)  /*<<hashtbl.ml:69:17>>*/ return x$0;
     if(max_array_length < (x$0 * 2 | 0))
       /*<<hashtbl.ml:70:44>>*/ return x$0;
     var x$1 = x$0 * 2 | 0, x$0 = x$1;
    }
    /*<<hashtbl.ml:71:30>>*/ }
   function create$4(opt, initial_size){
     /*<<hashtbl.ml:74:2>>*/ if(opt)
     var sth = opt[1], random = sth;
    else
     var random = _l_(randomized);
     /*<<hashtbl.ml:74:10>>*/ var
      /*<<hashtbl.ml:74:10>>*/ s = power_2_above(16, initial_size),
      /*<<hashtbl.ml:75:2>>*/ seed = random ? bits(get$0(prng_key)) : 0;
     /*<<hashtbl.ml:78:2>>*/ return [0,
            0,
             /*<<hashtbl.ml:78:52>>*/ caml_make_vect(s, 0),
            seed,
            s];
    /*<<hashtbl.ml:78:72>>*/ }
   function insert_all_buckets(indexfun, inplace, odata, ndata){
     /*<<hashtbl.ml:118:2>>*/ var
     nsize = ndata.length - 1,
      /*<<hashtbl.ml:119:19>>*/ ndata_tail =
        /*<<hashtbl.ml:119:19>>*/ caml_make_vect(nsize, 0);
    function insert_bucket(cell){
      /*<<hashtbl.ml:120:26>>*/ var cell$0 = cell;
      /*<<hashtbl.ml:120:26>>*/ for(;;){
      if(! cell$0)  /*<<hashtbl.ml:121:15>>*/ return;
       /*<<hashtbl.ml:123:8>>*/ var
       key = cell$0[1],
       data = cell$0[2],
       next = cell$0[3],
        /*<<hashtbl.ml:123:8>>*/ cell$1 = inplace ? cell$0 : [0, key, data, 0],
        /*<<hashtbl.ml:127:19>>*/ nidx =
          /*<<hashtbl.ml:127:19>>*/ caml_call1(indexfun, key),
        /*<<hashtbl.ml:128:20>>*/ match =
         caml_check_bound(ndata_tail, nidx)[1 + nidx];
      if(match)
       match[3] = cell$1;
      else
        /*<<hashtbl.ml:129:19>>*/ caml_check_bound(ndata, nidx)[1 + nidx] = cell$1;
       /*<<hashtbl.ml:132:8>>*/ caml_check_bound(ndata_tail, nidx)[1 + nidx] = cell$1;
      var cell$0 = next;
     }
     /*<<hashtbl.ml:133:26>>*/ }
     /*<<hashtbl.ml:135:2>>*/ var
     _AX_ = odata.length - 1 - 1 | 0,
      /*<<hashtbl.ml:135:2>>*/ _AW_ = 0;
    if(_AX_ >= 0){
     var i$0 = _AW_;
     for(;;){
       /*<<hashtbl.ml:136:4>>*/ insert_bucket
       (caml_check_bound(odata, i$0)[1 + i$0]);
       /*<<hashtbl.ml:136:4>>*/  /*<<hashtbl.ml:136:4>>*/ var
       _A2_ = i$0 + 1 | 0;
      if(_AX_ === i$0) break;
      var i$0 = _A2_;
     }
    }
    if(inplace){
      /*<<hashtbl.ml:139:4>>*/ var
      _AZ_ = nsize - 1 | 0,
       /*<<hashtbl.ml:139:4>>*/ _AY_ = 0;
     if(_AZ_ >= 0){
      var i = _AY_;
      for(;;){
        /*<<hashtbl.ml:140:12>>*/  /*<<hashtbl.ml:140:12>>*/ var
        match = caml_check_bound(ndata_tail, i)[1 + i];
       if(match) match[3] = 0;
        /*<<hashtbl.ml:139:4>>*/  /*<<hashtbl.ml:139:4>>*/ var
        _A1_ = i + 1 | 0;
       if(_AZ_ === i) break;
       var i = _A1_;
      }
     }
     var _A0_ = 0;
    }
    else
     var _A0_ = inplace;
    return _A0_;
    /*<<hashtbl.ml:143:8>>*/ }
   function resize$0(indexfun, h){
     /*<<hashtbl.ml:146:2>>*/ var
     odata = h[2],
      /*<<hashtbl.ml:147:2>>*/ osize = odata.length - 1,
     nsize = osize * 2 | 0,
     _AV_ = nsize < max_array_length ? 1 : 0;
    if(! _AV_) return _AV_;
     /*<<hashtbl.ml:150:16>>*/ var
      /*<<hashtbl.ml:150:16>>*/ ndata =
        /*<<hashtbl.ml:150:16>>*/ caml_make_vect(nsize, 0),
      /*<<hashtbl.ml:151:22>>*/ inplace = 1 - ongoing_traversal(h);
    h[2] = ndata;
     /*<<hashtbl.ml:153:4>>*/ return insert_all_buckets
            ( /*<<hashtbl.ml:153:23>>*/ caml_call1(indexfun, h),
             inplace,
             odata,
             ndata);
    /*<<hashtbl.ml:154:5>>*/ }
   function MakeSeeded(H){
    function key_index(h, key){
      /*<<hashtbl.ml:357:6>>*/ var _AU_ = h[2].length - 1 - 1 | 0;
      /*<<hashtbl.ml:357:6>>*/ return  /*<<hashtbl.ml:357:6>>*/ caml_call2
             (H[2], h[3], key)
            & _AU_;
     /*<<hashtbl.ml:357:63>>*/ }
    function add(h, key, data){
      /*<<hashtbl.ml:360:6>>*/ var
       /*<<hashtbl.ml:360:14>>*/ i = key_index(h, key),
       /*<<hashtbl.ml:361:23>>*/ bucket =
        [0, key, data, caml_check_bound(h[2], i)[1 + i]];
      /*<<hashtbl.ml:362:6>>*/ caml_check_bound(h[2], i)[1 + i] = bucket;
     h[1] = h[1] + 1 | 0;
     var _AT_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
     return _AT_ ? resize$0(key_index, h) : _AT_;
     /*<<hashtbl.ml:364:67>>*/ }
    function find_rec(key, param){
     var param$0 = param;
     for(;;){
      if(! param$0)
        /*<<hashtbl.ml:385:10>>*/ throw  /*<<hashtbl.ml:385:10>>*/ caml_maybe_attach_backtrace
              (Not_found, 1);
      var k = param$0[1], data = param$0[2], next = param$0[3];
       /*<<hashtbl.ml:387:13>>*/ if
       ( /*<<hashtbl.ml:387:13>>*/ caml_call2(H[1], key, k))
        /*<<hashtbl.ml:387:32>>*/ return data;
      var param$0 = next;
     }
    }
    function find(h, key){
      /*<<hashtbl.ml:390:6>>*/ var
       /*<<hashtbl.ml:390:20>>*/ _AS_ = key_index(h, key),
       /*<<hashtbl.ml:390:12>>*/ match =
        caml_check_bound(h[2], _AS_)[1 + _AS_];
     if(! match)
       /*<<hashtbl.ml:391:17>>*/ throw  /*<<hashtbl.ml:391:17>>*/ caml_maybe_attach_backtrace
             (Not_found, 1);
     var k1 = match[1], d1 = match[2], next1 = match[3];
      /*<<hashtbl.ml:393:13>>*/ if
      ( /*<<hashtbl.ml:393:13>>*/ caml_call2(H[1], key, k1))
       /*<<hashtbl.ml:393:33>>*/ return d1;
     if(! next1)
       /*<<hashtbl.ml:395:21>>*/ throw  /*<<hashtbl.ml:395:21>>*/ caml_maybe_attach_backtrace
             (Not_found, 1);
     var k2 = next1[1], d2 = next1[2], next2 = next1[3];
      /*<<hashtbl.ml:397:17>>*/ if
      ( /*<<hashtbl.ml:397:17>>*/ caml_call2(H[1], key, k2))
       /*<<hashtbl.ml:397:37>>*/ return d2;
     if(! next2)
       /*<<hashtbl.ml:399:25>>*/ throw  /*<<hashtbl.ml:399:25>>*/ caml_maybe_attach_backtrace
             (Not_found, 1);
     var k3 = next2[1], d3 = next2[2], next3 = next2[3];
      /*<<hashtbl.ml:401:21>>*/ return  /*<<hashtbl.ml:401:21>>*/ caml_call2
              (H[1], key, k3)
             ? d3
             : find_rec(key, next3);
     /*<<hashtbl.ml:401:67>>*/ }
    function replace_bucket(key, data, param){
     var slot = param;
     for(;;){
      if(! slot)  /*<<hashtbl.ml:435:10>>*/ return 1;
      var k = slot[1], next = slot[3];
       /*<<hashtbl.ml:437:13>>*/ if
       ( /*<<hashtbl.ml:437:13>>*/ caml_call2(H[1], k, key)){
       slot[1] = key;
       slot[2] = data;
        /*<<hashtbl.ml:438:52>>*/ return 0;
      }
      var slot = next;
     }
    }
    function replace(h, key, data){
      /*<<hashtbl.ml:442:6>>*/ var
       /*<<hashtbl.ml:442:14>>*/ i = key_index(h, key),
       /*<<hashtbl.ml:443:14>>*/ l = caml_check_bound(h[2], i)[1 + i],
       /*<<hashtbl.ml:444:9>>*/ _AP_ = replace_bucket(key, data, l);
      /*<<hashtbl.ml:444:9>>*/ if(_AP_){
       /*<<hashtbl.ml:445:8>>*/ caml_check_bound(h[2], i)[1 + i] = [0, key, data, l];
      h[1] = h[1] + 1 | 0;
      var _AQ_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
      if(_AQ_)  /*<<hashtbl.ml:447:51>>*/ return resize$0(key_index, h);
      var _AR_ = _AQ_;
     }
     else
      var _AR_ = _AP_;
     return _AR_;
     /*<<hashtbl.ml:448:9>>*/ }
    function replace_seq(tbl, i){
      /*<<hashtbl.ml:463:6>>*/ return iter
             (function(param){
                /*<<hashtbl.ml:463:15>>*/ var v = param[2], k = param[1];
                /*<<hashtbl.ml:463:29>>*/ return replace(tbl, k, v);
               /*<<hashtbl.ml:463:45>>*/ },
              i);
     /*<<hashtbl.ml:463:47>>*/ }
     /*<<hashtbl.ml:347:2>>*/ return [0,
            create$4,
            ,
            ,
            ,
            add,
            ,
            find,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            replace_seq];
   }
   function Make$1(H){
    var equal = H[1];
    function seeded_hash(seed, x){
      /*<<hashtbl.ml:485:41>>*/ return  /*<<hashtbl.ml:485:41>>*/ caml_call1
             (H[2], x);
     /*<<hashtbl.ml:485:49>>*/ }
    var
     include = MakeSeeded([0, equal, seeded_hash]),
     add = include[5],
     find = include[7],
     _AO_ = include[1];
    function create(sz){
      /*<<hashtbl.ml:487:20>>*/ return _AO_(_cJ_, sz);
     /*<<hashtbl.ml:487:43>>*/ }
     /*<<hashtbl.ml:481:2>>*/ return [0, create, , , , add, , find];
   }
   function hash(x){
     /*<<hashtbl.ml:501:13>>*/ return  /*<<hashtbl.ml:501:13>>*/ caml_hash
            (10, 100, 0, x);
    /*<<hashtbl.ml:501:41>>*/ }
   function create$5(l){
     /*<<weak.ml:28:2>>*/ var
     _AM_ = 0 <= l ? 1 : 0,
     _AN_ = _AM_ ? l <= max_ephe_length ? 1 : 0 : _AM_;
    if(1 - _AN_)  /*<<weak.ml:29:4>>*/ invalid_arg(_cK_);
     /*<<weak.ml:30:2>>*/ return  /*<<weak.ml:30:2>>*/ caml_weak_create(l);
    /*<<weak.ml:30:10>>*/ }
   function length$2(x){
     /*<<weak.ml:33:15>>*/ return x.length - 1 - 2 | 0;
    /*<<weak.ml:33:55>>*/ }
   function raise_if_invalid_offset(e, o, msg){
     /*<<weak.ml:36:2>>*/ var
     _AJ_ = 0 <= o ? 1 : 0,
     _AK_ = _AJ_ ? o < length$2(e) ? 1 : 0 : _AJ_,
     _AL_ = 1 - _AK_;
    return _AL_ ? invalid_arg(msg) : _AL_;
    /*<<weak.ml:37:20>>*/ }
   function set$1(e, o, x){
     /*<<weak.ml:42:2>>*/ raise_if_invalid_offset(e, o, _cL_);
    if(! x)
      /*<<weak.ml:44:12>>*/ return  /*<<weak.ml:44:12>>*/ caml_ephe_unset_key
             (e, o);
    var x$0 = x[1];
     /*<<weak.ml:45:14>>*/ return  /*<<weak.ml:45:14>>*/ caml_ephe_set_key
            (e, o, x$0);
    /*<<weak.ml:45:24>>*/ }
   function get$1(e, o){
     /*<<weak.ml:49:2>>*/ raise_if_invalid_offset(e, o, _cM_);
     /*<<weak.ml:50:2>>*/ return  /*<<weak.ml:50:2>>*/ caml_ephe_get_key(e, o);
    /*<<weak.ml:50:9>>*/ }
   function check(e, o){
     /*<<weak.ml:59:2>>*/ raise_if_invalid_offset(e, o, _cN_);
     /*<<weak.ml:60:2>>*/ return  /*<<weak.ml:60:2>>*/ caml_ephe_check_key
            (e, o);
    /*<<weak.ml:60:11>>*/ }
   function blit$1(e1, o1, e2, o2, l){
     /*<<weak.ml:66:2>>*/ if
     (0 <= l
      &&
       0 <= o1
       &&
        (length$2(e1) - l | 0) >= o1
        && 0 <= o2 && (length$2(e2) - l | 0) >= o2){
     var
      _AH_ = 0 !== l ? 1 : 0,
      _AI_ =
        _AH_
         ?  /*<<weak.ml:69:22>>*/ caml_ephe_blit_key(e1, o1, e2, o2, l)
         : _AH_;
      /*<<weak.ml:69:22>>*/ return _AI_;
    }
     /*<<weak.ml:68:7>>*/ return invalid_arg(_cO_);
    /*<<weak.ml:69:40>>*/ }
   function Make$2(H){
     /*<<weak.ml:105:20>>*/  /*<<weak.ml:105:20>>*/ var
     emptybucket = create$5(0);
    function get_index(t, h){
      /*<<weak.ml:117:22>>*/ return caml_mod(h & 2147483647, t[1].length - 1);
     /*<<weak.ml:117:65>>*/ }
    var limit = 7;
    function create(sz){
      /*<<weak.ml:123:4>>*/ var
      sz$0 = 7 <= sz ? sz : 7,
      sz$1 = max_array_length < sz$0 ? max_array_length : sz$0;
      /*<<weak.ml:125:4>>*/ return [0,
              /*<<weak.ml:126:14>>*/ caml_make_vect(sz$1, emptybucket),
              /*<<weak.ml:127:15>>*/ caml_make_vect(sz$1, [0]),
             limit,
             0,
             0];
     /*<<weak.ml:131:5>>*/ }
    function fold(f, t, init){
     function fold_bucket(i, b, accu){
       /*<<weak.ml:144:6>>*/ var i$0 = i, accu$0 = accu;
       /*<<weak.ml:144:6>>*/ for(;;){
       if(length$2(b) <= i$0)  /*<<weak.ml:144:28>>*/ return accu$0;
        /*<<weak.ml:145:12>>*/  /*<<weak.ml:145:12>>*/ var
        match = get$1(b, i$0);
       if(match)
         /*<<weak.ml:146:38>>*/ var
         v = match[1],
          /*<<weak.ml:146:38>>*/ accu$1 =
            /*<<weak.ml:146:38>>*/ caml_call2(f, v, accu$0),
         i$1 = i$0 + 1 | 0,
         i$0 = i$1,
         accu$0 = accu$1;
       else
        var i$2 = i$0 + 1 | 0, i$0 = i$2;
      }
      /*<<weak.ml:147:40>>*/ }
     var _AE_ = 0;
      /*<<weak.ml:149:4>>*/ return fold_right$0
             (function(_AF_, _AG_){
                /*<<?>>*/ return fold_bucket(_AE_, _AF_, _AG_);
              },
              t[1],
              init);
     /*<<weak.ml:149:49>>*/ }
    function iter(f, t){
     function iter_bucket(i, b){
       /*<<weak.ml:154:6>>*/ var i$0 = i;
       /*<<weak.ml:154:6>>*/ for(;;){
       if(length$2(b) <= i$0)  /*<<weak.ml:154:28>>*/ return 0;
        /*<<weak.ml:155:12>>*/  /*<<weak.ml:155:12>>*/ var
        match = get$1(b, i$0);
       if(match){
        var v = match[1];
         /*<<weak.ml:156:18>>*/  /*<<weak.ml:156:18>>*/ caml_call1(f, v);
        var i$1 = i$0 + 1 | 0, i$0 = i$1;
       }
       else
        var i$2 = i$0 + 1 | 0, i$0 = i$2;
      }
      /*<<weak.ml:157:35>>*/ }
     var _AC_ = 0;
      /*<<weak.ml:159:15>>*/ return iter$2
             (function(_AD_){ /*<<?>>*/ return iter_bucket(_AC_, _AD_);},
              t[1]);
     /*<<weak.ml:159:38>>*/ }
    function iter_weak(f, t){
     function iter_bucket(i, j, b){
       /*<<weak.ml:164:6>>*/ var i$0 = i;
       /*<<weak.ml:164:6>>*/ for(;;){
       if(length$2(b) <= i$0)  /*<<weak.ml:164:28>>*/ return 0;
       if(check(b, i$0)){
         /*<<weak.ml:166:16>>*/  /*<<weak.ml:166:16>>*/ caml_call3
         (f, b, caml_check_bound(t[2], j)[1 + j], i$0);
        var i$1 = i$0 + 1 | 0, i$0 = i$1;
       }
       else
        var i$2 = i$0 + 1 | 0, i$0 = i$2;
      }
      /*<<weak.ml:167:38>>*/ }
     var _Az_ = 0;
      /*<<weak.ml:169:16>>*/ return iteri$1
             (function(_AA_, _AB_){
                /*<<?>>*/ return iter_bucket(_Az_, _AA_, _AB_);
              },
              t[1]);
     /*<<weak.ml:169:39>>*/ }
    function count_bucket(i, b, accu){
      /*<<weak.ml:173:4>>*/ var i$0 = i, accu$0 = accu;
      /*<<weak.ml:173:4>>*/ for(;;){
      if(length$2(b) <= i$0)  /*<<weak.ml:173:26>>*/ return accu$0;
       /*<<weak.ml:174:37>>*/ var
        /*<<weak.ml:174:37>>*/ _Ay_ = check(b, i$0) ? 1 : 0,
       accu$1 = accu$0 + _Ay_ | 0,
       i$1 = i$0 + 1 | 0,
       i$0 = i$1,
       accu$0 = accu$1;
     }
     /*<<weak.ml:174:62>>*/ }
    function count(t){
      /*<<weak.ml:178:4>>*/ var _Av_ = 0;
      /*<<weak.ml:178:4>>*/ return fold_right$0
             (function(_Aw_, _Ax_){
                /*<<?>>*/ return count_bucket(_Av_, _Aw_, _Ax_);
              },
              t[1],
              0);
     /*<<weak.ml:178:47>>*/ }
    function next_sz(n){
      /*<<weak.ml:181:18>>*/ return min$0
             (((3 * n | 0) / 2 | 0) + 3 | 0, max_array_length);
     /*<<weak.ml:181:62>>*/ }
    function prev_sz(n){
      /*<<weak.ml:182:18>>*/ return (((n - 3 | 0) * 2 | 0) + 2 | 0) / 3 | 0;
     /*<<weak.ml:182:39>>*/ }
    function test_shrink_bucket(t){
      /*<<weak.ml:185:4>>*/ var
      _Ak_ = t[5],
       /*<<weak.ml:185:17>>*/ bucket = caml_check_bound(t[1], _Ak_)[1 + _Ak_],
       /*<<weak.ml:186:4>>*/ _Al_ = t[5],
       /*<<weak.ml:186:18>>*/ hbucket = caml_check_bound(t[2], _Al_)[1 + _Al_],
       /*<<weak.ml:187:14>>*/ len = length$2(bucket),
       /*<<weak.ml:188:19>>*/ prev_len = prev_sz(len),
       /*<<weak.ml:189:15>>*/ live = count_bucket(0, bucket, 0);
     if(live <= prev_len){
      var
       loop =
         function(i, j){
           /*<<weak.ml:192:8>>*/ var i$0 = i, j$0 = j;
           /*<<weak.ml:192:8>>*/ for(;;){
           var _At_ = prev_len <= j$0 ? 1 : 0;
           if(! _At_) return _At_;
            /*<<weak.ml:193:13>>*/ if(check(bucket, i$0))
            var i$1 = i$0 + 1 | 0, i$0 = i$1;
           else if(check(bucket, j$0)){
             /*<<weak.ml:195:12>>*/ blit$1(bucket, j$0, bucket, i$0, 1);
             /*<<weak.ml:196:27>>*/  /*<<weak.ml:196:27>>*/ var
             _Au_ = caml_check_bound(hbucket, j$0)[1 + j$0];
             /*<<weak.ml:196:12>>*/ caml_check_bound(hbucket, i$0)[1 + i$0] = _Au_;
             /*<<weak.ml:196:12>>*/ var
              /*<<weak.ml:196:12>>*/ j$1 = j$0 - 1 | 0,
             i$2 = i$0 + 1 | 0,
             i$0 = i$2,
             j$0 = j$1;
           }
           else
             /*<<weak.ml:198:19>>*/ var
              /*<<weak.ml:198:19>>*/ j$2 = j$0 - 1 | 0,
             j$0 = j$2;
          }
          /*<<weak.ml:199:11>>*/ };
       /*<<weak.ml:201:6>>*/ loop(0, length$2(bucket) - 1 | 0);
      if(0 === prev_len){
       var _Am_ = t[5];
        /*<<weak.ml:203:8>>*/ caml_check_bound(t[1], _Am_)[1 + _Am_] = emptybucket;
       var _An_ = t[5];
        /*<<weak.ml:204:8>>*/ caml_check_bound(t[2], _An_)[1 + _An_] = [0];
      }
      else{
        /*<<weak.ml:206:24>>*/  /*<<weak.ml:206:24>>*/ var
        newbucket = create$5(prev_len);
        /*<<weak.ml:207:8>>*/ blit$1(bucket, 0, newbucket, 0, prev_len);
       var _Aq_ = t[5];
        /*<<weak.ml:208:8>>*/ caml_check_bound(t[1], _Aq_)[1 + _Aq_] = newbucket;
        /*<<weak.ml:209:30>>*/ var
         /*<<weak.ml:209:30>>*/ _Ar_ = sub$1(hbucket, 0, prev_len),
        _As_ = t[5];
        /*<<weak.ml:209:8>>*/ caml_check_bound(t[2], _As_)[1 + _As_] = _Ar_;
      }
      var
       _Ao_ = t[3] < len ? 1 : 0,
       _Ap_ = _Ao_ ? prev_len <= t[3] ? 1 : 0 : _Ao_;
      if(_Ap_) t[4] = t[4] - 1 | 0;
     }
     t[5] = caml_mod(t[5] + 1 | 0, t[1].length - 1);
     return;
     /*<<weak.ml:213:55>>*/ }
    function resize(t){
      /*<<weak.ml:217:4>>*/ var
      oldlen = t[1].length - 1,
       /*<<weak.ml:218:17>>*/ newlen = next_sz(oldlen);
     if(oldlen < newlen){
       /*<<weak.ml:220:17>>*/ var
        /*<<weak.ml:220:17>>*/ newt = create(newlen),
       add_weak =
         function(ob, oh, oi){
          function setter(nb, ni, param){
            /*<<weak.ml:222:29>>*/ return blit$1(ob, oi, nb, ni, 1);
           /*<<weak.ml:222:47>>*/ }
           /*<<weak.ml:223:16>>*/  /*<<weak.ml:223:16>>*/ var
           h = caml_check_bound(oh, oi)[1 + oi];
           /*<<weak.ml:224:35>>*/ return add_aux
                  (newt, setter, 0, h, get_index(newt, h));
          /*<<weak.ml:224:54>>*/ };
       /*<<weak.ml:226:6>>*/ iter_weak(add_weak, t);
      t[1] = newt[1];
      t[2] = newt[2];
      t[3] = newt[3];
      t[4] = newt[4];
      t[5] = caml_mod(t[5], newt[1].length - 1);
      return 0;
     }
     t[3] = infinity;
     t[4] = 0;
     return 0;
     /*<<weak.ml:235:7>>*/ }
    function add_aux(t, setter, d, h, index){
      /*<<weak.ml:238:4>>*/ var
       /*<<weak.ml:238:17>>*/ bucket =
        caml_check_bound(t[1], index)[1 + index],
       /*<<weak.ml:239:17>>*/ hashes =
        caml_check_bound(t[2], index)[1 + index],
       /*<<weak.ml:240:13>>*/ sz = length$2(bucket);
     function loop(i){
       /*<<weak.ml:242:6>>*/ var i$0 = i;
       /*<<weak.ml:242:6>>*/ for(;;){
       if(sz <= i$0){
         /*<<weak.ml:244:10>>*/  /*<<weak.ml:244:10>>*/ var
         newsz =
           min$0(((3 * sz | 0) / 2 | 0) + 3 | 0, max_array_length - 2 | 0);
        if(newsz <= sz)  /*<<weak.ml:246:28>>*/ failwith(_cP_);
         /*<<weak.ml:247:24>>*/ var
          /*<<weak.ml:247:24>>*/ newbucket = create$5(newsz),
          /*<<weak.ml:248:24>>*/ newhashes =
            /*<<weak.ml:248:24>>*/ caml_make_vect(newsz, 0);
         /*<<weak.ml:249:8>>*/ blit$1(bucket, 0, newbucket, 0, sz);
         /*<<weak.ml:250:8>>*/ blit$0(hashes, 0, newhashes, 0, sz);
         /*<<weak.ml:251:8>>*/  /*<<weak.ml:251:8>>*/ caml_call3
         (setter, newbucket, sz, d);
         /*<<weak.ml:252:8>>*/ caml_check_bound(newhashes, sz)[1 + sz] = h;
         /*<<weak.ml:253:8>>*/ caml_check_bound(t[1], index)[1 + index] = newbucket;
         /*<<weak.ml:254:8>>*/ caml_check_bound(t[2], index)[1 + index] = newhashes;
        var
         _Ag_ = sz <= t[3] ? 1 : 0,
         _Ah_ = _Ag_ ? t[3] < newsz ? 1 : 0 : _Ag_;
        if(_Ah_){
         t[4] = t[4] + 1 | 0;
         var i$1 = 0;
         for(;;){
           /*<<weak.ml:257:38>>*/ test_shrink_bucket(t);
           /*<<weak.ml:257:38>>*/  /*<<weak.ml:257:38>>*/ var
           _Aj_ = i$1 + 1 | 0;
          if(2 === i$1) break;
          var i$1 = _Aj_;
         }
        }
        var _Ai_ = ((t[1].length - 1) / 2 | 0) < t[4] ? 1 : 0;
        return _Ai_ ? resize(t) : _Ai_;
       }
        /*<<weak.ml:260:18>>*/ if(! check(bucket, i$0)){
         /*<<weak.ml:263:8>>*/  /*<<weak.ml:263:8>>*/ caml_call3
         (setter, bucket, i$0, d);
         /*<<weak.ml:264:8>>*/ caml_check_bound(hashes, i$0)[1 + i$0] = h;
         /*<<weak.ml:264:8>>*/ return 0;
       }
        /*<<weak.ml:260:38>>*/ var
         /*<<weak.ml:260:38>>*/ i$2 = i$0 + 1 | 0,
        i$0 = i$2;
      }
      /*<<weak.ml:265:9>>*/ }
      /*<<weak.ml:267:4>>*/ return loop(0);
     /*<<weak.ml:267:10>>*/ }
    function add(t, d){
      /*<<weak.ml:271:4>>*/  /*<<weak.ml:271:12>>*/ var
      h =  /*<<weak.ml:271:12>>*/ caml_call1(H[2], d);
      /*<<weak.ml:272:29>>*/ return add_aux
             (t, set$1, [0, d], h, get_index(t, h));
     /*<<weak.ml:272:44>>*/ }
    function find_aux(t, d, found, notfound){
      /*<<weak.ml:278:4>>*/ var
       /*<<weak.ml:278:12>>*/ h =  /*<<weak.ml:278:12>>*/ caml_call1(H[2], d),
       /*<<weak.ml:279:16>>*/ index = get_index(t, h),
       /*<<weak.ml:280:17>>*/ bucket =
        caml_check_bound(t[1], index)[1 + index],
       /*<<weak.ml:281:17>>*/ hashes =
        caml_check_bound(t[2], index)[1 + index],
       /*<<weak.ml:282:13>>*/ sz = length$2(bucket);
     function loop(i){
       /*<<weak.ml:284:6>>*/ var i$0 = i;
       /*<<weak.ml:284:6>>*/ for(;;){
       if(sz <= i$0)
         /*<<weak.ml:279:16>>*/ return  /*<<weak.ml:279:16>>*/ caml_call2
                (notfound, h, index);
       if(h === caml_check_bound(hashes, i$0)[1 + i$0]){
         /*<<weak.ml:286:14>>*/  /*<<weak.ml:286:14>>*/ var
         opt = get$1(bucket, i$0);
        if(opt){
         var v = opt[1];
          /*<<weak.ml:287:29>>*/ if
          ( /*<<weak.ml:287:29>>*/ caml_call2(H[1], v, d))
           /*<<weak.ml:287:44>>*/ return  /*<<weak.ml:287:44>>*/ caml_call4
                  (found, bucket, i$0, opt, v);
        }
         /*<<weak.ml:288:15>>*/ var
          /*<<weak.ml:288:15>>*/ i$1 = i$0 + 1 | 0,
         i$0 = i$1;
       }
       else
         /*<<weak.ml:289:15>>*/ var
          /*<<weak.ml:289:15>>*/ i$2 = i$0 + 1 | 0,
         i$0 = i$2;
      }
      /*<<weak.ml:289:27>>*/ }
      /*<<weak.ml:291:4>>*/ return loop(0);
     /*<<weak.ml:291:10>>*/ }
    function find(t, d){
      /*<<weak.ml:300:21>>*/ return find_aux
             (t,
              d,
              function(b, i, o, v){
                /*<<weak.ml:300:54>>*/ return v;
               /*<<weak.ml:300:55>>*/ },
              function(h, i){
                /*<<weak.ml:301:48>>*/ throw  /*<<weak.ml:301:48>>*/ caml_maybe_attach_backtrace
                      (Not_found, 1);
               /*<<weak.ml:301:63>>*/ });
     /*<<weak.ml:301:64>>*/ }
    function remove(t, d){
      /*<<weak.ml:303:21>>*/ return find_aux
             (t,
              d,
              function(b, i, o, v){
                /*<<weak.ml:303:54>>*/ return set$1(b, i, 0);
               /*<<weak.ml:303:66>>*/ },
              function(h, i){
                /*<<weak.ml:304:48>>*/ return 0;
               /*<<weak.ml:304:50>>*/ });
     /*<<weak.ml:304:51>>*/ }
     /*<<weak.ml:101:66>>*/ return [0,
            create,
            ,
            ,
            add,
            remove,
            find,
            ,
            ,
            ,
            iter,
            fold,
            count];
   }
   function id(x){ /*<<format.ml:23:11>>*/ return x; /*<<format.ml:23:12>>*/ }
   var zero$2 = 0, unknown = -1;
   function is_known(n){
     /*<<format.ml:42:19>>*/ return 0 <= n ? 1 : 0;
    /*<<format.ml:42:25>>*/ }
    /*<<format.ml:91:13>>*/  /*<<format.ml:91:13>>*/ var
    String_tag = [248, _cQ_, caml_fresh_oo_id(0)];
   function pp_enqueue(state, token){
     /*<<format.ml:219:2>>*/ state[13] = state[13] + token[3] | 0;
    return add(token, state[28]);
    /*<<format.ml:220:32>>*/ }
   function pp_clear_queue(state){
     /*<<format.ml:224:2>>*/ state[12] = 1;
    state[13] = 1;
    return clear$0(state[28]);
    /*<<format.ml:225:28>>*/ }
   var pp_infinity = 1000000010;
   function pp_output_string(state, s){
     /*<<format.ml:251:31>>*/ return caml_call3
            (state[17], s, 0, caml_ml_string_length(s));
    /*<<format.ml:251:72>>*/ }
   function pp_output_newline(state){
     /*<<format.ml:252:30>>*/ return  /*<<format.ml:252:30>>*/ caml_call1
            (state[19], 0);
    /*<<format.ml:252:53>>*/ }
   function pp_output_spaces(state, n){
     /*<<format.ml:253:31>>*/ return  /*<<format.ml:253:31>>*/ caml_call1
            (state[20], n);
    /*<<format.ml:253:52>>*/ }
   function pp_output_indent(state, n){
     /*<<format.ml:254:31>>*/ return  /*<<format.ml:254:31>>*/ caml_call1
            (state[21], n);
    /*<<format.ml:254:52>>*/ }
   function format_pp_text(state, size, text){
     /*<<format.ml:258:2>>*/ state[9] = state[9] - size | 0;
     /*<<format.ml:259:2>>*/ pp_output_string(state, text);
    state[11] = 0;
    return;
    /*<<format.ml:260:31>>*/ }
   function format_string(state, s){
     /*<<format.ml:264:2>>*/  /*<<format.ml:264:5>>*/ var
     _Af_ =  /*<<format.ml:264:5>>*/ caml_string_notequal(s, cst$4);
     /*<<format.ml:264:5>>*/ return _Af_
            ? format_pp_text(state, caml_ml_string_length(s), s)
            : _Af_;
    /*<<format.ml:264:58>>*/ }
   function break_new_line(state, param, width){
    var after = param[3], offset = param[2], before = param[1];
     /*<<format.ml:268:2>>*/ format_string(state, before);
     /*<<format.ml:269:2>>*/ pp_output_newline(state);
    state[11] = 1;
     /*<<format.ml:273:20>>*/ var
     indent = (state[6] - width | 0) + offset | 0,
      /*<<format.ml:273:20>>*/ real_indent = min$0(state[8], indent);
    state[10] = real_indent;
    state[9] = state[6] - state[10] | 0;
     /*<<format.ml:276:2>>*/ pp_output_indent(state, state[10]);
     /*<<format.ml:276:2>>*/ return format_string(state, after);
   }
   function break_line(state, width){
     /*<<format.ml:281:29>>*/ return break_new_line(state, _cR_, width);
    /*<<format.ml:281:67>>*/ }
   function break_same_line(state, param){
    var after = param[3], width = param[2], before = param[1];
     /*<<format.ml:285:2>>*/ format_string(state, before);
    state[9] = state[9] - width | 0;
     /*<<format.ml:287:2>>*/ pp_output_spaces(state, width);
     /*<<format.ml:287:2>>*/ return format_string(state, after);
   }
   function pp_force_break_line(state){
     /*<<format.ml:295:2>>*/  /*<<format.ml:295:8>>*/ var
     match = top_opt(state[2]);
    if(! match)  /*<<format.ml:296:12>>*/ return pp_output_newline(state);
    var
     match$0 = match[1],
     width = match$0[2],
     box_type = match$0[1],
     _Ae_ = state[9] < width ? 1 : 0;
    if(! _Ae_) return _Ae_;
    if(3 < box_type - 1 >>> 0)  /*<<format.ml:300:29>>*/ return;
     /*<<format.ml:301:51>>*/ return break_line(state, width);
    /*<<format.ml:301:73>>*/ }
   function pp_skip_token(state){
     /*<<format.ml:306:2>>*/  /*<<format.ml:306:8>>*/ var
     match = take_opt(state[28]);
    if(! match)  /*<<format.ml:307:12>>*/ return;
    var match$0 = match[1], size = match$0[1], length = match$0[3];
    state[12] = state[12] - length | 0;
     /*<<format.ml:310:49>>*/  /*<<format.ml:310:49>>*/ var _Ad_ = id(size);
    state[9] = state[9] + _Ad_ | 0;
    return;
    /*<<format.ml:310:65>>*/ }
   function format_pp_token(state, size, param){
     /*<<?>>*/ if(typeof param === "number")
     switch(param){
       case 0:
         /*<<format.ml:348:16>>*/  /*<<format.ml:348:16>>*/ var
         match = top_opt(state[3]);
        if(! match)  /*<<format.ml:349:14>>*/ return;
         /*<<format.ml:351:6>>*/ var
         tabs = match[1][1],
          /*<<format.ml:351:6>>*/ add_tab =
           function(n, ls){
             /*<<?>>*/ if(! ls)  /*<<format.ml:352:16>>*/ return [0, n, 0];
            var l = ls[2], x = ls[1];
             /*<<format.ml:353:29>>*/ return  /*<<format.ml:353:29>>*/ caml_lessthan
                     (n, x)
                    ? [0, n, ls]
                    : [0, x, add_tab(n, l)];
           };
        tabs[1] = add_tab(state[6] - state[9] | 0, tabs[1]);
        return;
       case 1:
         /*<<format.ml:339:4>>*/ pop_opt(state[2]);
         /*<<format.ml:339:4>>*/ return;
       case 2:
         /*<<format.ml:345:4>>*/ pop_opt(state[3]);
         /*<<format.ml:345:4>>*/ return;
       case 3:
         /*<<format.ml:378:16>>*/  /*<<format.ml:378:16>>*/ var
         match$0 = top_opt(state[2]);
        if(! match$0)
          /*<<format.ml:379:14>>*/ return pp_output_newline(state);
        var width = match$0[1][2];
         /*<<format.ml:380:26>>*/ return break_line(state, width);
       case 4:
        var _Ac_ = state[10] !== (state[6] - state[9] | 0) ? 1 : 0;
        return _Ac_ ? pp_skip_token(state) : _Ac_;
       default:
         /*<<format.ml:419:17>>*/  /*<<format.ml:419:17>>*/ var
         match$1 = pop_opt(state[5]);
        if(! match$1)  /*<<format.ml:420:15>>*/ return;
         /*<<format.ml:422:20>>*/ var
         tag_name = match$1[1],
          /*<<format.ml:422:20>>*/ marker =
            /*<<format.ml:422:20>>*/ caml_call1(state[25], tag_name);
         /*<<format.ml:423:7>>*/ return pp_output_string(state, marker);
     }
    switch(param[0]){
      case 0:
       var s = param[1];
        /*<<format.ml:323:4>>*/ return format_pp_text(state, size, s);
      case 1:
        /*<<format.ml:388:4>>*/ var
        breaks = param[2],
        fits = param[1],
         /*<<format.ml:388:4>>*/ off = breaks[2],
        before = breaks[1],
         /*<<format.ml:389:16>>*/ match$2 = top_opt(state[2]);
       if(! match$2)  /*<<format.ml:390:14>>*/ return;
       var match$3 = match$2[1], width$0 = match$3[2], box_type = match$3[1];
        /*<<format.ml:392:6>>*/ switch(box_type){
         case 0:
           /*<<format.ml:409:19>>*/ return break_same_line(state, fits);
         case 1:
           /*<<format.ml:408:19>>*/ return break_new_line
                  (state, breaks, width$0);
         case 2:
           /*<<format.ml:406:20>>*/ return break_new_line
                  (state, breaks, width$0);
         case 3:
          return state[9] < (size + caml_ml_string_length(before) | 0)
                  ? break_new_line(state, breaks, width$0)
                  : break_same_line(state, fits);
         case 4:
          return state[11]
                  ? break_same_line(state, fits)
                  : state
                     [9]
                    < (size + caml_ml_string_length(before) | 0)
                    ? break_new_line(state, breaks, width$0)
                    : ((state
                       [6]
                      - width$0
                      | 0)
                      + off
                      | 0)
                      < state[10]
                      ? break_new_line(state, breaks, width$0)
                      : break_same_line(state, fits);
         default:
           /*<<format.ml:407:19>>*/ return break_same_line(state, fits);
       }
      case 2:
        /*<<format.ml:359:16>>*/ var
        off$0 = param[2],
        n = param[1],
        insertion_point = state[6] - state[9] | 0,
         /*<<format.ml:359:16>>*/ match$4 = top_opt(state[3]);
       if(! match$4)  /*<<format.ml:360:14>>*/ return;
        /*<<format.ml:362:6>>*/ var
        tabs$0 = match$4[1][1],
         /*<<format.ml:362:6>>*/ match$5 = tabs$0[1];
       if(match$5)
        var
         first = match$5[1],
         find =
           function(param){
             /*<<format.ml:366:25>>*/ var param$0 = param;
             /*<<format.ml:366:25>>*/ for(;;){
             if(! param$0)  /*<<format.ml:366:10>>*/ return first;
             var tail = param$0[2], head = param$0[1];
             if(insertion_point <= head)
               /*<<format.ml:368:46>>*/ return head;
             var param$0 = tail;
            }
            /*<<format.ml:369:25>>*/ },
         tab = find(tabs$0[1]);
       else
        var tab = insertion_point;
       var offset = tab - insertion_point | 0;
        /*<<format.ml:372:6>>*/ return 0 <= offset
               ? break_same_line(state, [0, _cT_, offset + n | 0, _cS_])
               : break_new_line
                 (state, [0, _cV_, tab + off$0 | 0, _cU_], state[6]);
      case 3:
       var
        ty = param[2],
        off$1 = param[1],
        insertion_point$0 = state[6] - state[9] | 0;
       if(state[8] < insertion_point$0)
         /*<<format.ml:329:6>>*/ pp_force_break_line(state);
        /*<<format.ml:331:4>>*/ var
        width$1 = state[9] - off$1 | 0,
         /*<<format.ml:331:4>>*/ box_type$0 =
          1 === ty ? 1 : state[9] < size ? ty : 5;
        /*<<format.ml:336:4>>*/ return push
               ([0, box_type$0, width$1], state[2]);
      case 4:
       var tbox = param[1];
        /*<<format.ml:342:4>>*/ return push(tbox, state[3]);
      default:
        /*<<format.ml:414:18>>*/ var
        tag_name$0 = param[1],
         /*<<format.ml:414:18>>*/ marker$0 =
           /*<<format.ml:414:18>>*/ caml_call1(state[24], tag_name$0);
        /*<<format.ml:415:5>>*/ pp_output_string(state, marker$0);
       return push(tag_name$0, state[5]);
    }
   }
   function advance_left(state){
     /*<<format.ml:431:2>>*/ for(;;){
      /*<<format.ml:431:8>>*/  /*<<format.ml:431:8>>*/ var
      match = peek_opt(state[28]);
     if(! match)  /*<<format.ml:432:12>>*/ return 0;
      /*<<format.ml:435:7>>*/ var
      match$0 = match[1],
      size = match$0[1],
      length = match$0[3],
      token = match$0[2],
      pending_count = state[13] - state[12] | 0,
       /*<<format.ml:435:7>>*/ _Aa_ = is_known(size),
       /*<<format.ml:435:7>>*/ _Ab_ =
        _Aa_ || (state[9] <= pending_count ? 1 : 0);
     if(! _Ab_)  /*<<format.ml:435:7>>*/ return _Ab_;
      /*<<format.ml:436:6>>*/ take(state[28]);
      /*<<format.ml:437:20>>*/  /*<<format.ml:437:20>>*/ var
      size$0 = is_known(size) ? id(size) : pp_infinity;
      /*<<format.ml:438:6>>*/ format_pp_token(state, size$0, token);
     state[12] = length + state[12] | 0;
    }
    /*<<format.ml:441:7>>*/ }
   function enqueue_advance(state, tok){
     /*<<format.ml:445:32>>*/ pp_enqueue(state, tok);
     /*<<format.ml:445:32>>*/ return advance_left(state);
    /*<<format.ml:445:72>>*/ }
   function enqueue_string_as(state, size, s){
     /*<<format.ml:450:2>>*/ return enqueue_advance
            (state, [0, size, [0, s], id(size)]);
    /*<<format.ml:450:78>>*/ }
   function enqueue_string(state, s){
     /*<<format.ml:454:2>>*/ return enqueue_string_as
            (state, id(caml_ml_string_length(s)), s);
    /*<<format.ml:454:59>>*/ }
   function initialize_scan_stack(stack){
     /*<<format.ml:462:2>>*/ clear(stack);
     /*<<format.ml:463:19>>*/  /*<<format.ml:463:19>>*/ var
     queue_elem = [0, unknown, _cW_, 0];
     /*<<format.ml:464:2>>*/ return push([0, -1, queue_elem], stack);
    /*<<format.ml:464:50>>*/ }
   function set_size(state, ty){
     /*<<format.ml:476:2>>*/  /*<<format.ml:476:8>>*/ var
     match = top_opt(state[1]);
    if(! match)  /*<<format.ml:477:12>>*/ return;
     /*<<format.ml:479:15>>*/ var
     match$0 = match[1],
     queue_elem = match$0[2],
     left_total = match$0[1],
      /*<<format.ml:479:15>>*/ size = id(queue_elem[1]);
    if(left_total < state[12]) return initialize_scan_stack(state[1]);
    var _z$_ = queue_elem[2];
    if(typeof _z$_ !== "number")
     switch(_z$_[0]){
       case 3:
        if(1 - ty){
         queue_elem[1] = id(state[13] + size | 0);
          /*<<format.ml:493:10>>*/ pop_opt(state[1]);
        }
         /*<<format.ml:493:10>>*/ return;
       case 1:
       case 2:
        if(ty){
         queue_elem[1] = id(state[13] + size | 0);
          /*<<format.ml:488:10>>*/ pop_opt(state[1]);
        }
         /*<<format.ml:488:10>>*/ return;
     }
     /*<<format.ml:497:8>>*/ return;
    /*<<format.ml:497:10>>*/ }
   function scan_push(state, b, token){
     /*<<format.ml:503:2>>*/ pp_enqueue(state, token);
    if(b)  /*<<format.ml:504:12>>*/ set_size(state, 1);
     /*<<format.ml:505:13>>*/  /*<<format.ml:505:13>>*/ var
     elem = [0, state[13], token];
     /*<<format.ml:506:2>>*/ return push(elem, state[1]);
    /*<<format.ml:506:37>>*/ }
   function pp_open_box_gen(state, indent, br_ty){
     /*<<format.ml:513:2>>*/ state[14] = state[14] + 1 | 0;
    if(state[14] < state[15]){
      /*<<format.ml:515:15>>*/ var
       /*<<format.ml:515:15>>*/ size = id(- state[13] | 0),
       /*<<format.ml:516:15>>*/ elem = [0, size, [3, indent, br_ty], 0];
      /*<<format.ml:517:4>>*/ return scan_push(state, 0, elem);
    }
    var _z__ = state[14] === state[15] ? 1 : 0;
    return _z__ ? enqueue_string(state, state[16]) : _z__;
    /*<<format.ml:519:45>>*/ }
   function pp_open_sys_box(state){
     /*<<format.ml:523:28>>*/ return pp_open_box_gen(state, 0, 3);
    /*<<format.ml:523:61>>*/ }
   function pp_close_box(state, param){
     /*<<format.ml:527:2>>*/ var _z8_ = 1 < state[14] ? 1 : 0;
    if(_z8_){
     if(state[14] < state[15]){
       /*<<format.ml:531:6>>*/ pp_enqueue(state, [0, zero$2, 1, 0]);
       /*<<format.ml:532:6>>*/ set_size(state, 1);
       /*<<format.ml:532:27>>*/ set_size(state, 0);
     }
     state[14] = state[14] - 1 | 0;
     var _z9_ = 0;
    }
    else
     var _z9_ = _z8_;
    return _z9_;
    /*<<format.ml:535:5>>*/ }
   function pp_open_stag(state, tag_name){
     /*<<format.ml:540:2>>*/ if(state[22]){
      /*<<format.ml:542:4>>*/ push(tag_name, state[4]);
      /*<<format.ml:543:4>>*/  /*<<format.ml:543:4>>*/ caml_call1
      (state[26], tag_name);
    }
    var _z7_ = state[23];
    if(! _z7_) return _z7_;
     /*<<format.ml:546:16>>*/  /*<<format.ml:546:16>>*/ var
     token = [5, tag_name];
     /*<<format.ml:547:21>>*/ return pp_enqueue(state, [0, zero$2, token, 0]);
    /*<<format.ml:547:60>>*/ }
   function pp_close_stag(state, param){
     /*<<format.ml:552:2>>*/ if(state[23])
      /*<<format.ml:553:4>>*/ pp_enqueue(state, [0, zero$2, 5, 0]);
    var _z5_ = state[22];
    if(_z5_){
      /*<<format.ml:555:10>>*/  /*<<format.ml:555:10>>*/ var
      match = pop_opt(state[4]);
     if(match){
      var tag_name = match[1];
       /*<<format.ml:558:6>>*/ return  /*<<format.ml:558:6>>*/ caml_call1
              (state[27], tag_name);
     }
     var _z6_ = 0;
    }
    else
     var _z6_ = _z5_;
     /*<<format.ml:556:14>>*/ return _z6_;
    /*<<format.ml:558:39>>*/ }
   function pp_rinit(state){
     /*<<format.ml:591:2>>*/ pp_clear_queue(state);
     /*<<format.ml:592:2>>*/ initialize_scan_stack(state[1]);
     /*<<format.ml:593:2>>*/ clear(state[2]);
     /*<<format.ml:594:2>>*/ clear(state[3]);
     /*<<format.ml:595:2>>*/ clear(state[4]);
     /*<<format.ml:596:2>>*/ clear(state[5]);
    state[10] = 0;
    state[14] = 0;
    state[9] = state[6];
     /*<<format.ml:600:2>>*/ return pp_open_sys_box(state);
    /*<<format.ml:600:23>>*/ }
   function clear_tag_stack(state){
     /*<<format.ml:603:2>>*/ return iter$3
            (function(param){
               /*<<format.ml:603:23>>*/ return pp_close_stag(state, 0);
              /*<<format.ml:603:45>>*/ },
             state[4]);
    /*<<format.ml:603:65>>*/ }
   function pp_flush_queue(state, end_with_newline){
     /*<<format.ml:608:2>>*/ clear_tag_stack(state);
     /*<<format.ml:610:4>>*/ for(;;){
     if(1 >= state[14]){
      state[13] = pp_infinity;
       /*<<format.ml:613:2>>*/ advance_left(state);
      if(end_with_newline)  /*<<format.ml:614:27>>*/ pp_output_newline(state);
       /*<<format.ml:614:27>>*/ return pp_rinit(state);
     }
      /*<<format.ml:610:4>>*/ pp_close_box(state, 0);
    }
    /*<<format.ml:615:16>>*/ }
   function pp_print_as_size(state, size, s){
     /*<<format.ml:625:2>>*/ var _z4_ = state[14] < state[15] ? 1 : 0;
    return _z4_ ? enqueue_string_as(state, size, s) : _z4_;
    /*<<format.ml:626:37>>*/ }
   function pp_print_as(state, isize, s){
     /*<<format.ml:630:2>>*/ return pp_print_as_size(state, id(isize), s);
    /*<<format.ml:630:46>>*/ }
   function pp_print_string(state, s){
     /*<<format.ml:634:2>>*/ return pp_print_as
            (state, caml_ml_string_length(s), s);
    /*<<format.ml:634:39>>*/ }
   function pp_print_int(state, i){
     /*<<format.ml:640:27>>*/ return pp_print_string(state, to_string(i));
    /*<<format.ml:640:66>>*/ }
   function pp_print_char(state, c){
     /*<<format.ml:650:2>>*/ return pp_print_as(state, 1, make$0(1, c));
    /*<<format.ml:650:39>>*/ }
   function pp_open_box(state, indent){
     /*<<format.ml:659:31>>*/ return pp_open_box_gen(state, indent, 4);
    /*<<format.ml:659:66>>*/ }
   function pp_print_newline(state, param){
     /*<<format.ml:671:2>>*/ pp_flush_queue(state, 1);
     /*<<format.ml:671:2>>*/ return  /*<<format.ml:671:2>>*/ caml_call1
            (state[18], 0);
    /*<<format.ml:671:68>>*/ }
   function pp_print_flush(state, param){
     /*<<format.ml:673:2>>*/ pp_flush_queue(state, 0);
     /*<<format.ml:673:2>>*/ return  /*<<format.ml:673:2>>*/ caml_call1
            (state[18], 0);
    /*<<format.ml:673:69>>*/ }
   function pp_force_newline(state, param){
     /*<<format.ml:678:2>>*/ var _z3_ = state[14] < state[15] ? 1 : 0;
    return _z3_ ? enqueue_advance(state, [0, zero$2, 3, 0]) : _z3_;
    /*<<format.ml:679:78>>*/ }
   function pp_print_custom_break(state, fits, breaks){
     /*<<format.ml:692:2>>*/ var
     after = fits[3],
     width = fits[2],
     before = fits[1],
     _z2_ = state[14] < state[15] ? 1 : 0;
    if(! _z2_) return _z2_;
     /*<<format.ml:694:15>>*/ var
      /*<<format.ml:694:15>>*/ size = id(- state[13] | 0),
      /*<<format.ml:695:25>>*/ token = [1, fits, breaks],
     length =
       (caml_ml_string_length(before) + width | 0)
       +  /*<<format.ml:696:4>>*/ caml_ml_string_length(after)
       | 0,
      /*<<format.ml:697:15>>*/ elem = [0, size, token, length];
     /*<<format.ml:698:4>>*/ return scan_push(state, 1, elem);
    /*<<format.ml:698:29>>*/ }
   function pp_print_break(state, width, offset){
     /*<<format.ml:705:2>>*/ return pp_print_custom_break
            (state, [0, _c0_, width, _cZ_], [0, _cY_, offset, _cX_]);
    /*<<format.ml:706:50>>*/ }
   function pp_print_space(state, param){
     /*<<format.ml:714:30>>*/ return pp_print_break(state, 1, 0);
    /*<<format.ml:714:54>>*/ }
   function pp_print_cut(state, param){
     /*<<format.ml:715:28>>*/ return pp_print_break(state, 0, 0);
    /*<<format.ml:715:52>>*/ }
   function pp_set_formatter_out_functions(state, param){
    var j = param[5], i = param[4], h = param[3], g = param[2], f = param[1];
    state[17] = f;
    state[18] = g;
    state[19] = h;
    state[20] = i;
    state[21] = j;
    return 0;
   }
   function pp_get_formatter_out_functions(state, param){
     /*<<format.ml:873:46>>*/ return [0, , , state[19], state[20], state[21]];
    /*<<format.ml:879:1>>*/ }
   function display_newline(state, param){
     /*<<format.ml:891:31>>*/ return  /*<<format.ml:891:31>>*/ caml_call3
            (state[17], _c1_, 0, 1);
    /*<<format.ml:891:60>>*/ }
    /*<<format.ml:894:17>>*/  /*<<format.ml:894:17>>*/ var
    blank_line = make$0(80, 32);
   function display_blanks(state, n){
     /*<<format.ml:896:2>>*/ var n$0 = n;
     /*<<format.ml:896:2>>*/ for(;;){
     var _z1_ = 0 < n$0 ? 1 : 0;
     if(! _z1_) return _z1_;
     if(80 >= n$0)
       /*<<format.ml:897:18>>*/ return  /*<<format.ml:897:18>>*/ caml_call3
              (state[17], blank_line, 0, n$0);
      /*<<format.ml:899:4>>*/  /*<<format.ml:899:4>>*/ caml_call3
      (state[17], blank_line, 0, 80);
      /*<<format.ml:899:4>>*/ var
       /*<<format.ml:899:4>>*/ n$1 = n$0 - 80 | 0,
      n$0 = n$1;
    }
    /*<<format.ml:901:5>>*/ }
   function default_pp_mark_open_tag(param){
     /*<<format.ml:922:31>>*/ if(param[1] !== String_tag)
      /*<<format.ml:924:9>>*/ return _c4_;
    var s = param[2];
     /*<<format.ml:923:26>>*/ return symbol(_c3_, symbol(s, _c2_));
    /*<<format.ml:924:11>>*/ }
   function default_pp_mark_close_tag(param){
     /*<<format.ml:925:32>>*/ if(param[1] !== String_tag)
      /*<<format.ml:927:9>>*/ return _c7_;
    var s = param[2];
     /*<<format.ml:926:27>>*/ return symbol(_c6_, symbol(s, _c5_));
    /*<<format.ml:927:11>>*/ }
   function default_pp_print_open_tag(_z0_){ /*<<?>>*/ return 0;}
   function default_pp_print_close_tag(_zZ_){ /*<<?>>*/ return 0;}
   function pp_make_formatter(f, g, h, i, j){
     /*<<format.ml:936:17>>*/ var
      /*<<format.ml:936:17>>*/ pp_queue = create$0(0),
      /*<<format.ml:938:4>>*/ sys_tok = [0, unknown, _c8_, 0];
     /*<<format.ml:939:2>>*/ add(sys_tok, pp_queue);
     /*<<format.ml:940:19>>*/  /*<<format.ml:940:19>>*/ var
     scan_stack = create(0);
     /*<<format.ml:941:2>>*/ initialize_scan_stack(scan_stack);
     /*<<format.ml:942:2>>*/ push([0, 1, sys_tok], scan_stack);
     /*<<format.ml:942:2>>*/ var
      /*<<format.ml:942:2>>*/ pp_margin = 78,
      /*<<format.ml:950:20>>*/ _zW_ = create(0),
      /*<<format.ml:949:19>>*/ _zX_ = create(0),
      /*<<format.ml:948:20>>*/ _zY_ = create(0);
     /*<<format.ml:945:2>>*/ return [0,
            scan_stack,
            create(0),
            _zY_,
            _zX_,
            _zW_,
            pp_margin,
            10,
            68,
            pp_margin,
            0,
            1,
            1,
            1,
            1,
            infinity,
            _c9_,
            f,
            g,
            h,
            i,
            j,
            0,
            0,
            default_pp_mark_open_tag,
            default_pp_mark_close_tag,
            default_pp_print_open_tag,
            default_pp_print_close_tag,
            pp_queue];
   }
   function make_formatter(output, flush){
     /*<<format.ml:990:2>>*/  /*<<format.ml:990:12>>*/ var
     ppf =
       pp_make_formatter
        (output,
         flush,
         function(_zV_){ /*<<?>>*/ return 0;},
         function(_zU_){ /*<<?>>*/ return 0;},
         function(_zT_){ /*<<?>>*/ return 0;});
    ppf[19] = function(_zS_){ /*<<?>>*/ return display_newline(ppf, _zS_);};
    ppf[20] = function(_zR_){ /*<<?>>*/ return display_blanks(ppf, _zR_);};
    ppf[21] = function(_zQ_){ /*<<?>>*/ return display_blanks(ppf, _zQ_);};
     /*<<format.ml:994:2>>*/ return ppf;
    /*<<format.ml:994:5>>*/ }
   function formatter_of_out_channel(oc){
     /*<<format.ml:999:2>>*/ return make_formatter
            (function(_zN_, _zO_, _zP_){
               /*<<?>>*/ return output_substring(oc, _zN_, _zO_, _zP_);
             },
             function(param){
               /*<<format.ml:999:50>>*/ return flush(oc);
              /*<<format.ml:999:58>>*/ });
    /*<<format.ml:999:59>>*/ }
   function formatter_of_buffer(b){
     /*<<format.ml:1004:2>>*/ return make_formatter
            (function(_zK_, _zL_, _zM_){
               /*<<?>>*/ return add_substring(b, _zK_, _zL_, _zM_);
             },
             function(_zJ_){ /*<<?>>*/ return 0;});
    /*<<format.ml:1004:48>>*/ }
   var pp_buffer_size = 512;
   function pp_make_buffer(param){
     /*<<format.ml:1011:24>>*/ return create$1(pp_buffer_size);
    /*<<format.ml:1011:52>>*/ }
    /*<<format.ml:1014:13>>*/ var
     /*<<format.ml:1014:13>>*/ stdbuf = pp_make_buffer(0),
     /*<<format.ml:1018:20>>*/ std_formatter =
      formatter_of_out_channel(stdout),
     /*<<format.ml:1019:20>>*/ err_formatter =
      formatter_of_out_channel(stderr),
     /*<<format.ml:1020:20>>*/ str_formatter = formatter_of_buffer(stdbuf),
     /*<<format.ml:1025:17>>*/ stdbuf_key = new_key(0, pp_make_buffer);
    /*<<format.ml:1026:8>>*/ set(stdbuf_key, stdbuf);
    /*<<format.ml:1028:24>>*/  /*<<format.ml:1028:24>>*/ var
    str_formatter_key =
      new_key
       (0,
        function(param){
          /*<<format.ml:1029:2>>*/ return formatter_of_buffer
                 (get$0(stdbuf_key));
         /*<<format.ml:1029:42>>*/ });
    /*<<format.ml:1030:8>>*/ set(str_formatter_key, str_formatter);
    /*<<format.ml:1030:8>>*/ function buffered_out_string(key, str, ofs, len){
     /*<<format.ml:1033:2>>*/ return add_substring(get$0(key), str, ofs, len);
    /*<<format.ml:1033:55>>*/ }
   function buffered_out_flush(oc, key, param){
     /*<<format.ml:1036:2>>*/ var
      /*<<format.ml:1036:12>>*/ buf = get$0(key),
      /*<<format.ml:1037:12>>*/ len = length$1(buf),
      /*<<format.ml:1038:12>>*/ str = contents(buf);
     /*<<format.ml:1039:2>>*/ output_substring(oc, str, 0, len);
     /*<<format.ml:1040:2>>*/ flush(oc);
     /*<<format.ml:1040:2>>*/ return clear$1(buf);
    /*<<format.ml:1041:18>>*/ }
    /*<<format.ml:1043:18>>*/ var
     /*<<format.ml:1043:18>>*/ std_buf_key =
      new_key
       (0,
        function(param){
          /*<<format.ml:1043:48>>*/ return create$1(pp_buffer_size);
         /*<<format.ml:1043:76>>*/ }),
     /*<<format.ml:1044:18>>*/ err_buf_key =
      new_key
       (0,
        function(param){
          /*<<format.ml:1044:48>>*/ return create$1(pp_buffer_size);
         /*<<format.ml:1044:76>>*/ }),
     /*<<format.ml:1046:24>>*/ std_formatter_key =
      new_key
       (0,
        function(param){
          /*<<format.ml:1047:2>>*/  /*<<format.ml:1048:4>>*/ var
          ppf =
            pp_make_formatter
             (function(_zG_, _zH_, _zI_){
                /*<<?>>*/ return buffered_out_string
                       (std_buf_key, _zG_, _zH_, _zI_);
              },
              function(_zF_){
                /*<<?>>*/ return buffered_out_flush(stdout, std_buf_key, _zF_);
              },
              function(_zE_){ /*<<?>>*/ return 0;},
              function(_zD_){ /*<<?>>*/ return 0;},
              function(_zC_){ /*<<?>>*/ return 0;});
         ppf[19] =
          function(_zB_){ /*<<?>>*/ return display_newline(ppf, _zB_);};
         ppf[20] =
          function(_zA_){ /*<<?>>*/ return display_blanks(ppf, _zA_);};
         ppf[21] =
          function(_zz_){ /*<<?>>*/ return display_blanks(ppf, _zz_);};
          /*<<format.ml:1054:2>>*/ at_exit$0
          (function(_zy_){ /*<<?>>*/ return pp_print_flush(ppf, _zy_);});
          /*<<format.ml:1054:2>>*/ return ppf;
         /*<<format.ml:1055:5>>*/ });
    /*<<format.ml:1056:8>>*/ set(std_formatter_key, std_formatter);
    /*<<format.ml:1058:24>>*/  /*<<format.ml:1058:24>>*/ var
    err_formatter_key =
      new_key
       (0,
        function(param){
          /*<<format.ml:1059:2>>*/  /*<<format.ml:1060:4>>*/ var
          ppf =
            pp_make_formatter
             (function(_zv_, _zw_, _zx_){
                /*<<?>>*/ return buffered_out_string
                       (err_buf_key, _zv_, _zw_, _zx_);
              },
              function(_zu_){
                /*<<?>>*/ return buffered_out_flush(stderr, err_buf_key, _zu_);
              },
              function(_zt_){ /*<<?>>*/ return 0;},
              function(_zs_){ /*<<?>>*/ return 0;},
              function(_zr_){ /*<<?>>*/ return 0;});
         ppf[19] =
          function(_zq_){ /*<<?>>*/ return display_newline(ppf, _zq_);};
         ppf[20] =
          function(_zp_){ /*<<?>>*/ return display_blanks(ppf, _zp_);};
         ppf[21] =
          function(_zo_){ /*<<?>>*/ return display_blanks(ppf, _zo_);};
          /*<<format.ml:1066:2>>*/ at_exit$0
          (function(_zn_){ /*<<?>>*/ return pp_print_flush(ppf, _zn_);});
          /*<<format.ml:1066:2>>*/ return ppf;
         /*<<format.ml:1067:5>>*/ });
    /*<<format.ml:1068:8>>*/ set(err_formatter_key, err_formatter);
   function flush_buffer_formatter(buf, ppf){
     /*<<format.ml:1080:2>>*/ pp_flush_queue(ppf, 0);
     /*<<format.ml:1081:10>>*/  /*<<format.ml:1081:10>>*/ var
     s = contents(buf);
     /*<<format.ml:1082:2>>*/ reset(buf);
     /*<<format.ml:1082:2>>*/ return s;
    /*<<format.ml:1083:3>>*/ }
   function set_formatter_out_functions(v){
     /*<<format.ml:1226:2>>*/ return pp_set_formatter_out_functions
            (get$0(std_formatter_key), v);
    /*<<format.ml:1226:62>>*/ }
   function pp_print_iter(opt, iter, pp_v, ppf, v){
     /*<<format.ml:1254:2>>*/ if(opt)
     var sth = opt[1], pp_sep = sth;
    else
     var pp_sep = pp_print_cut;
     /*<<format.ml:1254:17>>*/  /*<<format.ml:1254:17>>*/ var
     is_first = [0, 1];
    function pp_v$0(v){
      /*<<format.ml:1256:4>>*/ if(is_first[1])
      is_first[1] = 0;
     else
       /*<<format.ml:1256:45>>*/  /*<<format.ml:1256:45>>*/ caml_call2
       (pp_sep, ppf, 0);
      /*<<format.ml:1256:45>>*/ return  /*<<format.ml:1256:45>>*/ caml_call2
             (pp_v, ppf, v);
     /*<<format.ml:1257:14>>*/ }
     /*<<format.ml:1259:2>>*/ return  /*<<format.ml:1259:2>>*/ caml_call2
            (iter, pp_v$0, v);
    /*<<format.ml:1259:13>>*/ }
   function pp_print_list(opt, pp_v, ppf, v){
     /*<<format.ml:1263:2>>*/ if(opt)
     var sth = opt[1], pp_sep = sth;
    else
     var pp_sep = pp_print_cut;
     /*<<format.ml:1263:2>>*/ return pp_print_iter
            ([0, pp_sep], iter$0, pp_v, ppf, v);
    /*<<format.ml:1263:44>>*/ }
   function pp_print_text(ppf, s){
     /*<<format.ml:1275:2>>*/ var
     len = caml_ml_string_length(s),
      /*<<format.ml:1276:13>>*/ left = [0, 0],
      /*<<format.ml:1277:14>>*/ right = [0, 0];
    function flush(param){
      /*<<format.ml:1279:4>>*/ pp_print_string
      (ppf, sub$0(s, left[1], right[1] - left[1] | 0));
     right[1]++;
     left[1] = right[1];
     return 0;
     /*<<format.ml:1280:31>>*/ }
    for(;;){
     if(right[1] === len){
      var _zm_ = left[1] !== len ? 1 : 0;
      return _zm_ ? flush(0) : _zm_;
     }
      /*<<format.ml:1283:10>>*/  /*<<format.ml:1283:10>>*/ var
      match =  /*<<format.ml:1283:10>>*/ caml_string_get(s, right[1]);
     if(10 === match){
       /*<<format.ml:1285:8>>*/ flush(0);
       /*<<format.ml:1286:8>>*/ pp_force_newline(ppf, 0);
     }
     else if(32 === match){
       /*<<format.ml:1288:8>>*/ flush(0);
       /*<<format.ml:1288:18>>*/ pp_print_space(ppf, 0);
     }
     else
      right[1]++;
    }
    /*<<format.ml:1293:31>>*/ }
   function compute_tag(output, tag_acc){
     /*<<format.ml:1310:2>>*/ var
      /*<<format.ml:1310:12>>*/ buf = create$1(16),
      /*<<format.ml:1311:12>>*/ ppf = formatter_of_buffer(buf);
     /*<<format.ml:1312:2>>*/  /*<<format.ml:1312:2>>*/ caml_call2
     (output, ppf, tag_acc);
     /*<<format.ml:1313:2>>*/ pp_print_flush(ppf, 0);
     /*<<format.ml:1314:12>>*/  /*<<format.ml:1314:12>>*/ var
     len = length$1(buf);
     /*<<format.ml:1315:2>>*/ return 2 <= len
            ? sub$2(buf, 1, len - 2 | 0)
            : contents(buf);
    /*<<format.ml:1316:33>>*/ }
   function output_formatting_lit(ppf, fmting_lit){
     /*<<format.ml:1329:43>>*/ if(typeof fmting_lit === "number")
     switch(fmting_lit){
       case 0:
         /*<<format.ml:1330:33>>*/ return pp_close_box(ppf, 0);
       case 1:
         /*<<format.ml:1331:33>>*/ return pp_close_stag(ppf, 0);
       case 2:
         /*<<format.ml:1333:33>>*/ return pp_print_flush(ppf, 0);
       case 3:
         /*<<format.ml:1334:33>>*/ return pp_force_newline(ppf, 0);
       case 4:
         /*<<format.ml:1335:33>>*/ return pp_print_newline(ppf, 0);
       case 5:
         /*<<format.ml:1337:33>>*/ return pp_print_char(ppf, 64);
       default:  /*<<format.ml:1338:33>>*/ return pp_print_char(ppf, 37);
     }
    switch(fmting_lit[0]){
      case 0:
       var offset = fmting_lit[3], width = fmting_lit[2];
        /*<<format.ml:1332:33>>*/ return pp_print_break(ppf, width, offset);
      case 1:
        /*<<format.ml:1336:33>>*/ return 0;
      default:
       var c = fmting_lit[1];
        /*<<format.ml:1339:33>>*/ pp_print_char(ppf, 64);
        /*<<format.ml:1339:33>>*/ return pp_print_char(ppf, c);
    }
    /*<<format.ml:1339:75>>*/ }
   function output_acc$0(ppf, acc){
     /*<<format.ml:1345:29>>*/ if(typeof acc === "number")
      /*<<format.ml:1371:32>>*/ return 0;
    a:
    {
     b:
     {
      c:
      {
       switch(acc[0]){
         case 0:
          var f = acc[2], p = acc[1];
           /*<<format.ml:1355:4>>*/ output_acc$0(ppf, p);
           /*<<format.ml:1355:4>>*/ return output_formatting_lit(ppf, f);
         case 1:
          var match = acc[2], p$0 = acc[1];
          if(0 === match[0]){
           var acc$0 = match[1];
            /*<<format.ml:1358:4>>*/ output_acc$0(ppf, p$0);
            /*<<format.ml:1359:21>>*/ return pp_open_stag
                   (ppf, [0, String_tag, compute_tag(output_acc$0, acc$0)]);
          }
          var acc$1 = match[1];
           /*<<format.ml:1361:4>>*/ output_acc$0(ppf, p$0);
           /*<<format.ml:1362:24>>*/ var
            /*<<format.ml:1362:24>>*/ match$0 =
             open_box_of_string(compute_tag(output_acc$0, acc$1)),
           bty = match$0[2],
           indent = match$0[1];
           /*<<format.ml:1363:4>>*/ return pp_open_box_gen(ppf, indent, bty);
         case 2:
          var _zd_ = acc[1];
          if(typeof _zd_ !== "number" && 0 === _zd_[0]){
           var _ze_ = _zd_[2];
           if(typeof _ze_ !== "number" && 1 === _ze_[0]){
            var s$0 = acc[2], size = _ze_[2], p$2 = _zd_[1];
            break b;
           }
          }
          var s = acc[2], p$1 = _zd_;
          break a;
         case 3:
          var _zf_ = acc[1];
          if(typeof _zf_ !== "number" && 0 === _zf_[0]){
           var _zg_ = _zf_[2];
           if(typeof _zg_ !== "number" && 1 === _zg_[0]){
            var c$0 = acc[2], size$0 = _zg_[2], p$4 = _zf_[1];
            break;
           }
          }
          var c = acc[2], p$3 = _zf_;
          break c;
         case 4:
          var _zi_ = acc[1];
          if(typeof _zi_ !== "number" && 0 === _zi_[0]){
           var _zj_ = _zi_[2];
           if(typeof _zj_ !== "number" && 1 === _zj_[0]){
            var s$0 = acc[2], size = _zj_[2], p$2 = _zi_[1];
            break b;
           }
          }
          var s = acc[2], p$1 = _zi_;
          break a;
         case 5:
          var _zk_ = acc[1];
          if(typeof _zk_ !== "number" && 0 === _zk_[0]){
           var _zl_ = _zk_[2];
           if(typeof _zl_ !== "number" && 1 === _zl_[0]){
            var c$0 = acc[2], size$0 = _zl_[2], p$4 = _zk_[1];
            break;
           }
          }
          var c = acc[2], p$3 = _zk_;
          break c;
         case 6:
          var f$0 = acc[2], p$5 = acc[1];
           /*<<format.ml:1368:32>>*/ output_acc$0(ppf, p$5);
           /*<<format.ml:1368:32>>*/ return  /*<<format.ml:1368:32>>*/ caml_call1
                  (f$0, ppf);
         case 7:
          var p$6 = acc[1];
           /*<<format.ml:1369:32>>*/ output_acc$0(ppf, p$6);
           /*<<format.ml:1369:32>>*/ return pp_print_flush(ppf, 0);
         default:
          var msg = acc[2], p$7 = acc[1];
           /*<<format.ml:1370:32>>*/ output_acc$0(ppf, p$7);
           /*<<format.ml:1370:32>>*/ return invalid_arg(msg);
       }
        /*<<format.ml:1352:4>>*/ output_acc$0(ppf, p$4);
        /*<<format.ml:1353:44>>*/  /*<<format.ml:1353:44>>*/ var
        _zh_ = make$0(1, c$0);
        /*<<format.ml:1353:44>>*/ return pp_print_as_size
               (ppf, id(size$0), _zh_);
      }
       /*<<format.ml:1367:32>>*/ output_acc$0(ppf, p$3);
       /*<<format.ml:1367:32>>*/ return pp_print_char(ppf, c);
     }
      /*<<format.ml:1348:4>>*/ output_acc$0(ppf, p$2);
      /*<<format.ml:1348:4>>*/ return pp_print_as_size(ppf, id(size), s$0);
    }
     /*<<format.ml:1365:32>>*/ output_acc$0(ppf, p$1);
     /*<<format.ml:1365:32>>*/ return pp_print_string(ppf, s);
    /*<<format.ml:1371:34>>*/ }
   function strput_acc$0(ppf, acc){
     /*<<format.ml:1377:29>>*/ if(typeof acc === "number")
      /*<<format.ml:1406:32>>*/ return 0;
    a:
    {
     b:
     {
      c:
      {
       switch(acc[0]){
         case 0:
          var f = acc[2], p = acc[1];
           /*<<format.ml:1390:4>>*/ strput_acc$0(ppf, p);
           /*<<format.ml:1390:4>>*/ return output_formatting_lit(ppf, f);
         case 1:
          var match = acc[2], p$0 = acc[1];
          if(0 === match[0]){
           var acc$0 = match[1];
            /*<<format.ml:1393:4>>*/ strput_acc$0(ppf, p$0);
            /*<<format.ml:1394:21>>*/ return pp_open_stag
                   (ppf, [0, String_tag, compute_tag(strput_acc$0, acc$0)]);
          }
          var acc$1 = match[1];
           /*<<format.ml:1396:4>>*/ strput_acc$0(ppf, p$0);
           /*<<format.ml:1397:24>>*/ var
            /*<<format.ml:1397:24>>*/ match$0 =
             open_box_of_string(compute_tag(strput_acc$0, acc$1)),
           bty = match$0[2],
           indent = match$0[1];
           /*<<format.ml:1398:4>>*/ return pp_open_box_gen(ppf, indent, bty);
         case 2:
          var _y5_ = acc[1];
          if(typeof _y5_ !== "number" && 0 === _y5_[0]){
           var _y6_ = _y5_[2];
           if(typeof _y6_ !== "number" && 1 === _y6_[0]){
            var s$0 = acc[2], size = _y6_[2], p$2 = _y5_[1];
            break b;
           }
          }
          var s = acc[2], p$1 = _y5_;
          break a;
         case 3:
          var _y7_ = acc[1];
          if(typeof _y7_ !== "number" && 0 === _y7_[0]){
           var _y8_ = _y7_[2];
           if(typeof _y8_ !== "number" && 1 === _y8_[0]){
            var c$0 = acc[2], size$0 = _y8_[2], p$4 = _y7_[1];
            break;
           }
          }
          var c = acc[2], p$3 = _y7_;
          break c;
         case 4:
          var _y__ = acc[1];
          if(typeof _y__ !== "number" && 0 === _y__[0]){
           var _y$_ = _y__[2];
           if(typeof _y$_ !== "number" && 1 === _y$_[0]){
            var s$0 = acc[2], size = _y$_[2], p$2 = _y__[1];
            break b;
           }
          }
          var s = acc[2], p$1 = _y__;
          break a;
         case 5:
          var _za_ = acc[1];
          if(typeof _za_ !== "number" && 0 === _za_[0]){
           var _zb_ = _za_[2];
           if(typeof _zb_ !== "number" && 1 === _zb_[0]){
            var c$0 = acc[2], size$0 = _zb_[2], p$4 = _za_[1];
            break;
           }
          }
          var c = acc[2], p$3 = _za_;
          break c;
         case 6:
          var p$5 = acc[1];
          if(typeof p$5 !== "number" && 0 === p$5[0]){
           var match$1 = p$5[2];
           if(typeof match$1 !== "number" && 1 === match$1[0]){
            var f$1 = acc[2], size$1 = match$1[2], p$6 = p$5[1];
             /*<<format.ml:1387:4>>*/ strput_acc$0(ppf, p$6);
             /*<<format.ml:1388:44>>*/  /*<<format.ml:1388:44>>*/ var
             _zc_ =  /*<<format.ml:1388:44>>*/ caml_call1(f$1, 0);
             /*<<format.ml:1388:44>>*/ return pp_print_as_size
                    (ppf, id(size$1), _zc_);
           }
          }
          var f$0 = acc[2];
           /*<<format.ml:1403:32>>*/ strput_acc$0(ppf, p$5);
           /*<<format.ml:1403:70>>*/ return pp_print_string
                  (ppf,  /*<<format.ml:1403:70>>*/ caml_call1(f$0, 0));
         case 7:
          var p$7 = acc[1];
           /*<<format.ml:1404:32>>*/ strput_acc$0(ppf, p$7);
           /*<<format.ml:1404:32>>*/ return pp_print_flush(ppf, 0);
         default:
          var msg = acc[2], p$8 = acc[1];
           /*<<format.ml:1405:32>>*/ strput_acc$0(ppf, p$8);
           /*<<format.ml:1405:32>>*/ return invalid_arg(msg);
       }
        /*<<format.ml:1384:4>>*/ strput_acc$0(ppf, p$4);
        /*<<format.ml:1385:44>>*/  /*<<format.ml:1385:44>>*/ var
        _y9_ = make$0(1, c$0);
        /*<<format.ml:1385:44>>*/ return pp_print_as_size
               (ppf, id(size$0), _y9_);
      }
       /*<<format.ml:1402:32>>*/ strput_acc$0(ppf, p$3);
       /*<<format.ml:1402:32>>*/ return pp_print_char(ppf, c);
     }
      /*<<format.ml:1380:4>>*/ strput_acc$0(ppf, p$2);
      /*<<format.ml:1380:4>>*/ return pp_print_as_size(ppf, id(size), s$0);
    }
     /*<<format.ml:1400:32>>*/ strput_acc$0(ppf, p$1);
     /*<<format.ml:1400:32>>*/ return pp_print_string(ppf, s);
    /*<<format.ml:1406:34>>*/ }
   function kfprintf$0(k, ppf, param){
    var fmt = param[1];
     /*<<format.ml:1415:2>>*/ return make_printf
            (function(acc){
               /*<<format.ml:1416:16>>*/ output_acc$0(ppf, acc);
              return caml_call1(k, ppf);
              /*<<format.ml:1416:41>>*/ },
             0,
             fmt);
   }
   function fprintf$0(ppf){
    function _y2_(_y4_){ /*<<?>>*/ return 0;}
     /*<<format.ml:1425:18>>*/ return function(_y3_){
      /*<<?>>*/ return kfprintf$0(_y2_, ppf, _y3_);};
    /*<<format.ml:1425:37>>*/ }
   function ksprintf$0(k, param){
     /*<<format.ml:1445:10>>*/ var
     fmt = param[1],
      /*<<format.ml:1445:10>>*/ b = pp_make_buffer(0),
      /*<<format.ml:1446:12>>*/ ppf = formatter_of_buffer(b);
    function k$0(acc){
      /*<<format.ml:1448:4>>*/ strput_acc$0(ppf, acc);
      /*<<format.ml:1449:6>>*/ return  /*<<format.ml:1449:6>>*/ caml_call1
             (k, flush_buffer_formatter(b, ppf));
     /*<<format.ml:1449:36>>*/ }
     /*<<format.ml:1450:2>>*/ return make_printf(k$0, 0, fmt);
   }
   function sprintf$0(fmt){
     /*<<format.ml:1453:18>>*/ return ksprintf$0(id, fmt);
    /*<<format.ml:1453:33>>*/ }
   function kasprintf(k, param){
     /*<<format.ml:1456:10>>*/ var
     fmt = param[1],
      /*<<format.ml:1456:10>>*/ b = pp_make_buffer(0),
      /*<<format.ml:1457:12>>*/ ppf = formatter_of_buffer(b);
    function k$0(acc){
      /*<<format.ml:1459:4>>*/ output_acc$0(ppf, acc);
      /*<<format.ml:1460:6>>*/ return  /*<<format.ml:1460:6>>*/ caml_call1
             (k, flush_buffer_formatter(b, ppf));
     /*<<format.ml:1460:36>>*/ }
     /*<<format.ml:1461:2>>*/ return make_printf(k$0, 0, fmt);
   }
   function asprintf(fmt){
     /*<<format.ml:1464:19>>*/ return kasprintf(id, fmt);
    /*<<format.ml:1464:35>>*/ }
   function flush_standard_formatters(param){
     /*<<format.ml:1469:2>>*/ pp_print_flush(get$0(std_formatter_key), 0);
     /*<<format.ml:1469:2>>*/ return pp_print_flush
            (get$0(err_formatter_key), 0);
    /*<<format.ml:1470:47>>*/ }
    /*<<format.ml:1472:9>>*/ at_exit(flush_standard_formatters);
    /*<<format.ml:1474:9>>*/ before_first_spawn
    (function(param){
       /*<<format.ml:1475:2>>*/ flush_standard_formatters(0);
       /*<<format.ml:1476:11>>*/  /*<<format.ml:1476:11>>*/ var
       fs = pp_get_formatter_out_functions(std_formatter, 0);
       /*<<format.ml:1477:2>>*/ pp_set_formatter_out_functions
       (std_formatter,
        [0,
         function(_yZ_, _y0_, _y1_){
           /*<<?>>*/ return buffered_out_string(std_buf_key, _yZ_, _y0_, _y1_);
         },
         function(_yY_){
           /*<<?>>*/ return buffered_out_flush(stdout, std_buf_key, _yY_);
         },
         fs[3],
         fs[4],
         fs[5]]);
       /*<<format.ml:1481:11>>*/  /*<<format.ml:1481:11>>*/ var
       fs$0 = pp_get_formatter_out_functions(err_formatter, 0);
       /*<<format.ml:1483:4>>*/ return pp_set_formatter_out_functions
              (err_formatter,
               [0,
                function(_yV_, _yW_, _yX_){
                  /*<<?>>*/ return buffered_out_string
                         (err_buf_key, _yV_, _yW_, _yX_);
                },
                function(_yU_){
                  /*<<?>>*/ return buffered_out_flush
                         (stderr, err_buf_key, _yU_);
                },
                fs$0[3],
                fs$0[4],
                fs$0[5]]);
      /*<<format.ml:1484:71>>*/ });
   function create$6(iname, next){
     /*<<scanf.ml:250:26>>*/ return;
    /*<<scanf.ml:260:3>>*/ }
   var _c__ = 0;
    /*<<scanf.ml:274:22>>*/ function from_function(_yT_){
     /*<<?>>*/ return create$6(_c__, _yT_);
   }
    /*<<scanf.ml:274:22>>*/ var len = 1024;
   function scan_raise_at_end(ic){
     /*<<scanf.ml:324:30>>*/ throw  /*<<scanf.ml:324:30>>*/ caml_maybe_attach_backtrace
           (End_of_file, 1);
    /*<<scanf.ml:324:47>>*/ }
   function from_ic(scan_close_ic, iname, ic){
     /*<<scanf.ml:327:4>>*/ var
      /*<<scanf.ml:328:14>>*/ buf =
        /*<<scanf.ml:328:14>>*/ caml_create_bytes(1024),
      /*<<scanf.ml:329:12>>*/ i = [0, 0],
      /*<<scanf.ml:330:14>>*/ lim = [0, 0],
      /*<<scanf.ml:331:14>>*/ eof = [0, 0];
    function next(param){
      /*<<scanf.ml:333:6>>*/ if(i[1] < lim[1]){
       /*<<scanf.ml:333:38>>*/  /*<<scanf.ml:333:38>>*/ var
       c =  /*<<scanf.ml:333:38>>*/ caml_bytes_get(buf, i[1]);
       /*<<scanf.ml:333:58>>*/ i[1]++;
       /*<<scanf.ml:333:66>>*/ return c;
     }
     if(eof[1])
       /*<<scanf.ml:334:19>>*/ throw  /*<<scanf.ml:334:19>>*/ caml_maybe_attach_backtrace
             (End_of_file, 1);
     lim[1] = input(ic, buf, 0, len);
     return 0 === lim[1]
             ? (eof[1] = 1, caml_call1(scan_close_ic, ic))
             : (i[1] = 1,  /*<<scanf.ml:338:10>>*/ caml_bytes_get(buf, 0));
     /*<<scanf.ml:340:9>>*/ }
     /*<<scanf.ml:341:4>>*/ return create$6(iname, next);
    /*<<scanf.ml:341:21>>*/ }
    /*<<scanf.ml:363:4>>*/ from_ic(scan_raise_at_end, [1, _c$_, stdin], stdin);
   function register_exception(name, exn){
     /*<<callback.ml:25:2>>*/ var
     slot =
        /*<<callback.ml:26:16>>*/ caml_obj_tag(exn) === 248 ? exn : exn[1];
     /*<<callback.ml:27:2>>*/  /*<<callback.ml:27:2>>*/ caml_register_named_value
     (name, slot);
     /*<<callback.ml:27:2>>*/ return;
    /*<<callback.ml:27:32>>*/ }
   function public_method_label(s){
     /*<<camlinternalOO.ml:69:2>>*/ var
      /*<<camlinternalOO.ml:69:13>>*/ accu = [0, 0],
     _yQ_ = caml_ml_string_length(s) - 1 | 0,
      /*<<camlinternalOO.ml:69:13>>*/ _yP_ = 0;
    if(_yQ_ >= 0){
     var i = _yP_;
     for(;;){
       /*<<camlinternalOO.ml:71:36>>*/  /*<<camlinternalOO.ml:71:36>>*/ var
       _yR_ =  /*<<camlinternalOO.ml:71:36>>*/ caml_string_get(s, i);
      accu[1] = (223 * accu[1] | 0) + _yR_ | 0;
       /*<<camlinternalOO.ml:70:2>>*/  /*<<camlinternalOO.ml:70:2>>*/ var
       _yS_ = i + 1 | 0;
      if(_yQ_ === i) break;
      var i = _yS_;
     }
    }
    accu[1] = accu[1] & 2147483647;
    var tag = 1073741823 < accu[1] ? accu[1] + 2147483648 | 0 : accu[1];
     /*<<camlinternalOO.ml:78:2>>*/ return tag;
    /*<<camlinternalOO.ml:78:15>>*/ }
   function compare$5(x, y){
     /*<<camlinternalOO.ml:83:56>>*/ return  /*<<camlinternalOO.ml:83:56>>*/ caml_string_compare
            (x, y);
    /*<<camlinternalOO.ml:83:67>>*/ }
   var Vars = ___([0, compare$5]);
   function compare$6(x, y){
     /*<<camlinternalOO.ml:87:56>>*/ return  /*<<camlinternalOO.ml:87:56>>*/ caml_string_compare
            (x, y);
    /*<<camlinternalOO.ml:87:67>>*/ }
   var Meths = ___([0, compare$6]);
   function compare$7(x, y){
     /*<<camlinternalOO.ml:90:55>>*/ return caml_int_compare(x, y);
    /*<<camlinternalOO.ml:90:66>>*/ }
    /*<<camlinternalOO.ml:116:18>>*/ var
    Labs = ___([0, compare$7]),
     /*<<camlinternalOO.ml:116:18>>*/ table_count = [0, 0],
     /*<<camlinternalOO.ml:119:31>>*/ dummy_met =
       /*<<camlinternalOO.ml:119:31>>*/ caml_obj_block(0, 0),
     /*<<camlinternalOO.ml:36:13>>*/ initial_object_size = 2;
   function fit_size(n){
     /*<<camlinternalOO.ml:124:2>>*/ return 2 < n
            ? fit_size((n + 1 | 0) / 2 | 0) * 2 | 0
            : n;
    /*<<camlinternalOO.ml:125:24>>*/ }
   function new_table(pub_labels){
     /*<<camlinternalOO.ml:128:2>>*/ table_count[1]++;
     /*<<camlinternalOO.ml:130:16>>*/ var
     len = pub_labels.length - 1,
      /*<<camlinternalOO.ml:130:16>>*/ methods =
        /*<<camlinternalOO.ml:130:16>>*/ caml_make_vect
        ((len * 2 | 0) + 2 | 0, dummy_met);
     /*<<camlinternalOO.ml:131:2>>*/ caml_check_bound(methods, 0)[1] = len;
    var _yJ_ = ((fit_size(len) * 32 | 0) / 8 | 0) - 1 | 0;
     /*<<camlinternalOO.ml:132:2>>*/ caml_check_bound(methods, 1)[2] = _yJ_;
     /*<<camlinternalOO.ml:132:2>>*/ var
     _yL_ = len - 1 | 0,
      /*<<camlinternalOO.ml:132:2>>*/ _yK_ = 0;
    if(_yL_ >= 0){
     var i = _yK_;
     for(;;){
       /*<<camlinternalOO.ml:133:55>>*/ var
       _yN_ = (i * 2 | 0) + 3 | 0,
        /*<<camlinternalOO.ml:133:55>>*/ _yM_ =
         caml_check_bound(pub_labels, i)[1 + i];
       /*<<camlinternalOO.ml:133:26>>*/ caml_check_bound(methods, _yN_)
       [1 + _yN_]
      = _yM_;
       /*<<camlinternalOO.ml:133:26>>*/  /*<<camlinternalOO.ml:133:26>>*/ var
       _yO_ = i + 1 | 0;
      if(_yL_ === i) break;
      var i = _yO_;
     }
    }
     /*<<camlinternalOO.ml:134:2>>*/ return [0,
            initial_object_size,
            methods,
            Meths[1],
            Labs[1],
            0,
            0,
            Vars[1],
            0];
    /*<<camlinternalOO.ml:141:32>>*/ }
   function resize$1(array, new_size){
     /*<<camlinternalOO.ml:144:2>>*/ var old_size = array[2].length - 1;
    if(old_size < new_size){
      /*<<camlinternalOO.ml:146:19>>*/  /*<<camlinternalOO.ml:146:19>>*/ var
      new_buck =
         /*<<camlinternalOO.ml:146:19>>*/ caml_make_vect(new_size, dummy_met);
      /*<<camlinternalOO.ml:147:4>>*/ blit$0
      (array[2], 0, new_buck, 0, old_size);
     array[2] = new_buck;
    }
    return;
    /*<<camlinternalOO.ml:149:4>>*/ }
   function put(array, label, element){
     /*<<camlinternalOO.ml:152:2>>*/ resize$1(array, label + 1 | 0);
     /*<<camlinternalOO.ml:153:2>>*/ caml_check_bound(array[2], label)
     [1 + label]
    = element;
     /*<<camlinternalOO.ml:153:2>>*/ return;
    /*<<camlinternalOO.ml:153:34>>*/ }
    /*<<camlinternalOO.ml:157:19>>*/  /*<<camlinternalOO.ml:157:19>>*/ var
    method_count = [0, 0];
   function new_method(table){
     /*<<camlinternalOO.ml:164:2>>*/ var index = table[2].length - 1;
     /*<<camlinternalOO.ml:165:2>>*/ resize$1(table, index + 1 | 0);
     /*<<camlinternalOO.ml:165:2>>*/ return index;
    /*<<camlinternalOO.ml:166:7>>*/ }
   function get_method_label(table, name){
     /*<<camlinternalOO.ml:169:2>>*/ try{
      /*<<camlinternalOO.ml:170:4>>*/  /*<<camlinternalOO.ml:170:4>>*/ var
      _yH_ = Meths[17].call(null, name, table[3]);
      /*<<camlinternalOO.ml:170:4>>*/ return _yH_;
    }
    catch(_yI_){
     var _yG_ = caml_wrap_exception(_yI_);
     if(_yG_ !== Not_found) throw caml_maybe_attach_backtrace(_yG_, 0);
      /*<<camlinternalOO.ml:172:16>>*/  /*<<camlinternalOO.ml:172:16>>*/ var
      label = new_method(table);
     table[3] = Meths[2].call(null, name, label, table[3]);
     table[4] = Labs[2].call(null, label, 1, table[4]);
      /*<<camlinternalOO.ml:175:4>>*/ return label;
    }
    /*<<camlinternalOO.ml:175:9>>*/ }
   function get_method_labels(table, names){
     /*<<camlinternalOO.ml:178:2>>*/ return map$2
            (function(_yF_){ /*<<?>>*/ return get_method_label(table, _yF_);},
             names);
    /*<<camlinternalOO.ml:178:42>>*/ }
   function set_method(table, label, element){
     /*<<camlinternalOO.ml:181:2>>*/ method_count[1]++;
     /*<<camlinternalOO.ml:182:5>>*/ if(Labs[17].call(null, label, table[4]))
      /*<<camlinternalOO.ml:183:4>>*/ return put(table, label, element);
    table[6] = [0, [0, label, element], table[6]];
    return;
    /*<<camlinternalOO.ml:185:64>>*/ }
   function new_slot(table){
     /*<<camlinternalOO.ml:252:2>>*/ var index = table[1];
    table[1] = index + 1 | 0;
     /*<<camlinternalOO.ml:254:2>>*/ return index;
    /*<<camlinternalOO.ml:254:7>>*/ }
   function new_variable(table, name){
     /*<<camlinternalOO.ml:257:2>>*/ try{
      /*<<camlinternalOO.ml:257:6>>*/  /*<<camlinternalOO.ml:257:6>>*/ var
      _yD_ = Vars[17].call(null, name, table[7]);
      /*<<camlinternalOO.ml:257:6>>*/ return _yD_;
    }
    catch(_yE_){
     var _yC_ = caml_wrap_exception(_yE_);
     if(_yC_ !== Not_found) throw caml_maybe_attach_backtrace(_yC_, 0);
      /*<<camlinternalOO.ml:259:16>>*/  /*<<camlinternalOO.ml:259:16>>*/ var
      index = new_slot(table);
      /*<<camlinternalOO.ml:260:7>>*/ if
      ( /*<<camlinternalOO.ml:260:7>>*/ caml_string_notequal(name, cst$4))
      table[7] = Vars[2].call(null, name, index, table[7]);
      /*<<camlinternalOO.ml:261:4>>*/ return index;
    }
    /*<<camlinternalOO.ml:261:9>>*/ }
   function create_table(public_methods){
     /*<<camlinternalOO.ml:299:2>>*/ if(0 === public_methods)
      /*<<camlinternalOO.ml:299:50>>*/ return new_table([0]);
     /*<<camlinternalOO.ml:301:13>>*/ var
      /*<<camlinternalOO.ml:301:13>>*/ tags =
       map$2(public_method_label, public_methods),
      /*<<camlinternalOO.ml:302:14>>*/ table = new_table(tags);
     /*<<camlinternalOO.ml:303:2>>*/ iteri$1
     (function(i, met){
        /*<<camlinternalOO.ml:305:6>>*/ var lab = (i * 2 | 0) + 2 | 0;
       table[3] = Meths[2].call(null, met, lab, table[3]);
       table[4] = Labs[2].call(null, lab, 1, table[4]);
       return 0;
       /*<<camlinternalOO.ml:307:72>>*/ },
      public_methods);
     /*<<camlinternalOO.ml:303:2>>*/ return table;
    /*<<camlinternalOO.ml:309:7>>*/ }
   function init_class(table){
     /*<<camlinternalOO.ml:312:2>>*/ table[8] = rev(table[8]);
    return resize$1
            (table,
             3 + ((caml_check_bound(table[2], 1)[2] * 16 | 0) / 32 | 0) | 0);
    /*<<camlinternalOO.ml:314:69>>*/ }
   function make_class(pub_meths, class_init){
     /*<<camlinternalOO.ml:329:2>>*/ var
      /*<<camlinternalOO.ml:329:14>>*/ table = create_table(pub_meths),
      /*<<camlinternalOO.ml:330:17>>*/ env_init =
        /*<<camlinternalOO.ml:330:17>>*/ caml_call1(class_init, table);
     /*<<camlinternalOO.ml:331:2>>*/ init_class(table);
     /*<<camlinternalOO.ml:332:3>>*/  /*<<camlinternalOO.ml:332:3>>*/ caml_call1
     (env_init, 0);
     /*<<camlinternalOO.ml:332:2>>*/ return;
    /*<<camlinternalOO.ml:332:59>>*/ }
   function create_object_opt(obj_0, table){
     /*<<camlinternalOO.ml:358:2>>*/ if(obj_0)
      /*<<camlinternalOO.ml:358:35>>*/ return obj_0;
     /*<<camlinternalOO.ml:360:14>>*/  /*<<camlinternalOO.ml:360:14>>*/ var
     obj =  /*<<camlinternalOO.ml:360:14>>*/ caml_obj_block(248, table[1]);
     /*<<camlinternalOO.ml:362:4>>*/ obj[1] = table[2];
     /*<<camlinternalOO.ml:363:12>>*/ return  /*<<camlinternalOO.ml:363:12>>*/ caml_set_oo_id
            (obj);
    /*<<camlinternalOO.ml:364:5>>*/ }
   function get_const(x){
     /*<<camlinternalOO.ml:459:18>>*/ return function(obj){
      /*<<camlinternalOO.ml:459:35>>*/ return x; /*<<camlinternalOO.ml:459:36>>*/ };
    /*<<camlinternalOO.ml:459:37>>*/ }
   function get_var(n){
     /*<<camlinternalOO.ml:460:18>>*/ return function(obj){
      /*<<camlinternalOO.ml:460:34>>*/ return obj[1 + n]; /*<<camlinternalOO.ml:460:56>>*/ };
    /*<<camlinternalOO.ml:460:57>>*/ }
   function get_env(e, n){
     /*<<camlinternalOO.ml:462:2>>*/ return function(obj){
      /*<<camlinternalOO.ml:463:4>>*/ return obj[1 + e][1 + n]; /*<<camlinternalOO.ml:463:65>>*/ };
    /*<<camlinternalOO.ml:463:66>>*/ }
   function get_meth(n){
     /*<<camlinternalOO.ml:464:18>>*/ return function(obj){
      /*<<camlinternalOO.ml:464:34>>*/ return  /*<<camlinternalOO.ml:464:34>>*/ caml_call1
             (obj[1][1 + n], obj); /*<<camlinternalOO.ml:464:48>>*/ };
    /*<<camlinternalOO.ml:464:49>>*/ }
   function set_var(n){
     /*<<camlinternalOO.ml:465:18>>*/ return function(obj, x){
      /*<<camlinternalOO.ml:465:36>>*/ obj[1 + n] = x;
     return 0; /*<<camlinternalOO.ml:465:60>>*/ };
    /*<<camlinternalOO.ml:465:61>>*/ }
   function app_const(f, x){
     /*<<camlinternalOO.ml:466:20>>*/ return function(obj){
      /*<<camlinternalOO.ml:466:37>>*/ return  /*<<camlinternalOO.ml:466:20>>*/ caml_call1
             (f, x); /*<<camlinternalOO.ml:466:40>>*/ };
    /*<<camlinternalOO.ml:466:41>>*/ }
   function app_var(f, n){
     /*<<camlinternalOO.ml:467:20>>*/ return function(obj){
      /*<<camlinternalOO.ml:467:36>>*/ return caml_call1(f, obj[1 + n]); /*<<camlinternalOO.ml:467:62>>*/ };
    /*<<camlinternalOO.ml:467:63>>*/ }
   function app_env(f, e, n){
     /*<<camlinternalOO.ml:469:2>>*/ return function(obj){
      /*<<camlinternalOO.ml:470:4>>*/ return caml_call1(f, obj[1 + e][1 + n]); /*<<camlinternalOO.ml:470:69>>*/ };
    /*<<camlinternalOO.ml:470:70>>*/ }
   function app_meth(f, n){
     /*<<camlinternalOO.ml:471:20>>*/ return function(obj){
      /*<<camlinternalOO.ml:471:36>>*/ return  /*<<camlinternalOO.ml:471:38>>*/ caml_call1
             (f,
               /*<<camlinternalOO.ml:471:38>>*/ caml_call1(obj[1][1 + n], obj)); /*<<camlinternalOO.ml:471:54>>*/ };
    /*<<camlinternalOO.ml:471:55>>*/ }
   function app_const_const(f, x, y){
     /*<<camlinternalOO.ml:472:28>>*/ return function(obj){
      /*<<camlinternalOO.ml:472:45>>*/ return  /*<<camlinternalOO.ml:472:28>>*/ caml_call2
             (f, x, y); /*<<camlinternalOO.ml:472:50>>*/ };
    /*<<camlinternalOO.ml:472:51>>*/ }
   function app_const_var(f, x, n){
     /*<<camlinternalOO.ml:473:28>>*/ return function(obj){
      /*<<camlinternalOO.ml:473:44>>*/ return caml_call2(f, x, obj[1 + n]); /*<<camlinternalOO.ml:473:72>>*/ };
    /*<<camlinternalOO.ml:473:73>>*/ }
   function app_const_meth(f, x, n){
     /*<<camlinternalOO.ml:474:27>>*/ return function(obj){
      /*<<camlinternalOO.ml:474:43>>*/ return  /*<<camlinternalOO.ml:474:47>>*/ caml_call2
             (f,
              x,
               /*<<camlinternalOO.ml:474:47>>*/ caml_call1(obj[1][1 + n], obj)); /*<<camlinternalOO.ml:474:63>>*/ };
    /*<<camlinternalOO.ml:474:64>>*/ }
   function app_var_const(f, n, x){
     /*<<camlinternalOO.ml:475:26>>*/ return function(obj){
      /*<<camlinternalOO.ml:475:42>>*/ return  /*<<camlinternalOO.ml:475:26>>*/ caml_call2
             (f, obj[1 + n], x); /*<<camlinternalOO.ml:475:70>>*/ };
    /*<<camlinternalOO.ml:475:71>>*/ }
   function app_meth_const(f, n, x){
     /*<<camlinternalOO.ml:476:27>>*/ return function(obj){
      /*<<camlinternalOO.ml:476:43>>*/ return  /*<<camlinternalOO.ml:476:27>>*/ caml_call2
             (f,
               /*<<camlinternalOO.ml:476:45>>*/ caml_call1(obj[1][1 + n], obj),
              x); /*<<camlinternalOO.ml:476:63>>*/ };
    /*<<camlinternalOO.ml:476:64>>*/ }
   function app_const_env(f, x, e, n){
     /*<<camlinternalOO.ml:478:2>>*/ return function(obj){
      /*<<camlinternalOO.ml:479:4>>*/ return caml_call2
             (f, x, obj[1 + e][1 + n]); /*<<camlinternalOO.ml:479:71>>*/ };
    /*<<camlinternalOO.ml:479:72>>*/ }
   function app_env_const(f, e, n, x){
     /*<<camlinternalOO.ml:481:2>>*/ return function(obj){
      /*<<camlinternalOO.ml:482:4>>*/ return  /*<<camlinternalOO.ml:481:2>>*/ caml_call2
             (f, obj[1 + e][1 + n], x); /*<<camlinternalOO.ml:482:71>>*/ };
    /*<<camlinternalOO.ml:482:72>>*/ }
   function meth_app_const(n, x){
     /*<<camlinternalOO.ml:483:25>>*/ return function(obj){
      /*<<camlinternalOO.ml:483:41>>*/ return  /*<<camlinternalOO.ml:483:25>>*/ caml_call2
             (obj[1][1 + n], obj, x); /*<<camlinternalOO.ml:483:68>>*/ };
    /*<<camlinternalOO.ml:483:69>>*/ }
   function meth_app_var(n, m){
     /*<<camlinternalOO.ml:485:2>>*/ return function(obj){
      /*<<camlinternalOO.ml:485:18>>*/ return caml_call2
             (obj[1][1 + n], obj, obj[1 + m]); /*<<camlinternalOO.ml:485:68>>*/ };
    /*<<camlinternalOO.ml:485:69>>*/ }
   function meth_app_env(n, e, m){
     /*<<camlinternalOO.ml:487:2>>*/ return function(obj){
      /*<<camlinternalOO.ml:487:18>>*/ return caml_call2
             (obj[1][1 + n], obj, obj[1 + e][1 + m]); /*<<camlinternalOO.ml:488:69>>*/ };
    /*<<camlinternalOO.ml:488:70>>*/ }
   function meth_app_meth(n, m){
     /*<<camlinternalOO.ml:490:2>>*/ return function(obj){
      /*<<camlinternalOO.ml:490:18>>*/  /*<<camlinternalOO.ml:490:44>>*/ var
      _yB_ =  /*<<camlinternalOO.ml:490:44>>*/ caml_call1(obj[1][1 + m], obj);
      /*<<camlinternalOO.ml:490:44>>*/ return  /*<<camlinternalOO.ml:490:44>>*/ caml_call2
             (obj[1][1 + n], obj, _yB_); /*<<camlinternalOO.ml:490:60>>*/ };
    /*<<camlinternalOO.ml:490:61>>*/ }
   function send_const(m, x, c){
     /*<<camlinternalOO.ml:492:2>>*/ return function(obj){
      /*<<camlinternalOO.ml:492:18>>*/ return  /*<<camlinternalOO.ml:492:2>>*/ caml_call1
             (caml_get_public_method(x, m, 0), x); /*<<camlinternalOO.ml:492:58>>*/ };
    /*<<camlinternalOO.ml:492:59>>*/ }
   function send_var(m, n, c){
     /*<<camlinternalOO.ml:494:2>>*/ return function(obj){
      /*<<camlinternalOO.ml:495:4>>*/ var _yA_ = obj[1 + n];
     return caml_call1(caml_get_public_method(_yA_, m, 0), _yA_); /*<<camlinternalOO.ml:496:32>>*/ };
    /*<<camlinternalOO.ml:496:33>>*/ }
   function send_env(m, e, n, c){
     /*<<camlinternalOO.ml:498:2>>*/ return function(obj){
      /*<<camlinternalOO.ml:499:4>>*/ var _yz_ = obj[1 + e][1 + n];
     return caml_call1(caml_get_public_method(_yz_, m, 0), _yz_); /*<<camlinternalOO.ml:502:34>>*/ };
    /*<<camlinternalOO.ml:502:35>>*/ }
   function send_meth(m, n, c){
     /*<<camlinternalOO.ml:504:2>>*/ return function(obj){
      /*<<camlinternalOO.ml:505:4>>*/  /*<<camlinternalOO.ml:505:14>>*/ var
      _yy_ =  /*<<camlinternalOO.ml:505:14>>*/ caml_call1(obj[1][1 + n], obj);
      /*<<camlinternalOO.ml:505:14>>*/ return  /*<<camlinternalOO.ml:505:14>>*/ caml_call1
             (caml_get_public_method(_yy_, m, 0), _yy_); /*<<camlinternalOO.ml:505:59>>*/ };
    /*<<camlinternalOO.ml:505:60>>*/ }
   function new_cache(table){
     /*<<camlinternalOO.ml:507:2>>*/  /*<<camlinternalOO.ml:507:10>>*/ var
     n = new_method(table);
    a:
    {
     if
      (0 !== (n % 2 | 0)
       &&
        (2 + ((caml_check_bound(table[2], 1)[2] * 16 | 0) / 32 | 0) | 0) >= n){var n$0 = new_method(table); break a;}
     var n$0 = n;
    }
     /*<<camlinternalOO.ml:512:2>>*/ caml_check_bound(table[2], n$0)[1 + n$0]
    = 0;
     /*<<camlinternalOO.ml:512:2>>*/ return n$0;
    /*<<camlinternalOO.ml:513:3>>*/ }
   function method_impl(table, i, arr){
    function next(param){
      /*<<camlinternalOO.ml:543:16>>*/ i[1]++;
     var _yx_ = i[1];
      /*<<camlinternalOO.ml:543:34>>*/ return caml_check_bound(arr, _yx_)
             [1 + _yx_];
     /*<<camlinternalOO.ml:543:42>>*/ }
     /*<<camlinternalOO.ml:544:8>>*/  /*<<camlinternalOO.ml:544:8>>*/ var
     clo = next(0);
    if(typeof clo === "number")
     switch(clo){
       case 0:
         /*<<camlinternalOO.ml:545:28>>*/  /*<<camlinternalOO.ml:545:28>>*/ var
         x = next(0);
         /*<<camlinternalOO.ml:545:38>>*/ return get_const(x);
       case 1:
         /*<<camlinternalOO.ml:546:24>>*/  /*<<camlinternalOO.ml:546:24>>*/ var
         n = next(0);
         /*<<camlinternalOO.ml:546:34>>*/ return get_var(n);
       case 2:
         /*<<camlinternalOO.ml:547:24>>*/ var
          /*<<camlinternalOO.ml:547:24>>*/ e = next(0),
          /*<<camlinternalOO.ml:547:42>>*/ n$0 = next(0);
         /*<<camlinternalOO.ml:547:52>>*/ return get_env(e, n$0);
       case 3:
         /*<<camlinternalOO.ml:548:24>>*/  /*<<camlinternalOO.ml:548:24>>*/ var
         n$1 = next(0);
         /*<<camlinternalOO.ml:548:34>>*/ return get_meth(n$1);
       case 4:
         /*<<camlinternalOO.ml:549:24>>*/  /*<<camlinternalOO.ml:549:24>>*/ var
         n$2 = next(0);
         /*<<camlinternalOO.ml:549:34>>*/ return set_var(n$2);
       case 5:
         /*<<camlinternalOO.ml:550:24>>*/ var
          /*<<camlinternalOO.ml:550:24>>*/ f = next(0),
          /*<<camlinternalOO.ml:550:42>>*/ x$0 = next(0);
         /*<<camlinternalOO.ml:550:52>>*/ return app_const(f, x$0);
       case 6:
         /*<<camlinternalOO.ml:551:24>>*/ var
          /*<<camlinternalOO.ml:551:24>>*/ f$0 = next(0),
          /*<<camlinternalOO.ml:551:42>>*/ n$3 = next(0);
         /*<<camlinternalOO.ml:551:53>>*/ return app_var(f$0, n$3);
       case 7:
         /*<<camlinternalOO.ml:553:14>>*/ var
          /*<<camlinternalOO.ml:553:14>>*/ f$1 = next(0),
          /*<<camlinternalOO.ml:553:33>>*/ e$0 = next(0),
          /*<<camlinternalOO.ml:553:51>>*/ n$4 = next(0);
         /*<<camlinternalOO.ml:554:6>>*/ return app_env(f$1, e$0, n$4);
       case 8:
         /*<<camlinternalOO.ml:555:24>>*/ var
          /*<<camlinternalOO.ml:555:24>>*/ f$2 = next(0),
          /*<<camlinternalOO.ml:555:42>>*/ n$5 = next(0);
         /*<<camlinternalOO.ml:555:53>>*/ return app_meth(f$2, n$5);
       case 9:
         /*<<camlinternalOO.ml:557:14>>*/ var
          /*<<camlinternalOO.ml:557:14>>*/ f$3 = next(0),
          /*<<camlinternalOO.ml:557:32>>*/ x$1 = next(0),
          /*<<camlinternalOO.ml:557:50>>*/ y = next(0);
         /*<<camlinternalOO.ml:558:6>>*/ return app_const_const(f$3, x$1, y);
       case 10:
         /*<<camlinternalOO.ml:560:14>>*/ var
          /*<<camlinternalOO.ml:560:14>>*/ f$4 = next(0),
          /*<<camlinternalOO.ml:560:32>>*/ x$2 = next(0),
          /*<<camlinternalOO.ml:560:50>>*/ n$6 = next(0);
         /*<<camlinternalOO.ml:561:6>>*/ return app_const_var(f$4, x$2, n$6);
       case 11:
         /*<<camlinternalOO.ml:563:14>>*/ var
          /*<<camlinternalOO.ml:563:14>>*/ f$5 = next(0),
          /*<<camlinternalOO.ml:563:32>>*/ x$3 = next(0),
          /*<<camlinternalOO.ml:563:50>>*/ e$1 = next(0),
          /*<<camlinternalOO.ml:563:69>>*/ n$7 = next(0);
         /*<<camlinternalOO.ml:564:6>>*/ return app_const_env
                (f$5, x$3, e$1, n$7);
       case 12:
         /*<<camlinternalOO.ml:566:14>>*/ var
          /*<<camlinternalOO.ml:566:14>>*/ f$6 = next(0),
          /*<<camlinternalOO.ml:566:32>>*/ x$4 = next(0),
          /*<<camlinternalOO.ml:566:50>>*/ n$8 = next(0);
         /*<<camlinternalOO.ml:567:6>>*/ return app_const_meth(f$6, x$4, n$8);
       case 13:
         /*<<camlinternalOO.ml:569:14>>*/ var
          /*<<camlinternalOO.ml:569:14>>*/ f$7 = next(0),
          /*<<camlinternalOO.ml:569:32>>*/ n$9 = next(0),
          /*<<camlinternalOO.ml:569:50>>*/ x$5 = next(0);
         /*<<camlinternalOO.ml:570:6>>*/ return app_var_const(f$7, n$9, x$5);
       case 14:
         /*<<camlinternalOO.ml:572:14>>*/ var
          /*<<camlinternalOO.ml:572:14>>*/ f$8 = next(0),
          /*<<camlinternalOO.ml:572:32>>*/ e$2 = next(0),
          /*<<camlinternalOO.ml:572:51>>*/ n$10 = next(0),
          /*<<camlinternalOO.ml:572:69>>*/ x$6 = next(0);
         /*<<camlinternalOO.ml:573:6>>*/ return app_env_const
                (f$8, e$2, n$10, x$6);
       case 15:
         /*<<camlinternalOO.ml:575:14>>*/ var
          /*<<camlinternalOO.ml:575:14>>*/ f$9 = next(0),
          /*<<camlinternalOO.ml:575:32>>*/ n$11 = next(0),
          /*<<camlinternalOO.ml:575:50>>*/ x$7 = next(0);
         /*<<camlinternalOO.ml:576:6>>*/ return app_meth_const(f$9, n$11, x$7);
       case 16:
         /*<<camlinternalOO.ml:578:14>>*/ var
          /*<<camlinternalOO.ml:578:14>>*/ n$12 = next(0),
          /*<<camlinternalOO.ml:578:32>>*/ x$8 = next(0);
         /*<<camlinternalOO.ml:578:42>>*/ return meth_app_const(n$12, x$8);
       case 17:
         /*<<camlinternalOO.ml:580:14>>*/ var
          /*<<camlinternalOO.ml:580:14>>*/ n$13 = next(0),
          /*<<camlinternalOO.ml:580:32>>*/ m = next(0);
         /*<<camlinternalOO.ml:580:42>>*/ return meth_app_var(n$13, m);
       case 18:
         /*<<camlinternalOO.ml:582:14>>*/ var
          /*<<camlinternalOO.ml:582:14>>*/ n$14 = next(0),
          /*<<camlinternalOO.ml:582:32>>*/ e$3 = next(0),
          /*<<camlinternalOO.ml:582:50>>*/ m$0 = next(0);
         /*<<camlinternalOO.ml:583:6>>*/ return meth_app_env(n$14, e$3, m$0);
       case 19:
         /*<<camlinternalOO.ml:585:14>>*/ var
          /*<<camlinternalOO.ml:585:14>>*/ n$15 = next(0),
          /*<<camlinternalOO.ml:585:32>>*/ m$1 = next(0);
         /*<<camlinternalOO.ml:585:42>>*/ return meth_app_meth(n$15, m$1);
       case 20:
         /*<<camlinternalOO.ml:587:14>>*/ var
          /*<<camlinternalOO.ml:587:14>>*/ m$2 = next(0),
          /*<<camlinternalOO.ml:587:32>>*/ x$9 = next(0);
         /*<<camlinternalOO.ml:587:57>>*/ return send_const
                (m$2, x$9, new_cache(table));
       case 21:
         /*<<camlinternalOO.ml:589:14>>*/ var
          /*<<camlinternalOO.ml:589:14>>*/ m$3 = next(0),
          /*<<camlinternalOO.ml:589:32>>*/ n$16 = next(0);
         /*<<camlinternalOO.ml:589:56>>*/ return send_var
                (m$3, n$16, new_cache(table));
       case 22:
         /*<<camlinternalOO.ml:591:14>>*/ var
          /*<<camlinternalOO.ml:591:14>>*/ m$4 = next(0),
          /*<<camlinternalOO.ml:591:32>>*/ e$4 = next(0),
          /*<<camlinternalOO.ml:591:50>>*/ n$17 = next(0);
         /*<<camlinternalOO.ml:592:21>>*/ return send_env
                (m$4, e$4, n$17, new_cache(table));
       default:
         /*<<camlinternalOO.ml:594:14>>*/ var
          /*<<camlinternalOO.ml:594:14>>*/ m$5 = next(0),
          /*<<camlinternalOO.ml:594:32>>*/ n$18 = next(0);
         /*<<camlinternalOO.ml:594:57>>*/ return send_meth
                (m$5, n$18, new_cache(table));
     }
     /*<<camlinternalOO.ml:595:24>>*/ return clo;
    /*<<camlinternalOO.ml:595:37>>*/ }
   function set_methods(table, methods){
     /*<<camlinternalOO.ml:598:2>>*/ var
     len = methods.length - 1,
      /*<<camlinternalOO.ml:598:44>>*/ i = [0, 0];
    for(;;){
     if(i[1] >= len) return;
      /*<<camlinternalOO.ml:600:16>>*/ var
      _yw_ = i[1],
       /*<<camlinternalOO.ml:600:16>>*/ label =
        caml_check_bound(methods, _yw_)[1 + _yw_],
       /*<<camlinternalOO.ml:600:42>>*/ clo = method_impl(table, i, methods);
      /*<<camlinternalOO.ml:601:4>>*/ set_method(table, label, clo);
     i[1]++;
    }
    /*<<camlinternalOO.ml:603:6>>*/ }
   try{
     /*<<filename.ml:117:8>>*/ var
      /*<<filename.ml:117:8>>*/ _lH_ =
        /*<<filename.ml:117:8>>*/ caml_sys_getenv("TMPDIR"),
     temp_dir_name = _lH_;
   }
   catch(_yv_){
    var _da_ = caml_wrap_exception(_yv_);
    if(_da_ !== Not_found) throw caml_maybe_attach_backtrace(_da_, 0);
    var temp_dir_name = _db_;
   }
    /*<<filename.ml:91:24>>*/  /*<<filename.ml:91:24>>*/ var
    Unix = [0, , , , , , , , , , temp_dir_name];
   try{
     /*<<filename.ml:165:8>>*/ var
      /*<<filename.ml:165:8>>*/ _lG_ =
        /*<<filename.ml:165:8>>*/ caml_sys_getenv("TEMP"),
     temp_dir_name$0 = _lG_;
   }
   catch(_yu_){
    var _dc_ = caml_wrap_exception(_yu_);
    if(_dc_ !== Not_found) throw caml_maybe_attach_backtrace(_dc_, 0);
    var temp_dir_name$0 = _dd_;
   }
    /*<<filename.ml:130:25>>*/ var
     /*<<filename.ml:130:25>>*/ Win32 = [0, , , , , , , , , , temp_dir_name$0],
     /*<<filename.ml:264:26>>*/ Cygwin = [0, , , , , , , , , , temp_dir_name],
    Sysdeps =
      caml_string_notequal(os_type$0, "Cygwin")
       ? caml_string_notequal(os_type$0, "Win32") ? Unix : Win32
       : Cygwin,
    temp_dir_name$1 = Sysdeps[10];
    /*<<filename.ml:330:2>>*/ new_key(0, make_self_init);
    /*<<filename.ml:338:2>>*/ new_key
    ([0, function(_yt_){ /*<<?>>*/ return _yt_;}],
     function(param){
       /*<<filename.ml:338:58>>*/ return temp_dir_name$1;
      /*<<filename.ml:338:71>>*/ });
   var
    monster_int = -2147483648,
    biggest_int = 2147483647,
    least_int = -2147483647;
    /*<<nat.ml:68:8>>*/  /*<<nat.ml:68:8>>*/ initialize_nat(0);
   function make_nat(len){
     /*<<nat.ml:75:2>>*/ if(0 > len)
      /*<<nat.ml:75:18>>*/ return invalid_arg(_de_);
     /*<<nat.ml:76:14>>*/  /*<<nat.ml:76:14>>*/ var
     res =  /*<<nat.ml:76:14>>*/ create_nat(len);
     /*<<nat.ml:76:32>>*/  /*<<nat.ml:76:32>>*/ set_to_zero_nat(res, 0, len);
     /*<<nat.ml:76:32>>*/ return res;
    /*<<nat.ml:76:62>>*/ }
   function nat_of_int(i){
     /*<<nat.ml:98:2>>*/ if(0 > i)
      /*<<nat.ml:98:16>>*/ return invalid_arg(_df_);
     /*<<nat.ml:99:14>>*/  /*<<nat.ml:99:14>>*/ var res = make_nat(1);
     /*<<nat.ml:100:4>>*/ return 0 === i
            ? res
            : ( /*<<nat.ml:100:33>>*/ set_digit_nat(res, 0, i), res);
    /*<<nat.ml:100:63>>*/ }
    /*<<nat.ml:260:21>>*/  /*<<nat.ml:260:21>>*/ var
    power_base_max = make_nat(2);
    /*<<nat.ml:268:10>>*/  /*<<nat.ml:268:10>>*/ set_digit_nat
    (power_base_max, 0, 1000000000);
    /*<<big_int.ml:36:15>>*/ make_nat(1);
    /*<<big_int.ml:40:16>>*/ nat_of_int(1);
   function big_int_of_int(i){
     /*<<big_int.ml:171:2>>*/  /*<<big_int.ml:173:16>>*/ var
     res =  /*<<big_int.ml:173:16>>*/ create_nat(1);
    if(i === -2147483648){
      /*<<big_int.ml:175:19>>*/  /*<<big_int.ml:175:19>>*/ set_digit_nat
      (res, 0, 2147483647);
      /*<<big_int.ml:176:26>>*/  /*<<big_int.ml:176:26>>*/ incr_nat
      (res, 0, 1, 1);
    }
    else
      /*<<big_int.ml:177:18>>*/  /*<<big_int.ml:177:18>>*/ set_digit_nat
      (res, 0, abs(i));
     /*<<big_int.ml:171:2>>*/ return;
    /*<<big_int.ml:178:11>>*/ }
    /*<<big_int.ml:321:22>>*/ big_int_of_int(monster_int);
    /*<<num.ml:25:18>>*/ big_int_of_int(biggest_int);
    /*<<num.ml:26:16>>*/ big_int_of_int(least_int);
   function lowercase_latin1(c){
     /*<<str.ml:32:23>>*/  /*<<str.ml:32:23>>*/ var _ys_ = c - 192 | 0;
    a:
    {
     if(30 < _ys_ >>> 0){
      if(25 < _ys_ + 127 >>> 0) break a;
     }
     else if(23 === _ys_) break a;
      /*<<str.ml:36:4>>*/ return c + 32 | 0;
    }
     /*<<str.ml:37:9>>*/ return c;
    /*<<str.ml:37:10>>*/ }
    /*<<str.ml:51:15>>*/ make(32, 255);
   function make_empty(param){
     /*<<str.ml:53:24>>*/ return make(32, 0);
    /*<<str.ml:53:44>>*/ }
   function add$0(s, c){
     /*<<str.ml:56:6>>*/  /*<<str.ml:57:6>>*/ caml_bytes_set
     (s,
      c >>> 3 | 0,
      chr( /*<<str.ml:58:37>>*/ caml_bytes_get(s, c >>> 3 | 0) | 1 << (c & 7)));
     /*<<str.ml:57:6>>*/ return;
    /*<<str.ml:59:51>>*/ }
   function singleton(c){
     /*<<str.ml:65:6>>*/  /*<<str.ml:65:14>>*/ var s = make_empty(0);
     /*<<str.ml:65:31>>*/ add$0(s, c);
     /*<<str.ml:65:31>>*/ return s;
    /*<<str.ml:65:41>>*/ }
   function complement(s){
     /*<<str.ml:71:6>>*/ var
      /*<<str.ml:71:14>>*/ r =  /*<<str.ml:71:14>>*/ caml_create_bytes(32),
     i = 0;
    for(;;){
      /*<<str.ml:73:8>>*/  /*<<str.ml:73:8>>*/ caml_bytes_set
      (r, i, chr( /*<<str.ml:73:42>>*/ caml_bytes_get(s, i) ^ 255));
      /*<<str.ml:73:8>>*/  /*<<str.ml:73:8>>*/ var _yr_ = i + 1 | 0;
     if(31 === i)  /*<<str.ml:75:6>>*/ return r;
     var i = _yr_;
    }
    /*<<str.ml:75:7>>*/ }
    /*<<str.ml:235:10>>*/ var
     /*<<str.ml:235:10>>*/ t =  /*<<str.ml:235:10>>*/ caml_create_bytes(256),
    i = 0;
   for(;;){
     /*<<str.ml:236:22>>*/  /*<<str.ml:236:22>>*/ caml_bytes_set
     (t, i, lowercase_latin1(chr(i)));
     /*<<str.ml:236:22>>*/  /*<<str.ml:236:22>>*/ var _lF_ = i + 1 | 0;
    if(255 === i) break;
    var i = _lF_;
   }
    /*<<str.ml:237:2>>*/ to_string$0(t);
    /*<<str.ml:482:15>>*/ complement(singleton(10));
    /*<<str.ml:610:29>>*/ new_key
    (0,
     function(param){
       /*<<str.ml:610:59>>*/ return [0];
      /*<<str.ml:610:63>>*/ });
    /*<<unix.ml:94:0>>*/  /*<<unix.ml:94:0>>*/ var
    Unix_error = [248, _dg_, caml_fresh_oo_id(0)];
    /*<<unix.ml:96:8>>*/ register_exception
    (_dj_, [0, Unix_error, 0, _di_, _dh_]);
    /*<<unix.ml:102:2>>*/ register_printer
    (function(param){
       /*<<unix.ml:103:4>>*/ if(param[1] !== Unix_error)
        /*<<unix.ml:176:13>>*/ return 0;
      var s = param[4], s$0 = param[3], e = param[2];
      if(typeof e === "number"){
       var _yq_ = e;
       if(34 <= _yq_)
        switch(_yq_){
          case 34:
           var msg = _dT_; break;
          case 35:
           var msg = _dU_; break;
          case 36:
           var msg = _dV_; break;
          case 37:
           var msg = _dW_; break;
          case 38:
           var msg = _dX_; break;
          case 39:
           var msg = _dY_; break;
          case 40:
           var msg = _dZ_; break;
          case 41:
           var msg = _d0_; break;
          case 42:
           var msg = _d1_; break;
          case 43:
           var msg = _d2_; break;
          case 44:
           var msg = _d3_; break;
          case 45:
           var msg = _d4_; break;
          case 46:
           var msg = _d5_; break;
          case 47:
           var msg = _d6_; break;
          case 48:
           var msg = _d7_; break;
          case 49:
           var msg = _d8_; break;
          case 50:
           var msg = _d9_; break;
          case 51:
           var msg = _d__; break;
          case 52:
           var msg = _d$_; break;
          case 53:
           var msg = _ea_; break;
          case 54:
           var msg = _eb_; break;
          case 55:
           var msg = _ec_; break;
          case 56:
           var msg = _ed_; break;
          case 57:
           var msg = _ee_; break;
          case 58:
           var msg = _ef_; break;
          case 59:
           var msg = _eg_; break;
          case 60:
           var msg = _eh_; break;
          case 61:
           var msg = _ei_; break;
          case 62:
           var msg = _ej_; break;
          case 63:
           var msg = _ek_; break;
          case 64:
           var msg = _el_; break;
          case 65:
           var msg = _em_; break;
          case 66:
           var msg = _en_; break;
          default: var msg = _eo_;
        }
       else
        switch(_yq_){
          case 0:
           var msg = _dk_; break;
          case 1:
           var msg = _dm_; break;
          case 2:
           var msg = _dn_; break;
          case 3:
           var msg = _do_; break;
          case 4:
           var msg = _dp_; break;
          case 5:
           var msg = _dq_; break;
          case 6:
           var msg = _dr_; break;
          case 7:
           var msg = _ds_; break;
          case 8:
           var msg = _dt_; break;
          case 9:
           var msg = _du_; break;
          case 10:
           var msg = _dv_; break;
          case 11:
           var msg = _dw_; break;
          case 12:
           var msg = _dx_; break;
          case 13:
           var msg = _dy_; break;
          case 14:
           var msg = _dz_; break;
          case 15:
           var msg = _dA_; break;
          case 16:
           var msg = _dB_; break;
          case 17:
           var msg = _dC_; break;
          case 18:
           var msg = _dD_; break;
          case 19:
           var msg = _dE_; break;
          case 20:
           var msg = _dF_; break;
          case 21:
           var msg = _dG_; break;
          case 22:
           var msg = _dH_; break;
          case 23:
           var msg = _dI_; break;
          case 24:
           var msg = _dJ_; break;
          case 25:
           var msg = _dK_; break;
          case 26:
           var msg = _dL_; break;
          case 27:
           var msg = _dM_; break;
          case 28:
           var msg = _dN_; break;
          case 29:
           var msg = _dO_; break;
          case 30:
           var msg = _dP_; break;
          case 31:
           var msg = _dQ_; break;
          case 32:
           var msg = _dR_; break;
          default: var msg = _dS_;
        }
      }
      else
       var
        x = e[1],
        msg =  /*<<unix.ml:174:29>>*/ caml_call1(sprintf(_ep_), x);
       /*<<unix.ml:175:10>>*/ return [0,
               /*<<unix.ml:175:15>>*/ caml_call3(sprintf(_dl_), msg, s$0, s)];
      /*<<unix.ml:176:18>>*/ });
    /*<<unix.ml:922:23>>*/ create$4(0, 7);
    /*<<src/batConcurrent.ml:24:12>>*/  /*<<src/batConcurrent.ml:24:12>>*/ var
    nolock =
      [0,
       function(f, x){
         /*<<src/batConcurrent.ml:24:35>>*/ return  /*<<src/batConcurrent.ml:24:35>>*/ caml_call1
                (f, x);
        /*<<src/batConcurrent.ml:24:38>>*/ }];
   function sync(lock){
     /*<<src/batConcurrent.ml:26:16>>*/ return lock[1];
    /*<<src/batConcurrent.ml:26:28>>*/ }
   function create$7(n){
     /*<<src/batInnerWeaktbl.ml:24:4>>*/  /*<<src/batInnerWeaktbl.ml:24:14>>*/ var
     len = min(n, max_array_length - 1 | 0);
     /*<<src/batInnerWeaktbl.ml:25:4>>*/ return [0, create$5(len), len, 0];
    /*<<src/batInnerWeaktbl.ml:25:54>>*/ }
   function iter$4(f, s){
     /*<<src/batInnerWeaktbl.ml:27:4>>*/ var _yo_ = s[3] - 1 | 0;
    if(_yo_ >= 0){
     var i = _yo_;
     for(;;){
       /*<<src/batInnerWeaktbl.ml:28:12>>*/  /*<<src/batInnerWeaktbl.ml:28:12>>*/ var
       match = get$1(s[1], i);
      if(match){
       var x = match[1];
        /*<<src/batInnerWeaktbl.ml:28:45>>*/  /*<<src/batInnerWeaktbl.ml:28:45>>*/ caml_call1
        (f, x);
      }
      var _yp_ = i - 1 | 0;
      if(0 === i) break;
      var i = _yp_;
     }
    }
    return 0;
    /*<<src/batInnerWeaktbl.ml:29:8>>*/ }
   function length$3(s){
     /*<<src/batInnerWeaktbl.ml:31:4>>*/ var
      /*<<src/batInnerWeaktbl.ml:31:15>>*/ flag = [0, 0],
      /*<<src/batInnerWeaktbl.ml:31:34>>*/ pt = [0, 0],
     _ym_ = s[3] - 1 | 0,
      /*<<src/batInnerWeaktbl.ml:31:34>>*/ _yl_ = 0;
    if(_ym_ >= 0){
     var i = _yl_;
     for(;;){
       /*<<src/batInnerWeaktbl.ml:33:12>>*/  /*<<src/batInnerWeaktbl.ml:33:12>>*/ var
       d = get$1(s[1], i);
      if(d){
       if(flag[1])
         /*<<src/batInnerWeaktbl.ml:34:37>>*/ set$1(s[1], pt[1], d);
       pt[1]++;
      }
      else
       flag[1] = 1;
       /*<<src/batInnerWeaktbl.ml:32:4>>*/  /*<<src/batInnerWeaktbl.ml:32:4>>*/ var
       _yn_ = i + 1 | 0;
      if(_ym_ === i) break;
      var i = _yn_;
     }
    }
    s[3] = pt[1];
    return s[3];
    /*<<src/batInnerWeaktbl.ml:37:29>>*/ }
   function push$0(x, s){
     /*<<src/batInnerWeaktbl.ml:42:4>>*/ for(;;){
     if(s[3] < s[2]){
       /*<<src/batInnerWeaktbl.ml:43:7>>*/ set$1(s[1], s[3], [0, x]);
      s[3] = s[3] + 1 | 0;
      return;
     }
      /*<<src/batInnerWeaktbl.ml:45:16>>*/  /*<<src/batInnerWeaktbl.ml:45:16>>*/ var
      len = length$3(s);
     if((s[2] / 3 | 0) <= len && len < ((s[2] * 2 | 0) / 3 | 0)) continue;
      /*<<src/batInnerWeaktbl.ml:47:19>>*/  /*<<src/batInnerWeaktbl.ml:47:19>>*/ var
      len$0 = min(((len * 3 | 0) / 2 | 0) + 2 | 0, max_array_length - 1 | 0);
     if(len$0 === len)
       /*<<src/batInnerWeaktbl.ml:48:27>>*/ return failwith(_eq_);
      /*<<src/batInnerWeaktbl.ml:50:22>>*/  /*<<src/batInnerWeaktbl.ml:50:22>>*/ var
      data = create$5(len$0);
      /*<<src/batInnerWeaktbl.ml:51:10>>*/ blit$1(s[1], 0, data, 0, s[3]);
     s[1] = data;
     s[2] = len$0;
    }
    /*<<src/batInnerWeaktbl.ml:52:53>>*/ }
   function pop$0(s){
     /*<<src/batInnerWeaktbl.ml:54:4>>*/ for(;;){
     if(s[3] <= 0)
       /*<<src/batInnerWeaktbl.ml:54:26>>*/ throw  /*<<src/batInnerWeaktbl.ml:54:26>>*/ caml_maybe_attach_backtrace
             (Not_found, 1);
     s[3] = s[3] - 1 | 0;
      /*<<src/batInnerWeaktbl.ml:56:10>>*/  /*<<src/batInnerWeaktbl.ml:56:10>>*/ var
      match = get$1(s[1], s[3]);
     if(match){
      var x = match[1];
       /*<<src/batInnerWeaktbl.ml:56:50>>*/ return x;
     }
    }
    /*<<src/batInnerWeaktbl.ml:56:67>>*/ }
   function top$0(s){
     /*<<src/batInnerWeaktbl.ml:58:4>>*/ for(;;){
     if(s[3] <= 0)
       /*<<src/batInnerWeaktbl.ml:58:26>>*/ throw  /*<<src/batInnerWeaktbl.ml:58:26>>*/ caml_maybe_attach_backtrace
             (Not_found, 1);
      /*<<src/batInnerWeaktbl.ml:59:10>>*/  /*<<src/batInnerWeaktbl.ml:59:10>>*/ var
      match = get$1(s[1], s[3] - 1 | 0);
     if(match){
      var x = match[1];
       /*<<src/batInnerWeaktbl.ml:60:16>>*/ return x;
     }
     s[3] = s[3] - 1 | 0;
    }
    /*<<src/batInnerWeaktbl.ml:60:58>>*/ }
   function Make$3(H){
    function enbox(k){
      /*<<src/batInnerWeaktbl.ml:100:16>>*/  /*<<src/batInnerWeaktbl.ml:100:24>>*/ var
      w = create$5(1);
      /*<<src/batInnerWeaktbl.ml:100:41>>*/ set$1(w, 0, [0, k]);
      /*<<src/batInnerWeaktbl.ml:100:41>>*/ return w;
     /*<<src/batInnerWeaktbl.ml:100:65>>*/ }
    function unbox(bk){
      /*<<src/batInnerWeaktbl.ml:101:17>>*/ return get$1(bk, 0);
     /*<<src/batInnerWeaktbl.ml:101:30>>*/ }
    function bind_new(k, v){
      /*<<src/batInnerWeaktbl.ml:103:21>>*/ return [0, enbox(k), v];
     /*<<src/batInnerWeaktbl.ml:103:36>>*/ }
    function cls_new(bd){
      /*<<src/batInnerWeaktbl.ml:105:19>>*/  /*<<src/batInnerWeaktbl.ml:105:29>>*/ var
      cls = create$7(1);
      /*<<src/batInnerWeaktbl.ml:105:47>>*/ push$0(bd, cls);
      /*<<src/batInnerWeaktbl.ml:105:47>>*/ return cls;
     /*<<src/batInnerWeaktbl.ml:105:69>>*/ }
    function dummy(k){
      /*<<src/batInnerWeaktbl.ml:106:16>>*/ return cls_new(bind_new(k, 0));
     /*<<src/batInnerWeaktbl.ml:106:39>>*/ }
    function top_bind(cls){
      /*<<src/batInnerWeaktbl.ml:108:4>>*/ for(;;){
       /*<<src/batInnerWeaktbl.ml:108:25>>*/ var
        /*<<src/batInnerWeaktbl.ml:108:25>>*/ bind = top$0(cls),
       bk = bind[1],
        /*<<src/batInnerWeaktbl.ml:109:10>>*/ match = unbox(bk);
      if(match){
       var k = match[1];
        /*<<src/batInnerWeaktbl.ml:110:16>>*/ return [0, k];
      }
      if(bind !== pop$0(cls))
        /*<<src/batInnerWeaktbl.ml:110:34>>*/ throw  /*<<src/batInnerWeaktbl.ml:110:34>>*/ caml_maybe_attach_backtrace
              ([0, Assert_failure, _er_], 1);
     }
     /*<<src/batInnerWeaktbl.ml:110:78>>*/ }
    function top_key(cls){
      /*<<src/batInnerWeaktbl.ml:111:20>>*/ return top_bind(cls)[1];
     /*<<src/batInnerWeaktbl.ml:111:38>>*/ }
    function hash(x){
      /*<<src/batInnerWeaktbl.ml:121:17>>*/ try{
       /*<<src/batInnerWeaktbl.ml:121:28>>*/ var
        /*<<src/batInnerWeaktbl.ml:121:28>>*/ _yi_ = top_key(x),
        /*<<src/batInnerWeaktbl.ml:121:21>>*/ _yj_ =
          /*<<src/batInnerWeaktbl.ml:121:21>>*/ caml_call1(H[2], _yi_);
       /*<<src/batInnerWeaktbl.ml:121:21>>*/ return _yj_;
     }
     catch(_yk_){
      var _yh_ = caml_wrap_exception(_yk_);
      if(_yh_ === Not_found)  /*<<src/batInnerWeaktbl.ml:121:58>>*/ return 0;
      throw caml_maybe_attach_backtrace(_yh_, 0);
     }
     /*<<src/batInnerWeaktbl.ml:121:59>>*/ }
    function equal(x, y){
      /*<<src/batInnerWeaktbl.ml:122:20>>*/ try{
       /*<<src/batInnerWeaktbl.ml:122:44>>*/ var
        /*<<src/batInnerWeaktbl.ml:122:44>>*/ _yd_ = top_key(y),
        /*<<src/batInnerWeaktbl.ml:122:32>>*/ _ye_ = top_key(x),
        /*<<src/batInnerWeaktbl.ml:122:24>>*/ _yf_ =
          /*<<src/batInnerWeaktbl.ml:122:24>>*/ caml_call2(H[1], _ye_, _yd_);
       /*<<src/batInnerWeaktbl.ml:122:24>>*/ return _yf_;
     }
     catch(_yg_){
      var _yc_ = caml_wrap_exception(_yg_);
      if(_yc_ === Not_found)  /*<<src/batInnerWeaktbl.ml:122:74>>*/ return 0;
      throw caml_maybe_attach_backtrace(_yc_, 0);
     }
     /*<<src/batInnerWeaktbl.ml:122:79>>*/ }
    var W = Make$2([0, equal, hash]), create = W[1];
    function add(tbl, key, data){
      /*<<src/batInnerWeaktbl.ml:132:4>>*/  /*<<src/batInnerWeaktbl.ml:132:13>>*/ var
      bd = bind_new(key, data);
      /*<<src/batInnerWeaktbl.ml:133:4>>*/ try{
       /*<<src/batInnerWeaktbl.ml:134:29>>*/ var
        /*<<src/batInnerWeaktbl.ml:134:29>>*/ _x$_ = dummy(key),
        /*<<src/batInnerWeaktbl.ml:134:18>>*/ c$0 = W[6].call(null, tbl, _x$_);
       /*<<src/batInnerWeaktbl.ml:134:44>>*/ push$0(bd, c$0);
      var cls = c$0;
     }
     catch(_yb_){
      var _x8_ = caml_wrap_exception(_yb_);
      if(_x8_ !== Not_found) throw caml_maybe_attach_backtrace(_x8_, 0);
       /*<<src/batInnerWeaktbl.ml:135:32>>*/  /*<<src/batInnerWeaktbl.ml:135:32>>*/ var
       c = cls_new(bd);
       /*<<src/batInnerWeaktbl.ml:135:46>>*/ W[4].call(null, tbl, c);
      var cls = c;
     }
     function final$0(param){
       /*<<src/batInnerWeaktbl.ml:136:18>>*/ return 0;
      /*<<src/batInnerWeaktbl.ml:136:39>>*/ }
      /*<<src/batInnerWeaktbl.ml:137:4>>*/ try{
       /*<<src/batInnerWeaktbl.ml:137:8>>*/  /*<<src/batInnerWeaktbl.ml:137:8>>*/ var
       _x__ = _ct_(final$0, key);
       /*<<src/batInnerWeaktbl.ml:137:8>>*/ return _x__;
     }
     catch(_ya_){
      var _x9_ = caml_wrap_exception(_ya_);
      if(_x9_[1] === Invalid_argument)
        /*<<src/batInnerWeaktbl.ml:138:31>>*/ return _ct_(final$0, cls);
      throw caml_maybe_attach_backtrace(_x9_, 0);
     }
     /*<<src/batInnerWeaktbl.ml:138:74>>*/ }
    function iter(f, tbl){
     function f$0(param){
       /*<<src/batInnerWeaktbl.ml:144:26>>*/ var
       v = param[2],
       bk = param[1],
        /*<<src/batInnerWeaktbl.ml:144:26>>*/ match = unbox(bk);
      if(! match)  /*<<src/batInnerWeaktbl.ml:144:72>>*/ return 0;
      var k = match[1];
       /*<<src/batInnerWeaktbl.ml:144:50>>*/ return  /*<<src/batInnerWeaktbl.ml:144:50>>*/ caml_call2
              (f, k, v);
     }
      /*<<src/batInnerWeaktbl.ml:145:4>>*/ return W[10].call
             (null, function(_x7_){ /*<<?>>*/ return iter$4(f$0, _x7_);}, tbl);
     /*<<src/batInnerWeaktbl.ml:145:30>>*/ }
     /*<<src/batInnerWeaktbl.ml:98:54>>*/ return [0,
            create,
            ,
            ,
            ,
            add,
            ,
            ,
            ,
            ,
            ,
            ,
            iter];
   }
   function equal$0(x, y){
     /*<<src/batInnerWeaktbl.ml:172:37>>*/ return 0
            ===  /*<<src/batInnerWeaktbl.ml:172:37>>*/ caml_compare(x, y)
            ? 1
            : 0;
    /*<<src/batInnerWeaktbl.ml:172:54>>*/ }
   var StdHash = Make$3([0, equal$0, hash]), create$8 = StdHash[1];
   function add$1(tbl, k){
     /*<<src/batInnerWeaktbl.ml:177:16>>*/ var _x4_ = StdHash[5];
     /*<<src/batInnerWeaktbl.ml:177:16>>*/ return function(_x5_){
     var _x6_ = _x5_;
     return _x4_(tbl, k, _x6_);};
    /*<<src/batInnerWeaktbl.ml:177:32>>*/ }
   function iter$5(f){
    function _x0_(k, d){
      /*<<src/batInnerWeaktbl.ml:183:30>>*/ return  /*<<src/batInnerWeaktbl.ml:183:30>>*/ caml_call2
             (f, k, d);
     /*<<src/batInnerWeaktbl.ml:183:41>>*/ }
     /*<<src/batInnerWeaktbl.ml:183:13>>*/ var _x1_ = StdHash[12];
     /*<<src/batInnerWeaktbl.ml:183:18>>*/ return function(_x2_){
     var _x3_ = _x2_;
     return _x1_(_x0_, _x3_);};
    /*<<src/batInnerWeaktbl.ml:183:42>>*/ }
   function weak_create(size){
     /*<<src/batInnerIO.ml:26:27>>*/ return create$8(size);
    /*<<src/batInnerIO.ml:26:54>>*/ }
   function weak_add(set, element){
     /*<<src/batInnerIO.ml:27:27>>*/ return  /*<<src/batInnerIO.ml:27:27>>*/ caml_call1
            (add$1(set, element), 0);
    /*<<src/batInnerIO.ml:27:61>>*/ }
   function weak_iter(f, s){
     /*<<src/batInnerIO.ml:28:27>>*/ return  /*<<src/batInnerIO.ml:28:27>>*/ caml_call1
            (iter$5
              (function(x, param){
                 /*<<src/batInnerIO.ml:28:60>>*/ return  /*<<src/batInnerIO.ml:28:60>>*/ caml_call1
                        (f, x);
                /*<<src/batInnerIO.ml:28:63>>*/ }),
             s);
    /*<<src/batInnerIO.ml:28:66>>*/ }
   function hash$0(x){
     /*<<src/batInnerIO.ml:53:20>>*/ return x[4];
    /*<<src/batInnerIO.ml:53:27>>*/ }
   function equal$1(x, y){
     /*<<src/batInnerIO.ml:54:20>>*/ return x[4] === y[4] ? 1 : 0;
    /*<<src/batInnerIO.ml:54:37>>*/ }
   function hash$1(x){
     /*<<src/batInnerIO.ml:61:20>>*/ return x[5];
    /*<<src/batInnerIO.ml:61:28>>*/ }
   function equal$2(x, y){
     /*<<src/batInnerIO.ml:62:20>>*/ return x[5] === y[5] ? 1 : 0;
    /*<<src/batInnerIO.ml:62:39>>*/ }
    /*<<src/batInnerIO.ml:80:14>>*/ var
    Outputs = Make$2([0, equal$2, hash$1]),
     /*<<src/batInnerIO.ml:80:14>>*/ outputs = Outputs[1].call(null, 32);
   function outputs_add(out){
     /*<<src/batInnerIO.ml:82:2>>*/ var _xX_ = Outputs[4];
     /*<<src/batInnerIO.ml:82:2>>*/ return  /*<<src/batInnerIO.ml:82:2>>*/ caml_call2
            (sync(nolock),
             function(_xY_){var _xZ_ = _xY_; return _xX_(outputs, _xZ_);},
             out);
    /*<<src/batInnerIO.ml:82:52>>*/ }
   function outputs_remove(out){
     /*<<src/batInnerIO.ml:85:2>>*/ var _xU_ = Outputs[5];
     /*<<src/batInnerIO.ml:85:2>>*/ return  /*<<src/batInnerIO.ml:85:2>>*/ caml_call2
            (sync(nolock),
             function(_xV_){var _xW_ = _xV_; return _xU_(outputs, _xW_);},
             out);
    /*<<src/batInnerIO.ml:85:55>>*/ }
    /*<<src/batInnerIO.ml:88:0>>*/ var
     /*<<src/batInnerIO.ml:88:0>>*/ No_more_input =
      [248, _es_, caml_fresh_oo_id(0)],
     /*<<src/batInnerIO.ml:89:0>>*/ Input_closed =
      [248, _et_, caml_fresh_oo_id(0)],
     /*<<src/batInnerIO.ml:90:0>>*/ Output_closed =
      [248, _eu_, caml_fresh_oo_id(0)];
   function post_incr(r){
     /*<<src/batInnerIO.ml:96:2>>*/ var result = r[1];
     /*<<src/batInnerIO.ml:97:2>>*/ r[1]++;
     /*<<src/batInnerIO.ml:98:2>>*/ return result;
    /*<<src/batInnerIO.ml:98:8>>*/ }
    /*<<src/batInnerIO.ml:104:10>>*/ var _ev_ = [0, 0];
   function uid(param){
     /*<<src/batInnerIO.ml:105:13>>*/ return post_incr(_ev_);
    /*<<src/batInnerIO.ml:105:26>>*/ }
   function on_close_out(out, f){
     /*<<src/batInnerIO.ml:108:2>>*/ return  /*<<src/batInnerIO.ml:108:2>>*/ caml_call2
            (sync(nolock),
             function(param){
               /*<<src/batInnerIO.ml:109:4>>*/ var do_close = out[3];
              out[3] =
               function(param){
                 /*<<src/batInnerIO.ml:110:32>>*/  /*<<src/batInnerIO.ml:110:32>>*/ caml_call1
                 (f, out);
                 /*<<src/batInnerIO.ml:110:32>>*/ return  /*<<src/batInnerIO.ml:110:32>>*/ caml_call1
                        (do_close, 0);
                /*<<src/batInnerIO.ml:110:50>>*/ };
              return 0;
              /*<<src/batInnerIO.ml:110:51>>*/ },
             0);
    /*<<src/batInnerIO.ml:110:55>>*/ }
   function close_in$0(i){
    function f(param){
      /*<<src/batInnerIO.ml:118:12>>*/ throw  /*<<src/batInnerIO.ml:118:12>>*/ caml_maybe_attach_backtrace
            (Input_closed, 1);
     /*<<src/batInnerIO.ml:118:30>>*/ }
     /*<<src/batInnerIO.ml:119:2>>*/  /*<<src/batInnerIO.ml:119:2>>*/ caml_call1
     (i[3], 0);
    i[1] = f;
    i[2] = f;
    i[3] = function(_xT_){ /*<<?>>*/ return 0;};
    return 0;
    /*<<src/batInnerIO.ml:122:20>>*/ }
   function wrap_in(read, input, close, underlying){
     /*<<src/batInnerIO.ml:126:2>>*/ var
      /*<<src/batInnerIO.ml:132:20>>*/ _xQ_ = weak_create(2),
      /*<<src/batInnerIO.ml:127:4>>*/ result =
       [0, read, input, close, uid(0), _xQ_];
    function _xR_(x){
      /*<<src/batInnerIO.ml:135:48>>*/ return weak_add(x[5], result);
     /*<<src/batInnerIO.ml:135:77>>*/ }
     /*<<src/batInnerIO.ml:135:2>>*/  /*<<src/batInnerIO.ml:135:2>>*/ caml_call2
     (sync(nolock),
      function(_xS_){ /*<<?>>*/ return iter$0(_xR_, _xS_);},
      underlying);
     /*<<src/batInnerIO.ml:136:2>>*/ return result;
    /*<<src/batInnerIO.ml:137:8>>*/ }
   function create_in(read, input, close){
     /*<<src/batInnerIO.ml:147:2>>*/ return wrap_in(read, input, close, 0);
    /*<<src/batInnerIO.ml:147:44>>*/ }
   function close_unit(o){
    function forbidden(param){
      /*<<src/batInnerIO.ml:155:20>>*/ throw  /*<<src/batInnerIO.ml:155:20>>*/ caml_maybe_attach_backtrace
            (Output_closed, 1);
     /*<<src/batInnerIO.ml:155:39>>*/ }
     /*<<src/batInnerIO.ml:156:2>>*/  /*<<src/batInnerIO.ml:156:2>>*/ caml_call1
     (o[4], 0);
     /*<<src/batInnerIO.ml:157:2>>*/ weak_iter(close_unit, o[6]);
     /*<<src/batInnerIO.ml:158:10>>*/  /*<<src/batInnerIO.ml:158:10>>*/ var
     r =  /*<<src/batInnerIO.ml:158:10>>*/ caml_call1(o[3], 0);
    o[1] = forbidden;
    o[2] = forbidden;
    o[3] =
     function(param){
       /*<<src/batInnerIO.ml:161:28>>*/ return r;
      /*<<src/batInnerIO.ml:161:29>>*/ };
    o[4] = function(_xP_){ /*<<?>>*/ return 0;};
     /*<<src/batInnerIO.ml:163:2>>*/ return 0;
    /*<<src/batInnerIO.ml:163:4>>*/ }
   function close_out$0(o){
     /*<<src/batInnerIO.ml:169:2>>*/ close_unit(o);
     /*<<src/batInnerIO.ml:169:2>>*/ return  /*<<src/batInnerIO.ml:169:2>>*/ caml_call1
            (o[3], 0);
    /*<<src/batInnerIO.ml:170:16>>*/ }
   function wrap_out(write, output, flush, close, underlying){
     /*<<src/batInnerIO.ml:176:2>>*/ var
     out = [],
      /*<<src/batInnerIO.ml:185:21>>*/ _xM_ = weak_create(2);
    caml_update_dummy
     (out,
      [0,
       write,
       output,
       function(param){
         /*<<src/batInnerIO.ml:181:8>>*/ outputs_remove(out);
         /*<<src/batInnerIO.ml:181:8>>*/ return  /*<<src/batInnerIO.ml:181:8>>*/ caml_call1
                (close, 0);
        /*<<src/batInnerIO.ml:182:16>>*/ },
       flush,
       uid(0),
       _xM_]);
    function _xN_(x){
      /*<<src/batInnerIO.ml:189:48>>*/ return weak_add(x[6], out);
     /*<<src/batInnerIO.ml:189:73>>*/ }
     /*<<src/batInnerIO.ml:189:2>>*/  /*<<src/batInnerIO.ml:189:2>>*/ caml_call2
     (sync(nolock),
      function(_xO_){ /*<<?>>*/ return iter$0(_xN_, _xO_);},
      underlying);
     /*<<src/batInnerIO.ml:190:2>>*/ outputs_add(out);
     /*<<src/batInnerIO.ml:191:2>>*/ return out;
    /*<<src/batInnerIO.ml:192:5>>*/ }
   function create_out(write, output, flush, close){
     /*<<src/batInnerIO.ml:202:2>>*/ return wrap_out
            (write, output, flush, close, 0);
    /*<<src/batInnerIO.ml:202:54>>*/ }
   function read(i){
     /*<<src/batInnerIO.ml:204:13>>*/ return  /*<<src/batInnerIO.ml:204:13>>*/ caml_call1
            (i[1], 0);
    /*<<src/batInnerIO.ml:204:24>>*/ }
   function really_output(o, s, p, l){
     /*<<src/batInnerIO.ml:228:2>>*/ var
     sl = caml_ml_bytes_length(s),
     _xJ_ = sl < (p + l | 0) ? 1 : 0;
    if(_xJ_)
     var _xK_ = _xJ_;
    else
     var _xL_ = p < 0 ? 1 : 0, _xK_ = _xL_ || (l < 0 ? 1 : 0);
    if(_xK_)  /*<<src/batInnerIO.ml:229:41>>*/ invalid_arg(_ew_);
     /*<<src/batInnerIO.ml:230:10>>*/ var
      /*<<src/batInnerIO.ml:230:10>>*/ l$0 = [0, l],
      /*<<src/batInnerIO.ml:231:10>>*/ p$0 = [0, p];
    for(;;){
     if(0 >= l$0[1])  /*<<src/batInnerIO.ml:238:2>>*/ return l;
      /*<<src/batInnerIO.ml:233:12>>*/  /*<<src/batInnerIO.ml:233:12>>*/ var
      w =
         /*<<src/batInnerIO.ml:233:12>>*/ caml_call3(o[2], s, p$0[1], l$0[1]);
     if(0 === w)
       /*<<src/batInnerIO.ml:234:18>>*/ throw  /*<<src/batInnerIO.ml:234:18>>*/ caml_maybe_attach_backtrace
             (Sys_blocked_io, 1);
     p$0[1] = p$0[1] + w | 0;
     l$0[1] = l$0[1] - w | 0;
    }
    /*<<src/batInnerIO.ml:238:4>>*/ }
   function really_output_substring(o, s, p, l){
     /*<<src/batInnerIO.ml:241:2>>*/ return really_output
            (o, of_string(s), p, l);
    /*<<src/batInnerIO.ml:241:42>>*/ }
   function input$0(i, s, p, l){
     /*<<src/batInnerIO.ml:244:2>>*/ var
     sl = caml_ml_bytes_length(s),
     _xG_ = sl < (p + l | 0) ? 1 : 0;
    if(_xG_)
     var _xH_ = _xG_;
    else
     var _xI_ = p < 0 ? 1 : 0, _xH_ = _xI_ || (l < 0 ? 1 : 0);
    if(_xH_)  /*<<src/batInnerIO.ml:245:39>>*/ invalid_arg(_ex_);
    return 0 === l
            ? 0
            :  /*<<src/batInnerIO.ml:249:4>>*/ caml_call3(i[2], s, p, l);
    /*<<src/batInnerIO.ml:249:20>>*/ }
   function write(o, x){
     /*<<src/batInnerIO.ml:273:16>>*/ return  /*<<src/batInnerIO.ml:273:16>>*/ caml_call1
            (o[1], x);
    /*<<src/batInnerIO.ml:273:29>>*/ }
   function output$0(o, s, p, l){
     /*<<src/batInnerIO.ml:289:2>>*/ var
     sl = caml_ml_bytes_length(s),
     _xD_ = sl < (p + l | 0) ? 1 : 0;
    if(_xD_)
     var _xE_ = _xD_;
    else
     var _xF_ = p < 0 ? 1 : 0, _xE_ = _xF_ || (l < 0 ? 1 : 0);
    if(_xE_)  /*<<src/batInnerIO.ml:290:39>>*/ invalid_arg(_ey_);
     /*<<src/batInnerIO.ml:290:39>>*/ return  /*<<src/batInnerIO.ml:290:39>>*/ caml_call3
            (o[2], s, p, l);
    /*<<src/batInnerIO.ml:291:20>>*/ }
   function flush$0(o){
     /*<<src/batInnerIO.ml:296:14>>*/ return  /*<<src/batInnerIO.ml:296:14>>*/ caml_call1
            (o[4], 0);
    /*<<src/batInnerIO.ml:296:27>>*/ }
   function flush_all$0(param){
    function _xx_(o){
      /*<<src/batInnerIO.ml:299:52>>*/ try{
       /*<<src/batInnerIO.ml:299:56>>*/  /*<<src/batInnerIO.ml:299:56>>*/ var
       _xB_ = flush$0(o);
       /*<<src/batInnerIO.ml:299:56>>*/ return _xB_;
     }
     catch(_xC_){ /*<<src/batInnerIO.ml:299:74>>*/ return 0;}
     /*<<src/batInnerIO.ml:299:76>>*/ }
     /*<<src/batInnerIO.ml:299:2>>*/ var _xy_ = Outputs[10];
     /*<<src/batInnerIO.ml:80:14>>*/ return  /*<<src/batInnerIO.ml:80:14>>*/ caml_call2
            (sync(nolock),
             function(_xz_){var _xA_ = _xz_; return _xy_(_xx_, _xA_);},
             outputs);
    /*<<src/batInnerIO.ml:299:86>>*/ }
   function close_all(param){
    function _xr_(o, os){
      /*<<src/batInnerIO.ml:303:56>>*/ return [0, o, os];
     /*<<src/batInnerIO.ml:303:63>>*/ }
     /*<<src/batInnerIO.ml:302:2>>*/ var
     _xs_ = Outputs[11],
      /*<<src/batInnerIO.ml:303:4>>*/ outs =
        /*<<src/batInnerIO.ml:303:4>>*/ caml_call2
        (sync(nolock),
         function(_xv_){var _xw_ = _xv_; return _xs_(_xr_, outputs, _xw_);},
         0);
     /*<<src/batInnerIO.ml:305:2>>*/ return iter$0
            (function(o){
               /*<<src/batInnerIO.ml:305:22>>*/ try{
                /*<<src/batInnerIO.ml:305:26>>*/  /*<<src/batInnerIO.ml:305:26>>*/ var
                _xt_ = close_out$0(o);
                /*<<src/batInnerIO.ml:305:26>>*/ return _xt_;
              }
              catch(_xu_){ /*<<src/batInnerIO.ml:305:48>>*/ return 0;}
              /*<<src/batInnerIO.ml:305:50>>*/ },
             outs);
    /*<<src/batInnerIO.ml:305:56>>*/ }
    /*<<src/batInnerIO.ml:368:2>>*/  /*<<src/batInnerIO.ml:368:2>>*/ var
    placeholder_in =
      [0,
       function(param){
         /*<<src/batInnerIO.ml:368:26>>*/ return 32;
        /*<<src/batInnerIO.ml:368:29>>*/ },
       function(param, _xq_, _xp_){
         /*<<src/batInnerIO.ml:369:29>>*/ return 0;
        /*<<src/batInnerIO.ml:369:30>>*/ },
       function(_xo_){ /*<<?>>*/ return 0;},
       -1,
       weak_create(0)];
   function input_channel(opt, _xi_, ch){
     /*<<src/batInnerIO.ml:374:2>>*/ if(opt)
     var sth = opt[1], autoclose = sth;
    else
     var autoclose = 1;
     /*<<src/batInnerIO.ml:374:2>>*/ if(_xi_)
     var sth$0 = _xi_[1], cleanup = sth$0;
    else
     var cleanup = 1;
     /*<<src/batInnerIO.ml:374:11>>*/ var
      /*<<src/batInnerIO.ml:374:11>>*/ me = [0, placeholder_in],
      /*<<src/batInnerIO.ml:375:5>>*/ _xj_ =
       cleanup
        ? function
         (param){
           /*<<src/batInnerIO.ml:389:40>>*/ return close_in(ch);
          /*<<src/batInnerIO.ml:389:62>>*/ }
        : function(_xn_){ /*<<?>>*/ return 0;},
      /*<<src/batInnerIO.ml:376:4>>*/ result =
       create_in
        (function(param){
           /*<<src/batInnerIO.ml:377:23>>*/ try{
            /*<<src/batInnerIO.ml:377:27>>*/  /*<<src/batInnerIO.ml:377:27>>*/ var
            _xl_ = input_char(ch);
            /*<<src/batInnerIO.ml:377:27>>*/ return _xl_;
          }
          catch(_xm_){
           var _xk_ = caml_wrap_exception(_xm_);
           if(_xk_ !== End_of_file)
            throw caml_maybe_attach_backtrace(_xk_, 0);
           if(autoclose)  /*<<src/batInnerIO.ml:379:26>>*/ close_in$0(me[1]);
            /*<<src/batInnerIO.ml:380:8>>*/ throw  /*<<src/batInnerIO.ml:380:8>>*/ caml_maybe_attach_backtrace
                  (No_more_input, 1);
          }
          /*<<src/batInnerIO.ml:380:27>>*/ },
         function(s, p, l){
           /*<<src/batInnerIO.ml:382:8>>*/  /*<<src/batInnerIO.ml:382:16>>*/ var
           n = input(ch, s, p, l);
           /*<<src/batInnerIO.ml:383:8>>*/ if(0 !== n)
            /*<<src/batInnerIO.ml:388:13>>*/ return n;
          if(autoclose)  /*<<src/batInnerIO.ml:385:30>>*/ close_in$0(me[1]);
           /*<<src/batInnerIO.ml:386:12>>*/ throw  /*<<src/batInnerIO.ml:386:12>>*/ caml_maybe_attach_backtrace
                 (No_more_input, 1);
          /*<<src/batInnerIO.ml:388:14>>*/ },
         _xj_);
    me[1] = result;
     /*<<src/batInnerIO.ml:392:2>>*/ return result;
    /*<<src/batInnerIO.ml:392:8>>*/ }
   function output_channel(opt, ch){
     /*<<src/batInnerIO.ml:395:2>>*/ if(opt)
     var sth = opt[1], cleanup = sth;
    else
     var cleanup = 0;
     /*<<src/batInnerIO.ml:395:2>>*/  /*<<src/batInnerIO.ml:395:2>>*/ var
     _xh_ =
       cleanup
        ? function
         (param){
           /*<<src/batInnerIO.ml:399:8>>*/ return close_out(ch);
          /*<<src/batInnerIO.ml:402:11>>*/ }
        : function
         (param){
           /*<<src/batInnerIO.ml:404:8>>*/ return flush(ch);
          /*<<src/batInnerIO.ml:407:11>>*/ };
     /*<<src/batInnerIO.ml:403:11>>*/ return create_out
            (function(c){
               /*<<src/batInnerIO.ml:396:26>>*/ return output_char(ch, c);
              /*<<src/batInnerIO.ml:396:42>>*/ },
             function(s, p, l){
               /*<<src/batInnerIO.ml:397:26>>*/ output(ch, s, p, l);
               /*<<src/batInnerIO.ml:397:26>>*/ return l;
              /*<<src/batInnerIO.ml:397:55>>*/ },
             function(param){
               /*<<src/batInnerIO.ml:408:26>>*/ return flush(ch);
              /*<<src/batInnerIO.ml:408:45>>*/ },
             _xh_);
    /*<<src/batInnerIO.ml:408:46>>*/ }
    /*<<src/batInnerIO.ml:628:13>>*/ var
     /*<<src/batInnerIO.ml:628:13>>*/ stdin$0 = input_channel(0, 0, stdin),
     /*<<src/batInnerIO.ml:629:13>>*/ stdout$0 = output_channel(0, stdout),
     /*<<src/batInnerIO.ml:630:13>>*/ stderr$0 = output_channel(0, stderr);
    /*<<src/batInnerIO.ml:631:13>>*/ create_out
    (function(_xg_){ /*<<?>>*/ return 0;},
     function(param, _xf_, l){
       /*<<src/batInnerIO.ml:633:26>>*/ return l;
      /*<<src/batInnerIO.ml:633:27>>*/ },
     function(_xe_){ /*<<?>>*/ return 0;},
     function(_xd_){ /*<<?>>*/ return 0;});
   function get_flush(out){
     /*<<src/batInnerIO.ml:638:21>>*/ return out[4];
    /*<<src/batInnerIO.ml:638:34>>*/ }
    /*<<src/batEnum.ml:44:0>>*/  /*<<src/batEnum.ml:44:0>>*/ var
    No_more_elements = [248, _eA_, caml_fresh_oo_id(0)];
   function make$2(next, count, clone){
     /*<<src/batEnum.ml:47:2>>*/ return [0, count, next, clone, 1];
    /*<<src/batEnum.ml:52:3>>*/ }
   function count(t){
     /*<<src/batEnum.ml:309:2>>*/ return  /*<<src/batEnum.ml:309:2>>*/ caml_call1
            (t[1], 0);
    /*<<src/batEnum.ml:309:11>>*/ }
   function clone(t){
     /*<<src/batEnum.ml:317:2>>*/ return  /*<<src/batEnum.ml:317:2>>*/ caml_call1
            (t[3], 0);
    /*<<src/batEnum.ml:317:11>>*/ }
   function fold(f, init, t){
     /*<<src/batEnum.ml:375:2>>*/  /*<<src/batEnum.ml:375:12>>*/ var
     acc = [0, init];
    function loop(param){
      /*<<src/batEnum.ml:377:4>>*/ for(;;){
       /*<<src/batEnum.ml:377:18>>*/  /*<<src/batEnum.ml:377:18>>*/ var
       _xc_ =  /*<<src/batEnum.ml:377:18>>*/ caml_call1(t[2], 0);
      acc[1] =  /*<<src/batEnum.ml:377:11>>*/ caml_call2(f, acc[1], _xc_);
     }
     /*<<src/batEnum.ml:378:10>>*/ }
     /*<<src/batEnum.ml:380:2>>*/ try{
      /*<<src/batEnum.ml:381:4>>*/ loop(0);
      /*<<src/batEnum.ml:381:4>>*/ return;
    }
    catch(_xb_){
     var _xa_ = caml_wrap_exception(_xb_);
     if(_xa_ === No_more_elements) return;
     throw caml_maybe_attach_backtrace(_xa_, 0);
    }
    /*<<src/batEnum.ml:383:28>>*/ }
   function symbol$1(f, t){
     /*<<src/batEnum.ml:549:2>>*/ return [0,
            t[1],
            function(param){
              /*<<src/batEnum.ml:551:22>>*/ return  /*<<src/batEnum.ml:551:24>>*/ caml_call1
                     (f,  /*<<src/batEnum.ml:551:24>>*/ caml_call1(t[2], 0));
             /*<<src/batEnum.ml:551:34>>*/ },
            function(param){
              /*<<src/batEnum.ml:552:23>>*/ return symbol$1
                     (f,  /*<<src/batEnum.ml:552:29>>*/ caml_call1(t[3], 0));
             /*<<src/batEnum.ml:552:40>>*/ },
            t[4]];
    /*<<src/batEnum.ml:554:3>>*/ }
   var to_object = function _w$_(_w__){return _w$_.fun(_w__);}, _eB_ = [0, 0];
   caml_update_dummy
    (to_object,
     function(t){
       /*<<src/batEnum.ml:1464:2>>*/ if(! _eB_[1]){
       var
        _w5_ = create_table(shared),
        _w6_ = new_variable(_w5_, _eC_),
        _w7_ = get_method_labels(_w5_, _ez_);
       set_methods
        (_w5_,
         [0,
          _w7_[1],
          function(self_1){
           var env = self_1[1 + _w6_];
            /*<<src/batEnum.ml:1465:18>>*/ return  /*<<src/batEnum.ml:1465:18>>*/ caml_call1
                   (env[1][2], 0);
          },
          _w7_[2],
          function(self_1){
           var env = self_1[1 + _w6_];
            /*<<src/batEnum.ml:1466:18>>*/ return count(env[1]);
          },
          _w7_[3],
          function(self_1){
           var env = self_1[1 + _w6_];
            /*<<src/batEnum.ml:1467:29>>*/ return  /*<<src/batEnum.ml:1467:29>>*/ caml_call1
                   (to_object, clone(env[1]));
          }]);
       init_class(_w5_);
       _eB_[1] =
        function(_w8_){
         var _w9_ = create_object_opt(0, _w5_);
         _w9_[1 + _w6_] = _w8_;
         return _w9_;
        };
      }
      return caml_call1(_eB_[1], [0, t]);
      /*<<src/batEnum.ml:1468:5>>*/ });
    /*<<src/batBitSet.ml:26:12>>*/  /*<<src/batBitSet.ml:26:12>>*/ var
    buf = create$1(8);
    /*<<src/batBitSet.ml:27:2>>*/ function print_bchar(c){
     /*<<src/batBitSet.ml:28:4>>*/  /*<<src/batBitSet.ml:28:13>>*/ var
     rc = [0, c];
     /*<<src/batBitSet.ml:29:4>>*/ clear$1(buf);
    var i = 1;
    for(;;){
     var _w3_ = 1 === (rc[1] & 1) ? 49 : 48;
      /*<<src/batBitSet.ml:31:6>>*/ add_char(buf, _w3_);
     rc[1] = rc[1] >>> 1 | 0;
      /*<<src/batBitSet.ml:29:4>>*/  /*<<src/batBitSet.ml:29:4>>*/ var
      _w4_ = i + 1 | 0;
     if(8 === i)  /*<<src/batBitSet.ml:27:2>>*/ return contents(buf);
     var i = _w4_;
    }
    /*<<src/batBitSet.ml:35:23>>*/ }
    /*<<src/batBitSet.ml:37:2>>*/ init$1(256, print_bchar);
   function count_bits(i){
     /*<<src/batBitSet.ml:190:4>>*/ return 0 === i
            ? 0
            : count_bits(i / 2 | 0) + (i % 2 | 0) | 0;
    /*<<src/batBitSet.ml:193:38>>*/ }
    /*<<src/batBitSet.ml:195:2>>*/ init$1(256, count_bits);
    /*<<src/batBitSet.ml:210:2>>*/ function mk$0(c){
     /*<<src/batBitSet.ml:211:4>>*/  /*<<src/batBitSet.ml:211:14>>*/ var
     arr =  /*<<src/batBitSet.ml:211:14>>*/ caml_make_vect(8, -1);
    function mk(last_set_bit, i, v){
      /*<<src/batBitSet.ml:213:6>>*/ var
      last_set_bit$0 = last_set_bit,
      i$0 = i,
      v$0 = v;
      /*<<src/batBitSet.ml:213:6>>*/ for(;;){
      var _w2_ = 0 <= i$0 ? 1 : 0;
      if(! _w2_) return _w2_;
      var last_set_bit$1 = 0 === (v$0 & 128) ? last_set_bit$0 : i$0;
       /*<<src/batBitSet.ml:220:8>>*/ caml_check_bound(arr, i$0)[1 + i$0] = last_set_bit$1;
      var
       v$1 = v$0 << 1,
       i$1 = i$0 - 1 | 0,
       last_set_bit$0 = last_set_bit$1,
       i$0 = i$1,
       v$0 = v$1;
     }
     /*<<src/batBitSet.ml:221:42>>*/ }
     /*<<src/batBitSet.ml:223:4>>*/ mk(-1, 7, c);
     /*<<src/batBitSet.ml:223:4>>*/ return arr;
    /*<<src/batBitSet.ml:224:7>>*/ }
    /*<<src/batBitSet.ml:226:2>>*/ init$1(256, mk$0);
   function MakeNumeric(Base){
    var compare = Base[13];
     /*<<src/batNumber.ml:233:74>>*/ return [0, , , , , , , , , , , compare];
   }
   function generic_pow(zero, one, div_two, mod_two, symbol, a, n){
    function pow(a, n){
      /*<<src/batNumber.ml:276:4>>*/ if
      ( /*<<src/batNumber.ml:276:12>>*/ caml_equal(n, zero))
      return one;
      /*<<src/batNumber.ml:277:12>>*/ if
      ( /*<<src/batNumber.ml:277:12>>*/ caml_equal(n, one))
       /*<<src/batNumber.ml:277:26>>*/ return a;
      /*<<src/batNumber.ml:279:14>>*/ var
       /*<<src/batNumber.ml:279:14>>*/ b =
        pow(a,  /*<<src/batNumber.ml:279:20>>*/ caml_call1(div_two, n)),
       /*<<src/batNumber.ml:280:18>>*/ one$0 =
         /*<<src/batNumber.ml:280:18>>*/ caml_equal
          ( /*<<src/batNumber.ml:280:18>>*/ caml_call1(mod_two, n), zero)
         ? one
         : a;
      /*<<src/batNumber.ml:280:6>>*/ return  /*<<src/batNumber.ml:280:6>>*/ caml_call2
             (symbol,
               /*<<src/batNumber.ml:280:6>>*/ caml_call2(symbol, b, b),
              one$0);
     /*<<src/batNumber.ml:280:51>>*/ }
     /*<<src/batNumber.ml:282:5>>*/ return  /*<<src/batNumber.ml:282:5>>*/ caml_lessthan
             (n, zero)
            ? invalid_arg(_eD_)
            : pow(a, n);
    /*<<src/batNumber.ml:285:11>>*/ }
    /*<<src/batNumber.ml:287:0>>*/ var
     /*<<src/batNumber.ml:287:0>>*/ Overflow =
      [248, _eE_, caml_fresh_oo_id(0)],
     /*<<src/batNumber.ml:288:0>>*/ NaN$0 = [248, _eF_, caml_fresh_oo_id(0)];
   function compare$8(x, y){
     /*<<src/batInt.ml:95:4>>*/ return y < x ? 1 : x < y ? -1 : 0;
    /*<<src/batInt.ml:97:10>>*/ }
   function symbol$2(a, b){
     /*<<src/batInt.ml:121:25>>*/ return a === b ? 1 : 0;
    /*<<src/batInt.ml:121:30>>*/ }
    /*<<src/batInt.ml:180:5>>*/ if(! symbol$2(length_of_digit, 32)){
     /*<<src/batInt.ml:193:13>>*/  /*<<src/batInt.ml:193:13>>*/ caml_int_of_string
     ("0x5555_5555_5555_5555");
     /*<<src/batInt.ml:194:13>>*/  /*<<src/batInt.ml:194:13>>*/ caml_int_of_string
     ("0x3333_3333_3333_3333");
     /*<<src/batInt.ml:195:13>>*/  /*<<src/batInt.ml:195:13>>*/ caml_int_of_string
     ("0x0f0f_0f0f_0f0f_0f0f");
   }
   function neg(_w1_){ /*<<?>>*/ return - _w1_;}
   function succ$2(x){
     /*<<src/batFloat.ml:35:15>>*/ return x + 1.;
    /*<<src/batFloat.ml:35:22>>*/ }
   function pred$2(x){
     /*<<src/batFloat.ml:36:15>>*/ return x - 1.;
    /*<<src/batFloat.ml:36:22>>*/ }
   function abs$3(_w0_){ /*<<?>>*/ return Math.abs(_w0_);}
   function div(_wZ_, _wY_){ /*<<?>>*/ return _wZ_ / _wY_;}
   function mul(_wX_, _wW_){ /*<<?>>*/ return _wX_ * _wW_;}
   function sub$3(_wV_, _wU_){ /*<<?>>*/ return _wV_ - _wU_;}
   function add$2(_wT_, _wS_){ /*<<?>>*/ return _wT_ + _wS_;}
   function modulo(_wR_, _wQ_){ /*<<?>>*/ return _wR_ % _wQ_;}
   function pow(_wP_, _wO_){ /*<<?>>*/ return Math.pow(_wP_, _wO_);}
   function compare$9(_wN_, _wM_){ /*<<?>>*/ return caml_compare(_wN_, _wM_);}
   function of_int(_wL_){ /*<<?>>*/ return _wL_;}
   function to_int(_wK_){ /*<<?>>*/ return _wK_ | 0;}
   function of_string$0(_wJ_){ /*<<?>>*/ return caml_float_of_string(_wJ_);}
   var
    compare$10 =
      MakeNumeric
        ([0,
          0.,
          1.,
          neg,
          succ$2,
          pred$2,
          abs$3,
          add$2,
          sub$3,
          mul,
          div,
          modulo,
          pow,
          compare$9,
          of_int,
          to_int,
          of_string$0,
          string_of_float,
          function(_wI_){ /*<<?>>*/ return _wI_;},
          function(_wH_){ /*<<?>>*/ return _wH_;}])
       [11];
   function if_safe(x){
     /*<<src/batFloat.ml:299:18>>*/  /*<<src/batFloat.ml:299:24>>*/ var
     match =  /*<<src/batFloat.ml:299:24>>*/ caml_classify_float(x);
    if(3 === match)
      /*<<src/batFloat.ml:300:21>>*/ throw  /*<<src/batFloat.ml:300:21>>*/ caml_maybe_attach_backtrace
            (Overflow, 1);
    if(4 <= match)
      /*<<src/batFloat.ml:301:21>>*/ throw  /*<<src/batFloat.ml:301:21>>*/ caml_maybe_attach_backtrace
            (NaN$0, 1);
     /*<<src/batFloat.ml:302:21>>*/ return;
    /*<<src/batFloat.ml:302:23>>*/ }
   function check$0(x){
     /*<<src/batFloat.ml:303:16>>*/ if_safe(x);
     /*<<src/batFloat.ml:303:16>>*/ return x;
    /*<<src/batFloat.ml:303:28>>*/ }
   function safe1(f, x){
     /*<<src/batFloat.ml:305:20>>*/ return check$0
            ( /*<<src/batFloat.ml:305:26>>*/ caml_call1(f, x));
    /*<<src/batFloat.ml:305:31>>*/ }
   function _eG_(_wG_){ /*<<?>>*/ return Math.atan(_wG_);}
    /*<<src/batFloat.ml:332:13>>*/ function atan(_wF_){
     /*<<?>>*/ return safe1(_eG_, _wF_);
   }
    /*<<src/batFloat.ml:359:27>>*/ atan(1.);
   function may(f, param){
     /*<<?>>*/ if(! param)  /*<<src/batOption.ml:29:12>>*/ return 0;
    var v = param[1];
     /*<<src/batOption.ml:30:14>>*/ return  /*<<src/batOption.ml:30:14>>*/ caml_call1
            (f, v);
   }
   function map$3(f, param){
     /*<<?>>*/ if(! param)  /*<<src/batOption.ml:37:12>>*/ return 0;
    var v = param[1];
     /*<<src/batOption.ml:38:14>>*/ return [0,
             /*<<src/batOption.ml:38:19>>*/ caml_call1(f, v)];
   }
   function default_delayed(l, param){
     /*<<?>>*/ if(! param)
      /*<<src/batOption.ml:72:14>>*/ return  /*<<src/batOption.ml:72:14>>*/ caml_call1
             (l, 0);
    var v = param[1];
     /*<<src/batOption.ml:73:16>>*/ return v;
   }
   function get_exn(s, e){
     /*<<src/batOption.ml:95:18>>*/ if(! s)
      /*<<src/batOption.ml:96:14>>*/ throw  /*<<src/batOption.ml:96:14>>*/ caml_maybe_attach_backtrace
            (e, 1);
    var v = s[1];
     /*<<src/batOption.ml:97:14>>*/ return v;
    /*<<src/batOption.ml:97:15>>*/ }
   function map_default(f, v, param){
     /*<<?>>*/ if(! param)  /*<<src/batOption.ml:110:12>>*/ return v;
    var v2 = param[1];
     /*<<src/batOption.ml:111:15>>*/ return  /*<<src/batOption.ml:111:15>>*/ caml_call1
            (f, v2);
   }
    /*<<src/batUnix.ml:115:21>>*/ var
    Wrapped_in = Make$3([0, equal$1, hash$0]),
    Wrapped_out = Make$3([0, equal$2, hash$1]),
     /*<<src/batUnix.ml:115:21>>*/ wrapped_in = Wrapped_in[1].call(null, 16),
     /*<<src/batUnix.ml:116:21>>*/ wrapped_out = Wrapped_out[1].call(null, 16);
   function input_add(k, v){
     /*<<src/batUnix.ml:119:2>>*/ var _wC_ = Wrapped_in[5];
     /*<<src/batUnix.ml:119:2>>*/ return  /*<<src/batUnix.ml:119:2>>*/ caml_call2
            (sync(nolock),
             function(_wD_){
              var _wE_ = _wD_;
              return _wC_(wrapped_in, k, _wE_);
             },
             v);
    /*<<src/batUnix.ml:119:58>>*/ }
   function output_add(k, v){
     /*<<src/batUnix.ml:125:2>>*/ var _wz_ = Wrapped_out[5];
     /*<<src/batUnix.ml:125:2>>*/ return  /*<<src/batUnix.ml:125:2>>*/ caml_call2
            (sync(nolock),
             function(_wA_){
              var _wB_ = _wA_;
              return _wz_(wrapped_out, k, _wB_);
             },
             v);
    /*<<src/batUnix.ml:125:60>>*/ }
    /*<<src/batUnix.ml:141:2>>*/ input_add(stdin$0, stdin);
    /*<<src/batUnix.ml:142:2>>*/ output_add(stdout$0, stdout);
    /*<<src/batUnix.ml:143:2>>*/ output_add(stderr$0, stderr);
   make_class
    (shared$0,
     function(_ws_){
      var
       _wt_ = new_variable(_ws_, _eM_),
       _wu_ = get_method_labels(_ws_, _eK_);
      set_methods
       (_ws_,
        [0,
         _wu_[1],
         function(self_1, s, pos, len){
           /*<<src/batIO.ml:375:29>>*/ return input$0
                  (self_1[1 + _wt_], s, pos, len);
          /*<<src/batIO.ml:375:47>>*/ },
         _wu_[2],
         function(self_1, param){
           /*<<src/batIO.ml:376:24>>*/ return close_in$0(self_1[1 + _wt_]);
          /*<<src/batIO.ml:376:35>>*/ }]);
       /*<<src/batIO.ml:373:17>>*/ return function(_wx_, _ww_, _wv_){
       var _wy_ = create_object_opt(_ww_, _ws_);
       _wy_[1 + _wt_] = _wv_;
       return _wy_;};
     });
   make_class
    (_eH_,
     function(_wl_){
      var
       _wm_ = new_variable(_wl_, _eN_),
       _wn_ = get_method_labels(_wl_, _eI_);
      set_methods
       (_wl_,
        [0,
         _wn_[1],
         function(self_2, s, pos, len){
           /*<<src/batIO.ml:381:30>>*/ return output$0
                  (self_2[1 + _wm_], s, pos, len);
          /*<<src/batIO.ml:381:49>>*/ },
         _wn_[2],
         function(self_2, param){
           /*<<src/batIO.ml:382:21>>*/ return flush$0(self_2[1 + _wm_]);
          /*<<src/batIO.ml:382:29>>*/ },
         _wn_[3],
         function(self_2, param){
           /*<<src/batIO.ml:383:25>>*/ close_out$0(self_2[1 + _wm_]);
           /*<<src/batIO.ml:383:31>>*/ return 0;
          /*<<src/batIO.ml:383:45>>*/ }]);
       /*<<src/batIO.ml:379:18>>*/ return function(_wq_, _wp_, _wo_){
       var _wr_ = create_object_opt(_wp_, _wl_);
       _wr_[1 + _wm_] = _wo_;
       return _wr_;};
     });
   make_class
    (_eL_,
     function(_wb_){
      var
       _wc_ = new_variable(_wb_, _eO_),
       _wd_ = get_method_labels(_wb_, _eL_);
      set_methods
       (_wb_,
        [0,
         _wd_[1],
         function(self_3, param){
           /*<<src/batIO.ml:388:19>>*/ try{
            /*<<src/batIO.ml:388:23>>*/  /*<<src/batIO.ml:388:23>>*/ var
            _wj_ = read(self_3[1 + _wc_]);
            /*<<src/batIO.ml:388:23>>*/ return _wj_;
          }
          catch(_wk_){
           var _wi_ = caml_wrap_exception(_wk_);
           if(_wi_ === No_more_input)
             /*<<src/batIO.ml:388:53>>*/ throw  /*<<src/batIO.ml:388:53>>*/ caml_maybe_attach_backtrace
                   (End_of_file, 1);
           throw caml_maybe_attach_backtrace(_wi_, 0);
          }
          /*<<src/batIO.ml:388:70>>*/ },
         _wd_[2],
         function(self_3, param){
           /*<<src/batIO.ml:389:24>>*/ return close_in$0(self_3[1 + _wc_]);
          /*<<src/batIO.ml:389:35>>*/ }]);
       /*<<src/batIO.ml:386:15>>*/ return function(_wg_, _wf_, _we_){
       var _wh_ = create_object_opt(_wf_, _wb_);
       _wh_[1 + _wc_] = _we_;
       return _wh_;};
     });
   make_class
    (_eJ_,
     function(_v6_){
      var
       _v7_ = new_variable(_v6_, _eP_),
       _v8_ = get_method_labels(_v6_, _eJ_);
      set_methods
       (_v6_,
        [0,
         _v8_[1],
         function(self_4, t){
           /*<<src/batIO.ml:394:19>>*/ return write(self_4[1 + _v7_], t);
          /*<<src/batIO.ml:394:29>>*/ },
         _v8_[2],
         function(self_4, param){
           /*<<src/batIO.ml:395:21>>*/ return flush$0(self_4[1 + _v7_]);
          /*<<src/batIO.ml:395:29>>*/ },
         _v8_[3],
         function(self_4, param){
           /*<<src/batIO.ml:396:25>>*/ close_out$0(self_4[1 + _v7_]);
           /*<<src/batIO.ml:396:31>>*/ return 0;
          /*<<src/batIO.ml:396:45>>*/ }]);
       /*<<src/batIO.ml:392:16>>*/ return function(_v$_, _v__, _v9_){
       var _wa_ = create_object_opt(_v__, _v6_);
       _wa_[1 + _v7_] = _v9_;
       return _wa_;};
     });
   function modulo$0(_v5_, _v4_){ /*<<?>>*/ return caml_mod(_v5_, _v4_);}
   function _eQ_(_v3_, _v2_){ /*<<?>>*/ return caml_mul(_v3_, _v2_);}
   function _eR_(_v1_, _v0_){ /*<<?>>*/ return _v1_ & _v0_;}
    /*<<src/batInt32.ml:130:80>>*/ function _eS_(_vZ_){
     /*<<?>>*/ return _eR_(one, _vZ_);
   }
   function _eT_(n){
     /*<<src/batInt32.ml:130:54>>*/ return n >> 1;
    /*<<src/batInt32.ml:130:69>>*/ }
    /*<<src/batInt32.ml:130:12>>*/ function pow$0(_vX_, _vY_){
     /*<<?>>*/ return generic_pow(zero, one, _eT_, _eS_, _eQ_, _vX_, _vY_);
   }
   var
    include =
      MakeNumeric
       ([0,
         zero,
         one,
         function(_vW_){ /*<<?>>*/ return - _vW_ | 0;},
         succ,
         pred,
         abs$0,
         function(_vV_, _vU_){ /*<<?>>*/ return _vV_ + _vU_ | 0;},
         function(_vT_, _vS_){ /*<<?>>*/ return _vT_ - _vS_ | 0;},
         function(_vR_, _vQ_){ /*<<?>>*/ return caml_mul(_vR_, _vQ_);},
         function(_vP_, _vO_){ /*<<?>>*/ return caml_div(_vP_, _vO_);},
         modulo$0,
         pow$0,
         compare$2,
         function(_vN_){ /*<<?>>*/ return _vN_;},
         function(_vM_){ /*<<?>>*/ return _vM_;},
         function(_vL_){ /*<<?>>*/ return caml_int_of_string(_vL_);},
         to_string$1,
         function(_vK_){ /*<<?>>*/ return _vK_ | 0;},
         function(_vJ_){ /*<<?>>*/ return _vJ_;}]),
    compare$11 = include[11];
   function modulo$1(_vI_, _vH_){
     /*<<?>>*/ return caml_int64_mod(_vI_, _vH_);
   }
   function _eU_(_vG_, _vF_){ /*<<?>>*/ return caml_int64_mul(_vG_, _vF_);}
   function _eV_(_vE_, _vD_){ /*<<?>>*/ return caml_int64_and(_vE_, _vD_);}
    /*<<src/batInt64.ml:27:90>>*/ function _eW_(_vC_){
     /*<<?>>*/ return _eV_(one$0, _vC_);
   }
   function _eX_(n){
     /*<<src/batInt64.ml:27:64>>*/ return  /*<<src/batInt64.ml:27:64>>*/ caml_int64_shift_right
            (n, 1);
    /*<<src/batInt64.ml:27:79>>*/ }
    /*<<src/batInt64.ml:27:12>>*/ function pow$1(_vA_, _vB_){
     /*<<?>>*/ return generic_pow(zero$0, one$0, _eX_, _eW_, _eU_, _vA_, _vB_);
   }
   var
    include$0 =
      MakeNumeric
       ([0,
         zero$0,
         one$0,
         function(_vz_){ /*<<?>>*/ return caml_int64_neg(_vz_);},
         succ$0,
         pred$0,
         abs$1,
         function(_vy_, _vx_){ /*<<?>>*/ return caml_int64_add(_vy_, _vx_);},
         function(_vw_, _vv_){ /*<<?>>*/ return caml_int64_sub(_vw_, _vv_);},
         function(_vu_, _vt_){ /*<<?>>*/ return caml_int64_mul(_vu_, _vt_);},
         function(_vs_, _vr_){ /*<<?>>*/ return caml_int64_div(_vs_, _vr_);},
         modulo$1,
         pow$1,
         compare$3,
         function(_vq_){ /*<<?>>*/ return caml_int64_of_int32(_vq_);},
         function(_vp_){ /*<<?>>*/ return caml_int64_to_int32(_vp_);},
         function(_vo_){ /*<<?>>*/ return caml_int64_of_string(_vo_);},
         to_string$2,
         function(_vn_){ /*<<?>>*/ return caml_int64_of_float(_vn_);},
         function(_vm_){ /*<<?>>*/ return caml_int64_to_float(_vm_);}]),
    compare$12 = include$0[11];
   function modulo$2(_vl_, _vk_){ /*<<?>>*/ return caml_mod(_vl_, _vk_);}
   function _eY_(_vj_, _vi_){ /*<<?>>*/ return caml_mul(_vj_, _vi_);}
   function _eZ_(_vh_, _vg_){ /*<<?>>*/ return _vh_ & _vg_;}
    /*<<src/batNativeint.ml:28:90>>*/ function _e0_(_vf_){
     /*<<?>>*/ return _eZ_(one$1, _vf_);
   }
   function _e1_(n){
     /*<<src/batNativeint.ml:28:64>>*/ return n >> 1;
    /*<<src/batNativeint.ml:28:79>>*/ }
    /*<<src/batNativeint.ml:28:12>>*/ function pow$2(_vd_, _ve_){
     /*<<?>>*/ return generic_pow(zero$1, one$1, _e1_, _e0_, _eY_, _vd_, _ve_);
   }
   var
    include$1 =
      MakeNumeric
       ([0,
         zero$1,
         one$1,
         function(_vc_){ /*<<?>>*/ return - _vc_ | 0;},
         succ$1,
         pred$1,
         abs$2,
         function(_vb_, _va_){ /*<<?>>*/ return _vb_ + _va_ | 0;},
         function(_u$_, _u__){ /*<<?>>*/ return _u$_ - _u__ | 0;},
         function(_u9_, _u8_){ /*<<?>>*/ return caml_mul(_u9_, _u8_);},
         function(_u7_, _u6_){ /*<<?>>*/ return caml_div(_u7_, _u6_);},
         modulo$2,
         pow$2,
         compare$4,
         function(_u5_){ /*<<?>>*/ return _u5_;},
         function(_u4_){ /*<<?>>*/ return _u4_;},
         function(_u3_){ /*<<?>>*/ return caml_int_of_string(_u3_);},
         to_string$3,
         function(_u2_){ /*<<?>>*/ return _u2_ | 0;},
         function(_u1_){ /*<<?>>*/ return _u1_;}]),
    compare$13 = include$1[11],
    empty$0 = 0;
   function height(param){
     /*<<src/batSet.ml:52:15>>*/ if(! param)
      /*<<src/batSet.ml:53:15>>*/ return 0;
    var h = param[4];
     /*<<src/batSet.ml:54:27>>*/ return h;
    /*<<src/batSet.ml:54:28>>*/ }
   function create$9(l, v, r){
     /*<<src/batSet.ml:61:4>>*/ if(l) var h = l[4], hl = h; else var hl = 0;
     /*<<src/batSet.ml:62:4>>*/ if(r)
     var h$0 = r[4], hr = h$0;
    else
     var hr = 0;
    var _u0_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
     /*<<src/batSet.ml:63:4>>*/ return [0, l, v, r, _u0_];
    /*<<src/batSet.ml:63:56>>*/ }
   function bal(l, v, r){
     /*<<src/batSet.ml:70:4>>*/ if(l) var h = l[4], hl = h; else var hl = 0;
     /*<<src/batSet.ml:71:4>>*/ if(r)
     var h$0 = r[4], hr = h$0;
    else
     var hr = 0;
    if((hr + 2 | 0) < hl){
     if(! l)  /*<<src/batSet.ml:74:17>>*/ return invalid_arg(_e3_);
      /*<<src/batSet.ml:76:24>>*/ var
      lr = l[3],
      lv = l[2],
      ll = l[1],
       /*<<src/batSet.ml:76:24>>*/ _uV_ = height(lr);
     if(_uV_ <= height(ll))
       /*<<src/batSet.ml:77:23>>*/ return create$9(ll, lv, create$9(lr, v, r));
     if(! lr)  /*<<src/batSet.ml:80:21>>*/ return invalid_arg(_e2_);
      /*<<src/batSet.ml:82:42>>*/ var
      lrr = lr[3],
      lrv = lr[2],
      lrl = lr[1],
       /*<<src/batSet.ml:82:42>>*/ _uW_ = create$9(lrr, v, r);
      /*<<src/batSet.ml:82:42>>*/ return create$9
             (create$9(ll, lv, lrl), lrv, _uW_);
    }
    if((hl + 2 | 0) >= hr){
     var _uZ_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
      /*<<src/batSet.ml:97:6>>*/ return [0, l, v, r, _uZ_];
    }
    if(! r)  /*<<src/batSet.ml:86:17>>*/ return invalid_arg(_e5_);
     /*<<src/batSet.ml:88:24>>*/ var
     rr = r[3],
     rv = r[2],
     rl = r[1],
      /*<<src/batSet.ml:88:24>>*/ _uX_ = height(rl);
    if(_uX_ <= height(rr))
      /*<<src/batSet.ml:89:10>>*/ return create$9(create$9(l, v, rl), rv, rr);
    if(! rl)  /*<<src/batSet.ml:92:21>>*/ return invalid_arg(_e4_);
     /*<<src/batSet.ml:94:40>>*/ var
     rlr = rl[3],
     rlv = rl[2],
     rll = rl[1],
      /*<<src/batSet.ml:94:40>>*/ _uY_ = create$9(rlr, rv, rr);
     /*<<src/batSet.ml:94:40>>*/ return create$9
            (create$9(l, v, rll), rlv, _uY_);
    /*<<src/batSet.ml:97:58>>*/ }
   function add$3(cmp, x, t){
     /*<<?>>*/ if(! t)  /*<<src/batSet.ml:167:15>>*/ return [0, 0, x, 0, 1];
     /*<<src/batSet.ml:169:14>>*/ var
     r = t[3],
     v = t[2],
     l = t[1],
      /*<<src/batSet.ml:169:14>>*/ c =
        /*<<src/batSet.ml:169:14>>*/ caml_call2(cmp, x, v);
     /*<<src/batSet.ml:170:6>>*/ if(0 === c)
      /*<<src/batSet.ml:171:8>>*/ return t;
    if(0 <= c){
      /*<<src/batSet.ml:179:17>>*/  /*<<src/batSet.ml:179:17>>*/ var
      nr = add$3(cmp, x, r);
     return nr === r ? t : bal(l, v, nr);
    }
     /*<<src/batSet.ml:173:17>>*/  /*<<src/batSet.ml:173:17>>*/ var
     nl = add$3(cmp, x, l);
    return nl === l ? t : bal(nl, v, r);
   }
   function of_list$0(cmp, l){
     /*<<src/batSet.ml:510:22>>*/ return fold_left
            (function(a, x){
               /*<<src/batSet.ml:510:49>>*/ return add$3(cmp, x, a);
              /*<<src/batSet.ml:510:60>>*/ },
             empty$0,
             l);
    /*<<src/batSet.ml:510:69>>*/ }
   function Make$4(Ord){
    var include = _U_(Ord), mem = include[31];
    function of_list(l){
      /*<<src/batSet.ml:976:18>>*/ return of_list$0(Ord[1], l);
     /*<<src/batSet.ml:976:60>>*/ }
     /*<<src/batSet.ml:849:0>>*/ return [0,
            ,
            ,
            mem,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            of_list];
   }
   Make$4([0, compare$8]);
   Make$4([0, compare$11]);
   Make$4([0, compare$12]);
   Make$4([0, compare$13]);
   Make$4([0, compare$10]);
   Make$4([0, compare]);
   Make$4([0, compare$1]);
   function _e6_(_uT_){
    var _uU_ = Make$4(_uT_);
    return [0,
            ,
            ,
            ,
            ,
            _uU_[3],
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            _uU_[60]];
   }
   function dummy(param){
     /*<<src/batList.ml:130:4>>*/ return [0, 0, 0];
    /*<<src/batList.ml:130:34>>*/ }
   function create$10(x){
     /*<<src/batList.ml:132:4>>*/ return [0, x, 0];
    /*<<src/batList.ml:132:23>>*/ }
   function accum(acc, x){
     /*<<src/batList.ml:134:4>>*/  /*<<src/batList.ml:134:15>>*/ var
     cell = create$10(x);
    acc[2] = cell;
     /*<<src/batList.ml:136:4>>*/ return cell;
    /*<<src/batList.ml:136:8>>*/ }
   function map$4(f, param){
     /*<<?>>*/ if(! param)  /*<<src/batList.ml:239:10>>*/ return 0;
    var t = param[2], h = param[1];
    function loop(dst, param){
     var dst$0 = dst, param$0 = param;
     for(;;){
      if(! param$0)  /*<<src/batList.ml:242:14>>*/ return;
       /*<<src/batList.ml:244:13>>*/ var
       t = param$0[2],
       h = param$0[1],
        /*<<src/batList.ml:244:13>>*/ dst$1 =
         accum(dst$0,  /*<<src/batList.ml:244:28>>*/ caml_call1(f, h)),
       dst$0 = dst$1,
       param$0 = t;
     }
    }
     /*<<src/batList.ml:246:12>>*/  /*<<src/batList.ml:246:12>>*/ var
     r = create$10( /*<<src/batList.ml:246:23>>*/ caml_call1(f, h));
     /*<<src/batList.ml:247:4>>*/ loop(r, t);
     /*<<src/batList.ml:247:4>>*/ return r;
   }
   function find_all$0(p, l){
    function findnext(dst, param){
     var dst$0 = dst, param$0 = param;
     for(;;){
      if(! param$0)  /*<<src/batList.ml:762:12>>*/ return;
      var t = param$0[2], h = param$0[1];
       /*<<src/batList.ml:764:9>>*/ if
       ( /*<<src/batList.ml:764:9>>*/ caml_call1(p, h))
        /*<<src/batList.ml:765:17>>*/ var
         /*<<src/batList.ml:765:17>>*/ dst$1 = accum(dst$0, h),
        dst$0 = dst$1,
        param$0 = t;
      else
       var param$0 = t;
     }
    }
     /*<<src/batList.ml:769:14>>*/  /*<<src/batList.ml:769:14>>*/ var
     dummy$0 = dummy(0);
     /*<<src/batList.ml:770:2>>*/ findnext(dummy$0, l);
    return dummy$0[2];
    /*<<src/batList.ml:771:10>>*/ }
   function findi(p, l){
    function loop(n, param){
     var n$0 = n, param$0 = param;
     for(;;){
      if(! param$0)
        /*<<src/batList.ml:775:12>>*/ throw  /*<<src/batList.ml:775:12>>*/ caml_maybe_attach_backtrace
              (Not_found, 1);
      var t = param$0[2], h = param$0[1];
       /*<<src/batList.ml:777:9>>*/ if
       ( /*<<src/batList.ml:777:9>>*/ caml_call2(p, n$0, h))
        /*<<src/batList.ml:777:20>>*/ return [0, n$0, h];
      var n$1 = n$0 + 1 | 0, n$0 = n$1, param$0 = t;
     }
    }
     /*<<src/batList.ml:779:2>>*/ return loop(0, l);
    /*<<src/batList.ml:779:10>>*/ }
   function mapi$0(f, param){
     /*<<?>>*/ if(! param)  /*<<src/batList.ml:1015:10>>*/ return 0;
    var t = param[2], h = param[1];
    function loop(dst, n, param){
     var dst$0 = dst, n$0 = n, param$0 = param;
     for(;;){
      if(! param$0)  /*<<src/batList.ml:1018:14>>*/ return;
       /*<<src/batList.ml:1020:8>>*/ var
       t = param$0[2],
       h = param$0[1],
        /*<<src/batList.ml:1020:8>>*/ n$1 = n$0 + 1 | 0,
        /*<<src/batList.ml:1020:13>>*/ dst$1 =
         accum(dst$0,  /*<<src/batList.ml:1020:28>>*/ caml_call2(f, n$0, h)),
       dst$0 = dst$1,
       n$0 = n$1,
       param$0 = t;
     }
    }
     /*<<src/batList.ml:1022:12>>*/  /*<<src/batList.ml:1022:12>>*/ var
     r = create$10( /*<<src/batList.ml:1022:23>>*/ caml_call2(f, 0, h));
     /*<<src/batList.ml:1023:4>>*/ loop(r, 1, t);
     /*<<src/batList.ml:1023:4>>*/ return r;
   }
   function split_nth(index, l){
     /*<<?>>*/ if(! l)
     return 0 === index ? _e7_ : invalid_arg(at_after_end_msg);
    var t = l[2], h = l[1];
     /*<<src/batList.ml:1094:4>>*/ if(0 === index)
      /*<<src/batList.ml:1094:22>>*/ return [0, 0, l];
    if(0 > index)
      /*<<src/batList.ml:141:15>>*/ return invalid_arg(at_negative_index_msg);
    function loop(n, dst, l){
      /*<<src/batList.ml:1098:8>>*/ var n$0 = n, dst$0 = dst, l$0 = l;
      /*<<src/batList.ml:1098:8>>*/ for(;;){
      if(0 === n$0)  /*<<src/batList.ml:1098:22>>*/ return l$0;
      if(! l$0) return invalid_arg(at_after_end_msg);
       /*<<src/batList.ml:1102:25>>*/ var
       t = l$0[2],
       h = l$0[1],
        /*<<src/batList.ml:1102:25>>*/ dst$1 = accum(dst$0, h),
        /*<<src/batList.ml:1102:25>>*/ n$1 = n$0 - 1 | 0,
       n$0 = n$1,
       dst$0 = dst$1,
       l$0 = t;
     }
     /*<<src/batList.ml:1102:44>>*/ }
     /*<<src/batList.ml:1104:14>>*/  /*<<src/batList.ml:1104:14>>*/ var
     r = create$10(h);
     /*<<src/batList.ml:1105:6>>*/ return [0, r, loop(index - 1 | 0, r, t)];
   }
   function of_enum(e){
     /*<<src/batList.ml:1196:2>>*/  /*<<src/batList.ml:1196:10>>*/ var
     h = dummy(0);
     /*<<src/batList.ml:1197:10>>*/ fold(accum, h, e);
    return h[2];
    /*<<src/batList.ml:1198:6>>*/ }
   function findi$0(p, l){
     /*<<src/batList.ml:1573:4>>*/ try{
      /*<<src/batList.ml:1573:9>>*/  /*<<src/batList.ml:1573:9>>*/ var
      _uR_ = [0, findi(p, l)];
      /*<<src/batList.ml:1573:9>>*/ return _uR_;
    }
    catch(_uS_){
     var _uQ_ = caml_wrap_exception(_uS_);
     if(_uQ_ === Not_found)  /*<<src/batList.ml:1574:22>>*/ return 0;
     throw caml_maybe_attach_backtrace(_uQ_, 0);
    }
    /*<<src/batList.ml:1574:26>>*/ }
   function assoc$0(e, l){
     /*<<src/batList.ml:1585:4>>*/ try{
      /*<<src/batList.ml:1585:8>>*/  /*<<src/batList.ml:1585:8>>*/ var
      _uO_ = [0, assoc(e, l)];
      /*<<src/batList.ml:1585:8>>*/ return _uO_;
    }
    catch(_uP_){
     var _uN_ = caml_wrap_exception(_uP_);
     if(_uN_ === Not_found)  /*<<src/batList.ml:1586:22>>*/ return 0;
     throw caml_maybe_attach_backtrace(_uN_, 0);
    }
    /*<<src/batList.ml:1586:26>>*/ }
   caml_check_bound(caml_sys_argv(0), 0);
   caml_sys_argv(0);
    /*<<src/batPervasives.ml:288:8>>*/ at_exit(close_all);
    /*<<src/batPervasives.ml:289:2>>*/ at_exit(flush_all$0);
   function min_binding(param){
     /*<<src/batMap.ml:112:24>>*/ var param$0 = param;
     /*<<src/batMap.ml:112:24>>*/ for(;;){
     if(! param$0)
       /*<<src/batMap.ml:115:15>>*/ throw  /*<<src/batMap.ml:115:15>>*/ caml_maybe_attach_backtrace
             (Not_found, 1);
     var l = param$0[1];
     if(! l){
      var v = param$0[3], k = param$0[2];
       /*<<src/batMap.ml:113:34>>*/ return [0, k, v];
     }
     var param$0 = l;
    }
    /*<<src/batMap.ml:115:30>>*/ }
   function find(x, cmp, map){
    function loop(param){
      /*<<src/batMap.ml:194:19>>*/ var param$0 = param;
      /*<<src/batMap.ml:194:19>>*/ for(;;){
      if(! param$0)
        /*<<src/batMap.ml:200:17>>*/ throw  /*<<src/batMap.ml:200:17>>*/ caml_maybe_attach_backtrace
              (Not_found, 1);
       /*<<src/batMap.ml:196:16>>*/ var
       r = param$0[4],
       v = param$0[3],
       k = param$0[2],
       l = param$0[1],
        /*<<src/batMap.ml:196:16>>*/ c =
          /*<<src/batMap.ml:196:16>>*/ caml_call2(cmp, x, k);
       /*<<src/batMap.ml:197:8>>*/ if(0 <= c){
       if(0 >= c)  /*<<src/batMap.ml:199:13>>*/ return v;
       var param$0 = r;
      }
      else
       var param$0 = l;
     }
     /*<<src/batMap.ml:200:32>>*/ }
     /*<<src/batMap.ml:201:4>>*/ return loop(map);
    /*<<src/batMap.ml:201:12>>*/ }
   function find_option(x, cmp, map){
     /*<<src/batMap.ml:286:4>>*/ try{
      /*<<src/batMap.ml:286:8>>*/  /*<<src/batMap.ml:286:8>>*/ var
      _uL_ = [0, find(x, cmp, map)];
      /*<<src/batMap.ml:286:8>>*/ return _uL_;
    }
    catch(_uM_){
     var _uK_ = caml_wrap_exception(_uM_);
     if(_uK_ === Not_found)  /*<<src/batMap.ml:287:22>>*/ return 0;
     throw caml_maybe_attach_backtrace(_uK_, 0);
    }
    /*<<src/batMap.ml:287:26>>*/ }
   function cardinal(map){
     /*<<src/batMap.ml:510:4>>*/ function loop(acc, param){
     var acc$0 = acc, param$0 = param;
     for(;;){
      if(! param$0)  /*<<src/batMap.ml:511:17>>*/ return acc$0;
       /*<<src/batMap.ml:513:13>>*/ var
       r = param$0[4],
       l = param$0[1],
        /*<<src/batMap.ml:513:13>>*/ acc$1 = loop(acc$0 + 1 | 0, r),
       acc$0 = acc$1,
       param$0 = l;
     }
    }
     /*<<src/batMap.ml:515:4>>*/ return loop(0, map);
    /*<<src/batMap.ml:515:14>>*/ }
   function cons_iter(s, t){
     /*<<src/batMap.ml:524:26>>*/ var s$0 = s, t$0 = t;
     /*<<src/batMap.ml:524:26>>*/ for(;;){
     if(! s$0)  /*<<src/batMap.ml:525:15>>*/ return t$0;
      /*<<src/batMap.ml:526:42>>*/ var
      r = s$0[4],
      v = s$0[3],
      k = s$0[2],
      l = s$0[1],
       /*<<src/batMap.ml:526:42>>*/ t$1 = [0, k, v, r, t$0],
      s$0 = l,
      t$0 = t$1;
    }
    /*<<src/batMap.ml:526:58>>*/ }
   function enum_next(l, param){
     /*<<src/batMap.ml:540:23>>*/ var match = l[1];
    if(! match)
      /*<<src/batMap.ml:541:11>>*/ throw  /*<<src/batMap.ml:541:11>>*/ caml_maybe_attach_backtrace
            (No_more_elements, 1);
    var t = match[4], m = match[3], v = match[2], k = match[1];
    l[1] = cons_iter(m, t);
     /*<<src/batMap.ml:542:44>>*/ return [0, k, v];
    /*<<src/batMap.ml:542:50>>*/ }
   function enum_count(l, param){
    function aux(n, param){
     var n$0 = n, param$0 = param;
     for(;;){
      if(! param$0)  /*<<src/batMap.ml:550:13>>*/ return n$0;
      var
       t = param$0[4],
       m = param$0[3],
       n$1 = (n$0 + 1 | 0) + cardinal(m) | 0,
       n$0 = n$1,
       param$0 = t;
     }
    }
    return aux(0, l[1]);
    /*<<src/batMap.ml:552:15>>*/ }
   function enum$0(t){
    function make(l){
      /*<<src/batMap.ml:556:6>>*/  /*<<src/batMap.ml:556:14>>*/ var
      l$0 = [0, l];
     function clone(param){
       /*<<src/batMap.ml:557:20>>*/ return make(l$0[1]);
      /*<<src/batMap.ml:557:27>>*/ }
      /*<<src/batMap.ml:558:6>>*/ return make$2
             (function(_uJ_){ /*<<?>>*/ return enum_next(l$0, _uJ_);},
              function(_uI_){ /*<<?>>*/ return enum_count(l$0, _uI_);},
              clone);
     /*<<src/batMap.ml:558:67>>*/ }
     /*<<src/batMap.ml:559:12>>*/ return make(cons_iter(t, 0));
    /*<<src/batMap.ml:559:27>>*/ }
   function keys(t){
     /*<<src/batMap.ml:568:18>>*/ return symbol$1
            (function(_uH_){ /*<<?>>*/ return _uH_[1];}, enum$0(t));
    /*<<src/batMap.ml:568:42>>*/ }
   function any(param){
     /*<<src/batMap.ml:628:12>>*/ if(param)
      /*<<src/batMap.ml:630:30>>*/ return;
     /*<<src/batMap.ml:629:15>>*/ throw  /*<<src/batMap.ml:629:15>>*/ caml_maybe_attach_backtrace
           (Not_found, 1);
    /*<<src/batMap.ml:630:35>>*/ }
   function Make$5(Ord){
    var
     include = ___(Ord),
     empty = include[1],
     add = include[2],
     remove = include[6],
     find = include[17],
     is_empty = include[31],
     mem = include[32];
    function keys$0(t){
      /*<<src/batMap.ml:1073:15>>*/ return keys(t);
     /*<<src/batMap.ml:1073:42>>*/ }
    function find_opt(k, t){
      /*<<src/batMap.ml:1078:21>>*/ return find_option(k, Ord[1], t);
     /*<<src/batMap.ml:1078:69>>*/ }
    function choose(t){
      /*<<src/batMap.ml:1124:17>>*/ return min_binding(t);
     /*<<src/batMap.ml:1124:46>>*/ }
    function any$0(t){
      /*<<src/batMap.ml:1126:14>>*/ return any(t);
     /*<<src/batMap.ml:1126:40>>*/ }
    function find$0(k, t){
      /*<<src/batMap.ml:1179:19>>*/ try{
       /*<<src/batMap.ml:1179:23>>*/  /*<<src/batMap.ml:1179:23>>*/ var
       _uF_ = [0, find(k, t)];
       /*<<src/batMap.ml:1179:23>>*/ return _uF_;
     }
     catch(_uG_){
      var _uE_ = caml_wrap_exception(_uG_);
      if(_uE_ === Not_found)  /*<<src/batMap.ml:1179:57>>*/ return 0;
      throw caml_maybe_attach_backtrace(_uE_, 0);
     }
     /*<<src/batMap.ml:1179:61>>*/ }
    function choose$0(t){
      /*<<src/batMap.ml:1180:19>>*/ try{
       /*<<src/batMap.ml:1180:28>>*/ choose(t);
       /*<<src/batMap.ml:1180:23>>*/ return;
     }
     catch(_uD_){
      var _uC_ = caml_wrap_exception(_uD_);
      if(_uC_ === Not_found)  /*<<src/batMap.ml:1180:57>>*/ return;
      throw caml_maybe_attach_backtrace(_uC_, 0);
     }
     /*<<src/batMap.ml:1180:61>>*/ }
    function any$1(t){
      /*<<src/batMap.ml:1181:16>>*/ try{
       /*<<src/batMap.ml:1181:25>>*/ any$0(t);
       /*<<src/batMap.ml:1181:20>>*/ return;
     }
     catch(_uB_){
      var _uA_ = caml_wrap_exception(_uB_);
      if(_uA_ === Not_found)  /*<<src/batMap.ml:1181:51>>*/ return;
      throw caml_maybe_attach_backtrace(_uA_, 0);
     }
     /*<<src/batMap.ml:1181:55>>*/ }
     /*<<src/batMap.ml:1178:2>>*/  /*<<src/batMap.ml:1178:2>>*/ var
     Exceptionless = [0, find$0, choose$0, any$1];
     /*<<src/batMap.ml:1050:0>>*/ return [0,
            empty,
            add,
            remove,
            ,
            ,
            ,
            is_empty,
            mem,
            ,
            ,
            ,
            ,
            ,
            keys$0,
            ,
            ,
            ,
            ,
            find_opt,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            Exceptionless];
   }
   Make$5([0, compare$8]);
   Make$5([0, compare$11]);
   Make$5([0, compare$12]);
   Make$5([0, compare$13]);
   Make$5([0, compare$10]);
   Make$5([0, compare]);
   Make$5([0, compare$1]);
   function _e8_(_uy_){
    var _uz_ = Make$5(_uy_);
    return [0,
            _uz_[1],
            _uz_[7],
            ,
            _uz_[2],
            ,
            ,
            ,
            _uz_[19],
            ,
            ,
            ,
            ,
            ,
            _uz_[3],
            ,
            ,
            ,
            ,
            ,
            ,
            _uz_[8],
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            _uz_[14],
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            _uz_[62]];
   }
   function output_of(out, s, i, o){
     /*<<src/batFormat.ml:28:33>>*/ really_output_substring(out, s, i, o);
     /*<<src/batFormat.ml:28:40>>*/ return 0;
    /*<<src/batFormat.ml:28:75>>*/ }
   function flush_of(out){
     /*<<src/batFormat.ml:29:19>>*/ return get_flush(out);
    /*<<src/batFormat.ml:29:43>>*/ }
   function newline_of(out, param){
     /*<<src/batFormat.ml:30:31>>*/ return write(out, 10);
    /*<<src/batFormat.ml:30:56>>*/ }
   function spaces_of(out){
     /*<<src/batFormat.ml:34:2>>*/  /*<<src/batFormat.ml:34:19>>*/ var
     blank_line = make(80, 32);
    function display_blanks(n){
      /*<<src/batFormat.ml:36:4>>*/ var n$0 = n;
      /*<<src/batFormat.ml:36:4>>*/ for(;;){
      var _ux_ = 0 < n$0 ? 1 : 0;
      if(! _ux_) return _ux_;
      if(80 >= n$0){
        /*<<src/batFormat.ml:37:29>>*/ really_output(out, blank_line, 0, n$0);
        /*<<src/batFormat.ml:37:29>>*/ return 0;
      }
       /*<<src/batFormat.ml:39:17>>*/ really_output(out, blank_line, 0, 80);
       /*<<src/batFormat.ml:40:10>>*/ var
        /*<<src/batFormat.ml:40:10>>*/ n$1 = n$0 - 80 | 0,
       n$0 = n$1;
     }
     /*<<src/batFormat.ml:41:11>>*/ }
     /*<<src/batFormat.ml:42:5>>*/ return display_blanks;
    /*<<src/batFormat.ml:42:19>>*/ }
   function formatter_of_output(out){
     /*<<src/batFormat.ml:47:15>>*/ function output(_uu_, _uv_, _uw_){
      /*<<?>>*/ return output_of(out, _uu_, _uv_, _uw_);
    }
     /*<<src/batFormat.ml:48:15>>*/ var
      /*<<src/batFormat.ml:48:15>>*/ flush = flush_of(out),
      /*<<src/batFormat.ml:50:10>>*/ f = make_formatter(output, flush);
     /*<<src/batFormat.ml:51:2>>*/ on_close_out
     (out,
      function(param){
        /*<<src/batFormat.ml:51:40>>*/ return pp_print_flush(f, 0);
       /*<<src/batFormat.ml:51:59>>*/ });
     /*<<src/batFormat.ml:62:16>>*/  /*<<src/batFormat.ml:62:16>>*/ var
     _us_ = spaces_of(out);
     /*<<src/batFormat.ml:57:1>>*/ pp_set_formatter_out_functions
     (f,
      [0,
       output,
       flush,
       function(_ut_){ /*<<?>>*/ return newline_of(out, _ut_);},
       spaces_of(out),
       _us_]);
     /*<<src/batFormat.ml:57:1>>*/ return f;
    /*<<src/batFormat.ml:63:3>>*/ }
   function set_formatter_output(out){
     /*<<src/batFormat.ml:66:2>>*/ on_close_out
     (out,
      function(param){
        /*<<src/batFormat.ml:66:40>>*/ return pp_print_flush(std_formatter, 0);
       /*<<src/batFormat.ml:66:78>>*/ });
     /*<<src/batFormat.ml:77:17>>*/ var
      /*<<src/batFormat.ml:77:17>>*/ _um_ = spaces_of(out),
      /*<<src/batFormat.ml:76:17>>*/ _un_ = spaces_of(out);
     /*<<src/batFormat.ml:72:30>>*/ return set_formatter_out_functions
            ([0,
              function(_up_, _uq_, _ur_){
                /*<<?>>*/ return output_of(out, _up_, _uq_, _ur_);
              },
              flush_of(out),
              function(_uo_){ /*<<?>>*/ return newline_of(out, _uo_);},
              _un_,
              _um_]);
    /*<<src/batFormat.ml:77:32>>*/ }
   function pp_set_formatter_output(f, out){
     /*<<src/batFormat.ml:80:2>>*/ on_close_out
     (out,
      function(param){
        /*<<src/batFormat.ml:80:40>>*/ return pp_print_flush(f, 0);
       /*<<src/batFormat.ml:80:59>>*/ });
     /*<<src/batFormat.ml:91:17>>*/ var
      /*<<src/batFormat.ml:91:17>>*/ _ug_ = spaces_of(out),
      /*<<src/batFormat.ml:90:17>>*/ _uh_ = spaces_of(out);
     /*<<src/batFormat.ml:86:35>>*/ return pp_set_formatter_out_functions
            (f,
             [0,
              function(_uj_, _uk_, _ul_){
                /*<<?>>*/ return output_of(out, _uj_, _uk_, _ul_);
              },
              flush_of(out),
              function(_ui_){ /*<<?>>*/ return newline_of(out, _ui_);},
              _uh_,
              _ug_]);
    /*<<src/batFormat.ml:91:32>>*/ }
    /*<<src/batFormat.ml:98:20>>*/ formatter_of_output(stdout$0);
    /*<<src/batFormat.ml:99:20>>*/ formatter_of_output(stderr$0);
    /*<<src/batFormat.ml:138:2>>*/ set_formatter_output(stdout$0);
    /*<<src/batFormat.ml:139:2>>*/ pp_set_formatter_output
    (std_formatter, stdout$0);
    /*<<src/batFormat.ml:140:2>>*/ pp_set_formatter_output
    (err_formatter, stderr$0);
   function from_input(inp){
     /*<<src/batScanf.ml:27:4>>*/ return from_function
            (function(param){
               /*<<src/batScanf.ml:27:29>>*/ try{
                /*<<src/batScanf.ml:27:33>>*/  /*<<src/batScanf.ml:27:33>>*/ var
                _ue_ = read(inp);
                /*<<src/batScanf.ml:27:33>>*/ return _ue_;
              }
              catch(_uf_){
               var _ud_ = caml_wrap_exception(_uf_);
               if(_ud_ === No_more_input)
                 /*<<src/batScanf.ml:27:86>>*/ throw  /*<<src/batScanf.ml:27:86>>*/ caml_maybe_attach_backtrace
                       (End_of_file, 1);
               throw caml_maybe_attach_backtrace(_ud_, 0);
              }
              /*<<src/batScanf.ml:27:103>>*/ });
    /*<<src/batScanf.ml:27:104>>*/ }
    /*<<src/batScanf.ml:34:14>>*/ from_input(stdin$0);
   function equal$3(x, y){
     /*<<lib/category.ml:3:32>>*/ return x === y ? 1 : 0;
    /*<<lib/category.ml:3:37>>*/ }
   function to_int$0(x){
     /*<<lib/category.ml:5:15>>*/ return x;
    /*<<lib/category.ml:5:16>>*/ }
   function intersect(x, y){
     /*<<lib/category.ml:8:20>>*/ return 0 !== (x & y) ? 1 : 0;
    /*<<lib/category.ml:8:33>>*/ }
   function symbol$3(x, y){
     /*<<lib/category.ml:9:15>>*/ return x | y;
    /*<<lib/category.ml:9:22>>*/ }
   var
    inexistant = 1,
    letter = 2,
    not_letter = 4,
    newline = 8,
    lastnewline = 16,
    search_boundary = 32;
   function from_char(param){
     /*<<lib/category.ml:19:16>>*/ a:
    {
     if(170 <= param)
      if(187 <= param){
       var _ua_ = param - 192 | 0;
       if(54 < _ua_ >>> 0){
        if(56 <= _ua_) break a;
       }
       else if(23 !== _ua_) break a;
      }
      else{
       var _ub_ = param - 171 | 0;
       if(14 < _ub_ >>> 0 || 10 === _ub_) break a;
      }
     else if(65 <= param){
      var _uc_ = param - 91 | 0;
      if(5 < _uc_ >>> 0){if(32 > _uc_) break a;} else if(4 === _uc_) break a;
     }
     else
      if(48 <= param){
       if(58 > param) break a;
      }
      else if(10 === param) return symbol$3(not_letter, newline);
     return not_letter;
    }
    return letter;
    /*<<lib/category.ml:27:14>>*/ }
   var dummy$0 = -1;
   function union(l$0, l){
     /*<<lib/cset.ml:27:2>>*/ var l$2 = l$0, l$1 = l;
     /*<<lib/cset.ml:27:2>>*/ for(;;){
     if(! l$1)  /*<<lib/cset.ml:28:13>>*/ return l$2;
     if(! l$2)  /*<<lib/cset.ml:29:13>>*/ return l$1;
     var
      r = l$1[2],
      _t$_ = l$1[1],
      c2 = _t$_[2],
      c1 = _t$_[1],
      r$0 = l$2[2],
      match = l$2[1],
      c2$0 = match[2],
      c1$0 = match[1];
     if((c2$0 + 1 | 0) < c1)
       /*<<lib/cset.ml:32:6>>*/ return [0, [0, c1$0, c2$0], union(r$0, l$1)];
     if((c2 + 1 | 0) < c1$0)
       /*<<lib/cset.ml:34:6>>*/ return [0, [0, c1, c2], union(l$2, r)];
     if(c2$0 < c2)
       /*<<lib/cset.ml:36:14>>*/ var
        /*<<lib/cset.ml:36:14>>*/ l$3 = [0, [0, min(c1$0, c1), c2], r],
       l$2 = r$0,
       l$1 = l$3;
     else
       /*<<lib/cset.ml:38:12>>*/ var
        /*<<lib/cset.ml:38:12>>*/ l$4 = [0, [0, min(c1$0, c1), c2$0], r$0],
       l$2 = l$4,
       l$1 = r;
    }
    /*<<lib/cset.ml:38:36>>*/ }
   function inter(l$0, l){
     /*<<lib/cset.ml:41:2>>*/ var l$2 = l$0, l$1 = l;
     /*<<lib/cset.ml:41:2>>*/ for(;;){
     if(! l$1)  /*<<lib/cset.ml:42:13>>*/ return 0;
     if(! l$2)  /*<<lib/cset.ml:43:13>>*/ return 0;
     var
      r = l$1[2],
      _t8_ = l$1[1],
      c2 = _t8_[2],
      c1 = _t8_[1],
      r$0 = l$2[2],
      match = l$2[1],
      c2$0 = match[2],
      c1$0 = match[1];
      /*<<lib/cset.ml:45:7>>*/ if
      ( /*<<lib/cset.ml:45:7>>*/ caml_lessthan(c2$0, c1))
      var l$2 = r$0;
     else{
       /*<<lib/cset.ml:47:12>>*/ if
       (!  /*<<lib/cset.ml:47:12>>*/ caml_lessthan(c2, c1$0)){
        /*<<lib/cset.ml:49:12>>*/ if
        ( /*<<lib/cset.ml:49:12>>*/ caml_lessthan(c2$0, c2)){
         /*<<lib/cset.ml:50:24>>*/  /*<<lib/cset.ml:50:24>>*/ var
         _t9_ = inter(r$0, l$1);
         /*<<lib/cset.ml:50:6>>*/ return [0, [0, max(c1$0, c1), c2$0], _t9_];
       }
        /*<<lib/cset.ml:52:25>>*/  /*<<lib/cset.ml:52:25>>*/ var
        _t__ = inter(l$2, r);
        /*<<lib/cset.ml:52:6>>*/ return [0, [0, max(c1$0, c1), c2], _t__];
      }
      var l$1 = r;
     }
    }
    /*<<lib/cset.ml:52:35>>*/ }
   function diff(l$0, l){
     /*<<lib/cset.ml:55:2>>*/ var l$2 = l$0, l$1 = l;
     /*<<lib/cset.ml:55:2>>*/ for(;;){
     if(! l$1)  /*<<lib/cset.ml:56:13>>*/ return l$2;
     if(! l$2)  /*<<lib/cset.ml:57:13>>*/ return 0;
     var
      r = l$1[2],
      _t7_ = l$1[1],
      c2 = _t7_[2],
      c1 = _t7_[1],
      r$0 = l$2[2],
      match = l$2[1],
      c2$0 = match[2],
      c1$0 = match[1];
     if(c2$0 < c1)
       /*<<lib/cset.ml:60:6>>*/ return [0, [0, c1$0, c2$0], diff(r$0, l$1)];
     if(c2 < c1$0)
      var l$1 = r;
     else{
      var r$1 = c2 < c2$0 ? [0, [0, c2 + 1 | 0, c2$0], r$0] : r$0;
      if(c1$0 < c1)
        /*<<lib/cset.ml:66:8>>*/ return [0,
               [0, c1$0, c1 - 1 | 0],
               diff(r$1, r)];
      var l$2 = r$1, l$1 = r;
     }
    }
    /*<<lib/cset.ml:68:19>>*/ }
   function single(c){
     /*<<lib/cset.ml:70:15>>*/ return [0, [0, c, c], 0];
    /*<<lib/cset.ml:70:21>>*/ }
   function add$4(c, l){
     /*<<lib/cset.ml:72:14>>*/ return union(single(c), l);
    /*<<lib/cset.ml:72:32>>*/ }
   function seq(c$0, c){
     /*<<lib/cset.ml:74:15>>*/ return  /*<<lib/cset.ml:74:18>>*/ caml_lessequal
             (c$0, c)
            ? [0, [0, c$0, c], 0]
            : [0, [0, c, c$0], 0];
    /*<<lib/cset.ml:74:51>>*/ }
   function offset(o, l){
     /*<<lib/cset.ml:77:2>>*/ if(! l)  /*<<lib/cset.ml:78:21>>*/ return 0;
    var r = l[2], match = l[1], c2 = match[2], c1 = match[1];
     /*<<lib/cset.ml:79:21>>*/ return [0,
            [0, c1 + o | 0, c2 + o | 0],
            offset(o, r)];
    /*<<lib/cset.ml:79:51>>*/ }
   var empty$1 = 0;
   function mem$0(c, s){
     /*<<lib/cset.ml:84:2>>*/ var s$0 = s;
     /*<<lib/cset.ml:84:2>>*/ for(;;){
     if(! s$0)  /*<<lib/cset.ml:85:23>>*/ return 0;
     var rem = s$0[2], match = s$0[1], c2 = match[2], c1 = match[1];
     if(c <= c2) return c1 <= c ? 1 : 0;
     var s$0 = rem;
    }
    /*<<lib/cset.ml:86:61>>*/ }
   function hash_rec(param){
     /*<<lib/cset.ml:92:19>>*/ if(! param)
      /*<<lib/cset.ml:93:17>>*/ return 0;
    var r = param[2], match = param[1], j = match[2], i = match[1];
    return (i + (13 * j | 0) | 0) + (257 * hash_rec(r) | 0) | 0;
    /*<<lib/cset.ml:94:46>>*/ }
   function iter$6(t, f){
     /*<<lib/cset.ml:108:2>>*/ var t$0 = t;
     /*<<lib/cset.ml:108:2>>*/ for(;;){
     if(! t$0)  /*<<lib/cset.ml:109:10>>*/ return 0;
     var xs = t$0[2], match = t$0[1], y = match[2], x = match[1];
      /*<<lib/cset.ml:111:4>>*/  /*<<lib/cset.ml:111:4>>*/ caml_call2(f, x, y);
     var t$0 = xs;
    }
    /*<<lib/cset.ml:112:15>>*/ }
   function one_char(param){
     /*<<lib/cset.ml:114:15>>*/ if(param && ! param[2]){
     var match = param[1], j = match[2], i = match[1];
      /*<<lib/cset.ml:115:16>>*/ if
      ( /*<<lib/cset.ml:115:16>>*/ caml_equal(i, j))
       /*<<lib/cset.ml:115:25>>*/ return [0, i];
    }
     /*<<lib/cset.ml:116:9>>*/ return 0;
    /*<<lib/cset.ml:116:13>>*/ }
   function compare$14(param, _t6_){
     /*<<lib/cset.ml:122:14>>*/ var
     v = _t6_[2],
     j = _t6_[1],
     u = param[2],
     i = param[1],
      /*<<lib/cset.ml:122:14>>*/ c =
        /*<<lib/cset.ml:122:14>>*/ caml_compare(i, j);
     /*<<lib/cset.ml:123:6>>*/ return 0 === c
            ?  /*<<lib/cset.ml:125:11>>*/ caml_compare(u, v)
            : c;
   }
   var CSetMap = ___([0, compare$14]);
   function fold_right$1(t, init, f){
     /*<<lib/cset.ml:128:28>>*/ return fold_right(f, t, init);
    /*<<lib/cset.ml:128:52>>*/ }
   function csingle(c){
     /*<<lib/cset.ml:130:16>>*/ return single(c);
    /*<<lib/cset.ml:130:36>>*/ }
   function is_empty$0(param){
     /*<<lib/cset.ml:134:15>>*/ return param ? 0 : 1;
    /*<<lib/cset.ml:136:14>>*/ }
   function equal$4(x, y){
     /*<<lib/pmark.ml:4:34>>*/ return x === y ? 1 : 0;
    /*<<lib/pmark.ml:4:39>>*/ }
   function compare$15(x, y){
     /*<<lib/pmark.ml:5:36>>*/ return caml_int_compare(x, y);
    /*<<lib/pmark.ml:5:47>>*/ }
   var Set = _U_([0, compare$15]);
   function hash_combine(h, accu){
     /*<<lib/automata.ml:44:26>>*/ return (accu * 65599 | 0) + h | 0;
    /*<<lib/automata.ml:44:42>>*/ }
    /*<<lib/automata.ml:51:14>>*/  /*<<lib/automata.ml:51:14>>*/ var
    empty$2 = [0, 0, Set[1]];
   function hash_marks_offset(l, accu){
     /*<<lib/automata.ml:68:4>>*/ var l$0 = l, accu$0 = accu;
     /*<<lib/automata.ml:68:4>>*/ for(;;){
     if(! l$0)  /*<<lib/automata.ml:69:21>>*/ return accu$0;
      /*<<lib/automata.ml:70:41>>*/ var
      r = l$0[2],
      match = l$0[1],
      i = match[2],
      a = match[1],
       /*<<lib/automata.ml:70:41>>*/ accu$1 =
        hash_combine(a, hash_combine(i, accu$0)),
      l$0 = r,
      accu$0 = accu$1;
    }
    /*<<lib/automata.ml:70:79>>*/ }
   function hash$2(m, accu){
     /*<<lib/automata.ml:73:4>>*/  /*<<lib/automata.ml:73:30>>*/ var
     _t5_ = hash_combine(hash(m[2]), accu);
     /*<<lib/automata.ml:73:30>>*/ return hash_marks_offset(m[1], _t5_);
    /*<<lib/automata.ml:73:73>>*/ }
   function _e9_(idx, marks){
     /*<<?>>*/ if(marks){
     var _t4_ = marks[1];
     if(-1 === _t4_[2]){
      var rem = marks[2], a = _t4_[1];
       /*<<lib/automata.ml:77:6>>*/ return [0, [0, a, idx], _e9_(idx, rem)];
     }
    }
     /*<<lib/automata.ml:79:6>>*/ return marks;
   }
   function marks_set_idx(marks, idx){
     /*<<lib/automata.ml:82:4>>*/ var _t3_ = marks[2];
     /*<<lib/automata.ml:82:4>>*/ return [0, _e9_(idx, marks[1]), _t3_];
    /*<<lib/automata.ml:82:56>>*/ }
   function first(f, param){
    var param$0 = param;
    for(;;){
     if(! param$0)  /*<<lib/automata.ml:136:4>>*/ return 0;
      /*<<lib/automata.ml:138:10>>*/ var
      r = param$0[2],
      x = param$0[1],
       /*<<lib/automata.ml:138:10>>*/ res =
         /*<<lib/automata.ml:138:10>>*/ caml_call1(f, x);
     if(res)  /*<<lib/automata.ml:140:23>>*/ return res;
     var param$0 = r;
    }
   }
   function create_ids(param){
     /*<<lib/automata.ml:145:20>>*/ return [0, 0];
    /*<<lib/automata.ml:145:25>>*/ }
   function mk_expr(ids, def){
     /*<<lib/automata.ml:150:2>>*/ ids[1]++;
     /*<<lib/automata.ml:151:2>>*/ return [0, ids[1], def];
    /*<<lib/automata.ml:151:26>>*/ }
   function empty$3(ids){
     /*<<lib/automata.ml:153:16>>*/ return mk_expr(ids, _e__);
    /*<<lib/automata.ml:153:36>>*/ }
   function cst(ids, s){
     /*<<lib/automata.ml:156:2>>*/ return is_empty$0(s)
            ? empty$3(ids)
            : mk_expr(ids, [0, s]);
    /*<<lib/automata.ml:158:26>>*/ }
   function alt(ids, l){
     /*<<?>>*/ if(! l)  /*<<lib/automata.ml:161:11>>*/ return empty$3(ids);
    if(l[2])  /*<<lib/automata.ml:163:23>>*/ return mk_expr(ids, [1, l]);
    var c = l[1];
     /*<<lib/automata.ml:162:11>>*/ return c;
   }
   function seq$0(ids, kind, x, y){
     /*<<lib/automata.ml:166:2>>*/ var _t1_ = x[2], _t2_ = y[2];
    if(typeof _t1_ !== "number" && 1 === _t1_[0] && ! _t1_[1])
      /*<<lib/automata.ml:167:33>>*/ return x;
    if(typeof _t2_ !== "number" && 1 === _t2_[0] && ! _t2_[1])
      /*<<lib/automata.ml:168:33>>*/ return y;
    if(typeof _t1_ === "number")  /*<<lib/automata.ml:169:33>>*/ return y;
    if(typeof _t2_ === "number" && 332064784 === kind)
      /*<<lib/automata.ml:170:33>>*/ return x;
     /*<<lib/automata.ml:171:45>>*/ return mk_expr(ids, [2, kind, x, y]);
    /*<<lib/automata.ml:171:63>>*/ }
   function is_eps(expr){
     /*<<lib/automata.ml:174:2>>*/ return typeof expr[2] === "number" ? 1 : 0;
    /*<<lib/automata.ml:176:14>>*/ }
   function eps(ids){
     /*<<lib/automata.ml:178:14>>*/ return mk_expr(ids, 0);
    /*<<lib/automata.ml:178:29>>*/ }
   function rep(ids, kind, sem, x){
     /*<<lib/automata.ml:180:25>>*/ return mk_expr(ids, [3, kind, sem, x]);
    /*<<lib/automata.ml:180:57>>*/ }
   function mark(ids, m){
     /*<<lib/automata.ml:182:17>>*/ return mk_expr(ids, [4, m]);
    /*<<lib/automata.ml:182:37>>*/ }
   function pmark(ids, i){
     /*<<lib/automata.ml:184:18>>*/ return mk_expr(ids, [8, i]);
    /*<<lib/automata.ml:184:39>>*/ }
   function erase(ids, m$0, m){
     /*<<lib/automata.ml:186:21>>*/ return mk_expr(ids, [5, m$0, m]);
    /*<<lib/automata.ml:186:48>>*/ }
   function before(ids, c){
     /*<<lib/automata.ml:188:19>>*/ return mk_expr(ids, [6, c]);
    /*<<lib/automata.ml:188:41>>*/ }
   function after(ids, c){
     /*<<lib/automata.ml:190:18>>*/ return mk_expr(ids, [7, c]);
    /*<<lib/automata.ml:190:39>>*/ }
   function rename(ids, x){
     /*<<lib/automata.ml:195:2>>*/ var match = x[2];
    if(typeof match !== "number")
     switch(match[0]){
       case 1:
        var l = match[1];
         /*<<lib/automata.ml:199:16>>*/ return mk_expr
                (ids,
                 [1,
                  map$0
                   (function(_t0_){ /*<<?>>*/ return rename(ids, _t0_);}, l)]);
       case 2:
         /*<<lib/automata.ml:201:39>>*/ var
         z = match[3],
         y = match[2],
         k = match[1],
          /*<<lib/automata.ml:201:39>>*/ _tZ_ = rename(ids, z);
         /*<<lib/automata.ml:201:16>>*/ return mk_expr
                (ids, [2, k, rename(ids, y), _tZ_]);
       case 3:
        var y$0 = match[3], k$0 = match[2], g = match[1];
         /*<<lib/automata.ml:203:16>>*/ return mk_expr
                (ids, [3, g, k$0, rename(ids, y$0)]);
     }
    return mk_expr(ids, x[2]);
    /*<<lib/automata.ml:203:42>>*/ }
   function equal$5(l1, l2){
     /*<<lib/automata.ml:218:4>>*/ var l1$0 = l1, l2$0 = l2;
     /*<<lib/automata.ml:218:4>>*/ for(;;){
     if(l1$0){
      var _tR_ = l1$0[1];
      switch(_tR_[0]){
        case 0:
         if(l2$0){
          var match = l2$0[1], r1 = l1$0[2], e1 = _tR_[2], l1$1 = _tR_[1];
          if(0 === match[0]){
           var
            r2 = l2$0[2],
            e2 = match[2],
            l2$1 = match[1],
            _tS_ = e1[1] === e2[1] ? 1 : 0;
           if(_tS_){
             /*<<lib/automata.ml:222:23>>*/  /*<<lib/automata.ml:222:23>>*/ var
             _tT_ = equal$5(l1$1, l2$1);
             /*<<lib/automata.ml:222:23>>*/ if(_tT_){
             var l1$0 = r1, l2$0 = r2;
             continue;
            }
            var _tU_ = _tT_;
           }
           else
            var _tU_ = _tS_;
            /*<<lib/automata.ml:222:23>>*/ return _tU_;
          }
         }
         break;
        case 1:
         if(l2$0){
          var
           match$0 = l2$0[1],
           r1$0 = l1$0[2],
           e1$0 = _tR_[2],
           marks1 = _tR_[1];
          if(1 === match$0[0]){
           var
            r2$0 = l2$0[2],
            e2$0 = match$0[2],
            marks2 = match$0[1],
            _tV_ = e1$0[1] === e2$0[1] ? 1 : 0;
           if(_tV_){
             /*<<lib/automata.ml:224:23>>*/  /*<<lib/automata.ml:224:23>>*/ var
             _tW_ =  /*<<lib/automata.ml:224:23>>*/ caml_equal(marks1, marks2);
             /*<<lib/automata.ml:224:23>>*/ if(_tW_){
             var l1$0 = r1$0, l2$0 = r2$0;
             continue;
            }
            var _tX_ = _tW_;
           }
           else
            var _tX_ = _tV_;
            /*<<lib/automata.ml:224:23>>*/ return _tX_;
          }
         }
         break;
        default:
         if(l2$0){
          var match$1 = l2$0[1], r1$1 = l1$0[2], marks1$0 = _tR_[1];
          if(2 === match$1[0]){
            /*<<lib/automata.ml:226:6>>*/ var
            r2$1 = l2$0[2],
            marks2$0 = match$1[1],
             /*<<lib/automata.ml:226:6>>*/ _tY_ =
               /*<<lib/automata.ml:226:6>>*/ caml_equal(marks1$0, marks2$0);
            /*<<lib/automata.ml:226:6>>*/ if(! _tY_)
             /*<<lib/automata.ml:226:6>>*/ return _tY_;
           var l1$0 = r1$1, l2$0 = r2$1;
           continue;
          }
         }
      }
     }
     else if(! l2$0)  /*<<lib/automata.ml:220:6>>*/ return 1;
      /*<<lib/automata.ml:228:6>>*/ return 0;
    }
    /*<<lib/automata.ml:228:11>>*/ }
   function hash$3(l, accu){
     /*<<lib/automata.ml:231:4>>*/ var l$0 = l, accu$0 = accu;
     /*<<lib/automata.ml:231:4>>*/ for(;;){
     if(! l$0)  /*<<lib/automata.ml:233:6>>*/ return accu$0;
     var match = l$0[1];
     switch(match[0]){
       case 0:
         /*<<lib/automata.ml:235:57>>*/ var
         r = l$0[2],
         e = match[2],
         l$1 = match[1],
          /*<<lib/automata.ml:235:57>>*/ _tP_ = hash$3(l$1, accu$0),
          /*<<lib/automata.ml:235:13>>*/ accu$1 =
           hash_combine(388635598, hash_combine(e[1], _tP_)),
         l$0 = r,
         accu$0 = accu$1;
        break;
       case 1:
         /*<<lib/automata.ml:238:52>>*/ var
         r$0 = l$0[2],
         e$0 = match[2],
         marks = match[1],
          /*<<lib/automata.ml:238:52>>*/ _tQ_ = hash$2(marks, accu$0),
          /*<<lib/automata.ml:238:8>>*/ accu$2 =
           hash_combine(726404471, hash_combine(e$0[1], _tQ_)),
         l$0 = r$0,
         accu$0 = accu$2;
        break;
       default:
         /*<<lib/automata.ml:240:13>>*/ var
         r$1 = l$0[2],
         marks$0 = match[1],
          /*<<lib/automata.ml:240:13>>*/ accu$3 =
           hash_combine(471882453, hash$2(marks$0, accu$0)),
         l$0 = r$1,
         accu$0 = accu$3;
     }
    }
    /*<<lib/automata.ml:240:62>>*/ }
   function texp(marks, x){
     /*<<lib/automata.ml:242:21>>*/ return [1, marks, x];
    /*<<lib/automata.ml:242:36>>*/ }
   function tseq(kind, x, y, rem){
     /*<<lib/automata.ml:245:4>>*/ if(! x)
      /*<<lib/automata.ml:246:41>>*/ return rem;
    var _tO_ = x[1];
    if(1 === _tO_[0] && typeof _tO_[2][2] === "number" && ! x[2]){
     var marks = _tO_[1];
      /*<<lib/automata.ml:247:41>>*/ return [0, [1, marks, y], rem];
    }
     /*<<lib/automata.ml:248:41>>*/ return [0, [0, x, y, kind], rem];
    /*<<lib/automata.ml:248:65>>*/ }
    /*<<lib/automata.ml:287:4>>*/  /*<<lib/automata.ml:287:4>>*/ var
    dummy$1 = [0, -1, dummy$0, 0, 0, -1];
   function hash$4(idx, cat, desc){
     /*<<lib/automata.ml:294:4>>*/ return hash$3
            (desc, hash_combine(idx, hash_combine(to_int$0(cat), 0)))
           & 1073741823;
    /*<<lib/automata.ml:294:89>>*/ }
   function mk$1(idx, cat, desc){
     /*<<lib/automata.ml:297:4>>*/ return [0,
            idx,
            cat,
            desc,
            0,
            hash$4(idx, cat, desc)];
    /*<<lib/automata.ml:301:31>>*/ }
   function create$11(cat, e){
     /*<<lib/automata.ml:303:21>>*/ return mk$1
            (0, cat, [0, [1, empty$2, e], 0]);
    /*<<lib/automata.ml:303:55>>*/ }
   function equal$6(x, y){
     /*<<lib/automata.ml:306:4>>*/ var _tK_ = x[5] === y[5] ? 1 : 0;
    if(_tK_){
     var _tL_ = x[1] === y[1] ? 1 : 0;
     if(_tL_){
       /*<<lib/automata.ml:307:4>>*/  /*<<lib/automata.ml:307:4>>*/ var
       _tM_ = equal$3(x[2], y[2]);
       /*<<lib/automata.ml:307:4>>*/ if(_tM_) return equal$5(x[3], y[3]);
      var _tN_ = _tM_;
     }
     else
      var _tN_ = _tL_;
    }
    else
     var _tN_ = _tK_;
     /*<<lib/automata.ml:307:4>>*/ return _tN_;
    /*<<lib/automata.ml:307:65>>*/ }
   function hash$5(t){
     /*<<lib/automata.ml:321:19>>*/ return t[5];
    /*<<lib/automata.ml:321:25>>*/ }
   var Table = Make$1([0, equal$6, hash$5]);
   function create_working_area(param){
     /*<<lib/automata.ml:329:29>>*/ return [0, [0, 0]];
    /*<<lib/automata.ml:329:44>>*/ }
   function index_count(w){
     /*<<lib/automata.ml:331:20>>*/ return w[1].length - 1;
    /*<<lib/automata.ml:331:35>>*/ }
   function reset_table(a){
     /*<<lib/automata.ml:333:20>>*/ return fill(a, 0, a.length - 1, 0);
    /*<<lib/automata.ml:333:57>>*/ }
   function mark_used_indices(tbl){
    function _tG_(param){
      /*<<lib/automata.ml:336:12>>*/ if(0 === param[0]){
      var l = param[1];
       /*<<lib/automata.ml:337:28>>*/ return mark_used_indices(tbl)(l);
     }
     var marks = param[1];
      /*<<lib/automata.ml:340:8>>*/ return iter$0
             (function(param){
                /*<<lib/automata.ml:340:18>>*/ var
                i = param[2],
                _tI_ = 0 <= i ? 1 : 0,
                _tJ_ = _tI_ ? (caml_check_bound(tbl, i)[1 + i] = 1, 0) : _tI_;
                /*<<lib/automata.ml:340:48>>*/ return _tJ_;
               /*<<lib/automata.ml:340:64>>*/ },
              marks[1]);
     /*<<lib/automata.ml:341:28>>*/ }
     /*<<lib/automata.ml:336:12>>*/ return function(_tH_){
      /*<<?>>*/ return iter$0(_tG_, _tH_);};
    /*<<lib/automata.ml:341:28>>*/ }
   function find_free(tbl, idx, len){
     /*<<lib/automata.ml:344:2>>*/ var idx$0 = idx;
     /*<<lib/automata.ml:344:2>>*/ for(;;){
      /*<<lib/automata.ml:344:22>>*/ if
      (idx$0 !== len && caml_check_bound(tbl, idx$0)[1 + idx$0]){var idx$1 = idx$0 + 1 | 0, idx$0 = idx$1; continue;}
      /*<<lib/automata.ml:344:37>>*/ return idx$0;
    }
    /*<<lib/automata.ml:344:73>>*/ }
   function free_index(tbl_ref, l){
     /*<<lib/automata.ml:347:2>>*/ var tbl = tbl_ref[1];
     /*<<lib/automata.ml:348:2>>*/ reset_table(tbl);
     /*<<lib/automata.ml:349:2>>*/ mark_used_indices(tbl)(l);
     /*<<lib/automata.ml:351:12>>*/ var
     len = tbl.length - 1,
      /*<<lib/automata.ml:351:12>>*/ idx = find_free(tbl, 0, len);
    if(idx === len)
     tbl_ref[1] =
       /*<<lib/automata.ml:352:31>>*/ caml_make_vect(2 * len | 0, 0);
     /*<<lib/automata.ml:353:2>>*/ return idx;
    /*<<lib/automata.ml:353:5>>*/ }
   function _e$_(param){
     /*<<lib/automata.ml:357:33>>*/ return 2 === param[0] ? 0 : 1;
    /*<<lib/automata.ml:357:75>>*/ }
    /*<<lib/automata.ml:357:21>>*/ function remove_matches(_tF_){
     /*<<?>>*/ return find_all(_e$_, _tF_);
   }
   function split_at_match_rec(l, param){
    var l$0 = l, param$0 = param;
    for(;;){
     if(! param$0)
       /*<<lib/automata.ml:360:21>>*/ throw  /*<<lib/automata.ml:360:21>>*/ caml_maybe_attach_backtrace
             ([0, Assert_failure, _fa_], 1);
     var x = param$0[1];
     if(2 === x[0]){
       /*<<lib/automata.ml:361:37>>*/ var
       r$0 = param$0[2],
        /*<<lib/automata.ml:361:37>>*/ _tE_ = remove_matches(r$0);
       /*<<lib/automata.ml:361:23>>*/ return [0, rev(l$0), _tE_];
     }
      /*<<lib/automata.ml:362:40>>*/ var
      r = param$0[2],
       /*<<lib/automata.ml:362:40>>*/ l$1 = [0, x, l$0],
      l$0 = l$1,
      param$0 = r;
    }
   }
   function split_at_match(l){
     /*<<lib/automata.ml:364:23>>*/ return split_at_match_rec(0, l);
    /*<<lib/automata.ml:364:46>>*/ }
   function remove_duplicates(prev, l, y){
     /*<<lib/automata.ml:367:2>>*/ var l$0 = l;
     /*<<lib/automata.ml:367:2>>*/ for(;;){
     if(! l$0)  /*<<lib/automata.ml:369:4>>*/ return [0, 0, prev];
     var x = l$0[1];
     switch(x[0]){
       case 0:
         /*<<lib/automata.ml:373:23>>*/ var
         r = l$0[2],
         kind = x[3],
         x$0 = x[2],
         l$1 = x[1],
          /*<<lib/automata.ml:373:23>>*/ match =
           remove_duplicates(prev, l$1, x$0),
         prev$0 = match[2],
         l$2 = match[1],
          /*<<lib/automata.ml:374:23>>*/ match$0 =
           remove_duplicates(prev$0, r, y),
         prev$1 = match$0[2],
         r$0 = match$0[1];
         /*<<lib/automata.ml:375:4>>*/ return [0,
                tseq(kind, l$2, x$0, r$0),
                prev$1];
       case 1:
        if(typeof x[2][2] === "number"){
         var r$1 = l$0[2];
          /*<<lib/automata.ml:377:7>>*/ if(! memq(y[1], prev)){
           /*<<lib/automata.ml:380:24>>*/ var
            /*<<lib/automata.ml:380:24>>*/ match$1 =
             remove_duplicates([0, y[1], prev], r$1, y),
           prev$2 = match$1[2],
           r$2 = match$1[1];
           /*<<lib/automata.ml:381:6>>*/ return [0, [0, x, r$2], prev$2];
         }
         var l$0 = r$1;
        }
        else{
         var r$3 = l$0[2], x$1 = x[2];
          /*<<lib/automata.ml:383:7>>*/ if(! memq(x$1[1], prev)){
           /*<<lib/automata.ml:386:24>>*/ var
            /*<<lib/automata.ml:386:24>>*/ match$2 =
             remove_duplicates([0, x$1[1], prev], r$3, y),
           prev$3 = match$2[2],
           r$4 = match$2[1];
           /*<<lib/automata.ml:387:6>>*/ return [0, [0, x, r$4], prev$3];
         }
         var l$0 = r$3;
        }
        break;
       default:  /*<<lib/automata.ml:371:4>>*/ return [0, [0, x, 0], prev];
     }
    }
    /*<<lib/automata.ml:387:22>>*/ }
   function set_idx(idx, param){
     /*<<?>>*/ if(! param)  /*<<lib/automata.ml:391:4>>*/ return 0;
    var match = param[1];
    switch(match[0]){
      case 0:
        /*<<lib/automata.ml:395:40>>*/ var
        r = param[2],
        kind = match[3],
        x = match[2],
        l = match[1],
         /*<<lib/automata.ml:395:40>>*/ _tB_ = set_idx(idx, r);
        /*<<lib/automata.ml:395:4>>*/ return [0,
               [0, set_idx(idx, l), x, kind],
               _tB_];
      case 1:
        /*<<lib/automata.ml:397:51>>*/ var
        r$0 = param[2],
        x$0 = match[2],
        marks = match[1],
         /*<<lib/automata.ml:397:51>>*/ _tC_ = set_idx(idx, r$0);
        /*<<lib/automata.ml:397:4>>*/ return [0,
               [1, marks_set_idx(marks, idx), x$0],
               _tC_];
      default:
        /*<<lib/automata.ml:393:48>>*/ var
        r$1 = param[2],
        marks$0 = match[1],
         /*<<lib/automata.ml:393:48>>*/ _tD_ = set_idx(idx, r$1);
        /*<<lib/automata.ml:393:4>>*/ return [0,
               [2, marks_set_idx(marks$0, idx)],
               _tD_];
    }
   }
   function filter_marks(b, e, marks){
     /*<<lib/automata.ml:400:2>>*/ var _ty_ = marks[2];
     /*<<lib/automata.ml:400:2>>*/ return [0,
            find_all
             (function(param){
                /*<<lib/automata.ml:400:40>>*/ var
                i = param[1],
                _tz_ = i < b ? 1 : 0,
                _tA_ = _tz_ || (e < i ? 1 : 0);
               return _tA_;
               /*<<lib/automata.ml:400:70>>*/ },
              marks[1]),
            _ty_];
    /*<<lib/automata.ml:400:90>>*/ }
   function delta_1$0(counter, marks, c, next_cat, prev_cat, x, rem){
     /*<<lib/automata.ml:404:2>>*/ var match = x[2];
    if(typeof match === "number")
      /*<<lib/automata.ml:427:4>>*/ return [0, [2, marks], rem];
    switch(match[0]){
      case 0:
       var s = match[1];
        /*<<lib/automata.ml:406:7>>*/ return mem$0(c, s)
               ? [0, texp(marks, eps_expr), rem]
               : rem;
      case 1:
       var l = match[1];
        /*<<lib/automata.ml:408:4>>*/ if(counter >= 50)
         /*<<lib/automata.ml:408:4>>*/ return  /*<<lib/automata.ml:408:4>>*/ caml_trampoline_return
                (delta_2$0, [0, marks, c, next_cat, prev_cat, l, rem]);
       var counter$1 = counter + 1 | 0;
        /*<<lib/automata.ml:408:4>>*/ return delta_2$0
               (counter$1, marks, c, next_cat, prev_cat, l, rem);
      case 2:
        /*<<lib/automata.ml:410:13>>*/ var
        z = match[3],
        y = match[2],
        kind = match[1],
         /*<<lib/automata.ml:410:13>>*/ y$0 =
          delta_1(marks, c, next_cat, prev_cat, y, 0);
        /*<<lib/automata.ml:411:4>>*/ if(counter >= 50)
         /*<<lib/automata.ml:411:4>>*/ return  /*<<lib/automata.ml:411:4>>*/ caml_trampoline_return
                (delta_seq$0, [0, c, next_cat, prev_cat, kind, y$0, z, rem]);
       var counter$0 = counter + 1 | 0;
        /*<<lib/automata.ml:411:4>>*/ return delta_seq$0
               (counter$0, c, next_cat, prev_cat, kind, y$0, z, rem);
      case 3:
        /*<<lib/automata.ml:413:13>>*/ var
        y$1 = match[3],
        kind$0 = match[2],
        rep_kind = match[1],
         /*<<lib/automata.ml:413:13>>*/ y$2 =
          delta_1(marks, c, next_cat, prev_cat, y$1, 0),
         /*<<lib/automata.ml:416:8>>*/ match$0 =
          first
           (function(param){
              /*<<lib/automata.ml:417:10>>*/ if(2 !== param[0])
               /*<<lib/automata.ml:417:56>>*/ return 0;
             var marks = param[1];
              /*<<lib/automata.ml:417:38>>*/ return [0, marks];
             /*<<lib/automata.ml:417:61>>*/ },
            y$2);
       if(match$0)
        var
         marks$0 = match$0[1],
         marks$1 = marks$0,
         y$3 = remove_matches(y$2);
       else
        var marks$1 = marks, y$3 = y$2;
       return 620821490 <= rep_kind
               ? [0, [2, marks], tseq(kind$0, y$3, x, rem)]
               : tseq(kind$0, y$3, x, [0, [2, marks$1], rem]);
      case 4:
        /*<<lib/automata.ml:429:16>>*/ var
        i = match[1],
        _tw_ = marks[2],
         /*<<lib/automata.ml:429:16>>*/ marks$2 =
          [0, [0, [0, i, -1], remove_assq(i, marks[1])], _tw_];
        /*<<lib/automata.ml:430:4>>*/ return [0, [2, marks$2], rem];
      case 5:
       var e = match[2], b = match[1];
        /*<<lib/automata.ml:435:4>>*/ return [0,
               [2, filter_marks(b, e, marks)],
               rem];
      case 6:
       var cat = match[1];
        /*<<lib/automata.ml:437:7>>*/ return intersect(next_cat, cat)
               ? [0, [2, marks], rem]
               : rem;
      case 7:
       var cat$0 = match[1];
        /*<<lib/automata.ml:439:7>>*/ return intersect(prev_cat, cat$0)
               ? [0, [2, marks], rem]
               : rem;
      default:
        /*<<lib/automata.ml:432:44>>*/ var
        i$0 = match[1],
         /*<<lib/automata.ml:432:44>>*/ _tx_ =
          Set[2].call(null, i$0, marks[2]),
         /*<<lib/automata.ml:432:16>>*/ marks$3 = [0, marks[1], _tx_];
        /*<<lib/automata.ml:433:4>>*/ return [0, [2, marks$3], rem];
    }
    /*<<lib/automata.ml:439:76>>*/ }
   function delta_1(marks, c, next_cat, prev_cat, x, rem){
     /*<<?>>*/ return caml_trampoline
            (delta_1$0(0, marks, c, next_cat, prev_cat, x, rem));
   }
   function delta_2$0(counter, marks, c, next_cat, prev_cat, l, rem){
     /*<<lib/automata.ml:442:2>>*/ if(! l)
      /*<<lib/automata.ml:443:14>>*/ return rem;
     /*<<lib/automata.ml:446:6>>*/ var
     r = l[2],
     y = l[1],
      /*<<lib/automata.ml:446:6>>*/ _tv_ =
       delta_2(marks, c, next_cat, prev_cat, r, rem);
     /*<<lib/automata.ml:446:6>>*/ if(counter >= 50)
      /*<<lib/automata.ml:446:6>>*/ return  /*<<lib/automata.ml:446:6>>*/ caml_trampoline_return
             (delta_1$0, [0, marks, c, next_cat, prev_cat, y, _tv_]);
    var counter$0 = counter + 1 | 0;
     /*<<lib/automata.ml:446:6>>*/ return delta_1$0
            (counter$0, marks, c, next_cat, prev_cat, y, _tv_);
    /*<<lib/automata.ml:446:49>>*/ }
   function delta_2(marks, c, next_cat, prev_cat, l, rem){
     /*<<?>>*/ return caml_trampoline
            (delta_2$0(0, marks, c, next_cat, prev_cat, l, rem));
   }
   function delta_seq$0(counter, c, next_cat, prev_cat, kind, y, z, rem){
     /*<<lib/automata.ml:449:2>>*/  /*<<lib/automata.ml:450:4>>*/ var
     match =
       first
        (function(param){
           /*<<lib/automata.ml:450:10>>*/ if(2 !== param[0])
            /*<<lib/automata.ml:450:56>>*/ return 0;
          var marks = param[1];
           /*<<lib/automata.ml:450:38>>*/ return [0, marks];
          /*<<lib/automata.ml:450:61>>*/ },
         y);
    if(! match)  /*<<lib/automata.ml:453:4>>*/ return tseq(kind, y, z, rem);
    var marks = match[1];
     /*<<lib/automata.ml:455:4>>*/ if(-730718166 === kind){
      /*<<lib/automata.ml:458:8>>*/  /*<<lib/automata.ml:458:8>>*/ var
      _tt_ = delta_1(marks, c, next_cat, prev_cat, z, rem);
      /*<<lib/automata.ml:458:8>>*/ return tseq
             (kind, remove_matches(y), z, _tt_);
    }
    if(332064784 <= kind){
      /*<<lib/automata.ml:463:22>>*/ var
       /*<<lib/automata.ml:463:22>>*/ match$0 = split_at_match(y),
      y$0 = match$0[2],
      y$1 = match$0[1];
      /*<<lib/automata.ml:465:8>>*/ return tseq
             (kind,
              y$1,
              z,
              delta_1
               (marks, c, next_cat, prev_cat, z, tseq(kind, y$0, z, rem)));
    }
     /*<<lib/automata.ml:461:8>>*/  /*<<lib/automata.ml:461:8>>*/ var
     _tu_ = tseq(kind, remove_matches(y), z, rem);
     /*<<lib/automata.ml:461:8>>*/ if(counter >= 50)
      /*<<lib/automata.ml:461:8>>*/ return  /*<<lib/automata.ml:461:8>>*/ caml_trampoline_return
             (delta_1$0, [0, marks, c, next_cat, prev_cat, z, _tu_]);
    var counter$0 = counter + 1 | 0;
     /*<<lib/automata.ml:461:8>>*/ return delta_1$0
            (counter$0, marks, c, next_cat, prev_cat, z, _tu_);
    /*<<lib/automata.ml:465:71>>*/ }
   function delta_seq(c, next_cat, prev_cat, kind, y, z, rem){
     /*<<?>>*/ return caml_trampoline
            (delta_seq$0(0, c, next_cat, prev_cat, kind, y, z, rem));
   }
   function delta_3(c, next_cat, prev_cat, x, rem){
     /*<<lib/automata.ml:468:2>>*/ switch(x[0]){
      case 0:
        /*<<lib/automata.ml:470:13>>*/ var
        kind = x[3],
        z = x[2],
        y = x[1],
         /*<<lib/automata.ml:470:13>>*/ y$0 =
          delta_4(c, next_cat, prev_cat, y, 0);
        /*<<lib/automata.ml:471:4>>*/ return delta_seq
               (c, next_cat, prev_cat, kind, y$0, z, rem);
      case 1:
       var e = x[2], marks = x[1];
        /*<<lib/automata.ml:473:4>>*/ return delta_1
               (marks, c, next_cat, prev_cat, e, rem);
      default:  /*<<lib/automata.ml:475:4>>*/ return [0, x, rem];
    }
    /*<<lib/automata.ml:475:12>>*/ }
   function delta_4(c, next_cat, prev_cat, l, rem){
     /*<<lib/automata.ml:478:2>>*/ if(! l)
      /*<<lib/automata.ml:479:14>>*/ return rem;
    var r = l[2], y = l[1];
     /*<<lib/automata.ml:482:6>>*/ return delta_3
            (c, next_cat, prev_cat, y, delta_4(c, next_cat, prev_cat, r, rem));
    /*<<lib/automata.ml:482:43>>*/ }
   function delta(tbl_ref, next_cat, char$0, st){
     /*<<lib/automata.ml:485:2>>*/ var
     prev_cat = st[2],
     expr =
       remove_duplicates
         (0, delta_4(char$0, next_cat, prev_cat, st[3], 0), eps_expr)
        [1],
      /*<<lib/automata.ml:490:12>>*/ idx = free_index(tbl_ref, expr),
      /*<<lib/automata.ml:491:15>>*/ expr$0 = set_idx(idx, expr);
     /*<<lib/automata.ml:492:2>>*/ return mk$1(idx, next_cat, expr$0);
    /*<<lib/automata.ml:492:30>>*/ }
   function flatten_match(m){
     /*<<lib/automata.ml:656:2>>*/ var
      /*<<lib/automata.ml:656:11>>*/ ma =
       fold_left
        (function(ma, param){
           /*<<lib/automata.ml:656:26>>*/ var i = param[1];
           /*<<lib/automata.ml:656:44>>*/ return max(ma, i);
          /*<<lib/automata.ml:656:53>>*/ },
         -1,
         m),
      /*<<lib/automata.ml:657:12>>*/ res =
        /*<<lib/automata.ml:657:12>>*/ caml_make_vect(ma + 1 | 0, -1);
     /*<<lib/automata.ml:658:2>>*/ iter$0
     (function(param){
        /*<<lib/automata.ml:658:12>>*/ var v = param[2], i = param[1];
        /*<<lib/automata.ml:658:27>>*/ caml_check_bound(res, i)[1 + i] = v;
        /*<<lib/automata.ml:658:27>>*/ return 0;
       /*<<lib/automata.ml:658:40>>*/ },
      m);
     /*<<lib/automata.ml:658:2>>*/ return res;
    /*<<lib/automata.ml:659:5>>*/ }
   function status(s){
     /*<<lib/automata.ml:662:2>>*/ var match = s[4];
    if(match){var st = match[1];  /*<<lib/automata.ml:664:4>>*/ return st;}
    var _tq_ = s[3];
    if(_tq_){
     var match$0 = _tq_[1];
     if(2 === match$0[0])
       /*<<lib/automata.ml:669:27>>*/ var
       m = match$0[1],
        /*<<lib/automata.ml:669:27>>*/ _tr_ = m[2],
        /*<<lib/automata.ml:669:27>>*/ _ts_ = [0, flatten_match(m[1]), _tr_],
       st$0 = _ts_;
     else
      var st$0 = 1;
    }
    else
     var st$0 = 0;
    s[4] = [0, st$0];
     /*<<lib/automata.ml:673:4>>*/ return st$0;
    /*<<lib/automata.ml:673:6>>*/ }
   function make$3(param){
     /*<<lib/color_map.ml:14:14>>*/ return make(257, 0);
    /*<<lib/color_map.ml:14:35>>*/ }
   function flatten$0(cm){
     /*<<lib/color_map.ml:17:2>>*/ var
      /*<<lib/color_map.ml:17:10>>*/ c =
        /*<<lib/color_map.ml:17:10>>*/ caml_create_bytes(256),
      /*<<lib/color_map.ml:18:19>>*/ color_repr =
        /*<<lib/color_map.ml:18:19>>*/ caml_create_bytes(256),
      /*<<lib/color_map.ml:19:10>>*/ v = [0, 0];
     /*<<lib/color_map.ml:20:2>>*/  /*<<lib/color_map.ml:20:2>>*/ caml_bytes_set
     (c, 0, 0);
     /*<<lib/color_map.ml:21:2>>*/  /*<<lib/color_map.ml:21:2>>*/ caml_bytes_set
     (color_repr, 0, 0);
    var i = 1;
    for(;;){
     if(0 !==  /*<<lib/color_map.ml:23:7>>*/ caml_bytes_get(cm, i)) v[1]++;
      /*<<lib/color_map.ml:24:4>>*/  /*<<lib/color_map.ml:24:4>>*/ caml_bytes_set
      (c, i, chr(v[1]));
      /*<<lib/color_map.ml:25:28>>*/  /*<<lib/color_map.ml:25:28>>*/ var
      _to_ = chr(i);
      /*<<lib/color_map.ml:25:4>>*/  /*<<lib/color_map.ml:25:4>>*/ caml_bytes_set
      (color_repr, v[1], _to_);
      /*<<lib/color_map.ml:25:4>>*/  /*<<lib/color_map.ml:25:4>>*/ var
      _tp_ = i + 1 | 0;
     if(255 === i){
       /*<<lib/color_map.ml:27:29>>*/ var
       _tm_ = v[1] + 1 | 0,
        /*<<lib/color_map.ml:27:29>>*/ _tn_ =
         sub_string(color_repr, 0, v[1] + 1 | 0);
       /*<<lib/color_map.ml:27:2>>*/ return [0,
              unsafe_to_string(c),
              _tn_,
              _tm_];
     }
     var i = _tp_;
    }
    /*<<lib/color_map.ml:27:76>>*/ }
   function split$0(s, cm){
     /*<<lib/color_map.ml:31:2>>*/ return iter$6
            (s,
             function(i, j){
               /*<<lib/color_map.ml:32:6>>*/  /*<<lib/color_map.ml:32:6>>*/ caml_bytes_set
               (cm, i, 1);
               /*<<lib/color_map.ml:33:6>>*/ return  /*<<lib/color_map.ml:33:6>>*/ caml_bytes_set
                      (cm, j + 1 | 0, 1);
              /*<<lib/color_map.ml:33:34>>*/ });
    /*<<lib/color_map.ml:34:5>>*/ }
   function get_ofs(t, i){
     /*<<lib/group.ml:11:2>>*/ if(t[2].length - 1 <= ((2 * i | 0) + 1 | 0))
      /*<<lib/group.ml:11:44>>*/ throw  /*<<lib/group.ml:11:44>>*/ caml_maybe_attach_backtrace
            (Not_found, 1);
     /*<<lib/group.ml:12:11>>*/ var
     _tj_ = 2 * i | 0,
      /*<<lib/group.ml:12:11>>*/ m1 = caml_check_bound(t[2], _tj_)[1 + _tj_];
    if(-1 === m1)
      /*<<lib/group.ml:13:18>>*/ throw  /*<<lib/group.ml:13:18>>*/ caml_maybe_attach_backtrace
            (Not_found, 1);
     /*<<lib/group.ml:14:11>>*/ var
      /*<<lib/group.ml:14:11>>*/ p1 = caml_check_bound(t[4], m1)[1 + m1],
     _tk_ = (2 * i | 0) + 1 | 0,
      /*<<lib/group.ml:15:19>>*/ _tl_ = caml_check_bound(t[2], _tk_)[1 + _tk_],
      /*<<lib/group.ml:15:11>>*/ p2 = caml_check_bound(t[4], _tl_)[1 + _tl_];
     /*<<lib/group.ml:16:2>>*/ return [0, p1, p2];
    /*<<lib/group.ml:16:10>>*/ }
   function get$2(t, i){
     /*<<lib/group.ml:19:2>>*/ var
      /*<<lib/group.ml:19:17>>*/ match = get_ofs(t, i),
     p2 = match[2],
     p1 = match[1];
    return sub$0(t[1], p1, p2 - p1 | 0);
    /*<<lib/group.ml:20:29>>*/ }
   function iter$7(n, f, v){
     /*<<lib/core.ml:23:21>>*/ var n$0 = n, v$0 = v;
     /*<<lib/core.ml:23:21>>*/ for(;;){
     if(0 === n$0)  /*<<lib/core.ml:23:35>>*/ return v$0;
      /*<<lib/core.ml:23:57>>*/ var
       /*<<lib/core.ml:23:57>>*/ v$1 =
         /*<<lib/core.ml:23:57>>*/ caml_call1(f, v$0),
      n$1 = n$0 - 1 | 0,
      n$0 = n$1,
      v$0 = v$1;
    }
    /*<<lib/core.ml:23:62>>*/ }
   function category(re, color){
     /*<<lib/core.ml:107:2>>*/ return -1 === color
            ? inexistant
            : color
              === re[6]
              ? symbol$3(symbol$3(lastnewline, newline), not_letter)
              : from_char
                ( /*<<lib/core.ml:113:23>>*/ caml_string_get(re[4], color));
    /*<<lib/core.ml:113:46>>*/ }
    /*<<lib/core.ml:120:2>>*/ var
    dummy_next = [0],
     /*<<lib/core.ml:120:2>>*/ unknown_state =
      [0, -2, 0, dummy_next, 0, dummy$1],
    break$0 = -3;
   function mk_state(ncol, desc){
     /*<<lib/core.ml:125:2>>*/  /*<<lib/core.ml:126:10>>*/ var
     match = status(desc);
    a:
    {
     if(typeof match === "number" && match){var break_state = 0; break a;}
     var break_state = 1;
    }
     /*<<lib/core.ml:131:2>>*/ var
      /*<<lib/core.ml:131:2>>*/ _tf_ = 0,
     _tg_ =
       break_state
        ? dummy_next
        :  /*<<lib/core.ml:133:47>>*/ caml_make_vect(ncol, unknown_state),
     _th_ = desc[1],
     _ti_ = break_state ? break$0 : desc[1];
     /*<<lib/core.ml:131:2>>*/ return [0, _ti_, _th_, _tg_, _tf_, desc];
    /*<<lib/core.ml:135:10>>*/ }
   function find_state(re, desc){
     /*<<lib/core.ml:138:2>>*/ try{
      /*<<lib/core.ml:139:4>>*/  /*<<lib/core.ml:139:4>>*/ var
      _td_ = Table[7].call(null, re[8], desc);
      /*<<lib/core.ml:139:4>>*/ return _td_;
    }
    catch(_te_){
     var _tc_ = caml_wrap_exception(_te_);
     if(_tc_ !== Not_found) throw caml_maybe_attach_backtrace(_tc_, 0);
      /*<<lib/core.ml:141:13>>*/  /*<<lib/core.ml:141:13>>*/ var
      st = mk_state(re[5], desc);
      /*<<lib/core.ml:142:4>>*/ Table[5].call(null, re[8], desc, st);
      /*<<lib/core.ml:142:4>>*/ return st;
    }
    /*<<lib/core.ml:143:6>>*/ }
   function delta$0(info, cat, color, st){
     /*<<lib/core.ml:148:2>>*/ var
      /*<<lib/core.ml:148:13>>*/ desc = delta(info[1][7], cat, color, st[5]),
     len = info[3].length - 1,
     _ta_ = desc[1] === len ? 1 : 0,
     _tb_ = _ta_ ? 0 < len ? 1 : 0 : _ta_;
    if(_tb_){
     var pos = info[3];
     info[3] =  /*<<lib/core.ml:152:22>>*/ caml_make_vect(2 * len | 0, 0);
      /*<<lib/core.ml:153:4>>*/ blit$0(pos, 0, info[3], 0, len);
    }
     /*<<lib/core.ml:155:2>>*/ return desc;
    /*<<lib/core.ml:155:6>>*/ }
   function validate(info, s, pos, st){
     /*<<lib/core.ml:158:2>>*/ var
      /*<<lib/core.ml:158:48>>*/ _s$_ =
        /*<<lib/core.ml:158:48>>*/ caml_string_get(s, pos),
      /*<<lib/core.ml:158:24>>*/ color =
        /*<<lib/core.ml:158:24>>*/ caml_string_get(info[2], _s$_),
      /*<<lib/core.ml:159:12>>*/ cat = category(info[1], color),
      /*<<lib/core.ml:160:14>>*/ desc = delta$0(info, cat, color, st),
      /*<<lib/core.ml:161:12>>*/ st$0 = find_state(info[1], desc);
     /*<<lib/core.ml:162:2>>*/ caml_check_bound(st[3], color)[1 + color] = st$0;
     /*<<lib/core.ml:162:2>>*/ return;
    /*<<lib/core.ml:162:24>>*/ }
   function loop(info, s, pos, st){
     /*<<lib/core.ml:165:2>>*/ var pos$0 = pos, st$0 = st;
     /*<<lib/core.ml:165:2>>*/ for(;;){
     if(pos$0 >= info[5])  /*<<lib/core.ml:179:4>>*/ return st$0;
      /*<<lib/core.ml:166:56>>*/ var
       /*<<lib/core.ml:166:56>>*/ _s8_ =
         /*<<lib/core.ml:166:56>>*/ caml_string_get(s, pos$0),
       /*<<lib/core.ml:166:33>>*/ _s9_ =
         /*<<lib/core.ml:166:33>>*/ caml_string_get(info[2], _s8_),
       /*<<lib/core.ml:166:14>>*/ st$1 =
        caml_check_bound(st$0[3], _s9_)[1 + _s9_],
       /*<<lib/core.ml:167:4>>*/ idx = st$1[1];
      /*<<lib/core.ml:168:4>>*/ if(0 <= idx){
       /*<<lib/core.ml:169:6>>*/ caml_check_bound(info[3], idx)[1 + idx] = pos$0;
      var pos$1 = pos$0 + 1 | 0, pos$0 = pos$1, st$0 = st$1;
     }
     else{
      if(idx === -3){
       var _s__ = st$1[2];
        /*<<lib/core.ml:172:6>>*/ caml_check_bound(info[3], _s__)[1 + _s__] = pos$0;
        /*<<lib/core.ml:172:6>>*/ return st$1;
      }
       /*<<lib/core.ml:175:6>>*/ validate(info, s, pos$0, st$0);
     }
    }
    /*<<lib/core.ml:179:6>>*/ }
   function loop_no_mark(info, s, pos, last, st){
     /*<<lib/core.ml:182:2>>*/ var pos$0 = pos, st$0 = st;
     /*<<lib/core.ml:182:2>>*/ for(;;){
     if(pos$0 >= last)  /*<<lib/core.ml:193:4>>*/ return st$0;
      /*<<lib/core.ml:183:56>>*/ var
       /*<<lib/core.ml:183:56>>*/ _s6_ =
         /*<<lib/core.ml:183:56>>*/ caml_string_get(s, pos$0),
       /*<<lib/core.ml:183:33>>*/ _s7_ =
         /*<<lib/core.ml:183:33>>*/ caml_string_get(info[2], _s6_),
       /*<<lib/core.ml:183:14>>*/ st$1 =
        caml_check_bound(st$0[3], _s7_)[1 + _s7_];
     if(0 <= st$1[1])
      var pos$1 = pos$0 + 1 | 0, pos$0 = pos$1, st$0 = st$1;
     else{
      if(st$1[1] === -3)  /*<<lib/core.ml:187:6>>*/ return st$1;
       /*<<lib/core.ml:189:6>>*/ validate(info, s, pos$0, st$0);
     }
    }
    /*<<lib/core.ml:193:6>>*/ }
   function final$0(info, st, cat){
     /*<<lib/core.ml:196:2>>*/ try{
      /*<<lib/core.ml:197:4>>*/  /*<<lib/core.ml:197:4>>*/ var
      _s4_ = assq(cat, st[4]);
      /*<<lib/core.ml:197:4>>*/ return _s4_;
    }
    catch(_s5_){
     var _s2_ = caml_wrap_exception(_s5_);
     if(_s2_ !== Not_found) throw caml_maybe_attach_backtrace(_s2_, 0);
      /*<<lib/core.ml:199:14>>*/ var
       /*<<lib/core.ml:199:14>>*/ st$0 = delta$0(info, cat, -1, st),
       /*<<lib/core.ml:200:39>>*/ _s3_ = status(st$0),
       /*<<lib/core.ml:200:14>>*/ res = [0, st$0[1], _s3_];
     st[4] = [0, [0, cat, res], st[4]];
      /*<<lib/core.ml:202:4>>*/ return res;
    }
    /*<<lib/core.ml:202:7>>*/ }
   function find_initial_state(re, cat){
     /*<<lib/core.ml:205:2>>*/ try{
      /*<<lib/core.ml:206:4>>*/  /*<<lib/core.ml:206:4>>*/ var
      _s0_ = assq(cat, re[2]);
      /*<<lib/core.ml:206:4>>*/ return _s0_;
    }
    catch(_s1_){
     var _sZ_ = caml_wrap_exception(_s1_);
     if(_sZ_ !== Not_found) throw caml_maybe_attach_backtrace(_sZ_, 0);
      /*<<lib/core.ml:208:13>>*/  /*<<lib/core.ml:208:13>>*/ var
      st = find_state(re, create$11(cat, re[1]));
     re[2] = [0, [0, cat, st], re[2]];
      /*<<lib/core.ml:210:4>>*/ return st;
    }
    /*<<lib/core.ml:210:6>>*/ }
   function get_color(re, s, pos){
     /*<<lib/core.ml:213:2>>*/ if(0 > pos)
      /*<<lib/core.ml:214:4>>*/ return -1;
    var slen = caml_ml_string_length(s);
    if(slen <= pos)  /*<<lib/core.ml:218:6>>*/ return -1;
     /*<<lib/core.ml:219:46>>*/ if
     (pos === (slen - 1 | 0)
      &&
       -1 !== re[6]
       && 10 ===  /*<<lib/core.ml:219:46>>*/ caml_string_get(s, pos))
     return re[6];
     /*<<lib/core.ml:223:37>>*/  /*<<lib/core.ml:223:37>>*/ var
     _sY_ =  /*<<lib/core.ml:223:37>>*/ caml_string_get(s, pos);
     /*<<lib/core.ml:223:16>>*/ return  /*<<lib/core.ml:223:16>>*/ caml_string_get
            (re[3], _sY_);
    /*<<lib/core.ml:223:45>>*/ }
   function handle_last_newline(info, pos, st, groups){
     /*<<lib/core.ml:226:2>>*/ for(;;){
      /*<<lib/core.ml:226:12>>*/ var
      _sV_ = info[1][6],
       /*<<lib/core.ml:226:12>>*/ st$0 =
        caml_check_bound(st[3], _sV_)[1 + _sV_];
     if(0 <= st$0[1]){
      if(groups){
       var _sW_ = st$0[1];
        /*<<lib/core.ml:228:19>>*/ caml_check_bound(info[3], _sW_)[1 + _sW_] = pos;
      }
       /*<<lib/core.ml:228:19>>*/ return st$0;
     }
     if(st$0[1] === -3){
      if(groups){
       var _sX_ = st$0[2];
        /*<<lib/core.ml:231:19>>*/ caml_check_bound(info[3], _sX_)[1 + _sX_] = pos;
      }
       /*<<lib/core.ml:231:19>>*/ return st$0;
     }
      /*<<lib/core.ml:235:27>>*/ var
      color = info[1][6],
       /*<<lib/core.ml:235:27>>*/ real_c =
         /*<<lib/core.ml:235:27>>*/ caml_string_get(info[2], 10),
       /*<<lib/core.ml:236:14>>*/ cat = category(info[1], color),
       /*<<lib/core.ml:237:16>>*/ desc = delta$0(info, cat, real_c, st),
       /*<<lib/core.ml:238:14>>*/ st$1 = find_state(info[1], desc);
      /*<<lib/core.ml:239:4>>*/ caml_check_bound(st[3], color)[1 + color] = st$1;
    }
    /*<<lib/core.ml:241:5>>*/ }
   function scan_str(info, s, initial_state, groups){
     /*<<lib/core.ml:244:2>>*/ var
     pos = info[4],
      /*<<lib/core.ml:245:2>>*/ last = info[5];
     /*<<lib/core.ml:249:9>>*/ if
     (last ===  /*<<lib/core.ml:246:2>>*/ caml_ml_string_length(s)
      &&
       -1 !== info[1][6]
       &&
        pos < last
        && 10 ===  /*<<lib/core.ml:249:9>>*/ caml_string_get(s, last - 1 | 0)){
      /*<<lib/core.ml:251:15>>*/ var
       /*<<lib/core.ml:251:15>>*/ info$0 =
        [0, info[1], info[2], info[3], info[4], last - 1 | 0],
       /*<<lib/core.ml:252:13>>*/ st =
        scan_str(info$0, s, initial_state, groups);
     return st[1] === -3
             ? st
             : handle_last_newline(info$0, last - 1 | 0, st, groups);
    }
    return groups
            ? loop(info, s, pos, initial_state)
            : loop_no_mark(info, s, pos, last, initial_state);
    /*<<lib/core.ml:260:48>>*/ }
   function final_boundary_check(last, slen, re, s, info, st, groups){
     /*<<lib/core.ml:269:2>>*/ var
     final_cat =
       last === slen
        ? symbol$3(search_boundary, inexistant)
        : symbol$3(search_boundary, category(re, get_color(re, s, last))),
      /*<<lib/core.ml:275:19>>*/ match = final$0(info, st, final_cat),
     res = match[2],
     idx = match[1];
    a:
    if(groups && typeof res !== "number"){
      /*<<lib/core.ml:277:21>>*/ caml_check_bound(info[3], idx)[1 + idx] = last;
     break a;
    }
     /*<<lib/core.ml:279:2>>*/ return res;
    /*<<lib/core.ml:279:5>>*/ }
   function match_str(groups, partial, re, s, pos, len){
     /*<<lib/core.ml:282:2>>*/ var
     slen = caml_ml_string_length(s),
      /*<<lib/core.ml:283:2>>*/ last = -1 === len ? slen : pos + len | 0;
    if(groups)
      /*<<lib/core.ml:288:18>>*/ var
       /*<<lib/core.ml:288:18>>*/ n = index_count(re[7]) + 1 | 0,
       /*<<lib/core.ml:289:10>>*/ _sR_ =
        10 < n
         ?  /*<<lib/core.ml:292:12>>*/ caml_make_vect(n, 0)
         : _fb_.slice(),
      _sS_ = _sR_;
    else
     var _sS_ = [0];
     /*<<lib/core.ml:285:4>>*/ var
      /*<<lib/core.ml:285:4>>*/ info = [0, re, re[3], _sS_, pos, last],
      /*<<lib/core.ml:296:2>>*/ initial_cat =
       0 === pos
        ? symbol$3(search_boundary, inexistant)
        : symbol$3
          (search_boundary, category(re, get_color(re, s, pos - 1 | 0))),
      /*<<lib/core.ml:303:22>>*/ initial_state =
       find_initial_state(re, initial_cat),
      /*<<lib/core.ml:304:11>>*/ st = scan_str(info, s, initial_state, groups);
    a:
    {
     b:
     if(st[1] !== -3){
      if(partial && ! groups) break b;
      if(partial && groups){
        /*<<lib/core.ml:309:12>>*/  /*<<lib/core.ml:309:12>>*/ var
        status$0 = status(st[5]);
       c:
       {
        if(typeof status$0 === "number" && status$0){
          /*<<lib/core.ml:315:15>>*/ var
           /*<<lib/core.ml:315:15>>*/ status$1 =
            final_boundary_check(last, slen, re, s, info, st, groups),
          _sT_ = typeof status$1 === "number" ? 1 : status$1,
          _sU_ = _sT_;
         break c;
        }
        var _sU_ = status$0;
       }
       var res = _sU_;
       break a;
      }
      var res = final_boundary_check(last, slen, re, s, info, st, groups);
      break a;
     }
     var res = status(st[5]);
    }
    if(typeof res !== "number"){
     var pmarks = res[2], marks = res[1];
      /*<<lib/core.ml:325:4>>*/ return [0,
             [0, s, marks, pmarks, info[3], re[10]]];
    }
    if(! res)  /*<<lib/core.ml:326:23>>*/ return 0;
    var no_match_starts_before = groups ? caml_check_bound(info[3], 0)[1] : 0;
     /*<<lib/core.ml:329:12>>*/ return [1, no_match_starts_before];
    /*<<lib/core.ml:329:38>>*/ }
   function mk_re
   (initial, colors, color_repr, ncolor, lnl, group_names, group_count){
     /*<<lib/core.ml:332:2>>*/  /*<<lib/core.ml:339:13>>*/ var
     _sQ_ = Table[1].call(null, 97);
     /*<<lib/core.ml:332:2>>*/ return [0,
            initial,
            0,
            colors,
            color_repr,
            ncolor,
            lnl,
            create_working_area(0),
            _sQ_,
            group_names,
            group_count];
    /*<<lib/core.ml:341:17>>*/ }
   function cseq(c$0, c){
     /*<<lib/core.ml:345:16>>*/ return seq(c$0, c);
    /*<<lib/core.ml:345:53>>*/ }
   function cadd(c, s){
     /*<<lib/core.ml:346:15>>*/ return add$4(c, s);
    /*<<lib/core.ml:346:39>>*/ }
   function trans_set(cache, cm, s){
     /*<<lib/core.ml:349:2>>*/  /*<<lib/core.ml:349:8>>*/ var
     match = one_char(s);
    if(match){
     var i = match[1];
      /*<<lib/core.ml:350:27>>*/ return csingle
             ( /*<<lib/core.ml:350:27>>*/ caml_string_get(cm, i));
    }
     /*<<lib/core.ml:352:12>>*/  /*<<lib/core.ml:352:12>>*/ var
     v = [0, hash_rec(s), s];
     /*<<lib/core.ml:353:4>>*/ try{
      /*<<lib/core.ml:354:6>>*/  /*<<lib/core.ml:354:6>>*/ var
      _sN_ = CSetMap[17].call(null, v, cache[1]);
      /*<<lib/core.ml:354:6>>*/ return _sN_;
    }
    catch(_sO_){
     var _sM_ = caml_wrap_exception(_sO_);
     if(_sM_ !== Not_found) throw caml_maybe_attach_backtrace(_sM_, 0);
      /*<<lib/core.ml:357:8>>*/  /*<<lib/core.ml:357:8>>*/ var
      l =
        fold_right$1
         (s,
          empty$1,
          function(param, l){
            /*<<lib/core.ml:359:13>>*/ var
            j = param[2],
            i = param[1],
             /*<<lib/core.ml:359:54>>*/ _sP_ =
               /*<<lib/core.ml:359:54>>*/ caml_string_get(cm, j);
            /*<<lib/core.ml:359:30>>*/ return union
                   (cseq
                     ( /*<<lib/core.ml:359:47>>*/ caml_string_get(cm, i), _sP_),
                    l);
           /*<<lib/core.ml:359:64>>*/ });
     cache[1] = CSetMap[2].call(null, v, l, cache[1]);
      /*<<lib/core.ml:363:6>>*/ return l;
    }
    /*<<lib/core.ml:363:7>>*/ }
   function is_charset(param){
     /*<<lib/core.ml:443:21>>*/ var param$0 = param;
     /*<<lib/core.ml:443:21>>*/ for(;;){
     a:
     if(typeof param$0 !== "number"){
      switch(param$0[0]){
        case 0:
          /*<<lib/core.ml:445:4>>*/ return 1;
        case 13:
          /*<<lib/core.ml:449:4>>*/ var
          r$0 = param$0[2],
          r$1 = param$0[1],
           /*<<lib/core.ml:449:4>>*/ _sL_ = is_charset(r$1);
          /*<<lib/core.ml:449:4>>*/ if(! _sL_)
           /*<<lib/core.ml:449:4>>*/ return _sL_;
         var param$0 = r$0;
         continue;
        case 4:
        case 5:
         var r = param$0[2]; break;
        case 2:
        case 11:
        case 12:
         var l = param$0[1];
          /*<<lib/core.ml:447:4>>*/ return for_all(is_charset, l);
        case 7:
        case 9:
        case 10:
         var r = param$0[1]; break;
        default: break a;
      }
      var param$0 = r;
      continue;
     }
      /*<<lib/core.ml:457:4>>*/ return 0;
    }
    /*<<lib/core.ml:457:9>>*/ }
    /*<<lib/core.ml:463:37>>*/ var
     /*<<lib/core.ml:463:37>>*/ _fc_ = cseq(216, 222),
     /*<<lib/core.ml:463:4>>*/ _fd_ = union(cseq(192, 214), _fc_),
     /*<<lib/core.ml:462:2>>*/ cupper = union(cseq(65, 90), _fd_),
     /*<<lib/core.ml:464:13>>*/ clower = offset(32, cupper),
     /*<<lib/core.ml:466:2>>*/ calpha =
      fold_right(cadd, _fe_, union(clower, cupper)),
     /*<<lib/core.ml:468:13>>*/ cdigit = cseq(48, 57),
     /*<<lib/core.ml:469:13>>*/ calnum = union(calpha, cdigit),
     /*<<lib/core.ml:470:12>>*/ cword = cadd(95, calnum);
   function colorize(c, regexp){
     /*<<lib/core.ml:473:2>>*/  /*<<lib/core.ml:473:12>>*/ var lnl = [0, 0];
    function colorize(regexp){
      /*<<lib/core.ml:475:4>>*/ var regexp$0 = regexp;
      /*<<lib/core.ml:475:4>>*/ for(;;){
      if(typeof regexp$0 === "number")
       switch(regexp$0){
         case 7:
          lnl[1] = 1; return 0;
         case 0:
         case 1:
           /*<<lib/core.ml:474:2>>*/ return split$0(csingle(10), c);
         case 2:
         case 3:
         case 4:
           /*<<lib/core.ml:474:2>>*/ return split$0(cword, c);
         default:  /*<<lib/core.ml:484:35>>*/ return 0;
       }
      switch(regexp$0[0]){
        case 0:
         var s = regexp$0[1];
          /*<<lib/core.ml:476:35>>*/ return split$0(s, c);
        case 1:
         var l = regexp$0[1];
          /*<<lib/core.ml:477:35>>*/ return iter$0(colorize, l);
        case 2:
         var l$0 = regexp$0[1];
          /*<<lib/core.ml:478:35>>*/ return iter$0(colorize, l$0);
        case 3:
         var regexp$1 = regexp$0[1], regexp$0 = regexp$1; continue;
        case 7:
        case 8:
         var regexp$2 = regexp$0[1]; break;
        case 4:
        case 5:
        case 6:
        case 14:
         var regexp$2 = regexp$0[2]; break;
        default:
          /*<<lib/core.ml:493:35>>*/ throw  /*<<lib/core.ml:493:35>>*/ caml_maybe_attach_backtrace
                ([0, Assert_failure, _ff_], 1);
      }
      var regexp$0 = regexp$2;
     }
     /*<<lib/core.ml:493:47>>*/ }
     /*<<lib/core.ml:495:2>>*/ colorize(regexp);
    return lnl[1];
    /*<<lib/core.ml:496:6>>*/ }
   function equal$7(x1, x2){
     /*<<lib/core.ml:501:2>>*/ var x1$0 = x1, x2$0 = x2;
     /*<<lib/core.ml:501:2>>*/ for(;;){
     a:
     {
      if(typeof x1$0 === "number"){
       switch(x1$0){
         case 0:
          if(typeof x2$0 !== "number" || x2$0) break a; break;
         case 1:
          if(typeof x2$0 !== "number" || 1 !== x2$0) break a; break;
         case 2:
          if(typeof x2$0 !== "number" || 2 !== x2$0) break a; break;
         case 3:
          if(typeof x2$0 !== "number" || 3 !== x2$0) break a; break;
         case 4:
          if(typeof x2$0 !== "number" || 4 !== x2$0) break a; break;
         case 5:
          if(typeof x2$0 !== "number" || 5 !== x2$0) break a; break;
         case 6:
          if(typeof x2$0 !== "number" || 6 !== x2$0) break a; break;
         case 7:
          if(typeof x2$0 !== "number" || 7 !== x2$0) break a; break;
         case 8:
          if(typeof x2$0 !== "number" || 8 !== x2$0) break a; break;
         default: if(typeof x2$0 !== "number" || 9 > x2$0) break a;
       }
        /*<<lib/core.ml:520:4>>*/ return 1;
      }
      switch(x1$0[0]){
        case 0:
         if(typeof x2$0 !== "number" && 0 === x2$0[0]){
          var s2 = x2$0[1], s1 = x1$0[1];
           /*<<lib/core.ml:503:4>>*/ return  /*<<lib/core.ml:503:4>>*/ caml_equal
                  (s1, s2);
         }
         break;
        case 1:
         if(typeof x2$0 !== "number" && 1 === x2$0[0]){
          var l2 = x2$0[1], l1 = x1$0[1];
           /*<<lib/core.ml:505:4>>*/ return eq_list(l1, l2);
         }
         break;
        case 2:
         if(typeof x2$0 !== "number" && 2 === x2$0[0]){
          var l2$0 = x2$0[1], l1$0 = x1$0[1];
           /*<<lib/core.ml:507:4>>*/ return eq_list(l1$0, l2$0);
         }
         break;
        case 3:
         if(typeof x2$0 !== "number" && 3 === x2$0[0]){
          var
           j2 = x2$0[3],
           i2 = x2$0[2],
           x2$1 = x2$0[1],
           j1 = x1$0[3],
           i1 = x1$0[2],
           x1$1 = x1$0[1],
           _sE_ = i1 === i2 ? 1 : 0;
          if(_sE_){
            /*<<lib/core.ml:509:15>>*/  /*<<lib/core.ml:509:15>>*/ var
            _sF_ =  /*<<lib/core.ml:509:15>>*/ caml_equal(j1, j2);
            /*<<lib/core.ml:509:15>>*/ if(_sF_){
            var x1$0 = x1$1, x2$0 = x2$1;
            continue;
           }
           var _sG_ = _sF_;
          }
          else
           var _sG_ = _sE_;
           /*<<lib/core.ml:509:15>>*/ return _sG_;
         }
         break;
        case 4:
         if(typeof x2$0 !== "number" && 4 === x2$0[0]){
          var
           x2$2 = x2$0[2],
           sem2 = x2$0[1],
           x1$2 = x1$0[2],
           sem1 = x1$0[1],
           _sH_ = sem1 === sem2 ? 1 : 0;
          if(! _sH_) return _sH_;
          var x1$0 = x1$2, x2$0 = x2$2;
          continue;
         }
         break;
        case 5:
         if(typeof x2$0 !== "number" && 5 === x2$0[0]){
          var
           x2$3 = x2$0[2],
           k2 = x2$0[1],
           x1$3 = x1$0[2],
           k1 = x1$0[1],
           _sI_ = k1 === k2 ? 1 : 0;
          if(! _sI_) return _sI_;
          var x1$0 = x1$3, x2$0 = x2$3;
          continue;
         }
         break;
        case 6:
         if(typeof x2$0 !== "number" && 6 === x2$0[0])
           /*<<lib/core.ml:526:4>>*/ return 0;
         break;
        case 7:
         if(typeof x2$0 !== "number" && 7 === x2$0[0]){
          var x2$4 = x2$0[1], x1$4 = x1$0[1], x1$0 = x1$4, x2$0 = x2$4;
          continue;
         }
         break;
        case 8:
         if(typeof x2$0 !== "number" && 8 === x2$0[0]){
          var x2$5 = x2$0[1], x1$5 = x1$0[1], x1$0 = x1$5, x2$0 = x2$5;
          continue;
         }
         break;
        case 9:
         if(typeof x2$0 !== "number" && 9 === x2$0[0]){
          var x2$6 = x2$0[1], x1$6 = x1$0[1], x1$0 = x1$6, x2$0 = x2$6;
          continue;
         }
         break;
        case 10:
         if(typeof x2$0 !== "number" && 10 === x2$0[0]){
          var x2$7 = x2$0[1], x1$7 = x1$0[1], x1$0 = x1$7, x2$0 = x2$7;
          continue;
         }
         break;
        case 11:
         if(typeof x2$0 !== "number" && 11 === x2$0[0]){
          var l2$1 = x2$0[1], l1$1 = x1$0[1];
           /*<<lib/core.ml:536:4>>*/ return eq_list(l1$1, l2$1);
         }
         break;
        case 12:
         if(typeof x2$0 !== "number" && 12 === x2$0[0]){
          var l2$2 = x2$0[1], l1$2 = x1$0[1];
           /*<<lib/core.ml:538:4>>*/ return eq_list(l1$2, l2$2);
         }
         break;
        case 13:
         if(typeof x2$0 !== "number" && 13 === x2$0[0]){
           /*<<lib/core.ml:540:4>>*/ var
           x2$8 = x2$0[2],
           x2$9 = x2$0[1],
           x1$8 = x1$0[2],
           x1$9 = x1$0[1],
            /*<<lib/core.ml:540:4>>*/ _sJ_ = equal$7(x1$9, x2$9);
           /*<<lib/core.ml:540:4>>*/ if(! _sJ_)
            /*<<lib/core.ml:540:4>>*/ return _sJ_;
          var x1$0 = x1$8, x2$0 = x2$8;
          continue;
         }
         break;
        default:
         if(typeof x2$0 !== "number" && 14 === x2$0[0]){
           /*<<lib/core.ml:542:4>>*/ var
           r2 = x2$0[2],
           m2 = x2$0[1],
           r1 = x1$0[2],
           m1 = x1$0[1],
            /*<<lib/core.ml:542:4>>*/ _sK_ = equal$4(m1, m2);
           /*<<lib/core.ml:542:4>>*/ if(! _sK_)
            /*<<lib/core.ml:542:4>>*/ return _sK_;
          var x1$0 = r1, x2$0 = r2;
          continue;
         }
      }
     }
      /*<<lib/core.ml:544:4>>*/ return 0;
    }
    /*<<lib/core.ml:544:9>>*/ }
   function eq_list(l1, l2){
     /*<<lib/core.ml:547:2>>*/ var l1$0 = l1, l2$0 = l2;
     /*<<lib/core.ml:547:2>>*/ for(;;){
     if(l1$0){
      if(l2$0){
        /*<<lib/core.ml:551:4>>*/ var
        r2 = l2$0[2],
        x2 = l2$0[1],
        r1 = l1$0[2],
        x1 = l1$0[1],
         /*<<lib/core.ml:551:4>>*/ _sD_ = equal$7(x1, x2);
        /*<<lib/core.ml:551:4>>*/ if(! _sD_)
         /*<<lib/core.ml:551:4>>*/ return _sD_;
       var l1$0 = r1, l2$0 = r2;
       continue;
      }
     }
     else if(! l2$0)  /*<<lib/core.ml:549:4>>*/ return 1;
      /*<<lib/core.ml:553:4>>*/ return 0;
    }
    /*<<lib/core.ml:553:9>>*/ }
   function sequence(l){
     /*<<lib/core.ml:555:15>>*/ if(l && ! l[2]){
     var x = l[1];
      /*<<lib/core.ml:556:11>>*/ return x;
    }
     /*<<lib/core.ml:557:11>>*/ return [1, l];
    /*<<lib/core.ml:557:21>>*/ }
   function merge_sequences(param){
     /*<<lib/core.ml:559:26>>*/ var param$0 = param;
     /*<<lib/core.ml:559:26>>*/ for(;;){
     if(! param$0)  /*<<lib/core.ml:561:4>>*/ return 0;
     var x = param$0[1];
     if(typeof x !== "number")
      switch(x[0]){
        case 1:
         var match = x[1];
         if(match){
           /*<<lib/core.ml:565:16>>*/ var
           r$0 = param$0[2],
           y = match[2],
           x$0 = match[1],
            /*<<lib/core.ml:565:16>>*/ r$1 = merge_sequences(r$0);
          a:
          if(r$1){
           var _sB_ = r$1[1];
           if(typeof _sB_ !== "number" && 1 === _sB_[0]){
            var match$0 = _sB_[1];
            if(! match$0) break a;
            var r$2 = r$1[2], y$0 = match$0[2], x$1 = match$0[1];
             /*<<lib/core.ml:566:39>>*/ if(! equal$7(x$0, x$1)) break a;
            var _sC_ = [0, sequence(y$0), 0];
             /*<<lib/core.ml:567:8>>*/ return [0,
                    [1, [0, x$0, [0, [2, [0, sequence(y), _sC_]], 0]]],
                    r$2];
           }
          }
           /*<<lib/core.ml:569:8>>*/ return [0, [1, [0, x$0, y]], r$1];
         }
         break;
        case 2:
         var r$3 = param$0[2], l = x[1], param$0 = symbol$0(l, r$3); continue;
      }
     var r = param$0[2];
      /*<<lib/core.ml:572:4>>*/ return [0, x, merge_sequences(r)];
    }
    /*<<lib/core.ml:572:26>>*/ }
   function enforce_kind(ids, kind$0, kind, cr){
     /*<<lib/core.ml:577:2>>*/ if
     (typeof kind$0 === "number" && 332064784 === kind$0){
     if(typeof kind === "number" && 332064784 === kind)
       /*<<lib/core.ml:578:22>>*/ return cr;
      /*<<lib/core.ml:579:38>>*/ return seq$0(ids, kind, cr, eps(ids));
    }
     /*<<lib/core.ml:580:24>>*/ return cr;
    /*<<lib/core.ml:580:26>>*/ }
   function translate
   (ids, kind, ign_group, ign_case, greedy, pos, names, cache, c, param){
    var ign_group$0 = ign_group, greedy$0 = greedy, param$0 = param;
    for(;;){
     if(typeof param$0 === "number")
      switch(param$0){
        case 0:
          /*<<lib/core.ml:628:4>>*/ return [0,
                 after(ids, symbol$3(inexistant, newline)),
                 kind];
        case 1:
          /*<<lib/core.ml:630:4>>*/ return [0,
                 before(ids, symbol$3(inexistant, newline)),
                 kind];
        case 2:
          /*<<lib/core.ml:634:7>>*/  /*<<lib/core.ml:634:7>>*/ var
          _st_ = before(ids, letter);
          /*<<lib/core.ml:632:4>>*/ return [0,
                 seq$0
                  (ids,
                   332064784,
                   after(ids, symbol$3(inexistant, not_letter)),
                   _st_),
                 kind];
        case 3:
          /*<<lib/core.ml:639:7>>*/  /*<<lib/core.ml:639:7>>*/ var
          _su_ = before(ids, symbol$3(inexistant, not_letter));
          /*<<lib/core.ml:637:4>>*/ return [0,
                 seq$0(ids, 332064784, after(ids, letter), _su_),
                 kind];
        case 4:
          /*<<lib/core.ml:647:18>>*/ var
           /*<<lib/core.ml:647:18>>*/ _sv_ =
            before(ids, symbol$3(inexistant, not_letter)),
          _sw_ =
            [0,
             seq$0
              (ids,
               332064784,
               after(ids, symbol$3(inexistant, not_letter)),
               _sv_),
             0],
           /*<<lib/core.ml:644:18>>*/ _sx_ = before(ids, letter);
          /*<<lib/core.ml:642:4>>*/ return [0,
                 alt
                  (ids,
                   [0, seq$0(ids, 332064784, after(ids, letter), _sx_), _sw_]),
                 kind];
        case 5:
          /*<<lib/core.ml:650:4>>*/ return [0, after(ids, inexistant), kind];
        case 6:
          /*<<lib/core.ml:652:4>>*/ return [0, before(ids, inexistant), kind];
        case 7:
          /*<<lib/core.ml:654:4>>*/ return [0,
                 before(ids, symbol$3(inexistant, lastnewline)),
                 kind];
        case 8:
          /*<<lib/core.ml:656:4>>*/ return [0,
                 after(ids, search_boundary),
                 kind];
        default:
          /*<<lib/core.ml:658:4>>*/ return [0,
                 before(ids, search_boundary),
                 kind];
      }
     switch(param$0[0]){
       case 0:
        var s = param$0[1];
         /*<<lib/core.ml:585:4>>*/ return [0,
                cst(ids, trans_set(cache, c, s)),
                kind];
       case 1:
        var l = param$0[1];
         /*<<lib/core.ml:587:4>>*/ return [0,
                trans_seq
                 (ids,
                  kind,
                  ign_group$0,
                  ign_case,
                  greedy$0,
                  pos,
                  names,
                  cache,
                  c,
                  l),
                kind];
       case 2:
         /*<<lib/core.ml:589:16>>*/ var
         l$0 = param$0[1],
          /*<<lib/core.ml:589:16>>*/ merged_sequences = merge_sequences(l$0);
        if(merged_sequences && ! merged_sequences[2]){
          /*<<lib/core.ml:592:10>>*/ var
          r = merged_sequences[1],
           /*<<lib/core.ml:592:10>>*/ match =
            translate
             (ids,
              kind,
              ign_group$0,
              ign_case,
              greedy$0,
              pos,
              names,
              cache,
              c,
              r),
          kind$0 = match[2],
          cr = match[1];
          /*<<lib/core.ml:593:8>>*/ return [0,
                 enforce_kind(ids, kind, kind$0, cr),
                 kind];
        }
         /*<<lib/core.ml:595:8>>*/ return [0,
                alt
                 (ids,
                  map$0
                   (function(r){
                      /*<<lib/core.ml:598:17>>*/ var
                       /*<<lib/core.ml:599:19>>*/ match =
                        translate
                         (ids,
                          kind,
                          ign_group$0,
                          ign_case,
                          greedy$0,
                          pos,
                          names,
                          cache,
                          c,
                          r),
                      kind$0 = match[2],
                      cr = match[1];
                      /*<<lib/core.ml:601:17>>*/ return enforce_kind
                             (ids, kind, kind$0, cr);
                     /*<<lib/core.ml:601:47>>*/ },
                    merged_sequences)),
                kind];
       case 3:
         /*<<lib/core.ml:607:6>>*/ var
         j = param$0[3],
         i = param$0[2],
         r$0 = param$0[1],
          /*<<lib/core.ml:607:6>>*/ match$0 =
           translate
            (ids,
             kind,
             ign_group$0,
             ign_case,
             greedy$0,
             pos,
             names,
             cache,
             c,
             r$0),
         kind$1 = match$0[2],
         cr$0 = match$0[1];
         /*<<lib/core.ml:608:4>>*/ if(j)
          /*<<lib/core.ml:613:8>>*/ var
          j$0 = j[1],
           /*<<lib/core.ml:613:8>>*/ f =
            620821490 <= greedy$0
             ? function
              (rem){
                /*<<lib/core.ml:621:14>>*/ var
                _sz_ = [0, seq$0(ids, kind$1, rename(ids, cr$0), rem), 0];
                /*<<lib/core.ml:622:16>>*/ return alt
                       (ids, [0, eps(ids), _sz_]);
               /*<<lib/core.ml:622:66>>*/ }
             : function
              (rem){
                /*<<lib/core.ml:617:14>>*/ var _sA_ = [0, eps(ids), 0];
                /*<<lib/core.ml:618:16>>*/ return alt
                       (ids, [0, seq$0(ids, kind$1, rename(ids, cr$0), rem), _sA_]);
               /*<<lib/core.ml:618:66>>*/ },
          rem = iter$7(j$0 - i | 0, f, eps(ids));
        else
         var rem = rep(ids, greedy$0, kind$1, cr$0);
         /*<<lib/core.ml:626:4>>*/ return [0,
                iter$7
                 (i,
                  function(rem){
                    /*<<lib/core.ml:626:24>>*/ return seq$0
                           (ids, kind$1, rename(ids, cr$0), rem);
                   /*<<lib/core.ml:626:61>>*/ },
                  rem),
                kind];
       case 4:
         /*<<lib/core.ml:661:6>>*/ var
         r$1 = param$0[2],
         kind$2 = param$0[1],
          /*<<lib/core.ml:661:6>>*/ match$1 =
           translate
            (ids,
             kind$2,
             ign_group$0,
             ign_case,
             greedy$0,
             pos,
             names,
             cache,
             c,
             r$1),
         kind$3 = match$1[2],
         cr$1 = match$1[1];
         /*<<lib/core.ml:662:4>>*/ return [0,
                enforce_kind(ids, kind$2, kind$3, cr$1),
                kind$2];
       case 5:
        var
         r$2 = param$0[2],
         greedy$1 = param$0[1],
         greedy$0 = greedy$1,
         param$0 = r$2;
        break;
       case 6:
        var r$3 = param$0[2], n = param$0[1];
         /*<<lib/core.ml:667:4>>*/ if(! ign_group$0){
         var p = pos[1];
          /*<<lib/core.ml:671:6>>*/ if(n){
          var name = n[1];
          names[1] = [0, [0, name, p / 2 | 0], names[1]];
         }
         pos[1] = pos[1] + 2 | 0;
          /*<<lib/core.ml:678:8>>*/ var
           /*<<lib/core.ml:678:8>>*/ match$2 =
            translate
             (ids,
              kind,
              ign_group$0,
              ign_case,
              greedy$0,
              pos,
              names,
              cache,
              c,
              r$3),
          kind$4 = match$2[2],
          cr$2 = match$2[1],
           /*<<lib/core.ml:679:39>>*/ _sy_ =
            seq$0(ids, 332064784, cr$2, mark(ids, p + 1 | 0));
          /*<<lib/core.ml:679:6>>*/ return [0,
                 seq$0(ids, 332064784, mark(ids, p), _sy_),
                 kind$4];
        }
        var param$0 = r$3;
        break;
       case 7:
        var r$4 = param$0[1], ign_group$0 = 1, param$0 = r$4; break;
       case 8:
         /*<<lib/core.ml:685:4>>*/ var
         r$5 = param$0[1],
          /*<<lib/core.ml:685:4>>*/ b = pos[1],
          /*<<lib/core.ml:687:6>>*/ match$3 =
           translate
            (ids,
             kind,
             ign_group$0,
             ign_case,
             greedy$0,
             pos,
             names,
             cache,
             c,
             r$5),
         kind$5 = match$3[2],
         cr$3 = match$3[1],
          /*<<lib/core.ml:689:4>>*/ e = pos[1] - 1 | 0;
        return e < b
                ? [0, cr$3, kind$5]
                : [0, seq$0(ids, 332064784, erase(ids, b, e), cr$3), kind$5];
       case 14:
         /*<<lib/core.ml:698:6>>*/ var
         r$6 = param$0[2],
         i$0 = param$0[1],
          /*<<lib/core.ml:698:6>>*/ match$4 =
           translate
            (ids,
             kind,
             ign_group$0,
             ign_case,
             greedy$0,
             pos,
             names,
             cache,
             c,
             r$6),
         kind$6 = match$4[2],
         cr$4 = match$4[1];
         /*<<lib/core.ml:699:4>>*/ return [0,
                seq$0(ids, 332064784, pmark(ids, i$0), cr$4),
                kind$6];
       default:
         /*<<lib/core.ml:695:4>>*/ throw  /*<<lib/core.ml:695:4>>*/ caml_maybe_attach_backtrace
               ([0, Assert_failure, _fg_], 1);
     }
    }
   }
   function trans_seq
   (ids, kind, ign_group, ign_case, greedy, pos, names, cache, c, param){
     /*<<?>>*/ if(! param)  /*<<lib/core.ml:703:4>>*/ return eps(ids);
    var r = param[1];
    if(param[2]){
      /*<<lib/core.ml:710:6>>*/ var
      rem = param[2],
       /*<<lib/core.ml:710:6>>*/ match =
        translate
         (ids, kind, ign_group, ign_case, greedy, pos, names, cache, c, r),
      kind$0 = match[2],
      cr = match[1],
       /*<<lib/core.ml:712:6>>*/ cr$0 =
        trans_seq
         (ids, kind, ign_group, ign_case, greedy, pos, names, cache, c, rem);
      /*<<lib/core.ml:713:7>>*/ return is_eps(cr$0)
             ? cr
             : is_eps(cr) ? cr$0 : seq$0(ids, kind$0, cr, cr$0);
    }
     /*<<lib/core.ml:706:6>>*/ var
      /*<<lib/core.ml:706:6>>*/ match$0 =
       translate
        (ids, kind, ign_group, ign_case, greedy, pos, names, cache, c, r),
     kind$1 = match$0[2],
     cr$1 = match$0[1];
     /*<<lib/core.ml:707:4>>*/ return enforce_kind(ids, kind, kind$1, cr$1);
   }
   function case_insens(s){
     /*<<lib/core.ml:723:2>>*/  /*<<lib/core.ml:724:18>>*/ var
     _ss_ = offset(-32, inter(s, clower));
     /*<<lib/core.ml:723:15>>*/ return union
            (s, union(offset(32, inter(s, cupper)), _ss_));
    /*<<lib/core.ml:724:60>>*/ }
   function as_set(param){
     /*<<lib/core.ml:726:13>>*/ if
     (typeof param !== "number" && 0 === param[0]){
     var s = param[1];
      /*<<lib/core.ml:727:13>>*/ return s;
    }
     /*<<lib/core.ml:728:13>>*/ throw  /*<<lib/core.ml:728:13>>*/ caml_maybe_attach_backtrace
           ([0, Assert_failure, _fh_], 1);
    /*<<lib/core.ml:728:25>>*/ }
   function handle_case(ign_case, r){
    var ign_case$0 = ign_case, r$0 = r;
    for(;;){
     if(typeof r$0 === "number")  /*<<lib/core.ml:748:4>>*/ return r$0;
     switch(r$0[0]){
       case 0:
         /*<<lib/core.ml:735:4>>*/ var
         s = r$0[1],
          /*<<lib/core.ml:735:4>>*/ _so_ = ign_case$0 ? case_insens(s) : s;
         /*<<lib/core.ml:735:4>>*/ return [0, _so_];
       case 1:
        var l = r$0[1];
         /*<<lib/core.ml:737:4>>*/ return [1,
                map$0
                 (function(_sr_){
                    /*<<?>>*/ return handle_case(ign_case$0, _sr_);
                  },
                  l)];
       case 2:
         /*<<lib/core.ml:739:13>>*/ var
         l$0 = r$0[1],
          /*<<lib/core.ml:739:13>>*/ l$1 =
           map$0
            (function(_sq_){ /*<<?>>*/ return handle_case(ign_case$0, _sq_);},
             l$0);
         /*<<lib/core.ml:740:7>>*/ return is_charset([2, l$1])
                ? [0,
                  fold_left
                   (function(s, r){
                      /*<<lib/core.ml:741:38>>*/ return union(s, as_set(r));
                     /*<<lib/core.ml:741:61>>*/ },
                    empty$1,
                    l$1)]
                : [2, l$1];
       case 3:
        var j = r$0[3], i = r$0[2], r$1 = r$0[1];
         /*<<lib/core.ml:745:4>>*/ return [3,
                handle_case(ign_case$0, r$1),
                i,
                j];
       case 4:
         /*<<lib/core.ml:750:13>>*/ var
         r$2 = r$0[2],
         k = r$0[1],
          /*<<lib/core.ml:750:13>>*/ r$3 = handle_case(ign_case$0, r$2);
         /*<<lib/core.ml:751:7>>*/ return is_charset(r$3) ? r$3 : [4, k, r$3];
       case 5:
         /*<<lib/core.ml:753:13>>*/ var
         r$4 = r$0[2],
         k$0 = r$0[1],
          /*<<lib/core.ml:753:13>>*/ r$5 = handle_case(ign_case$0, r$4);
         /*<<lib/core.ml:754:7>>*/ return is_charset(r$5)
                ? r$5
                : [5, k$0, r$5];
       case 6:
        var r$6 = r$0[2], n = r$0[1];
         /*<<lib/core.ml:756:4>>*/ return [6, n, handle_case(ign_case$0, r$6)];
       case 7:
         /*<<lib/core.ml:758:13>>*/ var
         r$7 = r$0[1],
          /*<<lib/core.ml:758:13>>*/ r$8 = handle_case(ign_case$0, r$7);
         /*<<lib/core.ml:759:7>>*/ return is_charset(r$8) ? r$8 : [7, r$8];
       case 8:
         /*<<lib/core.ml:761:13>>*/ var
         r$9 = r$0[1],
          /*<<lib/core.ml:761:13>>*/ r$10 = handle_case(ign_case$0, r$9);
         /*<<lib/core.ml:762:7>>*/ return is_charset(r$10) ? r$10 : [8, r$10];
       case 9:
        var r$11 = r$0[1], ign_case$0 = 0, r$0 = r$11; break;
       case 10:
        var r$12 = r$0[1], ign_case$0 = 1, r$0 = r$12; break;
       case 11:
         /*<<lib/core.ml:768:13>>*/ var
         l$2 = r$0[1],
          /*<<lib/core.ml:768:13>>*/ l$3 =
           map$0
            (function(r){
               /*<<lib/core.ml:768:32>>*/ return handle_case(ign_case$0, r);
              /*<<lib/core.ml:768:54>>*/ },
             l$2);
         /*<<lib/core.ml:769:4>>*/ return [0,
                fold_left
                 (function(s, r){
                    /*<<lib/core.ml:769:36>>*/ return inter(s, as_set(r));
                   /*<<lib/core.ml:769:59>>*/ },
                  cany,
                  l$3)];
       case 12:
         /*<<lib/core.ml:771:13>>*/ var
         l$4 = r$0[1],
          /*<<lib/core.ml:771:13>>*/ l$5 =
           map$0
            (function(r){
               /*<<lib/core.ml:771:32>>*/ return handle_case(ign_case$0, r);
              /*<<lib/core.ml:771:54>>*/ },
             l$4);
         /*<<lib/core.ml:772:4>>*/ return [0,
                diff
                 (cany,
                  fold_left
                   (function(s, r){
                      /*<<lib/core.ml:773:39>>*/ return union(s, as_set(r));
                     /*<<lib/core.ml:773:62>>*/ },
                    empty$1,
                    l$5))];
       case 13:
         /*<<lib/core.ml:777:11>>*/ var
         r$13 = r$0[2],
         r$14 = r$0[1],
          /*<<lib/core.ml:777:11>>*/ _sp_ =
           diff(cany, as_set(handle_case(ign_case$0, r$13)));
         /*<<lib/core.ml:776:4>>*/ return [0,
                inter(as_set(handle_case(ign_case$0, r$14)), _sp_)];
       default:
        var r$15 = r$0[2], i$0 = r$0[1];
         /*<<lib/core.ml:778:19>>*/ return [14,
                i$0,
                handle_case(ign_case$0, r$15)];
     }
    }
   }
   function compile_1(regexp){
     /*<<lib/core.ml:783:2>>*/ var
      /*<<lib/core.ml:783:15>>*/ regexp$0 = handle_case(0, regexp),
      /*<<lib/core.ml:784:10>>*/ c = make$3(0),
      /*<<lib/core.ml:785:17>>*/ need_lnl = colorize(c, regexp$0),
      /*<<lib/core.ml:786:37>>*/ match = flatten$0(c),
     ncolor = match[3],
     color_repr = match[2],
     colors = match[1],
      /*<<lib/core.ml:787:2>>*/ lnl = need_lnl ? ncolor : -1,
      /*<<lib/core.ml:788:2>>*/ ncolor$0 = need_lnl ? ncolor + 1 | 0 : ncolor,
      /*<<lib/core.ml:789:12>>*/ ids = create_ids(0),
      /*<<lib/core.ml:790:12>>*/ pos = [0, 0],
      /*<<lib/core.ml:791:14>>*/ names = [0, 0],
      /*<<lib/core.ml:793:4>>*/ match$0 =
       translate
        (ids,
         332064784,
         0,
         0,
         -904640576,
         pos,
         names,
         [0, CSetMap[1]],
         colors,
         regexp$0),
     kind = match$0[2],
     r = match$0[1],
      /*<<lib/core.ml:795:10>>*/ r$0 = enforce_kind(ids, 332064784, kind, r),
     _sn_ = pos[1] / 2 | 0;
    return mk_re(r$0, colors, color_repr, ncolor$0, lnl, rev(names[1]), _sn_);
    /*<<lib/core.ml:797:106>>*/ }
   function anchored(param){
     /*<<lib/core.ml:801:19>>*/ var param$0 = param;
     /*<<lib/core.ml:801:19>>*/ for(;;){
     a:
     {
      if(typeof param$0 !== "number"){
       switch(param$0[0]){
         case 1:
          var l = param$0[1];
           /*<<lib/core.ml:803:4>>*/ return exists(anchored, l);
         case 2:
          var l$0 = param$0[1];
           /*<<lib/core.ml:805:4>>*/ return for_all(anchored, l$0);
         case 3:
          var i = param$0[2], r = param$0[1], _sm_ = 0 < i ? 1 : 0;
          if(! _sm_) return _sm_;
          var param$0 = r;
          continue;
         case 4:
         case 5:
         case 6:
         case 14:
          var r$0 = param$0[2]; break;
         case 7:
         case 8:
         case 9:
         case 10:
          var r$0 = param$0[1]; break;
         default: break a;
       }
       var param$0 = r$0;
       continue;
      }
      switch(param$0){case 5:case 8:  /*<<lib/core.ml:813:4>>*/ return 1;
      }
     }
      /*<<lib/core.ml:811:4>>*/ return 0;
    }
    /*<<lib/core.ml:816:14>>*/ }
   function str(s){
     /*<<lib/core.ml:823:2>>*/ var
      /*<<lib/core.ml:823:10>>*/ l = [0, 0],
      /*<<lib/core.ml:824:2>>*/ _sj_ =
        /*<<lib/core.ml:824:2>>*/ caml_ml_string_length(s) - 1 | 0;
    if(_sj_ >= 0){
     var i = _sj_;
     for(;;){
      var _sk_ = l[1];
      l[1] =
       [0,
        [0, csingle( /*<<lib/core.ml:825:27>>*/ caml_string_get(s, i))],
        _sk_];
       /*<<lib/core.ml:824:2>>*/  /*<<lib/core.ml:824:2>>*/ var
       _sl_ = i - 1 | 0;
      if(0 === i) break;
      var i = _sl_;
     }
    }
     /*<<lib/core.ml:827:2>>*/ return [1, l[1]];
    /*<<lib/core.ml:827:13>>*/ }
   function char$0(c){
     /*<<lib/core.ml:828:13>>*/ return;
    /*<<lib/core.ml:828:33>>*/ }
   function alt$0(l){
     /*<<lib/core.ml:830:10>>*/ if(l && ! l[2]){
     var r = l[1];
      /*<<lib/core.ml:831:11>>*/ return r;
    }
     /*<<lib/core.ml:832:11>>*/ return [2, l];
    /*<<lib/core.ml:832:24>>*/ }
   function seq$1(l){
     /*<<lib/core.ml:833:10>>*/ if(l && ! l[2]){
     var r = l[1];
      /*<<lib/core.ml:834:11>>*/ return r;
    }
     /*<<lib/core.ml:835:11>>*/ return [1, l];
    /*<<lib/core.ml:835:21>>*/ }
   function repn(r, i, j){
     /*<<lib/core.ml:840:2>>*/ if(i < 0)
      /*<<lib/core.ml:840:16>>*/ invalid_arg(_fi_);
    a:
    if(j){
     var j$0 = j[1];
     if(j$0 < i){ /*<<lib/core.ml:842:27>>*/ invalid_arg(_fj_); break a;}
    }
     /*<<lib/core.ml:845:2>>*/ return [3, r, i, j];
    /*<<lib/core.ml:845:18>>*/ }
   function rep$0(r){
     /*<<lib/core.ml:846:12>>*/ return repn(r, 0, 0);
    /*<<lib/core.ml:846:25>>*/ }
   var bos = 5;
   function shortest(r){
     /*<<lib/core.ml:862:17>>*/ return [4, -1034406550, r];
    /*<<lib/core.ml:862:35>>*/ }
   function group(name, r){
     /*<<lib/core.ml:866:20>>*/ return [6, name, r];
    /*<<lib/core.ml:866:35>>*/ }
   function set$2(str){
     /*<<lib/core.ml:872:2>>*/ var
      /*<<lib/core.ml:872:10>>*/ s = [0, empty$1],
     _sg_ = caml_ml_string_length(str) - 1 | 0,
      /*<<lib/core.ml:872:10>>*/ _sf_ = 0;
    if(_sg_ >= 0){
     var i = _sf_;
     for(;;){
      var _sh_ = s[1];
      s[1] =
       union
        (csingle( /*<<lib/core.ml:874:34>>*/ caml_string_get(str, i)), _sh_);
       /*<<lib/core.ml:873:2>>*/  /*<<lib/core.ml:873:2>>*/ var
       _si_ = i + 1 | 0;
      if(_sg_ === i) break;
      var i = _si_;
     }
    }
     /*<<lib/core.ml:876:2>>*/ return;
    /*<<lib/core.ml:876:8>>*/ }
   function rg(c$0, c){
     /*<<lib/core.ml:878:14>>*/ cseq(c$0, c);
     /*<<lib/core.ml:878:14>>*/ return;
    /*<<lib/core.ml:878:29>>*/ }
    /*<<lib/core.ml:901:10>>*/  /*<<lib/core.ml:901:10>>*/ var
    any$0 = [0, cany];
    /*<<lib/core.ml:902:16>>*/ diff(cany, csingle(10));
    /*<<lib/core.ml:904:60>>*/ rg(248, 255);
    /*<<lib/core.ml:904:42>>*/ rg(223, 246);
    /*<<lib/core.ml:904:29>>*/ char$0(181);
    /*<<lib/core.ml:904:17>>*/ rg(97, 122);
    /*<<lib/core.ml:905:47>>*/ rg(216, 222);
    /*<<lib/core.ml:905:29>>*/ rg(192, 214);
    /*<<lib/core.ml:905:17>>*/ rg(65, 90);
    /*<<lib/core.ml:906:44>>*/ char$0(186);
    /*<<lib/core.ml:906:31>>*/ char$0(170);
    /*<<lib/core.ml:907:12>>*/ rg(48, 57);
    /*<<lib/core.ml:909:24>>*/ char$0(95);
    /*<<lib/core.ml:910:12>>*/ rg(0, 127);
    /*<<lib/core.ml:911:12>>*/ set$2(_fk_);
    /*<<lib/core.ml:912:35>>*/ rg(127, 159);
    /*<<lib/core.ml:912:17>>*/ rg(0, 31);
    /*<<lib/core.ml:913:35>>*/ rg(160, 255);
    /*<<lib/core.ml:913:17>>*/ rg(33, 126);
    /*<<lib/core.ml:914:35>>*/ rg(160, 255);
    /*<<lib/core.ml:914:17>>*/ rg(32, 126);
    /*<<lib/core.ml:918:56>>*/ char$0(247);
    /*<<lib/core.ml:918:43>>*/ char$0(215);
    /*<<lib/core.ml:918:25>>*/ rg(187, 191);
    /*<<lib/core.ml:918:7>>*/ rg(182, 185);
    /*<<lib/core.ml:917:43>>*/ rg(171, 180);
    /*<<lib/core.ml:917:25>>*/ rg(160, 169);
    /*<<lib/core.ml:917:7>>*/ rg(123, 126);
    /*<<lib/core.ml:916:43>>*/ rg(91, 96);
    /*<<lib/core.ml:916:25>>*/ rg(58, 64);
    /*<<lib/core.ml:916:7>>*/ rg(33, 47);
    /*<<lib/core.ml:919:27>>*/ rg(9, 13);
    /*<<lib/core.ml:919:17>>*/ char$0(32);
    /*<<lib/core.ml:920:37>>*/ rg(65, 70);
    /*<<lib/core.ml:920:25>>*/ rg(97, 102);
   function compile(r){
     /*<<lib/core.ml:928:2>>*/ if(anchored(r))
     var _sd_ = group(0, r);
    else
     var
      _se_ = [0, group(0, r), 0],
      _sd_ = seq$1([0, shortest(rep$0(any$0)), _se_]);
     /*<<lib/core.ml:932:6>>*/ return compile_1(_sd_);
    /*<<lib/core.ml:933:3>>*/ }
   function replace(opt, len, _r$_, re, f, s){
     /*<<lib/core.ml:1115:2>>*/ if(opt)
     var sth = opt[1], pos = sth;
    else
     var pos = 0;
     /*<<lib/core.ml:1115:2>>*/ if(_r$_)
     var sth$0 = _r$_[1], all = sth$0;
    else
     var all = 1;
    if(pos < 0)  /*<<lib/core.ml:1115:18>>*/ invalid_arg(_fl_);
    if(len){
     var
      l = len[1],
      _sa_ = l < 0 ? 1 : 0,
      _sb_ = _sa_ || (caml_ml_string_length(s) < (pos + l | 0) ? 1 : 0);
     if(_sb_)  /*<<lib/core.ml:1119:45>>*/ invalid_arg(_fm_);
     var limit = pos + l | 0;
    }
    else
     var limit = caml_ml_string_length(s);
     /*<<lib/core.ml:1123:12>>*/  /*<<lib/core.ml:1123:12>>*/ var
     buf = create$1( /*<<lib/core.ml:1123:2>>*/ caml_ml_string_length(s));
    function iter(pos){
      /*<<lib/core.ml:1126:4>>*/ var pos$0 = pos;
      /*<<lib/core.ml:1126:4>>*/ for(;;){
      var _sc_ = pos$0 < limit ? 1 : 0;
      if(! _sc_) return _sc_;
       /*<<lib/core.ml:1128:12>>*/  /*<<lib/core.ml:1128:12>>*/ var
       match = match_str(1, 0, re, s, pos$0, limit - pos$0 | 0);
      if(typeof match === "number")
       return add_substring(buf, s, pos$0, limit - pos$0 | 0);
      if(0 !== match[0])  /*<<lib/core.ml:1147:21>>*/ return;
       /*<<lib/core.ml:1130:21>>*/ var
       substr = match[1],
        /*<<lib/core.ml:1130:21>>*/ match$0 = get_ofs(substr, 0),
       p2 = match$0[2],
       p1 = match$0[1];
       /*<<lib/core.ml:1132:8>>*/ add_substring(buf, s, pos$0, p1 - pos$0 | 0);
       /*<<lib/core.ml:1134:24>>*/  /*<<lib/core.ml:1134:24>>*/ var
       replacing =  /*<<lib/core.ml:1134:24>>*/ caml_call1(f, substr);
       /*<<lib/core.ml:1135:8>>*/ add_string(buf, replacing);
      if(! all) return add_substring(buf, s, p2, limit - p2 | 0);
      if(p1 === p2){
       if(p2 < limit)
         /*<<lib/core.ml:1141:33>>*/ add_char
         (buf,  /*<<lib/core.ml:1141:53>>*/ caml_string_get(s, p2));
       var pos$1 = p2 + 1 | 0;
      }
      else
       var pos$1 = p2;
      var pos$0 = pos$1;
     }
     /*<<lib/core.ml:1149:50>>*/ }
     /*<<lib/core.ml:1151:2>>*/ iter(pos);
     /*<<lib/core.ml:1151:2>>*/ return contents(buf);
    /*<<lib/core.ml:1152:21>>*/ }
   function replace_string(pos, len, all, re, by, s){
     /*<<lib/core.ml:1155:2>>*/ return replace
            (pos,
             len,
             all,
             re,
             function(param){
               /*<<lib/core.ml:1155:43>>*/ return by;
              /*<<lib/core.ml:1155:45>>*/ },
             s);
    /*<<lib/core.ml:1155:46>>*/ }
   function fmap(f){
     /*<<lib/xml_wrap.ml:45:31>>*/ return f;
    /*<<lib/xml_wrap.ml:45:32>>*/ }
   function nil(param){
     /*<<lib/xml_wrap.ml:47:15>>*/ return 0;
    /*<<lib/xml_wrap.ml:47:17>>*/ }
   function singleton$0(x){
     /*<<lib/xml_wrap.ml:48:20>>*/ return [0, x, 0];
    /*<<lib/xml_wrap.ml:48:23>>*/ }
   function cons$0(x, xs){
     /*<<lib/xml_wrap.ml:49:18>>*/ return [0, x, xs];
    /*<<lib/xml_wrap.ml:49:23>>*/ }
   function append(x, y){
     /*<<lib/xml_wrap.ml:50:18>>*/ return symbol$0(x, y);
    /*<<lib/xml_wrap.ml:50:21>>*/ }
   var
    _fn_ =
      [0,
       function(_r__){ /*<<?>>*/ return _r__;},
       fmap,
       nil,
       singleton$0,
       cons$0,
       append,
       map$0];
   function is_control(c){
     /*<<lib/xml_print.ml:22:2>>*/ var _r4_ = c <= 8 ? 1 : 0;
    if(_r4_)
     var _r5_ = _r4_;
    else{
     var _r6_ = 11 === c ? 1 : 0;
     if(_r6_)
      var _r5_ = _r6_;
     else{
      var _r7_ = 12 === c ? 1 : 0;
      if(_r7_)
       var _r5_ = _r7_;
      else
       var
        _r8_ = 14 <= c ? 1 : 0,
        _r9_ = _r8_ ? c <= 31 ? 1 : 0 : _r8_,
        _r5_ = _r9_ || (127 === c ? 1 : 0);
     }
    }
    return _r5_;
    /*<<lib/xml_print.ml:23:71>>*/ }
   function add_unsafe_char(b, c){
     /*<<?>>*/ if(34 === c)
      /*<<lib/xml_print.ml:28:11>>*/ return add_string(b, _fo_);
    if(60 <= c){
     if(63 > c)
      switch(c - 60 | 0){
        case 0:
          /*<<lib/xml_print.ml:26:11>>*/ return add_string(b, _fr_);
        case 1: break;
        default:  /*<<lib/xml_print.ml:27:11>>*/ return add_string(b, _fs_);
      }
    }
    else if(38 === c)
      /*<<lib/xml_print.ml:29:11>>*/ return add_string(b, _ft_);
     /*<<lib/xml_print.ml:30:11>>*/ return is_control(c)
            ? (add_string
               (b, _fp_),
              add_string(b, string_of_int(c)),
              add_string(b, _fq_))
            : add_char(b, c);
   }
   function encode_unsafe_char(s){
     /*<<lib/xml_print.ml:37:2>>*/  /*<<lib/xml_print.ml:37:10>>*/ var
     b = create$1(caml_ml_string_length(s));
     /*<<lib/xml_print.ml:38:2>>*/ iter$1
     (function(_r3_){ /*<<?>>*/ return add_unsafe_char(b, _r3_);}, s);
     /*<<lib/xml_print.ml:38:2>>*/ return contents(b);
    /*<<lib/xml_print.ml:39:19>>*/ }
    /*<<lib/xml_print.ml:69:25>>*/ var
    _fv_ = [0, str(_fu_), 0],
    _fx_ = [0, str(_fw_), _fv_],
    _fz_ = [0, seq$1([0, bos, [0, str(_fy_), 0]]), _fx_],
     /*<<lib/xml_print.ml:69:25>>*/ re_end_comment =
      compile(alt$0([0, seq$1([0, bos, [0, str(_fA_), 0]]), _fz_]));
   function escape_comment(s){
     /*<<lib/xml_print.ml:76:2>>*/ function f(g){
      /*<<lib/xml_print.ml:76:12>>*/  /*<<lib/xml_print.ml:76:18>>*/ var
      s = get$2(g, 0);
     return caml_string_notequal(s, cst$10)
             ? caml_string_notequal
                (s, cst$8)
               ? caml_string_notequal
                  (s, cst$11)
                 ? caml_string_notequal(s, cst$6) ? s : _fB_
                 : _fC_
               : _fD_
             : _fE_;
     /*<<lib/xml_print.ml:81:12>>*/ }
     /*<<lib/xml_print.ml:83:2>>*/ return replace
            (0, 0, _fF_, re_end_comment, f, s);
    /*<<lib/xml_print.ml:83:42>>*/ }
   function pp_number(fmt, v){
     /*<<lib/xml_print.ml:87:2>>*/ if(v == infinity$0)
      /*<<lib/xml_print.ml:88:7>>*/ return pp_print_string(fmt, _fG_);
    if(v == neg_infinity)
      /*<<lib/xml_print.ml:90:7>>*/ return pp_print_string(fmt, _fH_);
    if(v != v)
      /*<<lib/xml_print.ml:92:7>>*/ return pp_print_string(fmt, _fI_);
    var vint = v | 0;
    if(vint == v){
     var
      div =
        function(n, i){
          /*<<lib/xml_print.ml:99:8>>*/ var n$0 = n, i$0 = i;
          /*<<lib/xml_print.ml:99:8>>*/ for(;;){
          if(0 !== n$0 && 0 === (n$0 % 10 | 0)){
            /*<<lib/xml_print.ml:100:13>>*/ var
             /*<<lib/xml_print.ml:100:13>>*/ i$1 = i$0 + 1 | 0,
            n$1 = n$0 / 10 | 0,
            n$0 = n$1,
            i$0 = i$1;
           continue;
          }
          return 2 < i$0
                  ?  /*<<lib/xml_print.ml:103:13>>*/ caml_call2
                    (fprintf$0(fmt)(_fJ_), n$0, i$0)
                  : pp_print_int(fmt, vint);
         }
         /*<<lib/xml_print.ml:104:41>>*/ };
      /*<<lib/xml_print.ml:105:6>>*/ return div(vint, 0);
    }
     /*<<lib/xml_print.ml:107:15>>*/  /*<<lib/xml_print.ml:107:15>>*/ var
     s1 =  /*<<lib/xml_print.ml:107:15>>*/ caml_call1(sprintf(_fK_), v);
    if(v ==  /*<<lib/xml_print.ml:108:13>>*/ caml_float_of_string(s1))
      /*<<lib/xml_print.ml:109:11>>*/ return pp_print_string(fmt, s1);
     /*<<lib/xml_print.ml:111:17>>*/  /*<<lib/xml_print.ml:111:17>>*/ var
     s2 =  /*<<lib/xml_print.ml:111:17>>*/ caml_call1(sprintf(_fL_), v);
    return v ==  /*<<lib/xml_print.ml:112:15>>*/ caml_float_of_string(s2)
            ? pp_print_string(fmt, s2)
            :  /*<<lib/xml_print.ml:114:14>>*/ caml_call1
              (fprintf$0(fmt)(_fM_), v);
    /*<<lib/xml_print.ml:114:42>>*/ }
   function pp_noop(fmt, param){
     /*<<lib/xml_print.ml:204:21>>*/ return 0;
    /*<<lib/xml_print.ml:204:23>>*/ }
   function Make_fmt(Xml, _rm_){
    function open_box(indent, fmt){
      /*<<lib/xml_print.ml:212:28>>*/ return indent ? pp_open_box(fmt, 0) : 0;
     /*<<lib/xml_print.ml:212:75>>*/ }
    function close_box(indent, fmt){
      /*<<lib/xml_print.ml:213:29>>*/ return indent ? pp_close_box(fmt, 0) : 0;
     /*<<lib/xml_print.ml:213:78>>*/ }
    function sp(indent, fmt){
      /*<<lib/xml_print.ml:215:4>>*/ return indent
             ? pp_print_space(fmt, 0)
             : pp_print_string(fmt, _fN_);
     /*<<lib/xml_print.ml:215:83>>*/ }
    function cut(indent, fmt){
      /*<<lib/xml_print.ml:217:4>>*/ return indent ? pp_print_cut(fmt, 0) : 0;
     /*<<lib/xml_print.ml:217:53>>*/ }
    var S = _U_([0, compare$1]), l = _rm_[1];
    if(l)
      /*<<lib/xml_print.ml:223:16>>*/ var
       /*<<lib/xml_print.ml:223:16>>*/ set =
        fold_left
         (function(s, x){
            /*<<lib/xml_print.ml:223:43>>*/ return S[2].call(null, x, s);
           /*<<lib/xml_print.ml:223:52>>*/ },
          S[1],
          l),
      is_emptytag =
        function(x){
          /*<<lib/xml_print.ml:224:15>>*/ return S[31].call(null, x, set);
         /*<<lib/xml_print.ml:224:26>>*/ };
    else
     var
      is_emptytag =
        function(param){
          /*<<lib/xml_print.ml:221:21>>*/ return 0;
         /*<<lib/xml_print.ml:221:26>>*/ };
    function pp_encode(encode, indent, fmt, s){
      /*<<lib/xml_print.ml:227:4>>*/  /*<<lib/xml_print.ml:227:12>>*/ var
      s$0 =  /*<<lib/xml_print.ml:227:12>>*/ caml_call1(encode, s);
      /*<<lib/xml_print.ml:228:4>>*/ return indent
             ?  /*<<lib/xml_print.ml:229:6>>*/ caml_call2
               (fprintf$0(fmt)(_fO_), pp_print_text, s$0)
             : pp_print_string(fmt, s$0);
     /*<<lib/xml_print.ml:231:34>>*/ }
    function pp_sep(indent, param){
      /*<<?>>*/ return param
             ? function
              (fmt, param){
                /*<<lib/xml_print.ml:235:29>>*/ return  /*<<lib/xml_print.ml:235:54>>*/ caml_call1
                       (fprintf$0(fmt)(_fP_),
                        function(_r2_){ /*<<?>>*/ return sp(indent, _r2_);});
               /*<<lib/xml_print.ml:235:65>>*/ }
             : function
              (fmt, param){
                /*<<lib/xml_print.ml:234:29>>*/ return sp(indent, fmt);
               /*<<lib/xml_print.ml:234:42>>*/ };
    }
    function pp_attrib_value(encode, indent, fmt, a){
      /*<<lib/xml_print.ml:237:44>>*/  /*<<lib/xml_print.ml:237:50>>*/ var
      match =  /*<<lib/xml_print.ml:237:50>>*/ caml_call1(Xml[26], a);
     switch(match[0]){
       case 0:
        var f = match[1];
         /*<<lib/xml_print.ml:238:18>>*/ return  /*<<lib/xml_print.ml:238:18>>*/ caml_call2
                (fprintf$0(fmt)(_fQ_), pp_number, f);
       case 1:
        var i = match[1];
         /*<<lib/xml_print.ml:239:16>>*/ return  /*<<lib/xml_print.ml:239:16>>*/ caml_call1
                (fprintf$0(fmt)(_fR_), i);
       case 2:
         /*<<lib/xml_print.ml:240:44>>*/ var
         s = match[1],
          /*<<lib/xml_print.ml:240:44>>*/ _rV_ =
            /*<<lib/xml_print.ml:240:44>>*/ caml_call1(encode, s);
         /*<<lib/xml_print.ml:240:44>>*/ return  /*<<lib/xml_print.ml:240:44>>*/ caml_call1
                (fprintf$0(fmt)(_fS_), _rV_);
       default:
        var
         slist = match[2],
         sep = match[1],
          /*<<lib/xml_print.ml:244:11>>*/ _rW_ =
           function(_r0_, _r1_){
             /*<<?>>*/ return pp_encode(encode, indent, _r0_, _r1_);
           },
          /*<<lib/xml_print.ml:243:38>>*/ _rX_ = [0, pp_sep(indent, sep)];
         /*<<lib/xml_print.ml:242:6>>*/ return  /*<<lib/xml_print.ml:242:6>>*/ caml_call2
                (fprintf$0(fmt)(_fT_),
                 function(_rY_, _rZ_){
                   /*<<?>>*/ return pp_print_list(_rX_, _rW_, _rY_, _rZ_);
                 },
                 slist);
     }
     /*<<lib/xml_print.ml:244:43>>*/ }
    function pp_attrib(encode, indent, fmt, a){
      /*<<lib/xml_print.ml:247:4>>*/  /*<<lib/xml_print.ml:248:28>>*/ var
      _rR_ =  /*<<lib/xml_print.ml:248:28>>*/ caml_call1(Xml[25], a);
      /*<<lib/xml_print.ml:247:4>>*/ return  /*<<lib/xml_print.ml:247:4>>*/ caml_call4
             (fprintf$0(fmt)(_fU_),
              function(_rU_){ /*<<?>>*/ return sp(indent, _rU_);},
              _rR_,
              function(_rS_, _rT_){
                /*<<?>>*/ return pp_attrib_value(encode, indent, _rS_, _rT_);
              },
              a);
     /*<<lib/xml_print.ml:248:71>>*/ }
    function pp_attribs(encode, indent){
      /*<<lib/xml_print.ml:251:41>>*/ function _rL_(_rP_, _rQ_){
       /*<<?>>*/ return pp_attrib(encode, indent, _rP_, _rQ_);
     }
      /*<<lib/xml_print.ml:251:4>>*/  /*<<lib/xml_print.ml:251:33>>*/ var
      _rM_ = [0, pp_noop];
      /*<<lib/xml_print.ml:251:41>>*/ return function(_rN_, _rO_){
       /*<<?>>*/ return pp_print_list(_rM_, _rL_, _rN_, _rO_);};
     /*<<lib/xml_print.ml:251:66>>*/ }
    function pp_tag_and_attribs(encode, indent, fmt, param){
     var attrs = param[2], tag = param[1];
      /*<<lib/xml_print.ml:254:4>>*/ open_box(indent, fmt);
      /*<<lib/xml_print.ml:255:36>>*/  /*<<lib/xml_print.ml:255:36>>*/ var
      _rJ_ = pp_attribs(encode, indent);
      /*<<lib/xml_print.ml:255:4>>*/  /*<<lib/xml_print.ml:255:4>>*/ caml_call4
      (fprintf$0(fmt)(_fV_),
       tag,
       _rJ_,
       attrs,
       function(_rK_){ /*<<?>>*/ return cut(indent, _rK_);});
      /*<<lib/xml_print.ml:255:4>>*/ return close_box(indent, fmt);
    }
    function pp_closedtag(encode, indent, fmt, tag, attrs){
      /*<<lib/xml_print.ml:259:4>>*/ return is_emptytag(tag)
             ?  /*<<lib/xml_print.ml:260:68>>*/ caml_call2
               (fprintf$0(fmt)(_fW_),
                function(_rE_, _rF_){
                  /*<<?>>*/ return pp_tag_and_attribs
                         (encode, indent, _rE_, _rF_);
                },
                [0, tag, attrs])
             : (open_box
                (indent, fmt),
                /*<<lib/xml_print.ml:263:6>>*/ caml_call4
                (fprintf$0(fmt)(_fX_),
                 function(_rH_, _rI_){
                   /*<<?>>*/ return pp_tag_and_attribs
                          (encode, indent, _rH_, _rI_);
                 },
                 [0, tag, attrs],
                 function(_rG_){ /*<<?>>*/ return cut(indent, _rG_);},
                 tag),
               close_box(indent, fmt));
     /*<<lib/xml_print.ml:268:7>>*/ }
    function pp_tag(encode, indent, fmt, tag, attrs, children){
      /*<<lib/xml_print.ml:271:4>>*/ if(! children)
       /*<<lib/xml_print.ml:272:12>>*/ return pp_closedtag
              (encode, indent, fmt, tag, attrs);
      /*<<lib/xml_print.ml:274:6>>*/ open_box(indent, fmt);
      /*<<lib/xml_print.ml:279:8>>*/  /*<<lib/xml_print.ml:279:8>>*/ var
      _rx_ = pp_elts(encode, indent);
      /*<<lib/xml_print.ml:275:6>>*/  /*<<lib/xml_print.ml:275:6>>*/ caml_call9
      (fprintf$0(fmt)(_fY_),
       function(_rD_){ /*<<?>>*/ return open_box(indent, _rD_);},
       function(_rB_, _rC_){
         /*<<?>>*/ return pp_tag_and_attribs(encode, indent, _rB_, _rC_);
       },
       [0, tag, attrs],
       function(_rA_){ /*<<?>>*/ return cut(indent, _rA_);},
       _rx_,
       children,
       function(_rz_){ /*<<?>>*/ return close_box(indent, _rz_);},
       function(_ry_){ /*<<?>>*/ return cut(indent, _ry_);},
       tag);
      /*<<lib/xml_print.ml:275:6>>*/ return close_box(indent, fmt);
     /*<<lib/xml_print.ml:283:26>>*/ }
    function pp_elt(encode, indent, fmt, elt){
      /*<<lib/xml_print.ml:285:37>>*/  /*<<lib/xml_print.ml:285:43>>*/ var
      match =  /*<<lib/xml_print.ml:285:43>>*/ caml_call1(Xml[27], elt);
     if(typeof match === "number")  /*<<lib/xml_print.ml:304:15>>*/ return 0;
     switch(match[0]){
       case 0:
         /*<<lib/xml_print.ml:287:37>>*/ var
         texte = match[1],
          /*<<lib/xml_print.ml:287:37>>*/ _rw_ = escape_comment(texte);
         /*<<lib/xml_print.ml:287:37>>*/ return  /*<<lib/xml_print.ml:287:37>>*/ caml_call1
                (fprintf$0(fmt)(_fZ_), _rw_);
       case 1:
        var texte$0 = match[1];
         /*<<lib/xml_print.ml:296:6>>*/ return pp_print_string(fmt, texte$0);
       case 2:
        var texte$1 = match[1];
         /*<<lib/xml_print.ml:293:6>>*/ return pp_encode
                (encode, indent, fmt, texte$1);
       case 3:
        var e = match[1];
         /*<<lib/xml_print.ml:290:6>>*/ return  /*<<lib/xml_print.ml:290:6>>*/ caml_call1
                (fprintf$0(fmt)(_f0_), e);
       case 4:
        var xh_attrs = match[2], name = match[1];
         /*<<lib/xml_print.ml:302:6>>*/ return pp_closedtag
                (encode, indent, fmt, name, xh_attrs);
       default:
        var xh_taglist = match[3], xh_attrs$0 = match[2], name$0 = match[1];
         /*<<lib/xml_print.ml:299:6>>*/ return pp_tag
                (encode, indent, fmt, name$0, xh_attrs$0, xh_taglist);
     }
     /*<<lib/xml_print.ml:304:17>>*/ }
    function pp_elts(encode, indent){
      /*<<lib/xml_print.ml:309:6>>*/ function _rq_(_ru_, _rv_){
       /*<<?>>*/ return pp_elt(encode, indent, _ru_, _rv_);
     }
      /*<<lib/xml_print.ml:307:4>>*/  /*<<lib/xml_print.ml:308:14>>*/ var
      _rr_ =
        [0,
         function(fmt, param){
           /*<<lib/xml_print.ml:308:29>>*/ return cut(indent, fmt);
          /*<<lib/xml_print.ml:308:43>>*/ }];
      /*<<lib/xml_print.ml:309:6>>*/ return function(_rs_, _rt_){
       /*<<?>>*/ return pp_print_list(_rr_, _rq_, _rs_, _rt_);};
     /*<<lib/xml_print.ml:309:28>>*/ }
    function pp(opt, _rn_, param){
      /*<<lib/xml_print.ml:312:4>>*/ if(opt)
      var sth = opt[1], encode = sth;
     else
      var encode = encode_unsafe_char;
      /*<<lib/xml_print.ml:312:4>>*/ if(_rn_)
      var sth$0 = _rn_[1], indent = sth$0;
     else
      var indent = 0;
      /*<<lib/xml_print.ml:312:4>>*/ return function(_ro_, _rp_){
       /*<<?>>*/ return pp_elt(encode, indent, _ro_, _rp_);};
     /*<<lib/xml_print.ml:312:24>>*/ }
     /*<<lib/xml_print.ml:209:0>>*/ return [0,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            pp];
   }
   function Make_simple(Xml, I){ /*<<lib/xml_print.ml:488:0>>*/ return;}
   function _f1_(_rl_, _rk_){ /*<<?>>*/ return [0, Make_fmt(_rl_, _rk_)[17]];}
   function uri_of_string(s){
     /*<<implem/tyxml_xml.ml:31:24>>*/ return s;
    /*<<implem/tyxml_xml.ml:31:25>>*/ }
   function string_of_uri(s){
     /*<<implem/tyxml_xml.ml:32:24>>*/ return s;
    /*<<implem/tyxml_xml.ml:32:25>>*/ }
   function acontent(param){
    var a = param[2];
     /*<<implem/tyxml_xml.ml:51:24>>*/ return a;
   }
   function aname(param){
    var name = param[1];
     /*<<implem/tyxml_xml.ml:52:24>>*/ return name;
   }
   function float_attrib(name, value){
     /*<<implem/tyxml_xml.ml:54:32>>*/ return [0, name, [0, value]];
    /*<<implem/tyxml_xml.ml:54:50>>*/ }
   function int_attrib(name, value){
     /*<<implem/tyxml_xml.ml:55:30>>*/ return [0, name, [1, value]];
    /*<<implem/tyxml_xml.ml:55:46>>*/ }
   function string_attrib(name, value){
     /*<<implem/tyxml_xml.ml:56:33>>*/ return [0, name, [2, value]];
    /*<<implem/tyxml_xml.ml:56:49>>*/ }
   function space_sep_attrib(name, values){
     /*<<implem/tyxml_xml.ml:57:37>>*/ return [0, name, [3, 0, values]];
    /*<<implem/tyxml_xml.ml:57:64>>*/ }
   function comma_sep_attrib(name, values){
     /*<<implem/tyxml_xml.ml:58:37>>*/ return [0, name, [3, 1, values]];
    /*<<implem/tyxml_xml.ml:58:64>>*/ }
   function event_handler_attrib(name, value){
     /*<<implem/tyxml_xml.ml:59:40>>*/ return [0, name, [2, value]];
    /*<<implem/tyxml_xml.ml:59:56>>*/ }
   function mouse_event_handler_attrib(name, value){
     /*<<implem/tyxml_xml.ml:60:46>>*/ return [0, name, [2, value]];
    /*<<implem/tyxml_xml.ml:60:62>>*/ }
   function keyboard_event_handler_attrib(name, value){
     /*<<implem/tyxml_xml.ml:61:49>>*/ return [0, name, [2, value]];
    /*<<implem/tyxml_xml.ml:61:65>>*/ }
   function touch_event_handler_attrib(name, value){
     /*<<implem/tyxml_xml.ml:62:46>>*/ return [0, name, [2, value]];
    /*<<implem/tyxml_xml.ml:62:62>>*/ }
   function uri_attrib(name, value){
     /*<<implem/tyxml_xml.ml:63:30>>*/ return [0, name, [2, value]];
    /*<<implem/tyxml_xml.ml:63:46>>*/ }
   function uris_attrib(name, values){
     /*<<implem/tyxml_xml.ml:64:32>>*/ return [0, name, [3, 0, values]];
    /*<<implem/tyxml_xml.ml:64:59>>*/ }
   function content(elt){
     /*<<implem/tyxml_xml.ml:81:20>>*/ return elt;
    /*<<implem/tyxml_xml.ml:81:23>>*/ }
   function empty$4(param){
     /*<<implem/tyxml_xml.ml:83:17>>*/ return 0;
    /*<<implem/tyxml_xml.ml:83:22>>*/ }
   function comment(c){
     /*<<implem/tyxml_xml.ml:85:18>>*/ return [0, c];
    /*<<implem/tyxml_xml.ml:85:27>>*/ }
   function pcdata(d){
     /*<<implem/tyxml_xml.ml:87:17>>*/ return [2, d];
    /*<<implem/tyxml_xml.ml:87:25>>*/ }
   function encodedpcdata(d){
     /*<<implem/tyxml_xml.ml:88:24>>*/ return [1, d];
    /*<<implem/tyxml_xml.ml:88:39>>*/ }
   function entity(e){
     /*<<implem/tyxml_xml.ml:89:17>>*/ return [3, e];
    /*<<implem/tyxml_xml.ml:89:25>>*/ }
    /*<<implem/tyxml_xml.ml:94:25>>*/  /*<<implem/tyxml_xml.ml:94:25>>*/ var
    re_end_cdata = compile(str(_f2_));
   function encoded_cdata(s1, s2, s){
     /*<<implem/tyxml_xml.ml:96:4>>*/  /*<<implem/tyxml_xml.ml:99:9>>*/ var
     _rj_ = replace_string(0, 0, _f4_, re_end_cdata, _f3_, s);
     /*<<implem/tyxml_xml.ml:97:6>>*/ return encodedpcdata
            ( /*<<implem/tyxml_xml.ml:97:6>>*/ caml_call3
              (sprintf(_f5_), s1, _rj_, s2));
    /*<<implem/tyxml_xml.ml:100:13>>*/ }
    /*<<implem/tyxml_xml.ml:102:14>>*/ function cdata(_ri_){
     /*<<?>>*/ return encoded_cdata(_f7_, _f6_, _ri_);
   }
    /*<<implem/tyxml_xml.ml:103:21>>*/ function cdata_script(_rh_){
     /*<<?>>*/ return encoded_cdata(_f9_, _f8_, _rh_);
   }
    /*<<implem/tyxml_xml.ml:104:20>>*/ function cdata_style(_rg_){
     /*<<?>>*/ return encoded_cdata(_f$_, _f__, _rg_);
   }
   function leaf(opt, name){
     /*<<implem/tyxml_xml.ml:106:26>>*/ if(opt)
     var sth = opt[1], a = sth;
    else
     var a = 0;
     /*<<implem/tyxml_xml.ml:106:26>>*/ return [4, name, a];
    /*<<implem/tyxml_xml.ml:106:40>>*/ }
   function node(opt, name, children){
     /*<<implem/tyxml_xml.ml:107:35>>*/ if(opt)
     var sth = opt[1], a = sth;
    else
     var a = 0;
     /*<<implem/tyxml_xml.ml:107:35>>*/ return [5, name, a, children];
    /*<<implem/tyxml_xml.ml:107:59>>*/ }
    /*<<implem/tyxml_xml.ml:112:30>>*/ var
    _ga_ =
      [0,
       ,
       ,
       ,
       ,
       ,
       ,
       ,
       ,
       ,
       ,
       ,
       ,
       ,
       ,
       ,
       ,
       ,
       ,
       ,
       ,
       ,
       ,
       ,
       ,
       aname,
       acontent,
       content];
   (function(_rf_){ /*<<?>>*/ return Make_simple(_ga_, _rf_);}([0, 0]));
    /*<<lib/runtime/jsoo_runtime.ml:155:2>>*/ var
     /*<<implem/tyxml_xml.ml:116:27>>*/ _gb_ =
      [0,
       _fn_,
       string_of_uri,
       uri_of_string,
       float_attrib,
       int_attrib,
       string_attrib,
       space_sep_attrib,
       comma_sep_attrib,
       event_handler_attrib,
       mouse_event_handler_attrib,
       keyboard_event_handler_attrib,
       touch_event_handler_attrib,
       uri_attrib,
       uris_attrib,
       empty$4,
       comment,
       pcdata,
       encodedpcdata,
       entity,
       leaf,
       node,
       cdata,
       cdata_script,
       cdata_style,
       aname,
       acontent,
       content],
    pp = function(_re_){ /*<<?>>*/ return _f1_(_gb_, _re_);}([0, 0])[1],
     /*<<lib/runtime/jsoo_runtime.ml:155:2>>*/ Error =
      [248, _gc_, caml_fresh_oo_id(0)];
    /*<<lib/runtime/jsoo_runtime.ml:157:10>>*/ register_exception
    (_gd_, [0, Error, [0]]);
    /*<<lib/runtime/jsoo_runtime.ml:159:25>>*/ function raise(exn){throw exn;}
   function equal$8(x, y){
     /*<<lib/js_of_ocaml/import.ml:62:40>>*/ return  /*<<lib/js_of_ocaml/import.ml:62:40>>*/ caml_string_equal
            (x, y);
    /*<<lib/js_of_ocaml/import.ml:62:54>>*/ }
    /*<<lib/js_of_ocaml/js.ml:69:17>>*/ var
     /*<<lib/js_of_ocaml/js.ml:69:17>>*/ global = globalThis,
     /*<<lib/js_of_ocaml/js.ml:103:22>>*/ null$0 = null;
   function return$0(_rd_){ /*<<?>>*/ return _rd_;}
   function case$0(x, f, g){
     /*<<lib/js_of_ocaml/js.ml:158:21>>*/ return x == null$0
            ?  /*<<lib/js_of_ocaml/js.ml:158:43>>*/ caml_call1(f, 0)
            :  /*<<lib/js_of_ocaml/js.ml:158:53>>*/ caml_call1(g, x);
    /*<<lib/js_of_ocaml/js.ml:158:56>>*/ }
   function option(x){
     /*<<lib/js_of_ocaml/js.ml:163:6>>*/ if(! x)
      /*<<lib/js_of_ocaml/js.ml:107:30>>*/ return null$0;
    var x$0 = x[1];
     /*<<lib/js_of_ocaml/js.ml:165:18>>*/ return return$0(x$0);
    /*<<lib/js_of_ocaml/js.ml:165:26>>*/ }
   function to_option(x){
     /*<<lib/js_of_ocaml/js.ml:167:22>>*/ return case$0
            (x,
             function(param){
               /*<<lib/js_of_ocaml/js.ml:167:40>>*/ return 0;
              /*<<lib/js_of_ocaml/js.ml:167:44>>*/ },
             function(x){
               /*<<lib/js_of_ocaml/js.ml:167:56>>*/ return [0, x];
              /*<<lib/js_of_ocaml/js.ml:167:62>>*/ });
    /*<<lib/js_of_ocaml/js.ml:167:63>>*/ }
    /*<<lib/js_of_ocaml/js.ml:378:20>>*/ (function(t0, param){
       /*<<?>>*/ t0.String;
      return;
     }
     (global,
      function(x){
        /*<<lib/js_of_ocaml/js.ml:378:36>>*/ return  /*<<lib/js_of_ocaml/js.ml:378:36>>*/ caml_call1
               (caml_get_public_method(x, 876326544, 18), x);
       /*<<lib/js_of_ocaml/js.ml:378:43>>*/ }));
    /*<<lib/js_of_ocaml/js.ml:380:13>>*/ (function(t1, param){
       /*<<?>>*/ t1.RegExp;
      return;
     }
     (global,
      function(x){
        /*<<lib/js_of_ocaml/js.ml:380:29>>*/ return  /*<<lib/js_of_ocaml/js.ml:380:29>>*/ caml_call1
               (caml_get_public_method(x, 595393896, 19), x);
       /*<<lib/js_of_ocaml/js.ml:380:36>>*/ }));
    /*<<lib/js_of_ocaml/js.ml:457:25>>*/ (function(t2, param){
       /*<<?>>*/ t2.Object;
      return;
     }
     (global,
      function(x){
        /*<<lib/js_of_ocaml/js.ml:457:41>>*/ return  /*<<lib/js_of_ocaml/js.ml:457:41>>*/ caml_call1
               (caml_get_public_method(x, 944440446, 20), x);
       /*<<lib/js_of_ocaml/js.ml:457:48>>*/ }));
    /*<<lib/js_of_ocaml/js.ml:461:24>>*/  /*<<lib/js_of_ocaml/js.ml:461:24>>*/ var
    array_constructor =
      function(t5, param){ /*<<?>>*/ return t5.Array;}
       (global,
        function(x){
          /*<<lib/js_of_ocaml/js.ml:461:40>>*/ return  /*<<lib/js_of_ocaml/js.ml:461:40>>*/ caml_call1
                 (caml_get_public_method(x, 883172538, 22), x);
         /*<<lib/js_of_ocaml/js.ml:461:46>>*/ });
    /*<<lib/js_of_ocaml/js.ml:601:18>>*/ (function(t8, param){
       /*<<?>>*/ t8.Date;
      return;
     }
     (global,
      function(x){
        /*<<lib/js_of_ocaml/js.ml:601:34>>*/ return  /*<<lib/js_of_ocaml/js.ml:601:34>>*/ caml_call1
               (caml_get_public_method(x, -531784147, 24), x);
       /*<<lib/js_of_ocaml/js.ml:601:39>>*/ }));
    /*<<lib/js_of_ocaml/js.ml:684:11>>*/ (function(t9, param){
       /*<<?>>*/ t9.Math;
      return;
     }
     (global,
      function(x){
        /*<<lib/js_of_ocaml/js.ml:684:27>>*/ return  /*<<lib/js_of_ocaml/js.ml:684:27>>*/ caml_call1
               (caml_get_public_method(x, -431978041, 25), x);
       /*<<lib/js_of_ocaml/js.ml:684:32>>*/ }));
    /*<<lib/js_of_ocaml/js.ml:696:19>>*/  /*<<lib/js_of_ocaml/js.ml:696:19>>*/ var
    error_constr =
      function(t10, param){ /*<<?>>*/ return t10.Error;}
       (global,
        function(x){
          /*<<lib/js_of_ocaml/js.ml:696:35>>*/ return  /*<<lib/js_of_ocaml/js.ml:696:35>>*/ caml_call1
                 (caml_get_public_method(x, 37651177, 26), x);
         /*<<lib/js_of_ocaml/js.ml:696:41>>*/ });
   function to_string$5(e){
     /*<<lib/js_of_ocaml/js.ml:714:20>>*/ return  /*<<lib/js_of_ocaml/js.ml:714:20>>*/ caml_string_of_jsstring
            (function(t14, param){ /*<<?>>*/ return t14.toString();}
              (e,
               function(x){
                 /*<<lib/js_of_ocaml/js.ml:714:30>>*/ return  /*<<lib/js_of_ocaml/js.ml:714:30>>*/ caml_call1
                        (caml_get_public_method(x, 946786476, 30), x);
                /*<<lib/js_of_ocaml/js.ml:714:52>>*/ }));
    /*<<lib/js_of_ocaml/js.ml:714:52>>*/ }
    /*<<lib/js_of_ocaml/js.ml:752:21>>*/ (function(t15, param){
       /*<<?>>*/ t15.JSON;
      return;
     }
     (global,
      function(x){
        /*<<lib/js_of_ocaml/js.ml:752:37>>*/ return  /*<<lib/js_of_ocaml/js.ml:752:37>>*/ caml_call1
               (caml_get_public_method(x, -465951225, 31), x);
       /*<<lib/js_of_ocaml/js.ml:752:42>>*/ }));
    /*<<lib/js_of_ocaml/js.ml:816:2>>*/ register_printer
    (function(param){
       /*<<lib/js_of_ocaml/js.ml:816:28>>*/ if(param[1] !== Error)
        /*<<lib/js_of_ocaml/js.ml:818:13>>*/ return 0;
      var e = param[2];
       /*<<lib/js_of_ocaml/js.ml:817:26>>*/ return [0, to_string$5(e)];
      /*<<lib/js_of_ocaml/js.ml:818:18>>*/ });
    /*<<lib/js_of_ocaml/js.ml:821:2>>*/ register_printer
    (function(e){
       /*<<lib/js_of_ocaml/js.ml:822:6>>*/ return e
              instanceof
              array_constructor
              ? 0
              : [0,
                 /*<<lib/js_of_ocaml/js.ml:823:60>>*/ caml_string_of_jsstring
                 (function(t25, param){ /*<<?>>*/ return t25.toString();}
                   (e,
                    function(x){
                      /*<<lib/js_of_ocaml/js.ml:823:71>>*/ return  /*<<lib/js_of_ocaml/js.ml:823:71>>*/ caml_call1
                             (caml_get_public_method(x, 946786476, 41), x);
                     /*<<lib/js_of_ocaml/js.ml:823:82>>*/ }))];
      /*<<lib/js_of_ocaml/js.ml:823:83>>*/ });
    /*<<lib/js_of_ocaml/js.ml:821:2>>*/ function export_js(field, x){
     /*<<lib/js_of_ocaml/js.ml:826:2>>*/ a:
    {
      /*<<lib/js_of_ocaml/js.ml:831:11>>*/ if
      (equal$8
        ( /*<<lib/js_of_ocaml/js.ml:829:21>>*/ caml_string_of_jsstring
          (typeof x),
         _ge_)
       && 0 < x.length){
      var
       _rc_ =  /*<<lib/js_of_ocaml/js.ml:832:20>>*/ caml_js_wrap_callback(x);
      break a;
     }
     var _rc_ = x;
    }
     /*<<lib/js_of_ocaml/js.ml:826:2>>*/ jsoo_exports[field] = _rc_;
     /*<<lib/js_of_ocaml/js.ml:826:2>>*/ return;
    /*<<lib/js_of_ocaml/js.ml:833:12>>*/ }
   function export$0(field, x){
     /*<<lib/js_of_ocaml/js.ml:835:21>>*/ return export_js
            ( /*<<lib/js_of_ocaml/js.ml:835:31>>*/ caml_jsstring_of_string
              (field),
             x);
    /*<<lib/js_of_ocaml/js.ml:835:47>>*/ }
    /*<<lib/js_of_ocaml/firebug.ml:128:14>>*/  /*<<lib/js_of_ocaml/firebug.ml:128:14>>*/ var
    console$0 =
       /*<<lib/js_of_ocaml/firebug.ml:128:14>>*/ caml_js_get_console(0);
   function _gf_(_rb_){ /*<<?>>*/ return _rb_;}
   function symbol$4(x, y){
     /*<<src/base64.ml:27:2>>*/ if(y < 1)
      /*<<src/base64.ml:27:16>>*/ throw  /*<<src/base64.ml:27:16>>*/ caml_maybe_attach_backtrace
            (Division_by_zero, 1);
    return 0 < x ? 1 + caml_div(x - 1 | 0, y) | 0 : 0;
    /*<<src/base64.ml:28:40>>*/ }
   function unsafe_get_uint8(t, off){
     /*<<src/base64.ml:31:29>>*/ return caml_string_unsafe_get(t, off);
    /*<<src/base64.ml:31:64>>*/ }
   function unsafe_set_uint8(t, off, v){
     /*<<src/base64.ml:33:31>>*/ caml_bytes_unsafe_set(t, off, chr(v));
    return;
    /*<<src/base64.ml:33:66>>*/ }
   function unsafe_set_uint16(_ra_, _q$_, _q__){
     /*<<?>>*/ caml_bytes_set16(_ra_, _q$_, _q__);
    return;
   }
   function make_alphabet(alphabet){
     /*<<src/base64.ml:48:2>>*/ if(64 !== caml_ml_string_length(alphabet))
      /*<<src/base64.ml:49:7>>*/ invalid_arg(_gg_);
     /*<<src/base64.ml:50:5>>*/ if(contains(alphabet, 61))
      /*<<src/base64.ml:51:7>>*/ invalid_arg(_gh_);
     /*<<src/base64.ml:53:4>>*/ var
      /*<<src/base64.ml:53:4>>*/ emap =
       init$1
        (caml_ml_string_length(alphabet),
         function(i){
           /*<<src/base64.ml:53:50>>*/ return  /*<<src/base64.ml:53:60>>*/ caml_string_get
                  (alphabet, i);
          /*<<src/base64.ml:53:72>>*/ }),
      /*<<src/base64.ml:54:13>>*/ dmap =
        /*<<src/base64.ml:54:13>>*/ caml_make_vect(256, -1);
     /*<<src/base64.ml:55:2>>*/ iteri$0
     (function(idx, chr){
        /*<<src/base64.ml:55:31>>*/ caml_check_bound(dmap, chr)[1 + chr] = idx;
        /*<<src/base64.ml:55:31>>*/ return 0;
       /*<<src/base64.ml:55:58>>*/ },
      alphabet);
     /*<<src/base64.ml:56:2>>*/ return [0, emap, dmap];
    /*<<src/base64.ml:56:16>>*/ }
    /*<<src/base64.ml:64:2>>*/  /*<<src/base64.ml:64:2>>*/ var
    default_alphabet = make_alphabet(_gi_);
    /*<<src/base64.ml:68:2>>*/ make_alphabet(_gj_);
   function unsafe_set_be_uint16(t, off, v){
     /*<<src/base64.ml:74:22>>*/ return unsafe_set_uint16
            (t, off, caml_bswap16(v));
    /*<<src/base64.ml:74:56>>*/ }
    /*<<src/base64.ml:79:0>>*/ var
     /*<<src/base64.ml:79:0>>*/ Out_of_bounds =
      [248, _gk_, caml_fresh_oo_id(0)],
     /*<<src/base64.ml:81:0>>*/ Too_much_input =
      [248, _gl_, caml_fresh_oo_id(0)];
   function get_uint8(t, off){
     /*<<src/base64.ml:84:2>>*/ var
     _q8_ = off < 0 ? 1 : 0,
     _q9_ = _q8_ || (caml_ml_string_length(t) <= off ? 1 : 0);
    if(_q9_)
      /*<<src/base64.ml:84:44>>*/ throw  /*<<src/base64.ml:84:44>>*/ caml_maybe_attach_backtrace
            (Out_of_bounds, 1);
     /*<<src/base64.ml:85:2>>*/ return unsafe_get_uint8(t, off);
    /*<<src/base64.ml:85:24>>*/ }
   var padding = 61;
   function error_msgf(fmt){
     /*<<src/base64.ml:89:21>>*/ return ksprintf$0
            (function(err){
               /*<<src/base64.ml:89:49>>*/ return [1, [0, 3854881, err]];
              /*<<src/base64.ml:89:65>>*/ },
             fmt);
    /*<<src/base64.ml:89:70>>*/ }
   function _gm_(opt, param){
     /*<<?>>*/ if(opt)
     var sth = opt[1], invalid_pad_overflow = sth;
    else
     var invalid_pad_overflow = 1;
    var dmap = param[2];
    return function(opt, len, input){
      /*<<src/base64.ml:168:2>>*/ if(opt)
      var sth = opt[1], off = sth;
     else
      var off = 0;
      /*<<src/base64.ml:168:2>>*/ if(len)
      var len$0 = len[1], len$1 = len$0;
     else
      var len$1 = caml_ml_string_length(input) - off | 0;
     if
      (0 <= len$1
       && 0 <= off && (caml_ml_string_length(input) - len$1 | 0) >= off){
       /*<<src/base64.ml:174:12>>*/ var
        /*<<src/base64.ml:174:12>>*/ n = symbol$4(len$1, 4) * 4 | 0,
        /*<<src/base64.ml:175:13>>*/ n$0 = symbol$4(n, 4) * 3 | 0,
        /*<<src/base64.ml:176:14>>*/ res =
          /*<<src/base64.ml:176:14>>*/ caml_create_bytes(n$0),
        /*<<src/base64.ml:179:4>>*/ get_uint8_or_padding =
         invalid_pad_overflow
          ? function
           (t, i){
             /*<<src/base64.ml:182:8>>*/ if(len$1 <= i)
              /*<<src/base64.ml:182:25>>*/ throw  /*<<src/base64.ml:182:25>>*/ caml_maybe_attach_backtrace
                    (Out_of_bounds, 1);
            return get_uint8(t, off + i | 0);
            /*<<src/base64.ml:183:29>>*/ }
          : function
           (t, i){
             /*<<src/base64.ml:186:8>>*/ try{
             var _q6_ = i < len$1 ? get_uint8(t, off + i | 0) : padding;
              /*<<src/base64.ml:186:28>>*/ return _q6_;
            }
            catch(_q7_){
             var _q5_ = caml_wrap_exception(_q7_);
             if(_q5_ === Out_of_bounds) return padding;
             throw caml_maybe_attach_backtrace(_q5_, 0);
            }
            /*<<src/base64.ml:187:37>>*/ },
       set_be_uint16 =
         function(t, off, v){
           /*<<src/base64.ml:191:6>>*/ if
           (0 <= off && caml_ml_bytes_length(t) >= (off + 1 | 0)){
           if(0 <= off && caml_ml_bytes_length(t) >= (off + 2 | 0))
             /*<<src/base64.ml:195:11>>*/ return unsafe_set_be_uint16
                    (t, off, v);
           return unsafe_set_uint8(t, off, v >>> 8 | 0);
          }
           /*<<src/base64.ml:192:11>>*/ return;
          /*<<src/base64.ml:195:39>>*/ },
        /*<<src/base64.ml:197:4>>*/ set_uint8 =
         function(t, off, v){
           /*<<src/base64.ml:198:6>>*/ if
           (0 <= off && caml_ml_bytes_length(t) > off)
            /*<<src/base64.ml:198:55>>*/ return unsafe_set_uint8(t, off, v);
           /*<<src/base64.ml:198:47>>*/ return;
          /*<<src/base64.ml:198:79>>*/ },
       emit =
         function(a, b, c, d, j){
           /*<<src/base64.ml:202:6>>*/ var x = a << 18 | b << 12 | c << 6 | d;
           /*<<src/base64.ml:203:6>>*/ set_be_uint16(res, j, x >>> 8 | 0);
           /*<<src/base64.ml:176:14>>*/ return set_uint8
                  (res, j + 2 | 0, x & 255);
          /*<<src/base64.ml:204:41>>*/ },
       dmap$0 =
         function(i){
           /*<<src/base64.ml:207:6>>*/ var x = dmap[1 + i];
          if(x === -1)
            /*<<src/base64.ml:208:23>>*/ throw  /*<<src/base64.ml:208:23>>*/ caml_maybe_attach_backtrace
                  (Not_found, 1);
           /*<<src/base64.ml:209:6>>*/ return x;
          /*<<src/base64.ml:209:7>>*/ },
       only_padding =
         function(pad, idx){
           /*<<src/base64.ml:216:6>>*/ var
            /*<<src/base64.ml:216:16>>*/ pad$0 = [0, pad + 3 | 0],
            /*<<src/base64.ml:217:16>>*/ idx$0 = [0, idx];
          for(;;){
           if((idx$0[1] + 4 | 0) >= len$1) break;
           var
            _q3_ =
              15677
               !==
                 /*<<src/base64.ml:222:11>>*/ caml_string_get16
                 (input, off + idx$0[1] | 0)
               ? 1
               : 0,
            _q4_ =
              _q3_
              ||
               (15677
                 !==
                   /*<<src/base64.ml:223:14>>*/ caml_string_get16
                   (input, (off + idx$0[1] | 0) + 2 | 0)
                 ? 1
                 : 0);
           if(_q4_)
             /*<<src/base64.ml:224:13>>*/ throw  /*<<src/base64.ml:224:13>>*/ caml_maybe_attach_backtrace
                   (Not_found, 1);
           idx$0[1] = idx$0[1] + 4 | 0;
           pad$0[1] = pad$0[1] + 3 | 0;
          }
          for(;;){
           if(idx$0[1] >= len$1) return pad$0[1];
           if(unsafe_get_uint8(input, off + idx$0[1] | 0) !== 61)
             /*<<src/base64.ml:232:63>>*/ throw  /*<<src/base64.ml:232:63>>*/ caml_maybe_attach_backtrace
                   (Not_found, 1);
           idx$0[1]++;
          }
          /*<<src/base64.ml:236:10>>*/ },
       dec =
         function(j, i){
           /*<<src/base64.ml:239:6>>*/ var j$0 = j, i$0 = i;
           /*<<src/base64.ml:239:6>>*/ for(;;){
           if(i$0 === n)  /*<<src/base64.ml:240:11>>*/ return 0;
            /*<<src/base64.ml:243:18>>*/  /*<<src/base64.ml:243:18>>*/ var
            x = get_uint8_or_padding(input, i$0 + 3 | 0);
           a:
           try{
             /*<<src/base64.ml:244:15>>*/ var
             pad$3 = 0,
              /*<<src/base64.ml:244:15>>*/ _q2_ = dmap$0(x),
             pad = pad$3,
             d = _q2_;
           }
           catch(exn$0){
            var exn = caml_wrap_exception(exn$0);
            if(exn === Not_found && x === 61){var pad = 1, d = 0; break a;}
            throw caml_maybe_attach_backtrace(exn, 0);
           }
            /*<<src/base64.ml:247:18>>*/  /*<<src/base64.ml:247:18>>*/ var
            x$0 = get_uint8_or_padding(input, i$0 + 2 | 0);
           a:
           try{
             /*<<src/base64.ml:248:15>>*/ var
              /*<<src/base64.ml:248:15>>*/ _q1_ = dmap$0(x$0),
             pad$0 = pad,
             c = _q1_;
           }
           catch(exn){
            var exn$0 = caml_wrap_exception(exn);
            if(exn$0 === Not_found && x$0 === 61 && 1 === pad){var pad$0 = 2, c = 0; break a;}
            throw caml_maybe_attach_backtrace(exn$0, 0);
           }
            /*<<src/base64.ml:252:18>>*/  /*<<src/base64.ml:252:18>>*/ var
            x$1 = get_uint8_or_padding(input, i$0 + 1 | 0);
           a:
           try{
             /*<<src/base64.ml:253:15>>*/ var
              /*<<src/base64.ml:253:15>>*/ _q0_ = dmap$0(x$1),
             pad$1 = pad$0,
             b = _q0_;
           }
           catch(exn){
            var exn$1 = caml_wrap_exception(exn);
            if(exn$1 === Not_found && x$1 === 61 && 2 === pad$0){var pad$1 = 3, b = 0; break a;}
            throw caml_maybe_attach_backtrace(exn$1, 0);
           }
            /*<<src/base64.ml:257:18>>*/  /*<<src/base64.ml:257:18>>*/ var
            x$2 = get_uint8_or_padding(input, i$0);
           a:
           try{
             /*<<src/base64.ml:258:15>>*/ var
              /*<<src/base64.ml:258:15>>*/ _qZ_ = dmap$0(x$2),
             pad$2 = pad$1,
             a = _qZ_;
           }
           catch(exn){
            var exn$2 = caml_wrap_exception(exn);
            if(exn$2 === Not_found && x$2 === 61 && 3 === pad$1){var pad$2 = 4, a = 0; break a;}
            throw caml_maybe_attach_backtrace(exn$2, 0);
           }
            /*<<src/base64.ml:262:8>>*/ emit(a, b, c, d, j$0);
           if((i$0 + 4 | 0) === n)
            return 0 === pad$2 ? 0 : 4 === pad$2 ? 3 : pad$2;
           if(0 !== pad$2){
            if(4 === pad$2)
              /*<<src/base64.ml:280:14>>*/ return only_padding(3, i$0 + 4 | 0);
            if(1 === invalid_pad_overflow)
              /*<<src/base64.ml:284:50>>*/ throw  /*<<src/base64.ml:284:50>>*/ caml_maybe_attach_backtrace
                    (Too_much_input, 1);
             /*<<src/base64.ml:285:14>>*/ return only_padding
                    (pad$2, i$0 + 4 | 0);
           }
            /*<<src/base64.ml:277:17>>*/ var
             /*<<src/base64.ml:277:17>>*/ i$1 = i$0 + 4 | 0,
            j$1 = j$0 + 3 | 0,
            j$0 = j$1,
            i$0 = i$1;
          }
          /*<<src/base64.ml:285:38>>*/ };
       /*<<src/base64.ml:287:4>>*/ try{
        /*<<src/base64.ml:287:10>>*/  /*<<src/base64.ml:287:10>>*/ var
        pad = dec(0, 0);
      }
      catch(_qY_){
       var _qX_ = caml_wrap_exception(_qY_);
       if(_qX_ === Out_of_bounds)
         /*<<src/base64.ml:291:8>>*/ return error_msgf(_go_);
       if(_qX_ === Not_found)
         /*<<src/base64.ml:295:8>>*/ return error_msgf(_gp_);
       if(_qX_ === Too_much_input)
         /*<<src/base64.ml:296:34>>*/ return error_msgf(_gq_);
       throw caml_maybe_attach_backtrace(_qX_, 0);
      }
      return 0 === pad
              ? [0, [0, unsafe_to_string(res), 0, n$0]]
              : [0, [0, unsafe_to_string(res), 0, n$0 - pad | 0]];
     }
      /*<<src/base64.ml:172:7>>*/ return error_msgf(_gn_); /*<<src/base64.ml:296:61>>*/ };
   }
   function decode(pad, opt, off, len, input){
     /*<<src/base64.ml:299:2>>*/ if(opt)
     var sth = opt[1], alphabet = sth;
    else
     var alphabet = default_alphabet;
     /*<<src/base64.ml:299:8>>*/  /*<<src/base64.ml:299:8>>*/ var
     err = _gm_(pad, alphabet)(off, len, input);
    if(0 !== err[0])  /*<<src/base64.ml:301:22>>*/ return err;
    var match = err[1], len$0 = match[3], off$0 = match[2], res = match[1];
     /*<<src/base64.ml:300:26>>*/ return [0, sub$0(res, off$0, len$0)];
    /*<<src/base64.ml:301:25>>*/ }
   function decode_exn(pad, alphabet, off, len, input){
     /*<<src/base64.ml:307:2>>*/  /*<<src/base64.ml:307:8>>*/ var
     match = decode(pad, alphabet, off, len, input);
    if(0 === match[0]){
     var res = match[1];
      /*<<src/base64.ml:308:14>>*/ return res;
    }
    var err = match[1][2];
     /*<<src/base64.ml:309:24>>*/ return invalid_arg(err);
    /*<<src/base64.ml:309:39>>*/ }
   function unfold(f, u, param){
     /*<<src/core/QCheck2.ml:71:4>>*/  /*<<src/core/QCheck2.ml:71:10>>*/ var
     match =  /*<<src/core/QCheck2.ml:71:10>>*/ caml_call1(f, u);
    if(! match)  /*<<src/core/QCheck2.ml:72:14>>*/ return 0;
    var match$0 = match[1], u$0 = match$0[2], x = match$0[1];
     /*<<src/core/QCheck2.ml:73:22>>*/ return [0,
            x,
            function(_qW_){ /*<<?>>*/ return unfold(f, u$0, _qW_);}];
    /*<<src/core/QCheck2.ml:73:43>>*/ }
   function append$0(seq1, seq2, param){
     /*<<src/core/QCheck2.ml:76:4>>*/  /*<<src/core/QCheck2.ml:76:10>>*/ var
     match =  /*<<src/core/QCheck2.ml:76:10>>*/ caml_call1(seq1, 0);
    if(! match)
      /*<<src/core/QCheck2.ml:77:13>>*/ return  /*<<src/core/QCheck2.ml:77:13>>*/ caml_call1
             (seq2, 0);
    var next = match[2], x = match[1];
     /*<<src/core/QCheck2.ml:78:24>>*/ return [0,
            x,
            function(_qV_){ /*<<?>>*/ return append$0(next, seq2, _qV_);}];
    /*<<src/core/QCheck2.ml:78:50>>*/ }
   function apply(l){
     /*<<src/core/QCheck2.ml:100:35>>*/ return  /*<<src/core/QCheck2.ml:100:35>>*/ caml_call1
            (l, 0);
    /*<<src/core/QCheck2.ml:100:39>>*/ }
   function number_towards(Number, destination, x, param){
     /*<<src/core/QCheck2.ml:115:4>>*/ return unfold
            (function(current_shrink){
               /*<<src/core/QCheck2.ml:116:8>>*/ if
               ( /*<<src/core/QCheck2.ml:116:11>>*/ caml_call2
                 (Number[1], current_shrink, x))
                /*<<src/core/QCheck2.ml:117:13>>*/ return 0;
               /*<<src/core/QCheck2.ml:121:98>>*/ var
                /*<<src/core/QCheck2.ml:121:98>>*/ _qR_ =
                  /*<<src/core/QCheck2.ml:121:98>>*/ caml_call1(Number[5], 2),
                /*<<src/core/QCheck2.ml:121:71>>*/ _qS_ =
                  /*<<src/core/QCheck2.ml:121:71>>*/ caml_call2
                  (Number[2], current_shrink, _qR_),
                /*<<src/core/QCheck2.ml:121:52>>*/ _qT_ =
                  /*<<src/core/QCheck2.ml:121:52>>*/ caml_call1(Number[5], 2),
                /*<<src/core/QCheck2.ml:121:38>>*/ _qU_ =
                  /*<<src/core/QCheck2.ml:121:38>>*/ caml_call2
                  (Number[2], x, _qT_),
                /*<<src/core/QCheck2.ml:121:27>>*/ half_diff =
                  /*<<src/core/QCheck2.ml:121:27>>*/ caml_call2
                  (Number[4], _qU_, _qS_);
               /*<<src/core/QCheck2.ml:122:13>>*/ return  /*<<src/core/QCheck2.ml:122:13>>*/ caml_equal
                       (half_diff,
                         /*<<src/core/QCheck2.ml:122:25>>*/ caml_call1(Number[5], 0))
                      ? [0, [0, current_shrink, x]]
                      : [0,
                        [0,
                         current_shrink,
                          /*<<src/core/QCheck2.ml:125:37>>*/ caml_call2
                          (Number[3], current_shrink, half_diff)]];
              /*<<src/core/QCheck2.ml:126:7>>*/ },
             destination,
             0);
    /*<<src/core/QCheck2.ml:126:23>>*/ }
   function int_towards(destination, x, param){
    function of_int(_qQ_){ /*<<?>>*/ return _qQ_;}
     /*<<src/core/QCheck2.ml:114:21>>*/ return number_towards
            ([0,
              equal,
              function(_qP_, _qO_){ /*<<?>>*/ return caml_div(_qP_, _qO_);},
              function(_qN_, _qM_){ /*<<?>>*/ return _qN_ + _qM_ | 0;},
              function(_qL_, _qK_){ /*<<?>>*/ return _qL_ - _qK_ | 0;},
              of_int],
             destination,
             x,
             0);
    /*<<src/core/QCheck2.ml:133:49>>*/ }
   function root(param){
    var root = param[1];
     /*<<src/core/QCheck2.ml:160:42>>*/ return root;
   }
   function children(param){
    var children = param[2];
     /*<<src/core/QCheck2.ml:162:60>>*/ return children;
   }
   function map$5(f, a){
     /*<<src/core/QCheck2.ml:185:4>>*/ var
     xs = a[2],
     x = a[1],
      /*<<src/core/QCheck2.ml:186:12>>*/ y =
        /*<<src/core/QCheck2.ml:186:12>>*/ caml_call1(f, x);
    function ys(param){
      /*<<src/core/QCheck2.ml:187:23>>*/ return map
             (function(smaller_x){
                /*<<src/core/QCheck2.ml:187:49>>*/ return map$5(f, smaller_x);
               /*<<src/core/QCheck2.ml:187:64>>*/ },
              xs,
              0);
     /*<<src/core/QCheck2.ml:187:71>>*/ }
     /*<<src/core/QCheck2.ml:188:4>>*/ return [0, y, ys];
    /*<<src/core/QCheck2.ml:188:16>>*/ }
   function symbol$5(a, f){
     /*<<src/core/QCheck2.ml:191:18>>*/ return map$5(f, a);
    /*<<src/core/QCheck2.ml:191:25>>*/ }
   function ap(f, a){
     /*<<src/core/QCheck2.ml:194:4>>*/ var
     xs = a[2],
     x0 = a[1],
      /*<<src/core/QCheck2.ml:195:4>>*/ fs = f[2],
     f0 = f[1],
      /*<<src/core/QCheck2.ml:196:12>>*/ y =
        /*<<src/core/QCheck2.ml:196:12>>*/ caml_call1(f0, x0);
    function ys(param){
     function _qG_(x){
       /*<<src/core/QCheck2.ml:197:87>>*/ return ap(f, x);
      /*<<src/core/QCheck2.ml:197:94>>*/ }
     function _qH_(f){
       /*<<src/core/QCheck2.ml:197:54>>*/ return ap(f, a);
      /*<<src/core/QCheck2.ml:197:61>>*/ }
      /*<<src/core/QCheck2.ml:197:23>>*/ return append$0
             (function(_qJ_){ /*<<?>>*/ return map(_qH_, fs, _qJ_);},
              function(_qI_){ /*<<?>>*/ return map(_qG_, xs, _qI_);},
              0);
     /*<<src/core/QCheck2.ml:197:102>>*/ }
     /*<<src/core/QCheck2.ml:198:4>>*/ return [0, y, ys];
    /*<<src/core/QCheck2.ml:198:16>>*/ }
   function liftA2(f, a, b){
     /*<<src/core/QCheck2.ml:203:4>>*/ return ap(symbol$5(a, f), b);
    /*<<src/core/QCheck2.ml:203:19>>*/ }
   function bind(a, f){
     /*<<src/core/QCheck2.ml:206:4>>*/ var
     xs = a[2],
     x = a[1],
      /*<<src/core/QCheck2.ml:207:28>>*/ match =
        /*<<src/core/QCheck2.ml:207:28>>*/ caml_call1(f, x),
     ys_of_x = match[2],
     y = match[1];
    function ys_of_xs(param){
      /*<<src/core/QCheck2.ml:208:29>>*/ return map
             (function(smaller_x){
                /*<<src/core/QCheck2.ml:208:55>>*/ return bind(smaller_x, f);
               /*<<src/core/QCheck2.ml:208:71>>*/ },
              xs,
              0);
     /*<<src/core/QCheck2.ml:208:78>>*/ }
    function ys(param){
      /*<<src/core/QCheck2.ml:209:23>>*/ return append$0(ys_of_xs, ys_of_x, 0);
     /*<<src/core/QCheck2.ml:209:53>>*/ }
     /*<<src/core/QCheck2.ml:210:4>>*/ return [0, y, ys];
    /*<<src/core/QCheck2.ml:210:16>>*/ }
   function pure(x){
     /*<<src/core/QCheck2.ml:214:15>>*/ return [0, x, empty];
    /*<<src/core/QCheck2.ml:214:34>>*/ }
   function make_primitive(shrink, x){
    function shrink_trees(param){
      /*<<src/core/QCheck2.ml:217:33>>*/  /*<<src/core/QCheck2.ml:217:33>>*/ var
      _qz_ =  /*<<src/core/QCheck2.ml:217:33>>*/ caml_call1(shrink, x);
      /*<<src/core/QCheck2.ml:217:53>>*/ function _qA_(_qF_){
       /*<<?>>*/ return make_primitive(shrink, _qF_);
     }
      /*<<src/core/QCheck2.ml:217:45>>*/ function _qB_(_qD_, _qE_){
       /*<<?>>*/ return map(_qA_, _qD_, _qE_);
     }
      /*<<src/core/QCheck2.ml:217:33>>*/ return apply
             (function(_qC_){ /*<<?>>*/ return _qB_(_qz_, _qC_);});
     /*<<src/core/QCheck2.ml:217:89>>*/ }
     /*<<src/core/QCheck2.ml:218:4>>*/ return [0, x, shrink_trees];
    /*<<src/core/QCheck2.ml:218:26>>*/ }
   function sequence_list(l){
     /*<<src/core/QCheck2.ml:225:54>>*/ if(! l)
      /*<<src/core/QCheck2.ml:226:12>>*/ return pure(0);
    var tl = l[2], hd = l[1];
     /*<<src/core/QCheck2.ml:227:38>>*/ return liftA2
            (cons, hd, sequence_list(tl));
    /*<<src/core/QCheck2.ml:227:56>>*/ }
   function symbol$6(f, x, st){
     /*<<src/core/QCheck2.ml:246:26>>*/ return map$5
            (f,  /*<<src/core/QCheck2.ml:246:37>>*/ caml_call1(x, st));
    /*<<src/core/QCheck2.ml:246:43>>*/ }
   function symbol$7(x, f){
     /*<<src/core/QCheck2.ml:249:18>>*/ return function(_qy_){
      /*<<?>>*/ return symbol$6(f, x, _qy_);};
    /*<<src/core/QCheck2.ml:249:25>>*/ }
   function symbol_bind(gen, f, st){
     /*<<src/core/QCheck2.ml:271:62>>*/ return bind
            ( /*<<src/core/QCheck2.ml:271:72>>*/ caml_call1(gen, st),
             function(a){
               /*<<src/core/QCheck2.ml:271:91>>*/ return  /*<<src/core/QCheck2.ml:271:62>>*/ caml_call2
                      (f, a, st);
              /*<<src/core/QCheck2.ml:271:97>>*/ });
    /*<<src/core/QCheck2.ml:271:98>>*/ }
   function parse_origin(loc, pp, origin, low, high){
     /*<<src/core/QCheck2.ml:281:4>>*/ return  /*<<src/core/QCheck2.ml:281:7>>*/ caml_lessthan
             (origin, low)
            ? invalid_arg
              ( /*<<src/core/QCheck2.ml:281:45>>*/ caml_call5
                (asprintf(_gr_), loc, pp, origin, pp, low))
            :  /*<<src/core/QCheck2.ml:282:12>>*/ caml_greaterthan
               (origin, high)
              ? invalid_arg
                ( /*<<src/core/QCheck2.ml:282:51>>*/ caml_call5
                  (asprintf(_gs_), loc, pp, origin, pp, high))
              : origin;
    /*<<src/core/QCheck2.ml:283:15>>*/ }
   function nat(st){
     /*<<src/core/QCheck2.ml:293:4>>*/ var
      /*<<src/core/QCheck2.ml:293:12>>*/ p = float$0(st, 1.),
     x =
       p < 0.5
        ? int$0(st, 10)
        : p
          < 0.75
          ? int$0(st, 100)
          : p < 0.95 ? int$0(st, 1000) : int$0(st, 10000);
     /*<<src/core/QCheck2.ml:300:4>>*/ function shrink(a, param){
      /*<<src/core/QCheck2.ml:300:29>>*/ return int_towards(0, a, 0);
     /*<<src/core/QCheck2.ml:300:54>>*/ }
     /*<<src/core/QCheck2.ml:301:4>>*/ return make_primitive(shrink, x);
    /*<<src/core/QCheck2.ml:301:32>>*/ }
   function pick_origin_within_range(low, high, goal){
     /*<<src/core/QCheck2.ml:356:4>>*/ return  /*<<src/core/QCheck2.ml:356:7>>*/ caml_greaterthan
             (low, goal)
            ? low
            :  /*<<src/core/QCheck2.ml:357:12>>*/ caml_lessthan
               (high, goal)
              ? high
              : goal;
    /*<<src/core/QCheck2.ml:358:13>>*/ }
   function pint_raw(st){
     /*<<src/core/QCheck2.ml:408:19>>*/ return bits(st);
    /*<<src/core/QCheck2.ml:408:29>>*/ }
   function pint(opt, st){
     /*<<src/core/QCheck2.ml:422:4>>*/ if(opt)
     var sth = opt[1], origin = sth;
    else
     var origin = 0;
     /*<<src/core/QCheck2.ml:422:12>>*/  /*<<src/core/QCheck2.ml:422:12>>*/ var
     x = pint_raw(st);
    function shrink(a, param){
      /*<<src/core/QCheck2.ml:424:6>>*/  /*<<src/core/QCheck2.ml:424:19>>*/ var
      origin$0 = parse_origin(_gt_, pp_print_int, origin, 0, infinity);
      /*<<src/core/QCheck2.ml:425:6>>*/ return int_towards(origin$0, a, 0);
     /*<<src/core/QCheck2.ml:425:36>>*/ }
     /*<<src/core/QCheck2.ml:427:4>>*/ return make_primitive(shrink, x);
    /*<<src/core/QCheck2.ml:427:32>>*/ }
   function int_bound(n){
     /*<<src/core/QCheck2.ml:446:4>>*/ if(n < 0)
      /*<<src/core/QCheck2.ml:446:18>>*/ invalid_arg(_gu_);
     /*<<src/core/QCheck2.ml:447:4>>*/ return function(st){
      /*<<src/core/QCheck2.ml:448:6>>*/ return n <= 1073741822
             ? make_primitive
               (function(a, param){
                  /*<<src/core/QCheck2.ml:449:44>>*/ return int_towards
                         (0, a, 0);
                 /*<<src/core/QCheck2.ml:449:69>>*/ },
                int$0(st, n + 1 | 0))
             : map$5
               (function(r){
                  /*<<src/core/QCheck2.ml:450:30>>*/ return caml_mod
                         (r, n + 1 | 0);
                 /*<<src/core/QCheck2.ml:450:43>>*/ },
                pint(0, st)); /*<<src/core/QCheck2.ml:450:54>>*/ };
    /*<<src/core/QCheck2.ml:450:54>>*/ }
   function int_range(origin, f_low, f_high){
     /*<<src/core/QCheck2.ml:456:4>>*/ if(f_high < f_low)
      /*<<src/core/QCheck2.ml:456:23>>*/ invalid_arg(_gv_);
     /*<<src/core/QCheck2.ml:457:4>>*/ return function(st){
      /*<<src/core/QCheck2.ml:458:6>>*/ a:
     {
      if(0 > f_low && 0 <= f_high){
        /*<<src/core/QCheck2.ml:466:22>>*/ var
         /*<<src/core/QCheck2.ml:466:22>>*/ ratio =
          - f_low / (1. + f_high - f_low),
        _qw_ =
          float$0(st, 1.) <= ratio
           ? map$5
             (function(n){
                /*<<src/core/QCheck2.ml:468:34>>*/ return (- n | 0) - 1 | 0;
               /*<<src/core/QCheck2.ml:468:40>>*/ },
              int_bound(- (f_low + 1 | 0) | 0)(st))
           : int_bound(f_high)(st),
        match = _qw_;
       break a;
      }
      var
       match =
         map$5
          (function(n){
             /*<<src/core/QCheck2.ml:460:29>>*/ return f_low + n | 0;
            /*<<src/core/QCheck2.ml:460:36>>*/ },
           int_bound(f_high - f_low | 0)(st));
     }
     var n = match[1];
     function shrink(a, param){
       /*<<src/core/QCheck2.ml:472:8>>*/ if(origin)
       var
        origin$0 = origin[1],
        _qx_ =
          origin$0 < f_low
           ? invalid_arg(_gw_)
           : f_high < origin$0 ? invalid_arg(_gx_) : origin$0,
        origin$1 = _qx_;
      else
       var origin$1 = pick_origin_within_range(f_low, f_high, 0);
       /*<<src/core/QCheck2.ml:480:8>>*/ return int_towards(origin$1, a, 0);
      /*<<src/core/QCheck2.ml:480:38>>*/ }
      /*<<src/core/QCheck2.ml:482:6>>*/ return make_primitive(shrink, n); /*<<src/core/QCheck2.ml:482:34>>*/ };
    /*<<src/core/QCheck2.ml:482:34>>*/ }
   function symbol$8(low, high){
     /*<<src/core/QCheck2.ml:484:22>>*/ return int_range(0, low, high);
    /*<<src/core/QCheck2.ml:484:53>>*/ }
   function oneof(l){
     /*<<src/core/QCheck2.ml:487:40>>*/ function _qs_(_qv_){
      /*<<?>>*/ return nth(l, _qv_);
    }
     /*<<src/core/QCheck2.ml:487:4>>*/  /*<<src/core/QCheck2.ml:487:4>>*/ var
     _qt_ = int_range(0, 0, length(l) - 1 | 0);
     /*<<src/core/QCheck2.ml:487:40>>*/ return function(_qu_){
      /*<<?>>*/ return symbol_bind(_qt_, _qs_, _qu_);};
    /*<<src/core/QCheck2.ml:487:50>>*/ }
   function oneofl(l){
     /*<<src/core/QCheck2.ml:490:4>>*/ return symbol$7
            (int_range(0, 0, length(l) - 1 | 0),
             function(_qr_){ /*<<?>>*/ return nth(l, _qr_);});
    /*<<src/core/QCheck2.ml:490:50>>*/ }
   function char$1(st){
     /*<<src/core/QCheck2.ml:645:4>>*/  /*<<src/core/QCheck2.ml:645:12>>*/ var
     c = int$0(st, 256);
    function shrink(a, param){
      /*<<src/core/QCheck2.ml:646:29>>*/ var _qp_ = 97;
      /*<<src/core/QCheck2.ml:646:29>>*/ return apply
             (function(_qq_){ /*<<?>>*/ return int_towards(_qp_, a, _qq_);});
     /*<<src/core/QCheck2.ml:646:80>>*/ }
     /*<<src/core/QCheck2.ml:647:25>>*/ return map$5
            (char_of_int, make_primitive(shrink, c));
    /*<<src/core/QCheck2.ml:647:55>>*/ }
   function range(min, max){
     /*<<src/core/QCheck2.ml:652:24>>*/ return init
            ((max - min | 0) + 1 | 0,
             function(i){
               /*<<src/core/QCheck2.ml:652:60>>*/ return char_of_int
                      (i + min | 0);
              /*<<src/core/QCheck2.ml:652:81>>*/ });
    /*<<src/core/QCheck2.ml:652:82>>*/ }
    /*<<src/core/QCheck2.ml:655:25>>*/ var
     /*<<src/core/QCheck2.ml:655:25>>*/ lower_alphabet = range(97, 122),
     /*<<src/core/QCheck2.ml:658:32>>*/ before_lower_alphabet = range(32, 96),
     /*<<src/core/QCheck2.ml:661:31>>*/ after_lower_alphabet = range(123, 126),
     /*<<src/core/QCheck2.ml:664:4>>*/ printable_chars =
      flatten
       ([0,
         lower_alphabet,
         [0,
          before_lower_alphabet,
          [0, after_lower_alphabet, [0, newline$0, 0]]]]),
     /*<<src/core/QCheck2.ml:667:4>>*/ printable =
      symbol$7
       (int_range(_gy_, 0, length(printable_chars) - 1 | 0),
        function(_qo_){ /*<<?>>*/ return nth(printable_chars, _qo_);}),
     /*<<src/core/QCheck2.ml:667:4>>*/ zero$3 = 48;
    /*<<src/core/QCheck2.ml:673:4>>*/ int_range([0, zero$3], zero$3, 57);
   function bytes_size(opt, size, st){
     /*<<src/core/QCheck2.ml:676:4>>*/ if(opt)
     var sth = opt[1], gen = sth;
    else
     var gen = char$1;
     /*<<src/core/QCheck2.ml:677:16>>*/ return bind
            ( /*<<src/core/QCheck2.ml:677:4>>*/ caml_call1(size, st),
             function(size){
               /*<<src/core/QCheck2.ml:680:4>>*/ var
                /*<<src/core/QCheck2.ml:680:25>>*/ char_trees_rev = [0, 0],
                /*<<src/core/QCheck2.ml:681:16>>*/ bytes =
                 init$0
                  (size,
                   function(param){
                     /*<<src/core/QCheck2.ml:682:20>>*/  /*<<src/core/QCheck2.ml:682:36>>*/ var
                     char_tree =
                        /*<<src/core/QCheck2.ml:682:36>>*/ caml_call1(gen, st);
                    char_trees_rev[1] = [0, char_tree, char_trees_rev[1]];
                     /*<<src/core/QCheck2.ml:685:20>>*/ return root(char_tree);
                    /*<<src/core/QCheck2.ml:685:34>>*/ });
              function shrink(param){
                /*<<src/core/QCheck2.ml:687:6>>*/ var
                 /*<<src/core/QCheck2.ml:687:23>>*/ char_trees =
                  rev(char_trees_rev[1]),
                 /*<<src/core/QCheck2.ml:688:27>>*/ char_list_tree =
                  sequence_list(char_trees),
                 /*<<src/core/QCheck2.ml:689:23>>*/ bytes_tree =
                  symbol$5
                   (char_list_tree,
                    function(char_list){
                      /*<<src/core/QCheck2.ml:690:10>>*/  /*<<src/core/QCheck2.ml:690:22>>*/ var
                      bytes =
                         /*<<src/core/QCheck2.ml:690:22>>*/ caml_create_bytes(size);
                     function _qi_(_qn_, _qm_, _ql_){
                       /*<<?>>*/ return caml_bytes_set(_qn_, _qm_, _ql_);
                     }
                      /*<<src/core/QCheck2.ml:691:10>>*/ iteri
                      (function(_qj_, _qk_){
                         /*<<?>>*/ return _qi_(bytes, _qj_, _qk_);
                       },
                       char_list);
                      /*<<src/core/QCheck2.ml:691:10>>*/ return bytes;
                     /*<<src/core/QCheck2.ml:692:15>>*/ });
                /*<<src/core/QCheck2.ml:694:6>>*/ return  /*<<src/core/QCheck2.ml:694:6>>*/ caml_call1
                       (children(bytes_tree), 0);
               /*<<src/core/QCheck2.ml:694:28>>*/ }
               /*<<src/core/QCheck2.ml:696:4>>*/ return [0, bytes, shrink];
              /*<<src/core/QCheck2.ml:696:24>>*/ });
    /*<<src/core/QCheck2.ml:696:24>>*/ }
   function string_size(opt, size){
     /*<<src/core/QCheck2.ml:699:4>>*/ if(opt)
     var sth = opt[1], gen = sth;
    else
     var gen = char$1;
     /*<<src/core/QCheck2.ml:699:16>>*/ var _qg_ = [0, gen];
     /*<<src/core/QCheck2.ml:699:4>>*/ return symbol$7
            (function(_qh_){ /*<<?>>*/ return bytes_size(_qg_, size, _qh_);},
             unsafe_to_string);
    /*<<src/core/QCheck2.ml:699:51>>*/ }
    /*<<src/core/QCheck2.ml:711:26>>*/ string_size(0, nat);
    /*<<src/core/QCheck2.ml:715:25>>*/ string_size([0, printable], nat);
    /*<<src/core/QCheck2.ml:736:24>>*/  /*<<src/core/QCheck2.ml:736:24>>*/ var
    int_pos_corners = [0, 0, [0, 1, [0, 2, [0, infinity, 0]]]];
    /*<<src/core/QCheck2.ml:738:20>>*/ symbol$0
    (int_pos_corners, [0, min_int, 0]);
    /*<<src/core/QCheck2.ml:1407:2>>*/ var
     /*<<src/core/QCheck2.ml:1407:2>>*/ Test_fail =
      [248, _gz_, caml_fresh_oo_id(0)],
     /*<<src/core/QCheck2.ml:1408:2>>*/ Test_error =
      [248, _gA_, caml_fresh_oo_id(0)],
     /*<<src/core/QCheck2.ml:1409:2>>*/ Test_unexpected_success =
      [248, _gB_, caml_fresh_oo_id(0)],
     /*<<src/core/QCheck2.ml:1609:2>>*/ User_fail =
      [248, _gC_, caml_fresh_oo_id(0)];
   function pp_print_test_fail(name, out, l){
     /*<<src/core/QCheck2.ml:1871:4>>*/ function pp_list(out, param){
      /*<<?>>*/ if(! param)  /*<<src/core/QCheck2.ml:1872:14>>*/ return 0;
     var x = param[1];
     if(! param[2])
       /*<<src/core/QCheck2.ml:1873:15>>*/ return  /*<<src/core/QCheck2.ml:1873:15>>*/ caml_call1
              (fprintf$0(out)(_gE_), x);
     var y = param[2];
      /*<<src/core/QCheck2.ml:1874:18>>*/ return  /*<<src/core/QCheck2.ml:1874:18>>*/ caml_call3
             (fprintf$0(out)(_gD_), x, pp_list, y);
    }
     /*<<src/core/QCheck2.ml:1877:11>>*/  /*<<src/core/QCheck2.ml:1877:11>>*/ var
     _qf_ = length(l);
     /*<<src/core/QCheck2.ml:1876:4>>*/ return  /*<<src/core/QCheck2.ml:1876:4>>*/ caml_call4
            (fprintf$0(out)(_gF_), name, _qf_, pp_list, l);
    /*<<src/core/QCheck2.ml:1877:36>>*/ }
   function asprintf$0(fmt){
     /*<<src/core/QCheck2.ml:1880:4>>*/ var
      /*<<src/core/QCheck2.ml:1880:14>>*/ buf = create$1(128),
      /*<<src/core/QCheck2.ml:1881:14>>*/ out = formatter_of_buffer(buf);
     /*<<src/core/QCheck2.ml:1882:4>>*/ return kfprintf$0
            (function(param){
               /*<<src/core/QCheck2.ml:1882:30>>*/ return contents(buf);
              /*<<src/core/QCheck2.ml:1882:49>>*/ },
             out,
             fmt);
    /*<<src/core/QCheck2.ml:1882:58>>*/ }
   function print_test_fail(name, l){
     /*<<src/core/QCheck2.ml:1884:31>>*/ return  /*<<src/core/QCheck2.ml:1884:31>>*/ caml_call2
            (asprintf$0(_gG_),
             function(_qd_, _qe_){
               /*<<?>>*/ return pp_print_test_fail(name, _qd_, _qe_);
             },
             l);
    /*<<src/core/QCheck2.ml:1884:78>>*/ }
   function print_unexpected_success(name){
     /*<<src/core/QCheck2.ml:1886:38>>*/ return  /*<<src/core/QCheck2.ml:1886:38>>*/ caml_call1
            (sprintf$0(_gH_), name);
    /*<<src/core/QCheck2.ml:1886:106>>*/ }
   function print_test_error(name, i, e, stack){
     /*<<src/core/QCheck2.ml:1889:4>>*/  /*<<src/core/QCheck2.ml:1890:11>>*/ var
     _qc_ = to_string$4(e);
     /*<<src/core/QCheck2.ml:1889:4>>*/ return  /*<<src/core/QCheck2.ml:1889:4>>*/ caml_call4
            (sprintf$0(_gI_), name, _qc_, i, stack);
    /*<<src/core/QCheck2.ml:1890:41>>*/ }
    /*<<src/core/QCheck2.ml:1984:11>>*/ register_printer
    (function(param){
       /*<<src/core/QCheck2.ml:1985:6>>*/ if(param[1] === Test_fail){
       var l = param[3], name = param[2];
        /*<<src/core/QCheck2.ml:1986:32>>*/ return [0,
               print_test_fail(name, l)];
      }
      if(param[1] === Test_error){
       var st = param[5], e = param[4], i = param[3], name$0 = param[2];
        /*<<src/core/QCheck2.ml:1987:38>>*/ return [0,
               print_test_error(name$0, i, e, st)];
      }
      if(param[1] === Test_unexpected_success){
       var name$1 = param[2];
        /*<<src/core/QCheck2.ml:1988:42>>*/ return [0,
               print_unexpected_success(name$1)];
      }
      if(param[1] !== User_fail)
        /*<<src/core/QCheck2.ml:1990:15>>*/ return 0;
      var s = param[2];
       /*<<src/core/QCheck2.ml:1989:25>>*/ return [0, symbol(_gJ_, s)];
      /*<<src/core/QCheck2.ml:1990:20>>*/ });
   function symbol$9(x, y){
     /*<<ann-print/pp.ml:14:2>>*/ if(x !== 2147483647 && y !== 2147483647)
     return x + y | 0;
    return infinity;
    /*<<ann-print/pp.ml:14:58>>*/ }
   function requirement(param){
     /*<<ann-print/pp.ml:87:22>>*/ var param$0 = param;
     /*<<ann-print/pp.ml:87:22>>*/ for(;;){
     if(typeof param$0 === "number") return 0 === param$0 ? 0 : infinity;
     switch(param$0[0]){
       case 0:
        var len = param$0[4];  /*<<ann-print/pp.ml:89:34>>*/ return len;
       case 1:
        var len$0 = param$0[1];  /*<<ann-print/pp.ml:90:17>>*/ return len$0;
       case 2:
        var doc1 = param$0[1], param$0 = doc1; break;
       case 3:
        var req = param$0[1];  /*<<ann-print/pp.ml:93:23>>*/ return req;
       case 4:
        var req$0 = param$0[1];  /*<<ann-print/pp.ml:94:24>>*/ return req$0;
       case 5:
        var req$1 = param$0[1];  /*<<ann-print/pp.ml:95:22>>*/ return req$1;
       case 6:
        var req$2 = param$0[1];  /*<<ann-print/pp.ml:96:22>>*/ return req$2;
       default:
        var req$3 = param$0[1];  /*<<ann-print/pp.ml:97:25>>*/ return req$3;
     }
    }
    /*<<ann-print/pp.ml:97:28>>*/ }
   var empty$5 = 0;
   function fancysubstring(s, ofs, len, apparent_length){
     /*<<ann-print/pp.ml:102:2>>*/ return 0 === len
            ? empty$5
            : [0, s, ofs, len, apparent_length];
    /*<<ann-print/pp.ml:102:71>>*/ }
   function fancystring(s, apparent_length){
     /*<<ann-print/pp.ml:105:2>>*/ return fancysubstring
            (s, 0, caml_ml_string_length(s), apparent_length);
    /*<<ann-print/pp.ml:105:54>>*/ }
   function utf8_length(s){
     /*<<ann-print/pp.ml:108:2>>*/ function length_aux(s, c, i){
      /*<<ann-print/pp.ml:109:4>>*/ var c$0 = c, i$0 = i;
      /*<<ann-print/pp.ml:109:4>>*/ for(;;){
      if(caml_ml_string_length(s) <= i$0)
        /*<<ann-print/pp.ml:110:9>>*/ return c$0;
       /*<<ann-print/pp.ml:113:6>>*/ var
       n = caml_string_unsafe_get(s, i$0),
        /*<<ann-print/pp.ml:113:6>>*/ k =
         128 <= n ? 224 <= n ? 240 <= n ? 4 : 3 : 2 : 1,
       i$1 = i$0 + k | 0,
        /*<<ann-print/pp.ml:108:2>>*/ c$1 = c$0 + 1 | 0,
       c$0 = c$1,
       i$0 = i$1;
     }
     /*<<ann-print/pp.ml:122:34>>*/ }
     /*<<ann-print/pp.ml:124:2>>*/ return length_aux(s, 0, 0);
    /*<<ann-print/pp.ml:124:18>>*/ }
   function utf8string(s){
     /*<<ann-print/pp.ml:126:19>>*/ return fancystring(s, utf8_length(s));
    /*<<ann-print/pp.ml:126:48>>*/ }
   function string$0(s){
     /*<<ann-print/pp.ml:127:15>>*/ return fancystring
            (s, caml_ml_string_length(s));
    /*<<ann-print/pp.ml:127:46>>*/ }
   function char$2(c){
     /*<<ann-print/pp.ml:130:2>>*/ if(10 === c)
      /*<<ann-print/pp.ml:130:2>>*/ throw  /*<<ann-print/pp.ml:130:2>>*/ caml_maybe_attach_backtrace
            ([0, Assert_failure, _gK_], 1);
     /*<<ann-print/pp.ml:131:2>>*/ return fancystring(make$0(1, c), 1);
    /*<<ann-print/pp.ml:131:33>>*/ }
   var hardline = 1;
   function blank(n){
     /*<<ann-print/pp.ml:135:14>>*/ return 0 === n
            ? empty$5
            : 1 === n ? space : [1, n];
    /*<<ann-print/pp.ml:135:65>>*/ }
   function ifflat(doc1, doc2){
     /*<<ann-print/pp.ml:138:2>>*/ a:
    {
     if(typeof doc1 !== "number" && 2 === doc1[0]){var doc1$0 = doc1[1]; break a;}
     var doc1$0 = doc1;
    }
     /*<<ann-print/pp.ml:138:45>>*/ return [2, doc1$0, doc2];
    /*<<ann-print/pp.ml:138:64>>*/ }
   function break$1(i){
     /*<<ann-print/pp.ml:140:14>>*/ return ifflat(blank(i), hardline);
    /*<<ann-print/pp.ml:140:39>>*/ }
   function symbol$10(x, y){
     /*<<ann-print/pp.ml:143:2>>*/ if(typeof x === "number" && ! x)
      /*<<ann-print/pp.ml:144:16>>*/ return y;
    if(typeof y === "number" && ! y)  /*<<ann-print/pp.ml:145:16>>*/ return x;
     /*<<ann-print/pp.ml:146:34>>*/  /*<<ann-print/pp.ml:146:34>>*/ var
     _qb_ = requirement(y);
     /*<<ann-print/pp.ml:146:12>>*/ return [3,
            symbol$9(requirement(x), _qb_),
            x,
            y];
    /*<<ann-print/pp.ml:146:54>>*/ }
   function nest(i, x){
     /*<<ann-print/pp.ml:149:2>>*/ if(0 <= i)
      /*<<ann-print/pp.ml:150:2>>*/ return [4, requirement(x), i, x];
     /*<<ann-print/pp.ml:149:2>>*/ throw  /*<<ann-print/pp.ml:149:2>>*/ caml_maybe_attach_backtrace
           ([0, Assert_failure, _gL_], 1);
    /*<<ann-print/pp.ml:150:28>>*/ }
   function group$0(x){
     /*<<ann-print/pp.ml:153:2>>*/  /*<<ann-print/pp.ml:153:12>>*/ var
     req = requirement(x);
    return req === 2147483647 ? x : [5, req, x];
    /*<<ann-print/pp.ml:154:46>>*/ }
   function annotate(ann, x){
     /*<<ann-print/pp.ml:157:21>>*/ return [7, requirement(x), ann, x];
    /*<<ann-print/pp.ml:157:50>>*/ }
   function foldli(f, acc, xs){
     /*<<ann-print/pp.ml:161:2>>*/  /*<<ann-print/pp.ml:161:10>>*/ var
     r = [0, 0];
     /*<<ann-print/pp.ml:162:2>>*/ return fold_left
            (function(acc, x){
               /*<<ann-print/pp.ml:164:6>>*/ var i = r[1];
              r[1] = i + 1 | 0;
               /*<<ann-print/pp.ml:166:6>>*/ return  /*<<ann-print/pp.ml:166:6>>*/ caml_call3
                      (f, i, acc, x);
              /*<<ann-print/pp.ml:166:15>>*/ },
             acc,
             xs);
    /*<<ann-print/pp.ml:167:10>>*/ }
   function symbol$11(x, y){
     /*<<ann-print/pp.ml:190:27>>*/ return symbol$10(x, symbol$10(space, y));
    /*<<ann-print/pp.ml:190:42>>*/ }
   function prefix(n, b, x, y){
     /*<<ann-print/pp.ml:191:21>>*/ return group$0
            (symbol$10(x, nest(n, symbol$10(break$1(b), y))));
    /*<<ann-print/pp.ml:191:55>>*/ }
   function symbol$12(x, y){
     /*<<ann-print/pp.ml:193:28>>*/ return prefix(2, 1, x, y);
    /*<<ann-print/pp.ml:193:42>>*/ }
   function flow_map(sep, f, docs){
     /*<<ann-print/pp.ml:197:2>>*/ return foldli
            (function(i, accu, doc){
               /*<<ann-print/pp.ml:199:6>>*/ return 0 === i
                      ?  /*<<ann-print/pp.ml:200:11>>*/ caml_call1(f, doc)
                      : symbol$10
                        (accu,
                         group$0
                          (symbol$10
                            (sep,  /*<<ann-print/pp.ml:205:22>>*/ caml_call1(f, doc))));
              /*<<ann-print/pp.ml:205:28>>*/ },
             empty$5,
             docs);
    /*<<ann-print/pp.ml:206:14>>*/ }
   function flow(sep, docs){
     /*<<ann-print/pp.ml:208:20>>*/ return flow_map
            (sep,
             function(x){
               /*<<ann-print/pp.ml:208:43>>*/ return x;
              /*<<ann-print/pp.ml:208:44>>*/ },
             docs);
    /*<<ann-print/pp.ml:208:50>>*/ }
   function StringBackend(A){
    function initial_state(param){
      /*<<ann-print/pp.ml:234:25>>*/ return create$1(256);
     /*<<ann-print/pp.ml:234:42>>*/ }
    function get_output(buffer){
      /*<<ann-print/pp.ml:235:26>>*/ return contents(buffer);
     /*<<ann-print/pp.ml:235:48>>*/ }
    function add_char$0(channel, char$0){
      /*<<ann-print/pp.ml:236:30>>*/ return add_char(channel, char$0);
     /*<<ann-print/pp.ml:236:58>>*/ }
    function add_substring$0(channel, string, ofs, len){
      /*<<ann-print/pp.ml:239:4>>*/ return add_substring
             (channel, string, ofs, len);
     /*<<ann-print/pp.ml:239:47>>*/ }
    function enter_annot(channel, annot){
      /*<<ann-print/pp.ml:241:36>>*/ return 0;
     /*<<ann-print/pp.ml:241:38>>*/ }
    function exit_annot(channel, annot){
      /*<<ann-print/pp.ml:242:35>>*/ return 0;
     /*<<ann-print/pp.ml:242:37>>*/ }
     /*<<ann-print/pp.ml:229:0>>*/ return [0,
            initial_state,
            get_output,
            add_char$0,
            add_substring$0,
            enter_annot,
            exit_annot];
   }
   function modify_top(stack, f){
     /*<<ann-print/pp.ml:263:4>>*/  /*<<ann-print/pp.ml:263:16>>*/ var
     frame = pop(stack);
     /*<<ann-print/pp.ml:264:4>>*/ return push
            ( /*<<ann-print/pp.ml:264:15>>*/ caml_call1(f, frame), stack);
    /*<<ann-print/pp.ml:264:30>>*/ }
   function initial_state(param){
     /*<<ann-print/pp.ml:268:4>>*/  /*<<ann-print/pp.ml:268:16>>*/ var
     stack = create(0);
     /*<<ann-print/pp.ml:269:4>>*/ push(0, stack);
     /*<<ann-print/pp.ml:269:4>>*/ return stack;
    /*<<ann-print/pp.ml:270:9>>*/ }
   function get_output(stack){
     /*<<ann-print/pp.ml:274:4>>*/ if(1 === length$0(stack))
      /*<<ann-print/pp.ml:276:16>>*/ return rev(top(stack));
     /*<<ann-print/pp.ml:274:4>>*/ throw  /*<<ann-print/pp.ml:274:4>>*/ caml_maybe_attach_backtrace
           ([0, Assert_failure, _gM_], 1);
    /*<<ann-print/pp.ml:276:31>>*/ }
   function add_substring$0(stack, str, ofs, len){
     /*<<ann-print/pp.ml:283:4>>*/ return function(_qa_){
              /*<<?>>*/ return modify_top(stack, _qa_);
            }
            (function(frame){
               /*<<ann-print/pp.ml:284:4>>*/ return [0,
                      pcdata(sub$0(str, ofs, len)),
                      frame];
              /*<<ann-print/pp.ml:284:48>>*/ });
    /*<<ann-print/pp.ml:284:48>>*/ }
   function add_char$0(stack, char$0){
     /*<<ann-print/pp.ml:288:4>>*/ return add_substring$0
            (stack, make$0(1, char$0), 0, 1);
    /*<<ann-print/pp.ml:288:58>>*/ }
   function enter_annot(stack, param){
     /*<<ann-print/pp.ml:291:28>>*/ return push(0, stack);
    /*<<ann-print/pp.ml:291:47>>*/ }
   function exit_annot(stack, param){
    var attribs = param[2], tag = param[1];
     /*<<ann-print/pp.ml:295:12>>*/ if(1 >= length$0(stack))
      /*<<ann-print/pp.ml:295:4>>*/ throw  /*<<ann-print/pp.ml:295:4>>*/ caml_maybe_attach_backtrace
            ([0, Assert_failure, _gN_], 1);
     /*<<ann-print/pp.ml:297:19>>*/ var
      /*<<ann-print/pp.ml:297:19>>*/ children = rev(pop(stack)),
      /*<<ann-print/pp.ml:298:4>>*/ new_elt =
       0 === children
        ? leaf([0, attribs], tag)
        : node([0, attribs], tag, children);
     /*<<ann-print/pp.ml:304:24>>*/ return function(_p$_){
              /*<<?>>*/ return modify_top(stack, _p$_);
            }
            (function(frame){
               /*<<ann-print/pp.ml:304:37>>*/ return [0, new_elt, frame];
              /*<<ann-print/pp.ml:304:53>>*/ });
   }
   function Make$6(B){
     /*<<ann-print/pp.ml:314:21>>*/ var
     blank_length = 80,
      /*<<ann-print/pp.ml:314:21>>*/ blank_buffer = make$0(blank_length, 32);
    function blanks(channel, n){
      /*<<ann-print/pp.ml:317:4>>*/ var n$0 = n;
      /*<<ann-print/pp.ml:317:4>>*/ for(;;){
      if(0 >= n$0)  /*<<ann-print/pp.ml:318:9>>*/ return;
      if(n$0 <= 80)
        /*<<ann-print/pp.ml:320:9>>*/ return  /*<<ann-print/pp.ml:320:9>>*/ caml_call4
               (B[4], channel, blank_buffer, 0, n$0);
       /*<<ann-print/pp.ml:322:6>>*/  /*<<ann-print/pp.ml:322:6>>*/ caml_call4
       (B[4], channel, blank_buffer, 0, blank_length);
      var n$1 = n$0 - 80 | 0, n$0 = n$1;
     }
     /*<<ann-print/pp.ml:324:7>>*/ }
    function pretty(state, indent, flatten, doc){
      /*<<ann-print/pp.ml:338:4>>*/ var
      indent$0 = indent,
      flatten$0 = flatten,
      doc$0 = doc;
      /*<<ann-print/pp.ml:338:4>>*/ for(;;){
      if(typeof doc$0 === "number"){
       if(0 === doc$0)  /*<<ann-print/pp.ml:339:15>>*/ return;
        /*<<ann-print/pp.ml:347:8>>*/ if(flatten$0)
         /*<<ann-print/pp.ml:347:8>>*/ throw  /*<<ann-print/pp.ml:347:8>>*/ caml_maybe_attach_backtrace
               ([0, Assert_failure, _gO_], 1);
        /*<<ann-print/pp.ml:348:8>>*/  /*<<ann-print/pp.ml:348:8>>*/ caml_call2
        (B[3], state[3], 10);
        /*<<ann-print/pp.ml:349:8>>*/ blanks(state[3], indent$0);
       state[2] = indent$0;
       return;
      }
      switch(doc$0[0]){
        case 0:
         var
          apparent_length = doc$0[4],
          len = doc$0[3],
          ofs = doc$0[2],
          s = doc$0[1];
          /*<<ann-print/pp.ml:341:8>>*/  /*<<ann-print/pp.ml:341:8>>*/ caml_call4
          (B[4], state[3], s, ofs, len);
         state[2] = state[2] + apparent_length | 0;
         return;
        case 1:
         var n = doc$0[1];
          /*<<ann-print/pp.ml:344:8>>*/ blanks(state[3], n);
         state[2] = state[2] + n | 0;
         return;
        case 2:
          /*<<ann-print/pp.ml:352:8>>*/ var
          doc2 = doc$0[2],
          doc1 = doc$0[1],
           /*<<ann-print/pp.ml:352:8>>*/ doc1$0 = flatten$0 ? doc1 : doc2,
          doc$0 = doc1$0;
         break;
        case 3:
         var doc2$0 = doc$0[3], doc1$1 = doc$0[2];
          /*<<ann-print/pp.ml:354:8>>*/ pretty
          (state, indent$0, flatten$0, doc1$1);
         var doc$0 = doc2$0;
         break;
        case 4:
         var
          doc$1 = doc$0[3],
          j = doc$0[2],
          indent$1 = indent$0 + j | 0,
          indent$0 = indent$1,
          doc$0 = doc$1;
         break;
        case 5:
         var doc$2 = doc$0[2], req = doc$0[1];
          /*<<ann-print/pp.ml:358:8>>*/ if(flatten$0)
          var flatten$1 = flatten$0;
         else
          var
           _p__ = state[1],
           flatten$1 = symbol$9(state[2], req) <= _p__ ? 1 : 0;
         var flatten$0 = flatten$1, doc$0 = doc$2;
         break;
        case 6:
         var
          doc$3 = doc$0[2],
          indent$2 = state[2],
          indent$0 = indent$2,
          doc$0 = doc$3;
         break;
        default:
         var doc$4 = doc$0[3], ann = doc$0[2];
          /*<<ann-print/pp.ml:362:8>>*/  /*<<ann-print/pp.ml:362:8>>*/ caml_call2
          (B[5], state[3], ann);
          /*<<ann-print/pp.ml:363:8>>*/ pretty
          (state, indent$0, flatten$0, doc$4);
          /*<<ann-print/pp.ml:363:8>>*/ return  /*<<ann-print/pp.ml:363:8>>*/ caml_call2
                 (B[6], state[3], ann);
      }
     }
     /*<<ann-print/pp.ml:364:38>>*/ }
    function pp(width, doc){
      /*<<ann-print/pp.ml:367:4>>*/  /*<<ann-print/pp.ml:367:18>>*/ var
      channel =  /*<<ann-print/pp.ml:367:18>>*/ caml_call1(B[1], 0);
      /*<<ann-print/pp.ml:368:4>>*/ pretty([0, width, 0, channel], 0, 0, doc);
      /*<<ann-print/pp.ml:368:4>>*/ return  /*<<ann-print/pp.ml:368:4>>*/ caml_call1
             (B[2], channel);
     /*<<ann-print/pp.ml:369:24>>*/ }
     /*<<ann-print/pp.ml:310:28>>*/ return [0, , , , , pp];
   }
   function _gP_(_p9_){ /*<<?>>*/ return [0, Make$6(_p9_)[5]];}
   var
    _gQ_ =
      [0,
       initial_state,
       get_output,
       add_char$0,
       add_substring$0,
       enter_annot,
       exit_annot],
    IntSet = _e6_([0, compare$8]);
   _e8_([0, compare$8]);
   _e8_([0, compare$1]);
   function show(name){
     /*<<api/lang.ml:9:18>>*/ return name[1];
    /*<<api/lang.ml:9:26>>*/ }
   function pp$0(fmt, name){
     /*<<api/lang.ml:10:20>>*/ var _p8_ = name[1];
    return caml_call1(fprintf$0(fmt)(_gR_), _p8_);
    /*<<api/lang.ml:10:52>>*/ }
   function make$4(str){
     /*<<api/lang.ml:13:17>>*/ return [0, str, hash(str)];
    /*<<api/lang.ml:13:48>>*/ }
   function equal$9(n1, n2){
     /*<<api/lang.ml:16:20>>*/ var
     _p6_ = n1[2] === n2[2] ? 1 : 0,
     _p7_ =
       _p6_
        ?  /*<<api/lang.ml:16:39>>*/ caml_string_equal(n1[1], n2[1])
        : _p6_;
     /*<<api/lang.ml:16:39>>*/ return _p7_;
    /*<<api/lang.ml:16:54>>*/ }
   function compare$16(n1, n2){
     /*<<api/lang.ml:17:22>>*/ return  /*<<api/lang.ml:17:22>>*/ caml_compare
            (n1, n2);
    /*<<api/lang.ml:17:35>>*/ }
   var Map = ___([0, compare$16]);
    /*<<api/lang.ml:39:14>>*/ make$4(_gS_);
    /*<<api/lang.ml:41:11>>*/ make$4(_gT_);
    /*<<api/lang.ml:42:12>>*/ make$4(_gU_);
    /*<<api/lang.ml:43:13>>*/ make$4(_gV_);
    /*<<api/lang.ml:44:13>>*/ make$4(_gW_);
    /*<<api/lang.ml:45:12>>*/ make$4(_gX_);
    /*<<api/lang.ml:46:12>>*/ make$4(_gY_);
    /*<<api/lang.ml:47:14>>*/ make$4(_gZ_);
    /*<<api/lang.ml:48:11>>*/ make$4(_g0_);
    /*<<api/lang.ml:49:13>>*/ var
     /*<<api/lang.ml:49:13>>*/ zero$4 = make$4(_g1_),
     /*<<api/lang.ml:50:13>>*/ succ$3 = make$4(_g2_);
    /*<<api/lang.ml:51:11>>*/ make$4(_g3_);
    /*<<api/lang.ml:52:14>>*/ make$4(_g4_);
    /*<<api/lang.ml:53:15>>*/ make$4(_g5_);
    /*<<api/lang.ml:54:12>>*/ make$4(_g6_);
    /*<<api/lang.ml:55:12>>*/ make$4(_g7_);
   var
    pp$1 = function _p5_(_p3_, _p4_){return _p5_.fun(_p3_, _p4_);},
    show$0 = function _p2_(_p1_){return _p2_.fun(_p1_);};
   function _10(param){
     /*<<api/lang.ml:62:2>>*/ return pp$0;
    /*<<api/lang.ml:70:19>>*/ }
   function _9(param){
     /*<<api/lang.ml:62:2>>*/ return pp$1;
    /*<<api/lang.ml:70:19>>*/ }
   function _8(param){
     /*<<api/lang.ml:62:2>>*/ return pp$1;
    /*<<api/lang.ml:70:19>>*/ }
   function _7(param){
     /*<<api/lang.ml:62:2>>*/ return pp$0;
    /*<<api/lang.ml:70:19>>*/ }
   function _6(param){
     /*<<api/lang.ml:62:2>>*/ return pp$1;
    /*<<api/lang.ml:70:19>>*/ }
   function _5(param){
     /*<<api/lang.ml:62:2>>*/ return pp$1;
    /*<<api/lang.ml:70:19>>*/ }
   function _4(param){
     /*<<api/lang.ml:62:2>>*/ return pp$1;
    /*<<api/lang.ml:70:19>>*/ }
   function _3(param){
     /*<<api/lang.ml:62:2>>*/ return pp$1;
    /*<<api/lang.ml:70:19>>*/ }
   function _2(param){
     /*<<api/lang.ml:62:2>>*/ return pp$0;
    /*<<api/lang.ml:70:19>>*/ }
   function _1(param){
     /*<<api/lang.ml:62:2>>*/ return pp$1;
    /*<<api/lang.ml:70:19>>*/ }
   function _0(param){
     /*<<api/lang.ml:62:2>>*/ return pp$1;
    /*<<api/lang.ml:70:19>>*/ }
   caml_update_dummy
    (pp$1,
     function(fmt, param){
       /*<<api/lang.ml:62:2>>*/ switch(param[0]){
        case 0:
         var a0 = param[1];
          /*<<api/lang.ml:62:2>>*/ fprintf$0(fmt)(_g8_);
          /*<<api/lang.ml:62:2>>*/  /*<<api/lang.ml:62:2>>*/ caml_call1
          (fprintf$0(fmt)(_g9_), a0);
          /*<<api/lang.ml:62:2>>*/ return fprintf$0(fmt)(_g__);
        case 1:
         var a1 = param[2], a0$0 = param[1];
          /*<<api/lang.ml:62:2>>*/ fprintf$0(fmt)(_g$_);
          /*<<api/lang.ml:62:2>>*/  /*<<api/lang.ml:62:2>>*/ caml_call1
          ( /*<<api/lang.ml:62:2>>*/ caml_call1(_0(0), fmt), a0$0);
          /*<<api/lang.ml:62:2>>*/ fprintf$0(fmt)(_ha_);
          /*<<api/lang.ml:62:2>>*/ (function(x){
             /*<<api/lang.ml:64:17>>*/ fprintf$0(fmt)(_hb_);
             /*<<api/lang.ml:64:17>>*/ fold_left
             (function(sep, x){
                /*<<api/lang.ml:64:17>>*/ if(sep)
                 /*<<api/lang.ml:64:17>>*/ fprintf$0(fmt)(_hc_);
                /*<<api/lang.ml:64:17>>*/  /*<<api/lang.ml:64:17>>*/ caml_call1
                ( /*<<api/lang.ml:62:2>>*/ caml_call1(_1(0), fmt), x);
                /*<<api/lang.ml:64:17>>*/ return 1;
               /*<<api/lang.ml:64:23>>*/ },
              0,
              x);
             /*<<api/lang.ml:64:17>>*/ return fprintf$0(fmt)(_hd_);
            /*<<api/lang.ml:64:23>>*/ }
           (a1));
          /*<<api/lang.ml:62:2>>*/ return fprintf$0(fmt)(_he_);
        case 2:
         var a2 = param[3], a1$0 = param[2], a0$1 = param[1];
          /*<<api/lang.ml:62:2>>*/ fprintf$0(fmt)(_hf_);
          /*<<api/lang.ml:62:2>>*/ var _pS_ = _2(0);
          /*<<api/lang.ml:62:2>>*/  /*<<api/lang.ml:62:2>>*/ caml_call1
          (function(_pZ_){var _p0_ = _pZ_; return _pS_(fmt, _p0_);}, a0$1);
          /*<<api/lang.ml:62:2>>*/ fprintf$0(fmt)(_hg_);
          /*<<api/lang.ml:62:2>>*/  /*<<api/lang.ml:62:2>>*/ caml_call1
          ( /*<<api/lang.ml:62:2>>*/ caml_call1(_3(0), fmt), a1$0);
          /*<<api/lang.ml:62:2>>*/ fprintf$0(fmt)(_hh_);
          /*<<api/lang.ml:62:2>>*/  /*<<api/lang.ml:62:2>>*/ caml_call1
          ( /*<<api/lang.ml:62:2>>*/ caml_call1(_4(0), fmt), a2);
          /*<<api/lang.ml:62:2>>*/ return fprintf$0(fmt)(_hi_);
        case 3:
         var a1$1 = param[2], a0$2 = param[1];
          /*<<api/lang.ml:62:2>>*/ fprintf$0(fmt)(_hj_);
          /*<<api/lang.ml:62:2>>*/  /*<<api/lang.ml:62:2>>*/ caml_call1
          ( /*<<api/lang.ml:62:2>>*/ caml_call1(_5(0), fmt), a0$2);
          /*<<api/lang.ml:62:2>>*/ fprintf$0(fmt)(_hk_);
          /*<<api/lang.ml:62:2>>*/  /*<<api/lang.ml:62:2>>*/ caml_call1
          ( /*<<api/lang.ml:62:2>>*/ caml_call1(_6(0), fmt), a1$1);
          /*<<api/lang.ml:62:2>>*/ return fprintf$0(fmt)(_hl_);
        case 4:
         var a2$0 = param[3], a1$2 = param[2], a0$3 = param[1];
          /*<<api/lang.ml:62:2>>*/ fprintf$0(fmt)(_hm_);
          /*<<api/lang.ml:62:2>>*/ var _pT_ = _7(0);
          /*<<api/lang.ml:62:2>>*/  /*<<api/lang.ml:62:2>>*/ caml_call1
          (function(_pX_){var _pY_ = _pX_; return _pT_(fmt, _pY_);}, a0$3);
          /*<<api/lang.ml:62:2>>*/ fprintf$0(fmt)(_hn_);
          /*<<api/lang.ml:62:2>>*/  /*<<api/lang.ml:62:2>>*/ caml_call1
          ( /*<<api/lang.ml:62:2>>*/ caml_call1(_8(0), fmt), a1$2);
          /*<<api/lang.ml:62:2>>*/ fprintf$0(fmt)(_ho_);
          /*<<api/lang.ml:62:2>>*/  /*<<api/lang.ml:62:2>>*/ caml_call1
          ( /*<<api/lang.ml:62:2>>*/ caml_call1(_9(0), fmt), a2$0);
          /*<<api/lang.ml:62:2>>*/ return fprintf$0(fmt)(_hp_);
        case 5:
         var a0$4 = param[1];
          /*<<api/lang.ml:62:2>>*/ fprintf$0(fmt)(_hq_);
          /*<<api/lang.ml:62:2>>*/ var _pU_ = _10(0);
          /*<<api/lang.ml:62:2>>*/  /*<<api/lang.ml:62:2>>*/ caml_call1
          (function(_pV_){var _pW_ = _pV_; return _pU_(fmt, _pW_);}, a0$4);
          /*<<api/lang.ml:62:2>>*/ return fprintf$0(fmt)(_hr_);
        default:
         var a0$5 = param[1];
          /*<<api/lang.ml:62:2>>*/ fprintf$0(fmt)(_hs_);
          /*<<api/lang.ml:62:2>>*/ (function(param){
             /*<<api/lang.ml:62:2>>*/ return 937565914 <= param
                    ? pp_print_string(fmt, _ht_)
                    : pp_print_string(fmt, _hu_);
            /*<<api/lang.ml:70:19>>*/ }
           (a0$5));
          /*<<api/lang.ml:62:2>>*/ return fprintf$0(fmt)(_hv_);
      }
      /*<<api/lang.ml:70:19>>*/ });
   caml_update_dummy
    (show$0,
     function(x){
       /*<<api/lang.ml:62:2>>*/ return  /*<<api/lang.ml:62:2>>*/ caml_call2
              (asprintf(_hw_), pp$1, x);
      /*<<api/lang.ml:70:19>>*/ });
   function mkVar(n){
     /*<<api/lang.ml:73:4>>*/ if(0 <= n)
      /*<<api/lang.ml:74:4>>*/ return [0, n];
     /*<<api/lang.ml:73:4>>*/ throw  /*<<api/lang.ml:73:4>>*/ caml_maybe_attach_backtrace
           ([0, Assert_failure, _hx_], 1);
    /*<<api/lang.ml:74:9>>*/ }
   function mkApp(f, arg){
     /*<<api/lang.ml:77:4>>*/ if(1 !== f[0])
      /*<<api/lang.ml:79:11>>*/ return [1, f, [0, arg, 0]];
    var f_args = f[2], f$0 = f[1];
     /*<<api/lang.ml:78:25>>*/ return [1, f$0, symbol$0(f_args, [0, arg, 0])];
    /*<<api/lang.ml:79:27>>*/ }
   function mkApps(f, args){
     /*<<api/lang.ml:82:4>>*/ if(is_empty(args))
      /*<<api/lang.ml:82:4>>*/ throw  /*<<api/lang.ml:82:4>>*/ caml_maybe_attach_backtrace
            ([0, Assert_failure, _hy_], 1);
    if(1 !== f[0])  /*<<api/lang.ml:83:66>>*/ return [1, f, args];
    var f_args = f[2], f$0 = f[1];
     /*<<api/lang.ml:83:36>>*/ return [1, f$0, symbol$0(f_args, args)];
    /*<<api/lang.ml:83:79>>*/ }
   function mkLambda(name, ty, body){
     /*<<api/lang.ml:85:30>>*/ return [2, name, ty, body];
    /*<<api/lang.ml:85:53>>*/ }
   function mkArrow(t1, t2){
     /*<<api/lang.ml:86:22>>*/ return [3, t1, t2];
    /*<<api/lang.ml:86:36>>*/ }
   function mkArrows(ts){
     /*<<api/lang.ml:89:4>>*/  /*<<api/lang.ml:89:10>>*/ var match = rev(ts);
    if(! match)  /*<<api/lang.ml:90:12>>*/ return failwith(_hz_);
    var ts$0 = match[2], t = match[1];
     /*<<api/lang.ml:91:17>>*/ return fold_right(mkArrow, rev(ts$0), t);
    /*<<api/lang.ml:91:56>>*/ }
   function mkProd(name, ty, body){
     /*<<api/lang.ml:93:28>>*/ return [4, name, ty, body];
    /*<<api/lang.ml:93:49>>*/ }
   function mkCst(name){
     /*<<api/lang.ml:94:19>>*/ return [5, name];
    /*<<api/lang.ml:94:27>>*/ }
   var
    pp$2 = function _pR_(_pP_, _pQ_){return _pR_.fun(_pP_, _pQ_);},
    show$1 = function _pO_(_pN_){return _pO_.fun(_pN_);};
   function _1$0(param){
     /*<<api/lang.ml:106:2>>*/ return pp$1;
    /*<<api/lang.ml:106:51>>*/ }
   function _0$0(param){
     /*<<api/lang.ml:106:2>>*/ return pp$0;
    /*<<api/lang.ml:106:51>>*/ }
   caml_update_dummy
    (pp$2,
     function(fmt, x){
       /*<<api/lang.ml:106:11>>*/ fprintf$0(fmt)(_hA_);
       /*<<api/lang.ml:106:11>>*/ fold_left
       (function(sep, x){
          /*<<api/lang.ml:106:11>>*/ if(sep)
           /*<<api/lang.ml:106:11>>*/ fprintf$0(fmt)(_hB_);
          /*<<api/lang.ml:106:11>>*/ (function(param){
             /*<<api/lang.ml:106:12>>*/ var a1 = param[2], a0 = param[1];
             /*<<api/lang.ml:106:12>>*/ fprintf$0(fmt)(_hC_);
             /*<<api/lang.ml:106:2>>*/ var _pK_ = _0$0(0);
             /*<<api/lang.ml:106:2>>*/  /*<<api/lang.ml:106:2>>*/ caml_call1
             (function(_pL_){var _pM_ = _pL_; return _pK_(fmt, _pM_);}, a0);
             /*<<api/lang.ml:106:12>>*/ fprintf$0(fmt)(_hD_);
             /*<<api/lang.ml:106:2>>*/  /*<<api/lang.ml:106:2>>*/ caml_call1
             ( /*<<api/lang.ml:106:2>>*/ caml_call1(_1$0(0), fmt), a1);
             /*<<api/lang.ml:106:2>>*/ return fprintf$0(fmt)(_hE_);
            /*<<api/lang.ml:106:27>>*/ }
           (x));
          /*<<api/lang.ml:106:11>>*/ return 1;
         /*<<api/lang.ml:106:33>>*/ },
        0,
        x);
       /*<<api/lang.ml:106:11>>*/ return fprintf$0(fmt)(_hF_);
      /*<<api/lang.ml:106:33>>*/ });
   caml_update_dummy
    (show$1,
     function(x){
       /*<<api/lang.ml:106:2>>*/ return  /*<<api/lang.ml:106:2>>*/ caml_call2
              (asprintf(_hG_), pp$2, x);
      /*<<api/lang.ml:106:51>>*/ });
   var empty$6 = 0;
   function push$1(name, ty, ctx){
     /*<<api/lang.ml:110:25>>*/ return [0, [0, name, ty], ctx];
    /*<<api/lang.ml:110:42>>*/ }
   function get$3(i, ctx){
     /*<<api/lang.ml:112:18>>*/ return nth_opt(ctx, i);
    /*<<api/lang.ml:112:36>>*/ }
   function pp_pp_pos(fmt, param){
     /*<<api/lang.ml:127:2>>*/ switch(param){
      case 0:
        /*<<api/lang.ml:127:2>>*/ return pp_print_string(fmt, _hH_);
      case 1:
        /*<<api/lang.ml:127:2>>*/ return pp_print_string(fmt, _hI_);
      default:  /*<<api/lang.ml:127:2>>*/ return pp_print_string(fmt, _hJ_);
    }
    /*<<api/lang.ml:127:57>>*/ }
   var
    pp_pp_info = function _pJ_(_pH_, _pI_){return _pJ_.fun(_pH_, _pI_);},
    show_pp_info = function _pG_(_pF_){return _pG_.fun(_pF_);};
   function _0$1(param){
     /*<<api/lang.ml:129:2>>*/ return pp_pp_pos;
    /*<<api/lang.ml:131:19>>*/ }
   caml_update_dummy
    (pp_pp_info,
     function(fmt, x){
       /*<<api/lang.ml:129:2>>*/ fprintf$0(fmt)(_hK_);
       /*<<api/lang.ml:129:2>>*/  /*<<api/lang.ml:129:2>>*/ caml_call1
       (fprintf$0(fmt)(_hM_), _hL_);
      var _pA_ = x[1];
       /*<<api/lang.ml:129:2>>*/  /*<<api/lang.ml:129:2>>*/ caml_call1
       (fprintf$0(fmt)(_hN_), _pA_);
       /*<<api/lang.ml:129:2>>*/ fprintf$0(fmt)(_hO_);
       /*<<api/lang.ml:129:2>>*/ fprintf$0(fmt)(_hP_);
       /*<<api/lang.ml:129:2>>*/  /*<<api/lang.ml:129:2>>*/ caml_call1
       (fprintf$0(fmt)(_hR_), _hQ_);
       /*<<api/lang.ml:129:2>>*/ (function(x){
          /*<<api/lang.ml:130:39>>*/ fprintf$0(fmt)(_hS_);
          /*<<api/lang.ml:130:39>>*/ fold_left
          (function(sep, x){
             /*<<api/lang.ml:130:39>>*/ if(sep)
              /*<<api/lang.ml:130:39>>*/ fprintf$0(fmt)(_hT_);
             /*<<api/lang.ml:130:39>>*/  /*<<api/lang.ml:130:39>>*/ caml_call1
             (fprintf$0(fmt)(_hU_), x);
             /*<<api/lang.ml:130:39>>*/ return 1;
            /*<<api/lang.ml:130:47>>*/ },
           0,
           x);
          /*<<api/lang.ml:130:39>>*/ return fprintf$0(fmt)(_hV_);
         /*<<api/lang.ml:130:47>>*/ }
        (x[2]));
       /*<<api/lang.ml:129:2>>*/ fprintf$0(fmt)(_hW_);
       /*<<api/lang.ml:129:2>>*/ fprintf$0(fmt)(_hX_);
       /*<<api/lang.ml:129:2>>*/  /*<<api/lang.ml:129:2>>*/ caml_call1
       (fprintf$0(fmt)(_hZ_), _hY_);
      var _pB_ = x[3],  /*<<api/lang.ml:129:2>>*/ _pC_ = _0$1(0);
       /*<<api/lang.ml:129:2>>*/  /*<<api/lang.ml:129:2>>*/ caml_call1
       (function(_pD_){var _pE_ = _pD_; return _pC_(fmt, _pE_);}, _pB_);
       /*<<api/lang.ml:129:2>>*/ fprintf$0(fmt)(_h0_);
       /*<<api/lang.ml:129:2>>*/ return fprintf$0(fmt)(_h1_);
      /*<<api/lang.ml:131:19>>*/ });
   caml_update_dummy
    (show_pp_info,
     function(x){
       /*<<api/lang.ml:129:2>>*/ return  /*<<api/lang.ml:129:2>>*/ caml_call2
              (asprintf(_h2_), pp_pp_info, x);
      /*<<api/lang.ml:131:19>>*/ });
    /*<<api/lang.ml:135:14>>*/  /*<<api/lang.ml:135:14>>*/ var
    empty$7 = [0, Map[1], Map[1]];
   function add_constant(name, ty, pp, env){
     /*<<api/lang.ml:144:4>>*/ var
     _py_ = env[2],
      /*<<api/lang.ml:144:14>>*/ env$0 =
       [0, Map[2].call(null, name, ty, env[1]), _py_];
     /*<<api/lang.ml:145:4>>*/ if(! pp)
      /*<<api/lang.ml:146:14>>*/ return env$0;
     /*<<api/lang.ml:147:38>>*/ var
     pp$0 = pp[1],
      /*<<api/lang.ml:147:38>>*/ _pz_ =
       Map[2].call(null, name, pp$0, env$0[2]);
     /*<<api/lang.ml:147:17>>*/ return [0, env$0[1], _pz_];
    /*<<api/lang.ml:147:72>>*/ }
   function default_pp_info(symbol){
     /*<<api/lang.ml:149:31>>*/ return [0, symbol, 0, 0];
    /*<<api/lang.ml:149:80>>*/ }
    /*<<api/lang.ml:153:14>>*/ var
     /*<<api/lang.ml:153:14>>*/ nat$0 = mkCst(make$4(_h3_)),
    _h5_ = [0, [0, _h4_, mkArrows([0, nat$0, [0, nat$0, [0, mkProp, 0]]])], 0],
    _h7_ =
      [0, [0, _h6_, mkArrows([0, nat$0, [0, nat$0, [0, nat$0, 0]]])], _h5_],
    _h9_ =
      [0, [0, _h8_, mkArrows([0, nat$0, [0, nat$0, [0, nat$0, 0]]])], _h7_],
    _ib_ =
      [0,
       [0, _ia_, mkType],
       [0, [0, _h$_, nat$0], [0, [0, _h__, mkArrow(nat$0, nat$0)], _h9_]]],
    _id_ = [0, [0, _ic_, mkArrow(mkProp, mkProp)], _ib_],
    _if_ =
      [0, [0, _ie_, mkArrows([0, mkProp, [0, mkProp, [0, mkProp, 0]]])], _id_],
     /*<<api/lang.ml:155:6>>*/ constants =
      [0,
       [0, _ii_, mkProp],
       [0,
        [0, _ih_, mkProp],
        [0,
         [0, _ig_, mkArrows([0, mkProp, [0, mkProp, [0, mkProp, 0]]])],
         _if_]]];
    /*<<api/lang.ml:168:4>>*/ fold_left
    (function(env, param){
       /*<<api/lang.ml:169:6>>*/ var ty = param[2], name = param[1];
       /*<<api/lang.ml:169:29>>*/ return add_constant
              (make$4(name), ty, 0, env);
      /*<<api/lang.ml:169:66>>*/ },
     empty$7,
     constants);
   function lift(k, n, t){
     /*<<api/lang.ml:180:4>>*/ switch(t[0]){
      case 0:
       var i = t[1]; if(k <= i) return mkVar(i + n | 0); break;
      case 1:
        /*<<api/lang.ml:187:48>>*/ var
        args = t[2],
        f = t[1],
         /*<<api/lang.ml:187:48>>*/ _pt_ =
          map$0(function(_px_){ /*<<?>>*/ return lift(k, n, _px_);}, args);
        /*<<api/lang.ml:187:48>>*/ return mkApps(lift(k, n, f), _pt_);
      case 2:
        /*<<api/lang.ml:184:38>>*/ var
        body = t[3],
        ty = t[2],
        x = t[1],
         /*<<api/lang.ml:184:38>>*/ _pu_ = lift(k + 1 | 0, n, body);
        /*<<api/lang.ml:184:38>>*/ return mkLambda(x, lift(k, n, ty), _pu_);
      case 3:
        /*<<api/lang.ml:186:51>>*/ var
        t2 = t[2],
        t1 = t[1],
         /*<<api/lang.ml:186:51>>*/ _pv_ = lift(k, n, t2);
        /*<<api/lang.ml:186:51>>*/ return mkArrow(lift(k, n, t1), _pv_);
      case 4:
        /*<<api/lang.ml:185:56>>*/ var
        body$0 = t[3],
        ty$0 = t[2],
        x$0 = t[1],
         /*<<api/lang.ml:185:56>>*/ _pw_ = lift(k + 1 | 0, n, body$0);
        /*<<api/lang.ml:185:56>>*/ return mkProd(x$0, lift(k, n, ty$0), _pw_);
    }
     /*<<api/lang.ml:182:32>>*/ return t;
    /*<<api/lang.ml:187:74>>*/ }
   function lift_free(n, t){
     /*<<api/lang.ml:189:22>>*/ return lift(0, n, t);
    /*<<api/lang.ml:189:32>>*/ }
   function subst(k, u, t){
    function loop(depth, k, u, t){
      /*<<api/lang.ml:193:6>>*/ switch(t[0]){
       case 0:
        var i = t[1];
        if(i === k)  /*<<api/lang.ml:194:28>>*/ return lift_free(depth, u);
        if(k <= i)  /*<<api/lang.ml:195:29>>*/ return mkVar(i - 1 | 0);
        break;
       case 1:
         /*<<api/lang.ml:203:41>>*/ var
         args = t[2],
         f = t[1],
          /*<<api/lang.ml:203:41>>*/ _po_ =
           map$0
            (function(_ps_){ /*<<?>>*/ return loop(depth, k, u, _ps_);}, args);
         /*<<api/lang.ml:203:41>>*/ return mkApps(loop(depth, k, u, f), _po_);
       case 2:
         /*<<api/lang.ml:198:46>>*/ var
         body = t[3],
         ty = t[2],
         x = t[1],
          /*<<api/lang.ml:198:46>>*/ _pp_ =
           loop(depth + 1 | 0, k + 1 | 0, u, body);
         /*<<api/lang.ml:198:46>>*/ return mkLambda
                (x, loop(depth, k, u, ty), _pp_);
       case 3:
         /*<<api/lang.ml:201:59>>*/ var
         t2 = t[2],
         t1 = t[1],
          /*<<api/lang.ml:201:59>>*/ _pq_ = loop(depth, k, u, t2);
         /*<<api/lang.ml:201:59>>*/ return mkArrow
                (loop(depth, k, u, t1), _pq_);
       case 4:
         /*<<api/lang.ml:200:44>>*/ var
         body$0 = t[3],
         ty$0 = t[2],
         x$0 = t[1],
          /*<<api/lang.ml:200:44>>*/ _pr_ =
           loop(depth + 1 | 0, k + 1 | 0, u, body$0);
         /*<<api/lang.ml:200:44>>*/ return mkProd
                (x$0, loop(depth, k, u, ty$0), _pr_);
     }
      /*<<api/lang.ml:196:34>>*/ return t;
     /*<<api/lang.ml:203:73>>*/ }
     /*<<api/lang.ml:205:4>>*/ return loop(0, k, u, t);
    /*<<api/lang.ml:205:16>>*/ }
   function free_vars_rec(acc, depth, t){
     /*<<api/lang.ml:210:4>>*/ var acc$0 = acc, depth$0 = depth, t$0 = t;
     /*<<api/lang.ml:210:4>>*/ for(;;)
     switch(t$0[0]){
       case 0:
        var n = t$0[1];
        return depth$0 <= n ? [0, n - depth$0 | 0, acc$0] : acc$0;
       case 1:
        var args = t$0[2], f = t$0[1];
         /*<<api/lang.ml:214:68>>*/ return fold_left
                (function(acc, t){
                   /*<<api/lang.ml:214:37>>*/ return free_vars_rec
                          (acc, depth$0, t);
                  /*<<api/lang.ml:214:62>>*/ },
                 acc$0,
                 [0, f, args]);
       case 3:
         /*<<api/lang.ml:216:18>>*/ var
         t2 = t$0[2],
         t1 = t$0[1],
          /*<<api/lang.ml:216:18>>*/ acc$2 = free_vars_rec(acc$0, depth$0, t1),
         acc$0 = acc$2,
         t$0 = t2;
        break;
       case 2:
       case 4:
         /*<<api/lang.ml:220:18>>*/ var
         body = t$0[3],
         ty = t$0[2],
          /*<<api/lang.ml:220:18>>*/ acc$1 = free_vars_rec(acc$0, depth$0, ty),
          /*<<api/lang.ml:221:8>>*/ depth$1 = depth$0 + 1 | 0,
         acc$0 = acc$1,
         depth$0 = depth$1,
         t$0 = body;
        break;
       default:  /*<<api/lang.ml:212:24>>*/ return acc$0;
     }
    /*<<api/lang.ml:222:11>>*/ }
   function free_vars(t){
     /*<<api/lang.ml:224:20>>*/  /*<<api/lang.ml:224:38>>*/ var
     _pn_ = free_vars_rec(0, 0, t);
     /*<<api/lang.ml:224:38>>*/ return IntSet[55].call(null, _pn_);
    /*<<api/lang.ml:224:58>>*/ }
   function pp_typeError(fmt, err){
     /*<<api/lang.ml:287:4>>*/ switch(err[0]){
      case 0:
       var n = err[1];
        /*<<api/lang.ml:288:22>>*/ return  /*<<api/lang.ml:288:22>>*/ caml_call1
               (fprintf$0(fmt)(_ij_), n);
      case 1:
        /*<<api/lang.ml:289:64>>*/ var
        c = err[1],
         /*<<api/lang.ml:289:64>>*/ _pf_ = show(c);
        /*<<api/lang.ml:289:64>>*/ return  /*<<api/lang.ml:289:64>>*/ caml_call1
               (fprintf$0(fmt)(_ik_), _pf_);
      case 2:
        /*<<api/lang.ml:293:49>>*/ var
        expected_ty = err[3],
        actual_ty = err[2],
        term = err[1],
         /*<<api/lang.ml:293:49>>*/ _pg_ =
           /*<<api/lang.ml:293:49>>*/ caml_call1(show$0, expected_ty),
         /*<<api/lang.ml:293:27>>*/ _ph_ =
           /*<<api/lang.ml:293:27>>*/ caml_call1(show$0, actual_ty),
         /*<<api/lang.ml:293:10>>*/ _pi_ =
           /*<<api/lang.ml:293:10>>*/ caml_call1(show$0, term);
        /*<<api/lang.ml:293:49>>*/ return  /*<<api/lang.ml:293:49>>*/ caml_call3
               (fprintf$0(fmt)(_il_), _pi_, _ph_, _pg_);
      case 3:
        /*<<api/lang.ml:297:27>>*/ var
        ty = err[2],
        term$0 = err[1],
         /*<<api/lang.ml:297:27>>*/ _pj_ =
           /*<<api/lang.ml:297:27>>*/ caml_call1(show$0, ty),
         /*<<api/lang.ml:297:10>>*/ _pk_ =
           /*<<api/lang.ml:297:10>>*/ caml_call1(show$0, term$0);
        /*<<api/lang.ml:297:27>>*/ return  /*<<api/lang.ml:297:27>>*/ caml_call2
               (fprintf$0(fmt)(_im_), _pk_, _pj_);
      default:
        /*<<api/lang.ml:301:27>>*/ var
        ty$0 = err[2],
        term$1 = err[1],
         /*<<api/lang.ml:301:27>>*/ _pl_ =
           /*<<api/lang.ml:301:27>>*/ caml_call1(show$0, ty$0),
         /*<<api/lang.ml:301:10>>*/ _pm_ =
           /*<<api/lang.ml:301:10>>*/ caml_call1(show$0, term$1);
        /*<<api/lang.ml:301:27>>*/ return  /*<<api/lang.ml:301:27>>*/ caml_call2
               (fprintf$0(fmt)(_in_), _pm_, _pl_);
    }
    /*<<api/lang.ml:301:41>>*/ }
   function show_typeError(err){
     /*<<api/lang.ml:303:27>>*/ return  /*<<api/lang.ml:303:27>>*/ caml_call2
            (asprintf(_io_), pp_typeError, err);
    /*<<api/lang.ml:303:64>>*/ }
    /*<<api/lang.ml:305:2>>*/  /*<<api/lang.ml:305:2>>*/ var
    TypingError = [248, _ip_, caml_fresh_oo_id(0)];
   function check_rec(env, ctx, t){
     /*<<api/lang.ml:310:4>>*/ switch(t[0]){
      case 0:
        /*<<api/lang.ml:312:14>>*/ var
        n = t[1],
         /*<<api/lang.ml:312:14>>*/ match = get$3(n, ctx);
       if(! match)
         /*<<api/lang.ml:313:18>>*/ throw  /*<<api/lang.ml:313:18>>*/ caml_maybe_attach_backtrace
               ([0, TypingError, [0, n]], 1);
       var ty = match[1][2];
        /*<<api/lang.ml:314:26>>*/ return ty;
      case 1:
       var
        args = t[2],
        f = t[1],
        res_ty =
          fold_left
            (function(_pd_, _pe_){
               /*<<?>>*/ return check_app(env, ctx, _pd_, _pe_);
             },
             [0, f, check_rec(env, ctx, f)],
             args)
           [2];
        /*<<api/lang.ml:336:8>>*/ return res_ty;
      case 2:
       var body = t[3], ty$0 = t[2], x = t[1];
        /*<<api/lang.ml:323:16>>*/ check_rec(env, ctx, ty$0);
        /*<<api/lang.ml:324:22>>*/ var
         /*<<api/lang.ml:324:22>>*/ body_ty =
          check_rec(env, push$1(x, ty$0, ctx), body),
         /*<<api/lang.ml:327:24>>*/ _pc_ = free_vars(body_ty);
        /*<<api/lang.ml:327:11>>*/ return IntSet[5].call(null, 0, _pc_)
               ? mkProd(x, ty$0, body_ty)
               : mkArrow(ty$0, lift_free(-1, body_ty));
      case 3:
        /*<<api/lang.ml:338:19>>*/ var
        b = t[2],
        a = t[1],
         /*<<api/lang.ml:338:19>>*/ a_ty = check_rec(env, ctx, a),
         /*<<api/lang.ml:339:19>>*/ b_ty = check_rec(env, ctx, b);
        /*<<api/lang.ml:340:8>>*/ if(6 !== a_ty[0])
         /*<<api/lang.ml:343:18>>*/ throw  /*<<api/lang.ml:343:18>>*/ caml_maybe_attach_backtrace
               ([0, TypingError, [4, a, a_ty]], 1);
       if(6 === b_ty[0])  /*<<api/lang.ml:341:28>>*/ return b_ty;
        /*<<api/lang.ml:342:23>>*/ throw  /*<<api/lang.ml:342:23>>*/ caml_maybe_attach_backtrace
              ([0, TypingError, [4, b, b_ty]], 1);
      case 4:
        /*<<api/lang.ml:346:19>>*/ var
        b$0 = t[3],
        a$0 = t[2],
        x$0 = t[1],
         /*<<api/lang.ml:346:19>>*/ a_ty$0 = check_rec(env, ctx, a$0),
         /*<<api/lang.ml:347:19>>*/ b_ty$0 =
          check_rec(env, push$1(x$0, a$0, ctx), b$0);
        /*<<api/lang.ml:348:8>>*/ if(6 !== a_ty$0[0])
         /*<<api/lang.ml:351:18>>*/ throw  /*<<api/lang.ml:351:18>>*/ caml_maybe_attach_backtrace
               ([0, TypingError, [4, a$0, a_ty$0]], 1);
       if(6 === b_ty$0[0])  /*<<api/lang.ml:349:28>>*/ return b_ty$0;
        /*<<api/lang.ml:350:23>>*/ throw  /*<<api/lang.ml:350:23>>*/ caml_maybe_attach_backtrace
              ([0, TypingError, [4, b$0, b_ty$0]], 1);
      case 5:
        /*<<api/lang.ml:317:14>>*/ var
        c = t[1],
         /*<<api/lang.ml:317:14>>*/ match$0 = Map[18].call(null, c, env[1]);
       if(! match$0)
         /*<<api/lang.ml:318:18>>*/ throw  /*<<api/lang.ml:318:18>>*/ caml_maybe_attach_backtrace
               ([0, TypingError, [1, c]], 1);
       var ty$1 = match$0[1];
        /*<<api/lang.ml:319:21>>*/ return ty$1;
      default:  /*<<api/lang.ml:321:16>>*/ return _iq_;
    }
    /*<<api/lang.ml:352:9>>*/ }
   function check_app(env, ctx, param, arg){
     /*<<api/lang.ml:357:17>>*/ var
     f_ty = param[2],
     f = param[1],
      /*<<api/lang.ml:357:17>>*/ arg_ty = check_rec(env, ctx, arg);
     /*<<api/lang.ml:358:4>>*/ switch(f_ty[0]){
      case 3:
       var b = f_ty[2], a = f_ty[1];
        /*<<api/lang.ml:360:11>>*/ if
        ( /*<<api/lang.ml:360:11>>*/ caml_equal(arg_ty, a))
         /*<<api/lang.ml:361:13>>*/ return [0, mkApp(f, arg), b];
        /*<<api/lang.ml:362:13>>*/ throw  /*<<api/lang.ml:362:13>>*/ caml_maybe_attach_backtrace
              ([0, TypingError, [2, arg, arg_ty, a]], 1);
      case 4:
       var b$0 = f_ty[3], a$0 = f_ty[2];
        /*<<api/lang.ml:364:11>>*/ if
        (!  /*<<api/lang.ml:364:11>>*/ caml_equal(arg_ty, a$0))
         /*<<api/lang.ml:366:13>>*/ throw  /*<<api/lang.ml:366:13>>*/ caml_maybe_attach_backtrace
               ([0, TypingError, [2, arg, arg_ty, a$0]], 1);
        /*<<api/lang.ml:365:32>>*/  /*<<api/lang.ml:365:32>>*/ var
        _pb_ = subst(0, arg, b$0);
        /*<<api/lang.ml:365:13>>*/ return [0, mkApp(f, arg), _pb_];
      default:
        /*<<api/lang.ml:367:11>>*/ throw  /*<<api/lang.ml:367:11>>*/ caml_maybe_attach_backtrace
              ([0, TypingError, [3, f, f_ty]], 1);
    }
   }
   function check$1(opt, env, t){
     /*<<api/lang.ml:369:47>>*/ if(opt)
     var sth = opt[1], context = sth;
    else
     var context = empty$6;
     /*<<api/lang.ml:369:47>>*/ return check_rec(env, context, t);
    /*<<api/lang.ml:369:70>>*/ }
   var
    _ir_ = [0, symbol$8(97, 122), 0],
     /*<<api/lang.ml:380:37>>*/ _is_ = oneof([0, symbol$8(65, 90), _ir_]);
    /*<<api/lang.ml:380:24>>*/ function gen_letter(_pa_){
     /*<<?>>*/ return symbol$6(chr, _is_, _pa_);
   }
    /*<<api/lang.ml:384:26>>*/ string_size([0, gen_letter], symbol$8(1, 3));
    /*<<api/lang.ml:386:32>>*/ oneofl([0, mkProp, [0, mkType, 0]]);
    /*<<api/logic.ml:4:0>>*/ var
     /*<<api/logic.ml:4:0>>*/ InvalidGoalId = [248, _it_, caml_fresh_oo_id(0)],
     /*<<api/logic.ml:5:0>>*/ InvalidHyphName =
      [248, _iu_, caml_fresh_oo_id(0)],
    pp_hyp = function _o$_(_o9_, _o__){return _o$_.fun(_o9_, _o__);},
    show_hyp = function _o8_(_o7_){return _o8_.fun(_o7_);};
   function _1$1(param){
     /*<<api/logic.ml:12:0>>*/ return pp$1;
    /*<<api/logic.ml:12:78>>*/ }
   function _0$2(param){
     /*<<api/logic.ml:12:0>>*/ return pp$0;
    /*<<api/logic.ml:12:78>>*/ }
   caml_update_dummy
    (pp_hyp,
     function(fmt, x){
       /*<<api/logic.ml:12:0>>*/ fprintf$0(fmt)(_iv_);
       /*<<api/logic.ml:12:0>>*/  /*<<api/logic.ml:12:0>>*/ caml_call1
       (fprintf$0(fmt)(_ix_), _iw_);
      var _o1_ = x[1],  /*<<api/logic.ml:12:0>>*/ _o2_ = _0$2(0);
       /*<<api/logic.ml:12:0>>*/  /*<<api/logic.ml:12:0>>*/ caml_call1
       (function(_o5_){var _o6_ = _o5_; return _o2_(fmt, _o6_);}, _o1_);
       /*<<api/logic.ml:12:0>>*/ fprintf$0(fmt)(_iy_);
       /*<<api/logic.ml:12:0>>*/ fprintf$0(fmt)(_iz_);
       /*<<api/logic.ml:12:0>>*/  /*<<api/logic.ml:12:0>>*/ caml_call1
       (fprintf$0(fmt)(_iB_), _iA_);
      var _o3_ = x[2];
       /*<<api/logic.ml:12:0>>*/  /*<<api/logic.ml:12:0>>*/ caml_call1
       (fprintf$0(fmt)(_iC_), _o3_);
       /*<<api/logic.ml:12:0>>*/ fprintf$0(fmt)(_iD_);
       /*<<api/logic.ml:12:0>>*/ fprintf$0(fmt)(_iE_);
       /*<<api/logic.ml:12:0>>*/  /*<<api/logic.ml:12:0>>*/ caml_call1
       (fprintf$0(fmt)(_iG_), _iF_);
      var _o4_ = x[3];
       /*<<api/logic.ml:12:0>>*/  /*<<api/logic.ml:12:0>>*/ caml_call1
       ( /*<<api/logic.ml:12:0>>*/ caml_call1(_1$1(0), fmt), _o4_);
       /*<<api/logic.ml:12:0>>*/ fprintf$0(fmt)(_iH_);
       /*<<api/logic.ml:12:0>>*/ return fprintf$0(fmt)(_iI_);
      /*<<api/logic.ml:12:78>>*/ });
   caml_update_dummy
    (show_hyp,
     function(x){
       /*<<api/logic.ml:12:0>>*/ return  /*<<api/logic.ml:12:0>>*/ caml_call2
              (asprintf(_iJ_), pp_hyp, x);
      /*<<api/logic.ml:12:78>>*/ });
   function byid(hyps, id){
     /*<<api/logic.ml:22:4>>*/ return get_exn
            (assoc$0(id, hyps), [0, InvalidHyphName, id]);
    /*<<api/logic.ml:22:74>>*/ }
   function remove(hyps, id){
     /*<<api/logic.ml:29:4>>*/ return find_all$0
            (function(param){
               /*<<api/logic.ml:29:16>>*/ var x = param[1];
               /*<<api/logic.ml:29:35>>*/ return 1 - equal$9(x, id);
              /*<<api/logic.ml:29:53>>*/ },
             hyps);
    /*<<api/logic.ml:29:58>>*/ }
   function move(hyps, from, before){
     /*<<api/logic.ml:32:4>>*/ var
      /*<<api/logic.ml:32:13>>*/ tg = byid(hyps, from),
      /*<<api/logic.ml:33:15>>*/ hyps$0 = remove(hyps, from);
     /*<<api/logic.ml:35:4>>*/ if(! before)
      /*<<api/logic.ml:36:14>>*/ return [0, [0, from, tg], hyps$0];
     /*<<api/logic.ml:45:24>>*/ var
     before$0 = before[1],
     pos =
       get_exn
         (findi$0
           (function(param, _o0_){
              /*<<api/logic.ml:41:15>>*/ var x = _o0_[1];
              /*<<api/logic.ml:41:32>>*/ return equal$9(x, before$0);
             /*<<api/logic.ml:41:52>>*/ },
            hyps$0),
          [0, InvalidHyphName, before$0])
        [1],
      /*<<api/logic.ml:45:24>>*/ match = split_nth(1 + pos | 0, hyps$0),
     pre = match[2],
     post = match[1];
     /*<<api/logic.ml:46:15>>*/ return symbol$0(post, [0, [0, from, tg], pre]);
    /*<<api/logic.ml:46:34>>*/ }
   function ids(hyps){
     /*<<api/logic.ml:51:23>>*/ return map$4
            (function(_oZ_){ /*<<?>>*/ return _oZ_[1];}, hyps);
    /*<<api/logic.ml:51:40>>*/ }
   function iter$8(f, hyps){
     /*<<api/logic.ml:53:26>>*/ return iter$0
            (function(param){
               /*<<api/logic.ml:53:36>>*/ var hyp = param[2];
               /*<<api/logic.ml:53:59>>*/ return  /*<<api/logic.ml:53:59>>*/ caml_call1
                      (f, hyp);
              /*<<api/logic.ml:53:65>>*/ },
             hyps);
    /*<<api/logic.ml:53:70>>*/ }
   function to_list(hyps){
     /*<<api/logic.ml:60:27>>*/ return map$4
            (function(_oY_){ /*<<?>>*/ return _oY_[2];}, hyps);
    /*<<api/logic.ml:60:44>>*/ }
   var
    pp_lemma = function _oX_(_oV_, _oW_){return _oX_.fun(_oV_, _oW_);},
    show_lemma = function _oU_(_oT_){return _oU_.fun(_oT_);};
   function _2$0(param){
     /*<<api/logic.ml:65:0>>*/ return pp$1;
    /*<<api/logic.ml:66:17>>*/ }
   function _1$2(param){
     /*<<api/logic.ml:65:0>>*/ return pp$0;
    /*<<api/logic.ml:66:17>>*/ }
   function _0$3(param){
     /*<<api/logic.ml:65:0>>*/ return pp$0;
    /*<<api/logic.ml:66:17>>*/ }
   caml_update_dummy
    (pp_lemma,
     function(fmt, x){
       /*<<api/logic.ml:65:0>>*/ fprintf$0(fmt)(_iK_);
       /*<<api/logic.ml:65:0>>*/  /*<<api/logic.ml:65:0>>*/ caml_call1
       (fprintf$0(fmt)(_iM_), _iL_);
      var _oK_ = x[1],  /*<<api/logic.ml:65:0>>*/ _oL_ = _0$3(0);
       /*<<api/logic.ml:65:0>>*/  /*<<api/logic.ml:65:0>>*/ caml_call1
       (function(_oR_){var _oS_ = _oR_; return _oL_(fmt, _oS_);}, _oK_);
       /*<<api/logic.ml:65:0>>*/ fprintf$0(fmt)(_iN_);
       /*<<api/logic.ml:65:0>>*/ fprintf$0(fmt)(_iO_);
       /*<<api/logic.ml:65:0>>*/  /*<<api/logic.ml:65:0>>*/ caml_call1
       (fprintf$0(fmt)(_iQ_), _iP_);
      var _oM_ = x[2],  /*<<api/logic.ml:65:0>>*/ _oN_ = _1$2(0);
       /*<<api/logic.ml:65:0>>*/  /*<<api/logic.ml:65:0>>*/ caml_call1
       (function(_oP_){var _oQ_ = _oP_; return _oN_(fmt, _oQ_);}, _oM_);
       /*<<api/logic.ml:65:0>>*/ fprintf$0(fmt)(_iR_);
       /*<<api/logic.ml:65:0>>*/ fprintf$0(fmt)(_iS_);
       /*<<api/logic.ml:65:0>>*/  /*<<api/logic.ml:65:0>>*/ caml_call1
       (fprintf$0(fmt)(_iU_), _iT_);
      var _oO_ = x[3];
       /*<<api/logic.ml:65:0>>*/  /*<<api/logic.ml:65:0>>*/ caml_call1
       ( /*<<api/logic.ml:65:0>>*/ caml_call1(_2$0(0), fmt), _oO_);
       /*<<api/logic.ml:65:0>>*/ fprintf$0(fmt)(_iV_);
       /*<<api/logic.ml:65:0>>*/ return fprintf$0(fmt)(_iW_);
      /*<<api/logic.ml:66:17>>*/ });
   caml_update_dummy
    (show_lemma,
     function(x){
       /*<<api/logic.ml:65:0>>*/ return  /*<<api/logic.ml:65:0>>*/ caml_call2
              (asprintf(_iX_), pp_lemma, x);
      /*<<api/logic.ml:66:17>>*/ });
    /*<<api/logic.ml:75:14>>*/ var
     /*<<api/logic.ml:75:14>>*/ empty$8 = [0, empty$7, Map[1]],
    pp_item = function _oJ_(_oH_, _oI_){return _oJ_.fun(_oH_, _oI_);},
    show_item = function _oG_(_oF_){return _oG_.fun(_oF_);};
   function _5$0(param){
     /*<<api/logic.ml:110:0>>*/ return pp$1;
    /*<<api/logic.ml:114:17>>*/ }
   function _4$0(param){
     /*<<api/logic.ml:110:0>>*/ return pp$1;
    /*<<api/logic.ml:114:17>>*/ }
   function _3$0(param){
     /*<<api/logic.ml:110:0>>*/ return pp$0;
    /*<<api/logic.ml:114:17>>*/ }
   function _2$1(param){
     /*<<api/logic.ml:110:0>>*/ return pp_hyp;
    /*<<api/logic.ml:114:17>>*/ }
   function _1$3(param){
     /*<<api/logic.ml:110:0>>*/ return pp$0;
    /*<<api/logic.ml:114:17>>*/ }
   function _0$4(param){
     /*<<api/logic.ml:110:0>>*/ return pp$1;
    /*<<api/logic.ml:114:17>>*/ }
   caml_update_dummy
    (pp_item,
     function(fmt, param){
       /*<<api/logic.ml:110:0>>*/ switch(param[0]){
        case 0:
         var a0 = param[1];
          /*<<api/logic.ml:110:0>>*/ fprintf$0(fmt)(_iY_);
          /*<<api/logic.ml:110:0>>*/  /*<<api/logic.ml:110:0>>*/ caml_call1
          ( /*<<api/logic.ml:110:0>>*/ caml_call1(_0$4(0), fmt), a0);
          /*<<api/logic.ml:110:0>>*/ return fprintf$0(fmt)(_iZ_);
        case 1:
         var a1 = param[2], a0$0 = param[1];
          /*<<api/logic.ml:110:0>>*/ fprintf$0(fmt)(_i0_);
          /*<<api/logic.ml:110:0>>*/ var _oz_ = _1$3(0);
          /*<<api/logic.ml:110:0>>*/  /*<<api/logic.ml:110:0>>*/ caml_call1
          (function(_oD_){var _oE_ = _oD_; return _oz_(fmt, _oE_);}, a0$0);
          /*<<api/logic.ml:110:0>>*/ fprintf$0(fmt)(_i1_);
          /*<<api/logic.ml:110:0>>*/  /*<<api/logic.ml:110:0>>*/ caml_call1
          ( /*<<api/logic.ml:110:0>>*/ caml_call1(_2$1(0), fmt), a1);
          /*<<api/logic.ml:110:0>>*/ return fprintf$0(fmt)(_i2_);
        default:
         var a2 = param[3], a1$0 = param[2], a0$1 = param[1];
          /*<<api/logic.ml:110:0>>*/ fprintf$0(fmt)(_i3_);
          /*<<api/logic.ml:110:0>>*/ var _oA_ = _3$0(0);
          /*<<api/logic.ml:110:0>>*/  /*<<api/logic.ml:110:0>>*/ caml_call1
          (function(_oB_){var _oC_ = _oB_; return _oA_(fmt, _oC_);}, a0$1);
          /*<<api/logic.ml:110:0>>*/ fprintf$0(fmt)(_i4_);
          /*<<api/logic.ml:110:0>>*/  /*<<api/logic.ml:110:0>>*/ caml_call1
          ( /*<<api/logic.ml:110:0>>*/ caml_call1(_4$0(0), fmt), a1$0);
          /*<<api/logic.ml:110:0>>*/ fprintf$0(fmt)(_i5_);
          /*<<api/logic.ml:110:0>>*/ (function(param){
             /*<<api/logic.ml:113:29>>*/ if(! param)
              /*<<api/logic.ml:113:29>>*/ return pp_print_string(fmt, _i8_);
            var x = param[1];
             /*<<api/logic.ml:113:29>>*/ pp_print_string(fmt, _i6_);
             /*<<api/logic.ml:113:29>>*/  /*<<api/logic.ml:113:29>>*/ caml_call1
             ( /*<<api/logic.ml:110:0>>*/ caml_call1(_5$0(0), fmt), x);
             /*<<api/logic.ml:113:29>>*/ return pp_print_string(fmt, _i7_);
            /*<<api/logic.ml:113:42>>*/ }
           (a2));
          /*<<api/logic.ml:110:0>>*/ return fprintf$0(fmt)(_i9_);
      }
      /*<<api/logic.ml:114:17>>*/ });
   caml_update_dummy
    (show_item,
     function(x){
       /*<<api/logic.ml:110:0>>*/ return  /*<<api/logic.ml:110:0>>*/ caml_call2
              (asprintf(_i__), pp_item, x);
      /*<<api/logic.ml:114:17>>*/ });
   var
    pp_kind = function _oy_(_ow_, _ox_){return _oy_.fun(_ow_, _ox_);},
    show_kind = function _ov_(_ou_){return _ov_.fun(_ou_);};
   function _2$2(param){
     /*<<api/logic.ml:120:2>>*/ return pp$0;
    /*<<api/logic.ml:121:19>>*/ }
   function _1$4(param){
     /*<<api/logic.ml:120:2>>*/ return pp$0;
    /*<<api/logic.ml:121:19>>*/ }
   function _0$5(param){
     /*<<api/logic.ml:120:2>>*/ return pp$0;
    /*<<api/logic.ml:121:19>>*/ }
   caml_update_dummy
    (pp_kind,
     function(fmt, param){
       /*<<api/logic.ml:120:2>>*/ if(typeof param === "number")
        /*<<api/logic.ml:120:2>>*/ return pp_print_string(fmt, _i$_);
      switch(param[0]){
        case 0:
         var a0 = param[1];
          /*<<api/logic.ml:120:2>>*/ fprintf$0(fmt)(_ja_);
          /*<<api/logic.ml:120:2>>*/ var _ol_ = _0$5(0);
          /*<<api/logic.ml:120:2>>*/  /*<<api/logic.ml:120:2>>*/ caml_call1
          (function(_os_){var _ot_ = _os_; return _ol_(fmt, _ot_);}, a0);
          /*<<api/logic.ml:120:2>>*/ return fprintf$0(fmt)(_jb_);
        case 1:
         var a0$0 = param[1];
          /*<<api/logic.ml:120:2>>*/ fprintf$0(fmt)(_jc_);
          /*<<api/logic.ml:120:2>>*/ var _om_ = _1$4(0);
          /*<<api/logic.ml:120:2>>*/  /*<<api/logic.ml:120:2>>*/ caml_call1
          (function(_oq_){var _or_ = _oq_; return _om_(fmt, _or_);}, a0$0);
          /*<<api/logic.ml:120:2>>*/ return fprintf$0(fmt)(_jd_);
        default:
         var a0$1 = param[1];
          /*<<api/logic.ml:120:2>>*/ fprintf$0(fmt)(_je_);
          /*<<api/logic.ml:120:2>>*/ var _on_ = _2$2(0);
          /*<<api/logic.ml:120:2>>*/  /*<<api/logic.ml:120:2>>*/ caml_call1
          (function(_oo_){var _op_ = _oo_; return _on_(fmt, _op_);}, a0$1);
          /*<<api/logic.ml:120:2>>*/ return fprintf$0(fmt)(_jf_);
      }
      /*<<api/logic.ml:121:19>>*/ });
   caml_update_dummy
    (show_kind,
     function(x){
       /*<<api/logic.ml:120:2>>*/ return  /*<<api/logic.ml:120:2>>*/ caml_call2
              (asprintf(_jg_), pp_kind, x);
      /*<<api/logic.ml:121:19>>*/ });
   var
    pp$3 = function _ok_(_oi_, _oj_){return _ok_.fun(_oi_, _oj_);},
    show$2 = function _oh_(_og_){return _oh_.fun(_og_);};
   function _0$6(param){
     /*<<api/logic.ml:123:2>>*/ return pp_kind;
    /*<<api/logic.ml:123:72>>*/ }
   caml_update_dummy
    (pp$3,
     function(fmt, x){
       /*<<api/logic.ml:123:2>>*/ fprintf$0(fmt)(_jh_);
       /*<<api/logic.ml:123:2>>*/  /*<<api/logic.ml:123:2>>*/ caml_call1
       (fprintf$0(fmt)(_jj_), _ji_);
      var _oe_ = x[1];
       /*<<api/logic.ml:123:2>>*/  /*<<api/logic.ml:123:2>>*/ caml_call1
       (fprintf$0(fmt)(_jk_), _oe_);
       /*<<api/logic.ml:123:2>>*/ fprintf$0(fmt)(_jl_);
       /*<<api/logic.ml:123:2>>*/ fprintf$0(fmt)(_jm_);
       /*<<api/logic.ml:123:2>>*/  /*<<api/logic.ml:123:2>>*/ caml_call1
       (fprintf$0(fmt)(_jo_), _jn_);
      var _of_ = x[2];
       /*<<api/logic.ml:123:2>>*/  /*<<api/logic.ml:123:2>>*/ caml_call1
       ( /*<<api/logic.ml:123:2>>*/ caml_call1(_0$6(0), fmt), _of_);
       /*<<api/logic.ml:123:2>>*/ fprintf$0(fmt)(_jp_);
       /*<<api/logic.ml:123:2>>*/ fprintf$0(fmt)(_jq_);
       /*<<api/logic.ml:123:2>>*/  /*<<api/logic.ml:123:2>>*/ caml_call1
       (fprintf$0(fmt)(_js_), _jr_);
       /*<<api/logic.ml:123:2>>*/ (function(x){
          /*<<api/logic.ml:123:44>>*/ fprintf$0(fmt)(_jt_);
          /*<<api/logic.ml:123:44>>*/ fold_left
          (function(sep, x){
             /*<<api/logic.ml:123:44>>*/ if(sep)
              /*<<api/logic.ml:123:44>>*/ fprintf$0(fmt)(_ju_);
             /*<<api/logic.ml:123:44>>*/  /*<<api/logic.ml:123:44>>*/ caml_call1
             (fprintf$0(fmt)(_jv_), x);
             /*<<api/logic.ml:123:44>>*/ return 1;
            /*<<api/logic.ml:123:52>>*/ },
           0,
           x);
          /*<<api/logic.ml:123:44>>*/ return fprintf$0(fmt)(_jw_);
         /*<<api/logic.ml:123:52>>*/ }
        (x[3]));
       /*<<api/logic.ml:123:2>>*/ fprintf$0(fmt)(_jx_);
       /*<<api/logic.ml:123:2>>*/ return fprintf$0(fmt)(_jy_);
      /*<<api/logic.ml:123:72>>*/ });
   caml_update_dummy
    (show$2,
     function(x){
       /*<<api/logic.ml:123:2>>*/ return  /*<<api/logic.ml:123:2>>*/ caml_call2
              (asprintf(_jz_), pp$3, x);
      /*<<api/logic.ml:123:72>>*/ });
   function make$5(opt, _od_, goal){
     /*<<api/logic.ml:128:4>>*/ if(opt)
     var sth = opt[1], kind = sth;
    else
     var kind = 0;
     /*<<api/logic.ml:128:4>>*/ if(_od_)
     var sth$0 = _od_[1], sub = sth$0;
    else
     var sub = 0;
     /*<<api/logic.ml:128:4>>*/ return [0, goal, kind, sub];
    /*<<api/logic.ml:128:23>>*/ }
   function string_of_kind(param){
     /*<<api/logic.ml:130:23>>*/ if(typeof param === "number")
      /*<<api/logic.ml:132:15>>*/ return _jA_;
    switch(param[0]){
      case 0:
        /*<<api/logic.ml:131:15>>*/ return _jB_;
      case 1:
        /*<<api/logic.ml:133:19>>*/ return _jC_;
      default:  /*<<api/logic.ml:134:19>>*/ return _jD_;
    }
    /*<<api/logic.ml:134:23>>*/ }
   function name_of_kind(param){
     /*<<api/logic.ml:136:21>>*/ if(typeof param === "number")
      /*<<api/logic.ml:138:15>>*/ return make$4(_jE_);
    switch(param[0]){
      case 0:
       var name = param[1];  /*<<api/logic.ml:137:18>>*/ return name;
      case 1:
       var name$0 = param[1];  /*<<api/logic.ml:139:22>>*/ return name$0;
      default:
       var name$1 = param[1];  /*<<api/logic.ml:140:22>>*/ return name$1;
    }
    /*<<api/logic.ml:140:26>>*/ }
   function to_string$6(p){
     /*<<api/logic.ml:151:4>>*/  /*<<api/logic.ml:153:16>>*/ var
     _n8_ =
       [0,
        function(fmt, param){
          /*<<api/logic.ml:153:31>>*/ return fprintf$0(fmt)(_jF_);
         /*<<api/logic.ml:153:53>>*/ }];
     /*<<api/logic.ml:152:6>>*/ function pp_sub(_ob_, _oc_){
      /*<<?>>*/ return pp_print_list(_n8_, pp_print_int, _ob_, _oc_);
    }
     /*<<api/logic.ml:156:4>>*/ var
      /*<<api/logic.ml:156:4>>*/ _n9_ = p[3],
      /*<<api/logic.ml:157:6>>*/ _n__ = show(name_of_kind(p[2])),
      /*<<api/logic.ml:156:41>>*/ _n$_ = string_of_kind(p[2]),
     _oa_ = p[1];
     /*<<api/logic.ml:156:4>>*/ return  /*<<api/logic.ml:156:4>>*/ caml_call5
            (asprintf(_jG_), _oa_, _n$_, _n__, pp_sub, _n9_);
    /*<<api/logic.ml:158:18>>*/ }
   var
    pp_choice = function _n7_(_n5_, _n6_){return _n7_.fun(_n5_, _n6_);},
    show_choice = function _n4_(_n3_){return _n4_.fun(_n3_);};
   function _2$3(param){
     /*<<api/logic.ml:200:0>>*/ return pp$1;
    /*<<api/logic.ml:200:77>>*/ }
   function _1$5(param){
     /*<<api/logic.ml:200:0>>*/ return pp$2;
    /*<<api/logic.ml:200:77>>*/ }
   function _0$7(param){
     /*<<api/logic.ml:200:0>>*/ return pp$2;
    /*<<api/logic.ml:200:77>>*/ }
   caml_update_dummy
    (pp_choice,
     function(fmt, param){
       /*<<api/logic.ml:200:0>>*/ var a1 = param[2], a0 = param[1];
       /*<<api/logic.ml:200:14>>*/ fprintf$0(fmt)(_jH_);
       /*<<api/logic.ml:200:0>>*/  /*<<api/logic.ml:200:0>>*/ caml_call1
       (fprintf$0(fmt)(_jI_), a0);
       /*<<api/logic.ml:200:14>>*/ fprintf$0(fmt)(_jJ_);
       /*<<api/logic.ml:200:0>>*/ (function(param){
          /*<<api/logic.ml:200:20>>*/ if(! param)
           /*<<api/logic.ml:200:20>>*/ return pp_print_string(fmt, _jQ_);
         var x = param[1];
          /*<<api/logic.ml:200:20>>*/ pp_print_string(fmt, _jK_);
          /*<<api/logic.ml:200:20>>*/ (function(param){
             /*<<api/logic.ml:200:21>>*/ var
             a2 = param[3],
             a1 = param[2],
             a0 = param[1];
             /*<<api/logic.ml:200:21>>*/ fprintf$0(fmt)(_jL_);
             /*<<api/logic.ml:200:0>>*/  /*<<api/logic.ml:200:0>>*/ caml_call1
             ( /*<<api/logic.ml:200:0>>*/ caml_call1(_0$7(0), fmt), a0);
             /*<<api/logic.ml:200:21>>*/ fprintf$0(fmt)(_jM_);
             /*<<api/logic.ml:200:0>>*/  /*<<api/logic.ml:200:0>>*/ caml_call1
             ( /*<<api/logic.ml:200:0>>*/ caml_call1(_1$5(0), fmt), a1);
             /*<<api/logic.ml:200:21>>*/ fprintf$0(fmt)(_jN_);
             /*<<api/logic.ml:200:0>>*/  /*<<api/logic.ml:200:0>>*/ caml_call1
             ( /*<<api/logic.ml:200:0>>*/ caml_call1(_2$3(0), fmt), a2);
             /*<<api/logic.ml:200:0>>*/ return fprintf$0(fmt)(_jO_);
            /*<<api/logic.ml:200:51>>*/ }
           (x));
          /*<<api/logic.ml:200:20>>*/ return pp_print_string(fmt, _jP_);
         /*<<api/logic.ml:200:59>>*/ }
        (a1));
       /*<<api/logic.ml:200:0>>*/ return fprintf$0(fmt)(_jR_);
      /*<<api/logic.ml:200:77>>*/ });
   caml_update_dummy
    (show_choice,
     function(x){
       /*<<api/logic.ml:200:0>>*/ return  /*<<api/logic.ml:200:0>>*/ caml_call2
              (asprintf(_jS_), pp_choice, x);
      /*<<api/logic.ml:200:77>>*/ });
   var
    pp_itrace = function _n2_(_n0_, _n1_){return _n2_.fun(_n0_, _n1_);},
    show_itrace = function _nZ_(_nY_){return _nZ_.fun(_nY_);};
   function _0$8(param){
     /*<<api/logic.ml:201:0>>*/ return pp_choice;
    /*<<api/logic.ml:201:43>>*/ }
   caml_update_dummy
    (pp_itrace,
     function(fmt, x){
       /*<<api/logic.ml:201:14>>*/ fprintf$0(fmt)(_jT_);
       /*<<api/logic.ml:201:14>>*/ fold_left
       (function(sep, x){
          /*<<api/logic.ml:201:14>>*/ if(sep)
           /*<<api/logic.ml:201:14>>*/ fprintf$0(fmt)(_jU_);
          /*<<api/logic.ml:201:14>>*/  /*<<api/logic.ml:201:14>>*/ caml_call1
          ( /*<<api/logic.ml:201:0>>*/ caml_call1(_0$8(0), fmt), x);
          /*<<api/logic.ml:201:14>>*/ return 1;
         /*<<api/logic.ml:201:25>>*/ },
        0,
        x);
       /*<<api/logic.ml:201:14>>*/ return fprintf$0(fmt)(_jV_);
      /*<<api/logic.ml:201:25>>*/ });
   caml_update_dummy
    (show_itrace,
     function(x){
       /*<<api/logic.ml:201:0>>*/ return  /*<<api/logic.ml:201:0>>*/ caml_call2
              (asprintf(_jW_), pp_itrace, x);
      /*<<api/logic.ml:201:43>>*/ });
   var
    pp_action = function _nX_(_nV_, _nW_){return _nX_.fun(_nV_, _nW_);},
    show_action = function _nU_(_nT_){return _nU_.fun(_nT_);};
   function _18(param){
     /*<<api/logic.ml:203:0>>*/ return pp$3;
    /*<<api/logic.ml:226:17>>*/ }
   function _17(param){
     /*<<api/logic.ml:203:0>>*/ return pp$1;
    /*<<api/logic.ml:226:17>>*/ }
   function _16(param){
     /*<<api/logic.ml:203:0>>*/ return pp_itrace;
    /*<<api/logic.ml:226:17>>*/ }
   function _15(param){
     /*<<api/logic.ml:203:0>>*/ return pp$3;
    /*<<api/logic.ml:226:17>>*/ }
   function _14(param){
     /*<<api/logic.ml:203:0>>*/ return pp$3;
    /*<<api/logic.ml:226:17>>*/ }
   function _13(param){
     /*<<api/logic.ml:203:0>>*/ return pp$0;
    /*<<api/logic.ml:226:17>>*/ }
   function _12(param){
     /*<<api/logic.ml:203:0>>*/ return pp$1;
    /*<<api/logic.ml:226:17>>*/ }
   function _11(param){
     /*<<api/logic.ml:203:0>>*/ return pp$3;
    /*<<api/logic.ml:226:17>>*/ }
   function _10$0(param){
     /*<<api/logic.ml:203:0>>*/ return pp$3;
    /*<<api/logic.ml:226:17>>*/ }
   function _9$0(param){
     /*<<api/logic.ml:203:0>>*/ return pp$3;
    /*<<api/logic.ml:226:17>>*/ }
   function _8$0(param){
     /*<<api/logic.ml:203:0>>*/ return pp$3;
    /*<<api/logic.ml:226:17>>*/ }
   function _7$0(param){
     /*<<api/logic.ml:203:0>>*/ return pp$0;
    /*<<api/logic.ml:226:17>>*/ }
   function _6$0(param){
     /*<<api/logic.ml:203:0>>*/ return pp$0;
    /*<<api/logic.ml:226:17>>*/ }
   function _5$1(param){
     /*<<api/logic.ml:203:0>>*/ return pp$0;
    /*<<api/logic.ml:226:17>>*/ }
   function _4$1(param){
     /*<<api/logic.ml:203:0>>*/ return pp$1;
    /*<<api/logic.ml:226:17>>*/ }
   function _3$1(param){
     /*<<api/logic.ml:203:0>>*/ return pp$1;
    /*<<api/logic.ml:226:17>>*/ }
   function _2$4(param){
     /*<<api/logic.ml:203:0>>*/ return pp$0;
    /*<<api/logic.ml:226:17>>*/ }
   function _1$6(param){
     /*<<api/logic.ml:203:0>>*/ return pp$0;
    /*<<api/logic.ml:226:17>>*/ }
   function _0$9(param){
     /*<<api/logic.ml:203:0>>*/ return pp$0;
    /*<<api/logic.ml:226:17>>*/ }
   caml_update_dummy
    (pp_action,
     function(fmt, param){
       /*<<api/logic.ml:203:0>>*/ if(typeof param === "number")
        /*<<api/logic.ml:203:0>>*/ return pp_print_string(fmt, _jX_);
      switch(param[0]){
        case 0:
         var a0 = param[1];
          /*<<api/logic.ml:203:0>>*/ fprintf$0(fmt)(_jY_);
          /*<<api/logic.ml:203:0>>*/ var _ny_ = _0$9(0);
          /*<<api/logic.ml:203:0>>*/  /*<<api/logic.ml:203:0>>*/ caml_call1
          (function(_nR_){var _nS_ = _nR_; return _ny_(fmt, _nS_);}, a0);
          /*<<api/logic.ml:203:0>>*/ return fprintf$0(fmt)(_jZ_);
        case 1:
         var a0$0 = param[1];
          /*<<api/logic.ml:203:0>>*/ fprintf$0(fmt)(_j0_);
          /*<<api/logic.ml:203:0>>*/ var _nz_ = _1$6(0);
          /*<<api/logic.ml:203:0>>*/  /*<<api/logic.ml:203:0>>*/ caml_call1
          (function(_nP_){var _nQ_ = _nP_; return _nz_(fmt, _nQ_);}, a0$0);
          /*<<api/logic.ml:203:0>>*/ return fprintf$0(fmt)(_j1_);
        case 2:
         var a0$1 = param[1];
          /*<<api/logic.ml:203:0>>*/ fprintf$0(fmt)(_j2_);
          /*<<api/logic.ml:203:0>>*/ (function(param){
             /*<<api/logic.ml:207:13>>*/ var
             a2 = param[3],
             a1 = param[2],
             a0 = param[1];
             /*<<api/logic.ml:207:13>>*/ fprintf$0(fmt)(_j3_);
             /*<<api/logic.ml:203:0>>*/ var _nM_ = _2$4(0);
             /*<<api/logic.ml:203:0>>*/  /*<<api/logic.ml:203:0>>*/ caml_call1
             (function(_nN_){var _nO_ = _nN_; return _nM_(fmt, _nO_);}, a0);
             /*<<api/logic.ml:207:13>>*/ fprintf$0(fmt)(_j4_);
             /*<<api/logic.ml:203:0>>*/  /*<<api/logic.ml:203:0>>*/ caml_call1
             ( /*<<api/logic.ml:203:0>>*/ caml_call1(_3$1(0), fmt), a1);
             /*<<api/logic.ml:207:13>>*/ fprintf$0(fmt)(_j5_);
             /*<<api/logic.ml:203:0>>*/  /*<<api/logic.ml:203:0>>*/ caml_call1
             ( /*<<api/logic.ml:203:0>>*/ caml_call1(_4$1(0), fmt), a2);
             /*<<api/logic.ml:203:0>>*/ return fprintf$0(fmt)(_j6_);
            /*<<api/logic.ml:207:37>>*/ }
           (a0$1));
          /*<<api/logic.ml:203:0>>*/ return fprintf$0(fmt)(_j7_);
        case 3:
         var a0$2 = param[1];
          /*<<api/logic.ml:203:0>>*/ fprintf$0(fmt)(_j8_);
          /*<<api/logic.ml:203:0>>*/  /*<<api/logic.ml:203:0>>*/ caml_call1
          (fprintf$0(fmt)(_j9_), a0$2);
          /*<<api/logic.ml:203:0>>*/ return fprintf$0(fmt)(_j__);
        case 4:
         var a0$3 = param[1];
          /*<<api/logic.ml:203:0>>*/ fprintf$0(fmt)(_j$_);
          /*<<api/logic.ml:203:0>>*/ var _nA_ = _5$1(0);
          /*<<api/logic.ml:203:0>>*/  /*<<api/logic.ml:203:0>>*/ caml_call1
          (function(_nK_){var _nL_ = _nK_; return _nA_(fmt, _nL_);}, a0$3);
          /*<<api/logic.ml:203:0>>*/ return fprintf$0(fmt)(_ka_);
        case 5:
         var a0$4 = param[1];
          /*<<api/logic.ml:203:0>>*/ fprintf$0(fmt)(_kb_);
          /*<<api/logic.ml:203:0>>*/ (function(param){
             /*<<api/logic.ml:214:14>>*/ var a1 = param[2], a0 = param[1];
             /*<<api/logic.ml:214:14>>*/ fprintf$0(fmt)(_kc_);
             /*<<api/logic.ml:203:0>>*/ var _nH_ = _6$0(0);
             /*<<api/logic.ml:203:0>>*/  /*<<api/logic.ml:203:0>>*/ caml_call1
             (function(_nI_){var _nJ_ = _nI_; return _nH_(fmt, _nJ_);}, a0);
             /*<<api/logic.ml:214:14>>*/ fprintf$0(fmt)(_kd_);
             /*<<api/logic.ml:203:0>>*/  /*<<api/logic.ml:203:0>>*/ caml_call1
             (fprintf$0(fmt)(_ke_), a1);
             /*<<api/logic.ml:203:0>>*/ return fprintf$0(fmt)(_kf_);
            /*<<api/logic.ml:214:26>>*/ }
           (a0$4));
          /*<<api/logic.ml:203:0>>*/ return fprintf$0(fmt)(_kg_);
        case 6:
         var a0$5 = param[1];
          /*<<api/logic.ml:203:0>>*/ fprintf$0(fmt)(_kh_);
          /*<<api/logic.ml:203:0>>*/ var _nB_ = _7$0(0);
          /*<<api/logic.ml:203:0>>*/  /*<<api/logic.ml:203:0>>*/ caml_call1
          (function(_nF_){var _nG_ = _nF_; return _nB_(fmt, _nG_);}, a0$5);
          /*<<api/logic.ml:203:0>>*/ return fprintf$0(fmt)(_ki_);
        case 7:
         var a0$6 = param[1];
          /*<<api/logic.ml:203:0>>*/ fprintf$0(fmt)(_kj_);
          /*<<api/logic.ml:203:0>>*/  /*<<api/logic.ml:203:0>>*/ caml_call1
          ( /*<<api/logic.ml:203:0>>*/ caml_call1(_8$0(0), fmt), a0$6);
          /*<<api/logic.ml:203:0>>*/ return fprintf$0(fmt)(_kk_);
        case 8:
         var a0$7 = param[1];
          /*<<api/logic.ml:203:0>>*/ fprintf$0(fmt)(_kl_);
          /*<<api/logic.ml:203:0>>*/  /*<<api/logic.ml:203:0>>*/ caml_call1
          ( /*<<api/logic.ml:203:0>>*/ caml_call1(_9$0(0), fmt), a0$7);
          /*<<api/logic.ml:203:0>>*/ return fprintf$0(fmt)(_km_);
        case 9:
         var a0$8 = param[1];
          /*<<api/logic.ml:203:0>>*/ fprintf$0(fmt)(_kn_);
          /*<<api/logic.ml:203:0>>*/  /*<<api/logic.ml:203:0>>*/ caml_call1
          ( /*<<api/logic.ml:203:0>>*/ caml_call1(_10$0(0), fmt), a0$8);
          /*<<api/logic.ml:203:0>>*/ return fprintf$0(fmt)(_ko_);
        case 10:
         var a0$9 = param[1];
          /*<<api/logic.ml:203:0>>*/ fprintf$0(fmt)(_kp_);
          /*<<api/logic.ml:203:0>>*/  /*<<api/logic.ml:203:0>>*/ caml_call1
          ( /*<<api/logic.ml:203:0>>*/ caml_call1(_11(0), fmt), a0$9);
          /*<<api/logic.ml:203:0>>*/ return fprintf$0(fmt)(_kq_);
        case 11:
         var a0$10 = param[1];
          /*<<api/logic.ml:203:0>>*/ fprintf$0(fmt)(_kr_);
          /*<<api/logic.ml:203:0>>*/  /*<<api/logic.ml:203:0>>*/ caml_call1
          ( /*<<api/logic.ml:203:0>>*/ caml_call1(_12(0), fmt), a0$10);
          /*<<api/logic.ml:203:0>>*/ return fprintf$0(fmt)(_ks_);
        case 12:
         var a0$11 = param[1];
          /*<<api/logic.ml:203:0>>*/ fprintf$0(fmt)(_kt_);
          /*<<api/logic.ml:203:0>>*/ var _nC_ = _13(0);
          /*<<api/logic.ml:203:0>>*/  /*<<api/logic.ml:203:0>>*/ caml_call1
          (function(_nD_){var _nE_ = _nD_; return _nC_(fmt, _nE_);}, a0$11);
          /*<<api/logic.ml:203:0>>*/ return fprintf$0(fmt)(_ku_);
        case 13:
         var a0$12 = param[1];
          /*<<api/logic.ml:203:0>>*/ fprintf$0(fmt)(_kv_);
          /*<<api/logic.ml:203:0>>*/ (function(param){
             /*<<api/logic.ml:223:14>>*/ var
             a2 = param[3],
             a1 = param[2],
             a0 = param[1];
             /*<<api/logic.ml:223:14>>*/ fprintf$0(fmt)(_kw_);
             /*<<api/logic.ml:203:0>>*/  /*<<api/logic.ml:203:0>>*/ caml_call1
             ( /*<<api/logic.ml:203:0>>*/ caml_call1(_14(0), fmt), a0);
             /*<<api/logic.ml:223:14>>*/ fprintf$0(fmt)(_kx_);
             /*<<api/logic.ml:203:0>>*/  /*<<api/logic.ml:203:0>>*/ caml_call1
             ( /*<<api/logic.ml:203:0>>*/ caml_call1(_15(0), fmt), a1);
             /*<<api/logic.ml:223:14>>*/ fprintf$0(fmt)(_ky_);
             /*<<api/logic.ml:203:0>>*/  /*<<api/logic.ml:203:0>>*/ caml_call1
             ( /*<<api/logic.ml:203:0>>*/ caml_call1(_16(0), fmt), a2);
             /*<<api/logic.ml:203:0>>*/ return fprintf$0(fmt)(_kz_);
            /*<<api/logic.ml:223:38>>*/ }
           (a0$12));
          /*<<api/logic.ml:203:0>>*/ return fprintf$0(fmt)(_kA_);
        default:
         var a0$13 = param[1];
          /*<<api/logic.ml:203:0>>*/ fprintf$0(fmt)(_kB_);
          /*<<api/logic.ml:203:0>>*/ (function(param){
             /*<<api/logic.ml:224:21>>*/ var a1 = param[2], a0 = param[1];
             /*<<api/logic.ml:224:21>>*/ fprintf$0(fmt)(_kC_);
             /*<<api/logic.ml:203:0>>*/  /*<<api/logic.ml:203:0>>*/ caml_call1
             ( /*<<api/logic.ml:203:0>>*/ caml_call1(_17(0), fmt), a0);
             /*<<api/logic.ml:224:21>>*/ fprintf$0(fmt)(_kD_);
             /*<<api/logic.ml:203:0>>*/  /*<<api/logic.ml:203:0>>*/ caml_call1
             ( /*<<api/logic.ml:203:0>>*/ caml_call1(_18(0), fmt), a1);
             /*<<api/logic.ml:203:0>>*/ return fprintf$0(fmt)(_kE_);
            /*<<api/logic.ml:224:36>>*/ }
           (a0$13));
          /*<<api/logic.ml:203:0>>*/ return fprintf$0(fmt)(_kF_);
      }
      /*<<api/logic.ml:226:17>>*/ });
   caml_update_dummy
    (show_action,
     function(x){
       /*<<api/logic.ml:203:0>>*/ return  /*<<api/logic.ml:203:0>>*/ caml_call2
              (asprintf(_kG_), pp_action, x);
      /*<<api/logic.ml:226:17>>*/ });
   var
    pp_aident = function _nx_(_nv_, _nw_){return _nx_.fun(_nv_, _nw_);},
    show_aident = function _nu_(_nt_){return _nu_.fun(_nt_);};
   function _1$7(param){
     /*<<api/logic.ml:228:0>>*/ return pp$1;
    /*<<api/logic.ml:228:58>>*/ }
   function _0$10(param){
     /*<<api/logic.ml:228:0>>*/ return pp_hyp;
    /*<<api/logic.ml:228:58>>*/ }
   caml_update_dummy
    (pp_aident,
     function(fmt, param){
       /*<<api/logic.ml:228:0>>*/ var
       a2 = param[3],
       a1 = param[2],
       a0 = param[1];
       /*<<api/logic.ml:228:14>>*/ fprintf$0(fmt)(_kH_);
       /*<<api/logic.ml:228:0>>*/  /*<<api/logic.ml:228:0>>*/ caml_call1
       (fprintf$0(fmt)(_kI_), a0);
       /*<<api/logic.ml:228:14>>*/ fprintf$0(fmt)(_kJ_);
       /*<<api/logic.ml:228:0>>*/ (function(x){
          /*<<api/logic.ml:228:23>>*/ fprintf$0(fmt)(_kK_);
          /*<<api/logic.ml:228:23>>*/ fold_left
          (function(sep, x){
             /*<<api/logic.ml:228:23>>*/ if(sep)
              /*<<api/logic.ml:228:23>>*/ fprintf$0(fmt)(_kL_);
             /*<<api/logic.ml:228:23>>*/  /*<<api/logic.ml:228:23>>*/ caml_call1
             ( /*<<api/logic.ml:228:0>>*/ caml_call1(_0$10(0), fmt), x);
             /*<<api/logic.ml:228:23>>*/ return 1;
            /*<<api/logic.ml:228:31>>*/ },
           0,
           x);
          /*<<api/logic.ml:228:23>>*/ return fprintf$0(fmt)(_kM_);
         /*<<api/logic.ml:228:31>>*/ }
        (a1));
       /*<<api/logic.ml:228:14>>*/ fprintf$0(fmt)(_kN_);
       /*<<api/logic.ml:228:0>>*/  /*<<api/logic.ml:228:0>>*/ caml_call1
       ( /*<<api/logic.ml:228:0>>*/ caml_call1(_1$7(0), fmt), a2);
       /*<<api/logic.ml:228:0>>*/ return fprintf$0(fmt)(_kO_);
      /*<<api/logic.ml:228:58>>*/ });
   caml_update_dummy
    (show_aident,
     function(x){
       /*<<api/logic.ml:228:0>>*/ return  /*<<api/logic.ml:228:0>>*/ caml_call2
              (asprintf(_kP_), pp_aident, x);
      /*<<api/logic.ml:228:58>>*/ });
   var PpXml = _gP_(_gQ_), PpString = _gP_(StringBackend([0]));
   function span(opt, x){
     /*<<api/notation.ml:22:2>>*/ if(opt)
     var sth = opt[1], attribs = sth;
    else
     var attribs = 0;
     /*<<api/notation.ml:22:2>>*/ return annotate([0, _kQ_, attribs], x);
    /*<<api/notation.ml:22:33>>*/ }
   function paren(opt, x){
     /*<<api/notation.ml:25:2>>*/ if(opt)
     var sth = opt[1], doit = sth;
    else
     var doit = 1;
     /*<<api/notation.ml:25:2>>*/ if(! doit)
      /*<<api/notation.ml:26:46>>*/ return x;
     /*<<api/notation.ml:26:27>>*/  /*<<api/notation.ml:26:27>>*/ var
     _ns_ = symbol$10(x, char$2(41));
     /*<<api/notation.ml:26:27>>*/ return symbol$10(char$2(40), _ns_);
    /*<<api/notation.ml:26:47>>*/ }
   function filter_args(implicits, args){
     /*<<api/notation.ml:30:2>>*/ function loop(implicits, args, kept, i){
      /*<<api/notation.ml:31:4>>*/ var
      implicits$0 = implicits,
      args$0 = args,
      kept$0 = kept,
      i$0 = i;
      /*<<api/notation.ml:31:4>>*/ for(;;){
      if(args$0){
       if(implicits$0){
        var
         implicits$1 = implicits$0[2],
         imp = implicits$0[1],
         args$1 = args$0[2],
         arg = args$0[1];
        if(i$0 === imp){
          /*<<api/notation.ml:34:13>>*/ var
           /*<<api/notation.ml:34:13>>*/ i$1 = i$0 + 1 | 0,
          implicits$0 = implicits$1,
          args$0 = args$1,
          i$0 = i$1;
         continue;
        }
         /*<<api/notation.ml:35:13>>*/ var
          /*<<api/notation.ml:35:13>>*/ i$2 = i$0 + 1 | 0,
          /*<<api/notation.ml:35:42>>*/ kept$1 = [0, arg, kept$0],
          /*<<api/notation.ml:35:18>>*/ implicits$2 = [0, imp, implicits$1],
         implicits$0 = implicits$2,
         args$0 = args$1,
         kept$0 = kept$1,
         i$0 = i$2;
        continue;
       }
      }
      else if(implicits$0)
        /*<<api/notation.ml:39:62>>*/ throw  /*<<api/notation.ml:39:62>>*/ caml_maybe_attach_backtrace
              ([0, Assert_failure, _kR_], 1);
       /*<<api/notation.ml:37:56>>*/ return symbol$0(rev(kept$0), args$0);
     }
     /*<<api/notation.ml:39:74>>*/ }
     /*<<api/notation.ml:41:2>>*/ return loop
            (stable_sort(compare$0, implicits), args, 0, 0);
    /*<<api/notation.ml:41:50>>*/ }
   function name_info(env, name){
     /*<<api/notation.ml:45:2>>*/  /*<<api/notation.ml:45:8>>*/ var
     match = Map[18].call(null, name, env[2]);
    if(! match)
      /*<<api/notation.ml:47:32>>*/ return default_pp_info(show(name));
    var info = match[1];
     /*<<api/notation.ml:46:17>>*/ return info;
    /*<<api/notation.ml:47:48>>*/ }
   function pp_global(env, name){
     /*<<api/notation.ml:51:2>>*/  /*<<api/notation.ml:51:13>>*/ var
     info = name_info(env, name);
     /*<<api/notation.ml:52:2>>*/ return string$0(info[1]);
    /*<<api/notation.ml:52:23>>*/ }
   function pp_local(env, name){
     /*<<api/notation.ml:55:24>>*/ return string$0(show(name));
    /*<<api/notation.ml:55:51>>*/ }
   function pp_binder(env, name){
     /*<<api/notation.ml:58:25>>*/ return string$0(show(name));
    /*<<api/notation.ml:58:52>>*/ }
   function is_nat_constant(t){
     /*<<api/notation.ml:62:2>>*/ var t$0 = t;
     /*<<api/notation.ml:62:2>>*/ for(;;){
     switch(t$0[0]){
       case 1:
        var _nr_ = t$0[2];
        if(_nr_ && ! _nr_[2]){
         var arg = _nr_[1], f = t$0[1];
          /*<<api/notation.ml:64:26>>*/ if
          ( /*<<api/notation.ml:64:26>>*/ caml_equal(f, mkCst(succ$3))){var t$0 = arg; continue;}
        }
        break;
       case 5:
        var c = t$0[1];
         /*<<api/notation.ml:63:15>>*/ if
         ( /*<<api/notation.ml:63:15>>*/ caml_equal(c, zero$4))
          /*<<api/notation.ml:63:32>>*/ return 1;
        break;
     }
      /*<<api/notation.ml:65:9>>*/ return 0;
    }
    /*<<api/notation.ml:65:14>>*/ }
   function get_nat_constant(t){
     /*<<api/notation.ml:69:2>>*/ switch(t[0]){
      case 1:
       var _nq_ = t[2];
       if(_nq_ && ! _nq_[2]){
        var arg = _nq_[1], f = t[1];
         /*<<api/notation.ml:71:26>>*/ if
         ( /*<<api/notation.ml:71:26>>*/ caml_equal(f, mkCst(succ$3)))
          /*<<api/notation.ml:71:54>>*/ return get_nat_constant(arg) + 1 | 0;
       }
       break;
      case 5:
       var c = t[1];
        /*<<api/notation.ml:70:15>>*/ if
        ( /*<<api/notation.ml:70:15>>*/ caml_equal(c, zero$4))
         /*<<api/notation.ml:70:32>>*/ return 0;
       break;
    }
     /*<<api/notation.ml:72:9>>*/ throw  /*<<api/notation.ml:72:9>>*/ caml_maybe_attach_backtrace
           ([0, Assert_failure, _kS_], 1);
    /*<<api/notation.ml:72:21>>*/ }
   function extend(i, path){
     /*<<api/notation.ml:74:31>>*/ return [0,
            path[1],
            path[2],
            [0, i, path[3]]];
    /*<<api/notation.ml:74:64>>*/ }
   function pp_term(env, path, ctx, t){
     /*<<api/notation.ml:84:13>>*/ if(is_nat_constant(t))
      /*<<api/notation.ml:86:16>>*/ var
       /*<<api/notation.ml:86:16>>*/ n = get_nat_constant(t),
      content = string$0(string_of_int(n));
    else
     switch(t[0]){
       case 0:
        var
         v = t[1],
         name = get(get$3(v, ctx))[1],
         content = pp_local(env, name);
        break;
       case 1:
        var args = t[2], f = t[1];
         /*<<api/notation.ml:127:8>>*/ if(5 === f[0]){
          /*<<api/notation.ml:130:25>>*/ var
          name$0 = f[1],
           /*<<api/notation.ml:130:25>>*/ info = name_info(env, name$0),
           /*<<api/notation.ml:131:25>>*/ args$0 = filter_args(info[2], args);
         a:
         {
          switch(info[3]){
            case 0:
             var _m__ = [0, f, args$0]; break a;
            case 1:
             if(args$0){
              var _m$_ = args$0[2];
              if(_m$_ && ! _m$_[2]){
                /*<<api/notation.ml:135:43>>*/ var
                arg2 = _m$_[1],
                arg1 = args$0[1],
                 /*<<api/notation.ml:135:43>>*/ _na_ =
                  [0, arg1, [0, f, [0, arg2, 0]]],
                _m__ = _na_;
               break a;
              }
             }
             break;
            default:
             if(args$0 && ! args$0[2]){
              var arg = args$0[1], _m__ = [0, arg, [0, f, 0]];
              break a;
             }
          }
           /*<<api/notation.ml:137:23>>*/ throw  /*<<api/notation.ml:137:23>>*/ caml_maybe_attach_backtrace
                 ([0, Assert_failure, _kU_], 1);
         }
         var elts = _m__;
        }
        else
         var elts = [0, f, args];
         /*<<api/notation.ml:142:8>>*/ var
         _m7_ =
           function(i, t){
             /*<<api/notation.ml:147:17>>*/ switch(t[0]){
              case 0:
              case 5:
              case 6:
               var doit = 0; break;
              default:
                /*<<api/notation.ml:150:28>>*/  /*<<api/notation.ml:150:28>>*/ var
                doit = is_nat_constant(t) ? 0 : 1;
            }
             /*<<api/notation.ml:153:24>>*/ var _no_ = [0, doit];
             /*<<api/notation.ml:153:32>>*/ return function(_np_){
                      /*<<?>>*/ return paren(_no_, _np_);
                    }
                    (pp_term(env, extend(i, path), ctx, t));
            /*<<api/notation.ml:153:65>>*/ },
          /*<<api/notation.ml:142:8>>*/ _m8_ =
           function(_nn_){ /*<<?>>*/ return mapi(_m7_, _nn_);}(elts),
          /*<<api/notation.ml:155:16>>*/ _m9_ = break$1(1),
         content = function(_nm_){ /*<<?>>*/ return flow(_m9_, _nm_);}(_m8_);
        break;
       case 2:
         /*<<api/notation.ml:95:64>>*/ var
         body = t[3],
         ty = t[2],
         name$1 = t[1],
          /*<<api/notation.ml:95:64>>*/ _nb_ = string$0(_kV_),
          /*<<api/notation.ml:95:41>>*/ _nc_ =
           symbol$11(pp_binder(env, name$1), _nb_),
          /*<<api/notation.ml:95:24>>*/ pp_binder$0 =
           symbol$11(string$0(_kW_), _nc_),
          /*<<api/notation.ml:96:59>>*/ _nd_ = utf8string(_kX_),
          /*<<api/notation.ml:96:20>>*/ pp_ty =
           symbol$11(pp_term(env, extend(0, path), ctx, ty), _nd_),
          /*<<api/notation.ml:98:38>>*/ _ne_ = push$1(name$1, ty, ctx),
          /*<<api/notation.ml:98:10>>*/ pp_body =
           pp_term(env, extend(1, path), _ne_, body),
         content = symbol$12(symbol$12(pp_binder$0, pp_ty), pp_body);
        break;
       case 3:
        var t2 = t[2], t1 = t[1];
         /*<<api/notation.ml:103:8>>*/ switch(t1[0]){
          case 2:
          case 3:
          case 4:
            /*<<api/notation.ml:106:19>>*/  /*<<api/notation.ml:106:19>>*/ var
            doit = is_nat_constant(t1) ? 0 : 1;
           break;
          default: var doit = 0;
        }
         /*<<api/notation.ml:109:20>>*/ var
          /*<<api/notation.ml:109:27>>*/ _nf_ = [0, doit],
          /*<<api/notation.ml:109:20>>*/ pp_t1 =
           function(_nl_){ /*<<?>>*/ return paren(_nf_, _nl_);}
            (pp_term(env, extend(0, path), ctx, t1)),
          /*<<api/notation.ml:111:20>>*/ pp_t2 =
           pp_term(env, extend(1, path), ctx, t2),
         content = symbol$12(symbol$11(pp_t1, utf8string(_kY_)), pp_t2);
        break;
       case 4:
         /*<<api/notation.ml:115:68>>*/ var
         body$0 = t[3],
         ty$0 = t[2],
         name$2 = t[1],
          /*<<api/notation.ml:115:68>>*/ _ng_ = string$0(_kZ_),
          /*<<api/notation.ml:115:45>>*/ _nh_ =
           symbol$11(pp_binder(env, name$2), _ng_),
          /*<<api/notation.ml:115:24>>*/ pp_binder$1 =
           symbol$11(utf8string(_k0_), _nh_),
          /*<<api/notation.ml:116:8>>*/ doit$0 = 4 === ty$0[0] ? 1 : 0,
          /*<<api/notation.ml:118:62>>*/ _ni_ = string$0(_k1_),
          /*<<api/notation.ml:118:10>>*/ pp_ty$0 =
           symbol$10
            (paren([0, doit$0], pp_term(env, extend(0, path), ctx, ty$0)),
             _ni_),
          /*<<api/notation.ml:121:38>>*/ _nj_ = push$1(name$2, ty$0, ctx),
          /*<<api/notation.ml:121:10>>*/ pp_body$0 =
           pp_term(env, extend(1, path), _nj_, body$0),
         content = symbol$12(symbol$12(pp_binder$1, pp_ty$0), pp_body$0);
        break;
       case 5:
        var name$3 = t[1], content = pp_global(env, name$3); break;
       default:
        var
         _nk_ = 937565914 <= t[1] ? string$0(_k2_) : string$0(_k3_),
         content = _nk_;
     }
     /*<<api/notation.ml:158:2>>*/ return span
            ([0, [0, string_attrib(_kT_, to_string$6(path)), 0]], content);
    /*<<api/notation.ml:84:30>>*/ }
   var default_width = 50;
   function term_to_string(opt, _m5_, env, t){
     /*<<api/notation.ml:167:2>>*/ if(opt)
     var sth = opt[1], width = sth;
    else
     var width = default_width;
     /*<<api/notation.ml:167:2>>*/ if(_m5_)
     var sth$0 = _m5_[1], ctx = sth$0;
    else
     var ctx = empty$6;
     /*<<api/notation.ml:167:2>>*/ if(0 > width)
      /*<<api/notation.ml:167:2>>*/ throw  /*<<api/notation.ml:167:2>>*/ caml_maybe_attach_backtrace
            ([0, Assert_failure, _k4_], 1);
     /*<<api/notation.ml:169:19>>*/ var
      /*<<api/notation.ml:169:19>>*/ dummy_path = make$5(0, 0, 0),
      /*<<api/notation.ml:170:21>>*/ _m6_ = pp_term(env, dummy_path, ctx, t);
     /*<<api/notation.ml:170:21>>*/ return PpString[1].call(null, width, _m6_);
    /*<<api/notation.ml:170:51>>*/ }
   function term_to_xml(opt, _m2_, path, env, t){
     /*<<api/notation.ml:174:2>>*/ if(opt)
     var sth = opt[1], width = sth;
    else
     var width = default_width;
     /*<<api/notation.ml:174:2>>*/ if(_m2_)
     var sth$0 = _m2_[1], ctx = sth$0;
    else
     var ctx = empty$6;
     /*<<api/notation.ml:174:2>>*/ if(0 > width)
      /*<<api/notation.ml:174:2>>*/ throw  /*<<api/notation.ml:174:2>>*/ caml_maybe_attach_backtrace
            ([0, Assert_failure, _k6_], 1);
     /*<<api/notation.ml:175:28>>*/ var
      /*<<api/notation.ml:175:28>>*/ _m3_ = pp_term(env, path, ctx, t),
      /*<<api/notation.ml:175:12>>*/ xml = PpXml[1].call(null, width, _m3_);
    if(xml && ! xml[2]){
     var element = xml[1];
      /*<<api/notation.ml:177:19>>*/ return element;
    }
     /*<<api/notation.ml:182:11>>*/  /*<<api/notation.ml:182:11>>*/ var
     _m4_ = length(xml);
     /*<<api/notation.ml:180:9>>*/ return failwith
            ( /*<<api/notation.ml:180:9>>*/ caml_call1(sprintf$0(_k5_), _m4_));
    /*<<api/notation.ml:182:28>>*/ }
   var IntMap = _e8_([0, compare$0]);
   function js_log(s){
     /*<<prover/utils.ml:17:15>>*/ return function(t1, t0, param){
              /*<<?>>*/ return t1.log(t0);
            }
            (console$0,
              /*<<prover/utils.ml:17:49>>*/ caml_jsstring_of_string(s),
             function(x){
               /*<<prover/utils.ml:17:28>>*/ return  /*<<prover/utils.ml:17:28>>*/ caml_call1
                      (caml_get_public_method(x, 5395588, 43), x);
              /*<<prover/utils.ml:17:48>>*/ });
    /*<<prover/utils.ml:17:63>>*/ }
   function to_string$7(pp){
     /*<<prover/utils.ml:54:21>>*/ return function(_m1_){
      /*<<?>>*/ return map_default(pp, _k7_, _m1_);};
    /*<<prover/utils.ml:54:42>>*/ }
   function compare$17(_m0_, _mZ_){
     /*<<?>>*/ return caml_compare(_m0_, _mZ_);
   }
   var IntNameMap = _e8_([0, compare$17]);
   function init$2(goals){
     /*<<prover/coreLogic.ml:33:4>>*/ iter$0
     (function(param){
        /*<<prover/coreLogic.ml:34:6>>*/ var g_pregoal = param[2];
        /*<<prover/coreLogic.ml:36:10>>*/ function check(f){
         /*<<prover/coreLogic.ml:36:24>>*/ check$1(0, g_pregoal[1], f);
         /*<<prover/coreLogic.ml:36:31>>*/ return 0;
        /*<<prover/coreLogic.ml:36:63>>*/ }
        /*<<prover/coreLogic.ml:37:10>>*/ check(g_pregoal[3]);
        /*<<prover/coreLogic.ml:39:12>>*/ return iter$8
               (function(param){
                  /*<<prover/coreLogic.ml:39:12>>*/ var h_form = param[3];
                  /*<<prover/coreLogic.ml:39:46>>*/ return check(h_form);
                 /*<<prover/coreLogic.ml:39:59>>*/ },
                g_pregoal[2]);
       /*<<prover/coreLogic.ml:41:9>>*/ },
      goals);
     /*<<prover/coreLogic.ml:45:6>>*/  /*<<prover/coreLogic.ml:45:6>>*/ var
     p_goals =
       fold_left
        (function(p_goals, g){
           /*<<prover/coreLogic.ml:47:10>>*/ if
           (IntMap[21].call(null, g[1], p_goals))
            /*<<prover/coreLogic.ml:47:10>>*/ throw  /*<<prover/coreLogic.ml:47:10>>*/ caml_maybe_attach_backtrace
                  ([0, Assert_failure, _k8_], 1);
           /*<<prover/coreLogic.ml:48:10>>*/ return IntMap[4].call
                  (null, g[1], g, p_goals);
          /*<<prover/coreLogic.ml:48:37>>*/ },
         IntMap[1],
         goals);
     /*<<prover/coreLogic.ml:51:4>>*/ return [0,
            p_goals,
            [0, 0],
            [0, IntMap[1]],
            [0, IntNameMap[1]],
            empty$8];
    /*<<prover/coreLogic.ml:56:5>>*/ }
   function set_proof_meta(proof, meta){
     /*<<prover/coreLogic.ml:60:41>>*/ proof[2][1] = meta;
    return 0;
    /*<<prover/coreLogic.ml:60:61>>*/ }
   function get_proof_meta(proof){
     /*<<prover/coreLogic.ml:61:43>>*/ return proof[2][1];
    /*<<prover/coreLogic.ml:61:58>>*/ }
   function set_goal_meta(proof, goal_id, meta){
     /*<<prover/coreLogic.ml:64:4>>*/ if(meta){
      /*<<prover/coreLogic.ml:67:29>>*/ var
      meta$0 = meta[1],
       /*<<prover/coreLogic.ml:67:29>>*/ _mX_ =
        IntMap[4].call(null, goal_id, meta$0, proof[3][1]);
     proof[3][1] = _mX_;
     return 0;
    }
     /*<<prover/coreLogic.ml:65:35>>*/  /*<<prover/coreLogic.ml:65:35>>*/ var
     _mY_ = IntMap[14].call(null, goal_id, proof[3][1]);
    proof[3][1] = _mY_;
    return 0;
    /*<<prover/coreLogic.ml:67:73>>*/ }
   function get_goal_meta(proof, goal_id){
     /*<<prover/coreLogic.ml:70:4>>*/ return IntMap[8].call
            (null, goal_id, proof[3][1]);
    /*<<prover/coreLogic.ml:70:48>>*/ }
   function set_hyp_meta(proof, goal_id, hyp_name, meta){
     /*<<prover/coreLogic.ml:73:4>>*/ if(meta){
      /*<<prover/coreLogic.ml:79:10>>*/ var
      meta$0 = meta[1],
       /*<<prover/coreLogic.ml:79:10>>*/ _mV_ =
        IntNameMap[4].call(null, [0, goal_id, hyp_name], meta$0, proof[4][1]);
     proof[4][1] = _mV_;
     return 0;
    }
     /*<<prover/coreLogic.ml:76:10>>*/  /*<<prover/coreLogic.ml:76:10>>*/ var
     _mW_ = IntNameMap[14].call(null, [0, goal_id, hyp_name], proof[4][1]);
    proof[4][1] = _mW_;
    return 0;
    /*<<prover/coreLogic.ml:79:69>>*/ }
   function get_hyp_meta(proof, goal_id, hyp_name){
     /*<<prover/coreLogic.ml:82:4>>*/ return IntNameMap[8].call
            (null, [0, goal_id, hyp_name], proof[4][1]);
    /*<<prover/coreLogic.ml:82:63>>*/ }
   function closed(proof){
     /*<<prover/coreLogic.ml:84:27>>*/ return IntMap[2].call(null, proof[1]);
    /*<<prover/coreLogic.ml:84:56>>*/ }
   function opened(proof){
     /*<<prover/coreLogic.ml:85:27>>*/ return of_enum
            (IntMap[31].call(null, proof[1]));
    /*<<prover/coreLogic.ml:85:68>>*/ }
   function byid$0(proof, goal_id){
     /*<<prover/coreLogic.ml:88:4>>*/  /*<<prover/coreLogic.ml:89:6>>*/ var
     goal =
       get_exn
        (IntMap[62][1].call(null, goal_id, proof[1]),
         [0, InvalidGoalId, goal_id]);
     /*<<prover/coreLogic.ml:93:4>>*/ return goal[2];
    /*<<prover/coreLogic.ml:93:18>>*/ }
   function xprogress(pr, id, subs){
     /*<<prover/coreLogic.ml:98:4>>*/ return failwith(_k9_);
    /*<<prover/coreLogic.ml:98:37>>*/ }
   function move$0(proof, goal_id, hyp_name, dest_name){
     /*<<prover/coreLogic.ml:172:4>>*/ var
      /*<<prover/coreLogic.ml:172:15>>*/ goal = byid$0(proof, goal_id),
      /*<<prover/coreLogic.ml:173:15>>*/ hyps =
       move(goal[2], hyp_name, dest_name);
     /*<<prover/coreLogic.ml:175:11>>*/ return xprogress
             (proof, goal_id, [0, [0, goal[1], hyps, goal[3]], 0])
            [2];
    /*<<prover/coreLogic.ml:175:66>>*/ }
    /*<<prover/js/jsprover.ml:15:0>>*/ var
     /*<<prover/js/jsprover.ml:15:0>>*/ MoveOnlyHyps =
      [248, _lg_, caml_fresh_oo_id(0)],
     /*<<prover/js/jsprover.ml:24:20>>*/ translators = [0, 0];
   function register(tx){
     /*<<prover/js/jsprover.ml:25:36>>*/ translators[1] =
     symbol$0(translators[1], [0, tx, 0]);
    return;
    /*<<prover/js/jsprover.ml:25:72>>*/ }
   function translate$0(e){
     /*<<prover/js/jsprover.ml:28:4>>*/  /*<<prover/js/jsprover.ml:29:6>>*/ var
     Found = [248, _lh_, caml_fresh_oo_id(0)];
    try{
      /*<<prover/js/jsprover.ml:32:6>>*/ iter$0
      (function(tx){
        function _mT_(msg){
          /*<<prover/js/jsprover.ml:33:50>>*/ throw  /*<<prover/js/jsprover.ml:33:50>>*/ caml_maybe_attach_backtrace
                ([0, Found, msg], 1);
         /*<<prover/js/jsprover.ml:33:69>>*/ }
         /*<<prover/js/jsprover.ml:33:19>>*/ return function(_mU_){
                  /*<<?>>*/ return may(_mT_, _mU_);
                }
                ( /*<<prover/js/jsprover.ml:33:19>>*/ caml_call1(tx, e));
        /*<<prover/js/jsprover.ml:33:70>>*/ },
       translators[1]);
      /*<<prover/js/jsprover.ml:32:6>>*/  /*<<prover/js/jsprover.ml:32:6>>*/ var
      _mS_ = 0;
      /*<<prover/js/jsprover.ml:32:6>>*/ return _mS_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Found) throw caml_maybe_attach_backtrace(exn, 0);
     var msg = exn[2];
      /*<<prover/js/jsprover.ml:36:24>>*/ return [0, msg];
    }
    /*<<prover/js/jsprover.ml:36:32>>*/ }
    /*<<prover/js/jsprover.ml:54:2>>*/ register
    (function(exn){
       /*<<prover/js/jsprover.ml:57:8>>*/ if(exn[1] === MoveOnlyHyps){
       var name = exn[2];
        /*<<prover/js/jsprover.ml:64:12>>*/ return [0, symbol(_li_, name)];
      }
      if(exn[1] !== TypingError)
        /*<<prover/js/jsprover.ml:67:15>>*/ return 0;
      var err = exn[2];
       /*<<prover/js/jsprover.ml:66:12>>*/ return [0,
              symbol(_lj_, show_typeError(err))];
      /*<<prover/js/jsprover.ml:67:19>>*/ });
   function symbol$13(f, x){
     /*<<prover/js/jsprover.ml:72:2>>*/ try{
      /*<<prover/js/jsprover.ml:72:6>>*/  /*<<prover/js/jsprover.ml:72:6>>*/ var
      _mQ_ =  /*<<prover/js/jsprover.ml:72:6>>*/ caml_call1(f, x);
      /*<<prover/js/jsprover.ml:72:6>>*/ return _mQ_;
    }
    catch(e$0){
      /*<<prover/js/jsprover.ml:75:6>>*/ var
      e = caml_wrap_exception(e$0),
       /*<<prover/js/jsprover.ml:75:6>>*/ msg =
        default_delayed
         (function(param){
            /*<<prover/js/jsprover.ml:76:19>>*/  /*<<prover/js/jsprover.ml:76:55>>*/ var
            _mR_ = to_string$4(e);
            /*<<prover/js/jsprover.ml:76:55>>*/ return  /*<<prover/js/jsprover.ml:76:55>>*/ caml_call1
                   (sprintf$0(_lk_), _mR_);
           /*<<prover/js/jsprover.ml:76:77>>*/ },
          translate$0(e));
      /*<<prover/js/jsprover.ml:79:24>>*/ return  /*<<prover/js/jsprover.ml:79:24>>*/ caml_call1
             (raise,
              _gf_
               (function(t1, t0, param){ /*<<?>>*/ return new t1(t0);}
                 (error_constr,
                   /*<<prover/js/jsprover.ml:79:58>>*/ caml_jsstring_of_string
                   (msg),
                  0)));
    }
    /*<<prover/js/jsprover.ml:79:76>>*/ }
   var
    js_proof_engine = function _mP_(_mO_){return _mP_.fun(_mO_);},
    js_subgoal = function _mN_(_mL_, _mM_){return _mN_.fun(_mL_, _mM_);},
    js_hyps =
      function _mK_(_mG_, _mH_, _mI_, _mJ_){
       return _mK_.fun(_mG_, _mH_, _mI_, _mJ_);
      },
    js_term =
      function _mF_(_mB_, _mC_, _mD_, _mE_){
       return _mF_.fun(_mB_, _mC_, _mD_, _mE_);
      },
    _ll_ = [0, 0];
   caml_update_dummy
    (js_proof_engine,
     function(proof){
       /*<<?>>*/ return function(t4, t5, t6, t7, t8, t9, param){
                /*<<?>>*/ return {proof: t4,
                       subgoals: caml_js_wrap_meth_callback(t5),
                       closed: caml_js_wrap_meth_callback(t6),
                       getmeta: caml_js_wrap_meth_callback(t7),
                       setmeta: caml_js_wrap_meth_callback(t8),
                       actions: caml_js_wrap_meth_callback(t9)};
              }
              (proof,
               function(self){
                 /*<<prover/js/jsprover.ml:102:6>>*/ var
                  /*<<prover/js/jsprover.ml:102:21>>*/ subgoals =
                   opened(proof),
                  /*<<prover/js/jsprover.ml:103:21>>*/ subgoals$0 =
                   map$4
                    ( /*<<prover/js/jsprover.ml:103:30>>*/ caml_call1
                      (js_subgoal, self),
                     subgoals);
                 /*<<prover/js/jsprover.ml:104:6>>*/ return  /*<<prover/js/jsprover.ml:104:6>>*/ caml_js_from_array
                        (of_list(subgoals$0));
                /*<<prover/js/jsprover.ml:104:39>>*/ },
               function(self){
                 /*<<prover/js/jsprover.ml:107:20>>*/ return !
                       !
                       closed(proof);
                /*<<prover/js/jsprover.ml:107:48>>*/ },
               function(self){
                 /*<<prover/js/jsprover.ml:119:21>>*/ return option
                        (get_proof_meta(proof));
                /*<<prover/js/jsprover.ml:119:63>>*/ },
               function(self, meta){
                 /*<<prover/js/jsprover.ml:122:26>>*/ return set_proof_meta
                        (proof, to_option(meta));
                /*<<prover/js/jsprover.ml:122:76>>*/ },
               function(self, asource){
                 /*<<prover/js/jsprover.ml:153:29>>*/ return  /*<<prover/js/jsprover.ml:153:29>>*/ caml_js_from_array
                        ([0]);
                /*<<prover/js/jsprover.ml:153:42>>*/ },
               function
               (self, proof, subgoals, closed, getmeta, setmeta, actions){
                 /*<<?>>*/ if(! _ll_[1]){
                 var
                  _mw_ = create_table(_lb_),
                  _mx_ = new_variable(_mw_, _lm_),
                  _my_ = get_method_labels(_mw_, _la_);
                 set_methods
                  (_mw_,
                   [0,
                    _my_[3],
                    function(self_1){
                     var env = self_1[1 + _mx_];
                      /*<<prover/js/jsprover.ml:98:8>>*/ return env[7];
                    },
                    _my_[1],
                    function(self_1){
                     var env = self_1[1 + _mx_];
                     return caml_call1(env[6], env[1]);
                    },
                    _my_[5],
                    function(self_1){
                     var env = self_1[1 + _mx_];
                     return caml_call1(env[5], env[1]);
                    },
                    _my_[4],
                    function(self_1){
                     var env = self_1[1 + _mx_];
                     return caml_call1(env[4], env[1]);
                    },
                    _my_[2],
                    function(self_1){
                     var env = self_1[1 + _mx_];
                     return caml_call1(env[3], env[1]);
                    },
                    _my_[6],
                    function(self_1){
                     var env = self_1[1 + _mx_];
                     return caml_call1(env[2], env[1]);
                    }]);
                 init_class(_mw_);
                 _ll_[1] =
                  function(_mz_){
                   var _mA_ = create_object_opt(0, _mw_);
                   _mA_[1 + _mx_] = _mz_;
                   return _mA_;
                  };
                }
                return caml_call1
                        (_ll_[1],
                         [0,
                          self,
                          actions,
                          setmeta,
                          getmeta,
                          closed,
                          subgoals,
                          proof]);
               });
     });
   var _ln_ = [0, 0];
   caml_update_dummy
    (js_subgoal,
     function(parent, handle){
       /*<<?>>*/ return function
              (t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, param){
                /*<<?>>*/ return {parent: t28,
                       handle: t29,
                       goal: caml_js_wrap_meth_callback(t30),
                       tvars: caml_js_wrap_meth_callback(t31),
                       context: caml_js_wrap_meth_callback(t32),
                       conclusion: caml_js_wrap_meth_callback(t33),
                       ivariants: caml_js_wrap_meth_callback(t34),
                       movehyp: caml_js_wrap_meth_callback(t35),
                       getmeta: caml_js_wrap_meth_callback(t36),
                       setmeta: caml_js_wrap_meth_callback(t37)};
              }
              (parent,
               handle,
               function(self){
                 /*<<prover/js/jsprover.ml:381:18>>*/  /*<<prover/js/jsprover.ml:381:44>>*/ var
                 _mv_ =
                   function(t11, param){ /*<<?>>*/ return t11.handle;}
                    (self,
                     function(x){
                       /*<<prover/js/jsprover.ml:381:52>>*/ return  /*<<prover/js/jsprover.ml:381:52>>*/ caml_call1
                              (caml_get_public_method(x, 939361192, 58), x);
                      /*<<prover/js/jsprover.ml:381:58>>*/ });
                 /*<<prover/js/jsprover.ml:381:44>>*/ return byid$0
                        (function(t10, param){ /*<<?>>*/ return t10.proof;}
                          (parent,
                           function(x){
                             /*<<prover/js/jsprover.ml:381:38>>*/ return  /*<<prover/js/jsprover.ml:381:38>>*/ caml_call1
                                    (caml_get_public_method(x, -930093436, 59), x);
                            /*<<prover/js/jsprover.ml:381:43>>*/ }),
                         _mv_);
                /*<<prover/js/jsprover.ml:381:58>>*/ },
               function(self){
                 /*<<prover/js/jsprover.ml:391:6>>*/ return  /*<<prover/js/jsprover.ml:391:6>>*/ caml_js_from_array
                        ([0]);
                /*<<prover/js/jsprover.ml:391:19>>*/ },
               function(self){
                 /*<<prover/js/jsprover.ml:395:6>>*/ var
                  /*<<prover/js/jsprover.ml:395:17>>*/ goal =
                   function(t12, param){ /*<<?>>*/ return t12.goal();}
                    (self,
                     function(x){
                       /*<<prover/js/jsprover.ml:395:17>>*/ return  /*<<prover/js/jsprover.ml:395:17>>*/ caml_call1
                              (caml_get_public_method(x, -999716589, 56), x);
                      /*<<prover/js/jsprover.ml:395:28>>*/ }),
                  /*<<prover/js/jsprover.ml:396:17>>*/ hyps =
                   rev(to_list(goal[2]));
                 /*<<prover/js/jsprover.ml:397:6>>*/ return  /*<<prover/js/jsprover.ml:397:6>>*/ caml_js_from_array
                        (of_list
                          (mapi$0
                            ( /*<<prover/js/jsprover.ml:397:41>>*/ caml_call2
                              (js_hyps,
                               self,
                               function(t13, param){ /*<<?>>*/ return t13.handle;}
                                (self,
                                 function(x){
                                   /*<<prover/js/jsprover.ml:397:64>>*/ return  /*<<prover/js/jsprover.ml:397:64>>*/ caml_call1
                                          (caml_get_public_method(x, 939361192, 57), x);
                                  /*<<prover/js/jsprover.ml:397:70>>*/ })),
                             hyps)));
                /*<<prover/js/jsprover.ml:397:78>>*/ },
               function(self){
                 /*<<prover/js/jsprover.ml:401:6>>*/ var
                  /*<<prover/js/jsprover.ml:401:43>>*/ _mt_ =
                   function(t15, param){ /*<<?>>*/ return t15.handle;}
                    (self,
                     function(x){
                       /*<<prover/js/jsprover.ml:401:51>>*/ return  /*<<prover/js/jsprover.ml:401:51>>*/ caml_call1
                              (caml_get_public_method(x, 939361192, 53), x);
                      /*<<prover/js/jsprover.ml:401:57>>*/ }),
                  /*<<prover/js/jsprover.ml:401:17>>*/ goal =
                   byid$0
                    (function(t14, param){ /*<<?>>*/ return t14.proof;}
                      (parent,
                       function(x){
                         /*<<prover/js/jsprover.ml:401:37>>*/ return  /*<<prover/js/jsprover.ml:401:37>>*/ caml_call1
                                (caml_get_public_method(x, -930093436, 54), x);
                        /*<<prover/js/jsprover.ml:401:42>>*/ }),
                     _mt_),
                  /*<<prover/js/jsprover.ml:402:6>>*/ _mu_ = goal[3];
                 /*<<prover/js/jsprover.ml:402:6>>*/ return  /*<<prover/js/jsprover.ml:402:6>>*/ caml_call4
                        (js_term,
                         self,
                         function(t16, param){ /*<<?>>*/ return t16.handle;}
                          (self,
                           function(x){
                             /*<<prover/js/jsprover.ml:402:28>>*/ return  /*<<prover/js/jsprover.ml:402:28>>*/ caml_call1
                                    (caml_get_public_method(x, 939361192, 55), x);
                            /*<<prover/js/jsprover.ml:402:34>>*/ }),
                         67,
                         _mu_);
                /*<<prover/js/jsprover.ml:402:50>>*/ },
               function(self){
                 /*<<prover/js/jsprover.ml:413:6>>*/ return  /*<<prover/js/jsprover.ml:413:6>>*/ caml_js_from_array
                        ([0]);
                /*<<prover/js/jsprover.ml:413:19>>*/ },
               function(self, from, before){
                function doit(param){
                  /*<<prover/js/jsprover.ml:537:8>>*/ var
                   /*<<prover/js/jsprover.ml:537:19>>*/ from$0 = make$4(from),
                   /*<<prover/js/jsprover.ml:538:21>>*/ before$0 =
                    function(_ms_){ /*<<?>>*/ return map$3(make$4, _ms_);}
                     (to_option(before)),
                   /*<<prover/js/jsprover.ml:541:13>>*/ _mo_ =
                    to_string$7(show)(before$0),
                   /*<<prover/js/jsprover.ml:540:54>>*/ _mp_ = show(from$0);
                  /*<<prover/js/jsprover.ml:539:8>>*/ js_log
                  ( /*<<prover/js/jsprover.ml:540:11>>*/ caml_call2
                    (sprintf$0(_lp_), _mp_, _mo_));
                  /*<<prover/js/jsprover.ml:543:48>>*/ var
                   /*<<prover/js/jsprover.ml:543:48>>*/ _mq_ =
                    function(t18, param){ /*<<?>>*/ return t18.handle;}
                     (self,
                      function(x){
                        /*<<prover/js/jsprover.ml:543:56>>*/ return  /*<<prover/js/jsprover.ml:543:56>>*/ caml_call1
                               (caml_get_public_method(x, 939361192, 49), x);
                       /*<<prover/js/jsprover.ml:543:62>>*/ }),
                   /*<<prover/js/jsprover.ml:543:22>>*/ subgoal =
                    byid$0
                     (function(t17, param){ /*<<?>>*/ return t17.proof;}
                       (parent,
                        function(x){
                          /*<<prover/js/jsprover.ml:543:42>>*/ return  /*<<prover/js/jsprover.ml:543:42>>*/ caml_call1
                                 (caml_get_public_method(x, -930093436, 50), x);
                         /*<<prover/js/jsprover.ml:543:47>>*/ }),
                      _mq_),
                   /*<<prover/js/jsprover.ml:545:28>>*/ is_hypothesis =
                    mem(from$0, ids(subgoal[2]));
                  /*<<prover/js/jsprover.ml:546:8>>*/ if(! is_hypothesis)
                   /*<<prover/js/jsprover.ml:551:13>>*/ throw  /*<<prover/js/jsprover.ml:551:13>>*/ caml_maybe_attach_backtrace
                         ([0, MoveOnlyHyps, show(from$0)], 1);
                  /*<<prover/js/jsprover.ml:549:45>>*/  /*<<prover/js/jsprover.ml:549:45>>*/ var
                  _mr_ =
                    function(t20, param){ /*<<?>>*/ return t20.handle;}
                     (self,
                      function(x){
                        /*<<prover/js/jsprover.ml:549:53>>*/ return  /*<<prover/js/jsprover.ml:549:53>>*/ caml_call1
                               (caml_get_public_method(x, 939361192, 51), x);
                       /*<<prover/js/jsprover.ml:549:59>>*/ });
                  /*<<prover/js/jsprover.ml:549:10>>*/ return move$0
                         (function(t19, param){ /*<<?>>*/ return t19.proof;}
                           (parent,
                            function(x){
                              /*<<prover/js/jsprover.ml:549:30>>*/ return  /*<<prover/js/jsprover.ml:549:30>>*/ caml_call1
                                     (caml_get_public_method(x, -930093436, 52), x);
                             /*<<prover/js/jsprover.ml:549:35>>*/ }),
                          _mr_,
                          from$0,
                          before$0);
                 /*<<prover/js/jsprover.ml:551:51>>*/ }
                 /*<<prover/js/jsprover.ml:553:22>>*/ return  /*<<prover/js/jsprover.ml:553:22>>*/ caml_call1
                        (js_proof_engine,
                         function(_mn_){ /*<<?>>*/ return symbol$13(doit, _mn_);}(0));
                /*<<prover/js/jsprover.ml:553:33>>*/ },
               function(self){
                 /*<<prover/js/jsprover.ml:556:6>>*/  /*<<prover/js/jsprover.ml:556:65>>*/ var
                 _mm_ =
                   function(t24, param){ /*<<?>>*/ return t24.handle;}
                    (self,
                     function(x){
                       /*<<prover/js/jsprover.ml:556:73>>*/ return  /*<<prover/js/jsprover.ml:556:73>>*/ caml_call1
                              (caml_get_public_method(x, 939361192, 47), x);
                      /*<<prover/js/jsprover.ml:556:79>>*/ });
                 /*<<prover/js/jsprover.ml:556:20>>*/ return option
                        (get_goal_meta
                          (function(t23, param){ /*<<?>>*/ return t23.proof;}
                            (parent,
                             function(x){
                               /*<<prover/js/jsprover.ml:556:50>>*/ return  /*<<prover/js/jsprover.ml:556:50>>*/ caml_call1
                                      (caml_get_public_method(x, -930093436, 48), x);
                              /*<<prover/js/jsprover.ml:556:55>>*/ }),
                           _mm_));
                /*<<prover/js/jsprover.ml:556:80>>*/ },
               function(self, meta){
                 /*<<prover/js/jsprover.ml:559:6>>*/ var
                  /*<<prover/js/jsprover.ml:560:8>>*/ _mk_ = to_option(meta),
                  /*<<prover/js/jsprover.ml:559:50>>*/ _ml_ =
                   function(t26, param){ /*<<?>>*/ return t26.handle;}
                    (self,
                     function(x){
                       /*<<prover/js/jsprover.ml:559:58>>*/ return  /*<<prover/js/jsprover.ml:559:58>>*/ caml_call1
                              (caml_get_public_method(x, 939361192, 45), x);
                      /*<<prover/js/jsprover.ml:559:64>>*/ });
                 /*<<prover/js/jsprover.ml:560:8>>*/ return set_goal_meta
                        (function(t25, param){ /*<<?>>*/ return t25.proof;}
                          (parent,
                           function(x){
                             /*<<prover/js/jsprover.ml:559:35>>*/ return  /*<<prover/js/jsprover.ml:559:35>>*/ caml_call1
                                    (caml_get_public_method(x, -930093436, 46), x);
                            /*<<prover/js/jsprover.ml:559:40>>*/ }),
                         _ml_,
                         _mk_);
                /*<<prover/js/jsprover.ml:560:31>>*/ },
               function
               (self,
                parent,
                handle,
                goal,
                tvars,
                context,
                conclusion,
                ivariants,
                movehyp,
                getmeta,
                setmeta){
                 /*<<?>>*/ if(! _ln_[1]){
                 var
                  _mf_ = create_table(_k$_),
                  _mg_ = new_variable(_mf_, _lo_),
                  _mh_ = get_method_labels(_mf_, _lf_);
                 set_methods
                  (_mf_,
                   [0,
                    _mh_[3],
                    function(self_2){
                     var env = self_2[1 + _mg_];
                      /*<<prover/js/jsprover.ml:375:8>>*/ return env[11];
                    },
                    _mh_[6],
                    function(self_2){
                     var env = self_2[1 + _mg_];
                      /*<<prover/js/jsprover.ml:378:8>>*/ return env[10];
                    },
                    _mh_[7],
                    function(self_2){
                     var env = self_2[1 + _mg_];
                     return caml_call1(env[9], env[1]);
                    },
                    _mh_[1],
                    function(self_2){
                     var env = self_2[1 + _mg_];
                     return caml_call1(env[8], env[1]);
                    },
                    _mh_[9],
                    function(self_2){
                     var env = self_2[1 + _mg_];
                     return caml_call1(env[7], env[1]);
                    },
                    _mh_[10],
                    function(self_2){
                     var env = self_2[1 + _mg_];
                     return caml_call1(env[6], env[1]);
                    },
                    _mh_[5],
                    function(self_2){
                     var env = self_2[1 + _mg_];
                     return caml_call1(env[5], env[1]);
                    },
                    _mh_[4],
                    function(self_2){
                     var env = self_2[1 + _mg_];
                     return caml_call1(env[4], env[1]);
                    },
                    _mh_[8],
                    function(self_2){
                     var env = self_2[1 + _mg_];
                     return caml_call1(env[3], env[1]);
                    },
                    _mh_[2],
                    function(self_2){
                     var env = self_2[1 + _mg_];
                     return caml_call1(env[2], env[1]);
                    }]);
                 init_class(_mf_);
                 _ln_[1] =
                  function(_mi_){
                   var _mj_ = create_object_opt(0, _mf_);
                   _mj_[1 + _mg_] = _mi_;
                   return _mj_;
                  };
                }
                return caml_call1
                        (_ln_[1],
                         [0,
                          self,
                          setmeta,
                          getmeta,
                          movehyp,
                          ivariants,
                          conclusion,
                          context,
                          tvars,
                          goal,
                          handle,
                          parent]);
               });
     });
   var _lq_ = [0, 0];
   caml_update_dummy
    (js_hyps,
     function(parent, goal_id, pos, hyp){
       /*<<prover/js/jsprover.ml:634:16>>*/ var
        /*<<prover/js/jsprover.ml:634:16>>*/ _l3_ =
         function(t39, param){ /*<<?>>*/ return t39.parent;}
          (parent,
           function(x){
             /*<<prover/js/jsprover.ml:634:25>>*/ return  /*<<prover/js/jsprover.ml:634:25>>*/ caml_call1
                    (caml_get_public_method(x, -310508246, 68), x);
            /*<<prover/js/jsprover.ml:634:31>>*/ }),
       _l4_ = hyp[3],
        /*<<prover/js/jsprover.ml:631:46>>*/ _l5_ = [0, 72, hyp[1]],
        /*<<prover/js/jsprover.ml:631:15>>*/ _l6_ =
          /*<<prover/js/jsprover.ml:631:15>>*/ caml_call4
          (js_term,
           parent,
           function(t38, param){ /*<<?>>*/ return t38.handle;}
            (parent,
             function(x){
               /*<<prover/js/jsprover.ml:631:39>>*/ return  /*<<prover/js/jsprover.ml:631:39>>*/ caml_call1
                      (caml_get_public_method(x, 939361192, 69), x);
              /*<<prover/js/jsprover.ml:631:45>>*/ }),
           _l5_,
           _l4_),
        /*<<prover/js/jsprover.ml:628:16>>*/ _l7_ = ! ! (hyp[2] <= 1 ? 1 : 0),
        /*<<prover/js/jsprover.ml:622:18>>*/ _l8_ = option([0, show(hyp[1])]);
      return function
              (t49, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, param){
                /*<<?>>*/ return {parent: t49,
                       handle: t50,
                       phandle: t51,
                       position: t52,
                       fresh: t53,
                       term: t54,
                       proof: t55,
                       html: caml_js_wrap_meth_callback(t56),
                       tostring: caml_js_wrap_meth_callback(t57),
                       getmeta: caml_js_wrap_meth_callback(t58),
                       setmeta: caml_js_wrap_meth_callback(t59)};
              }
              (parent,
                /*<<prover/js/jsprover.ml:619:17>>*/ caml_jsstring_of_string
                (show(hyp[1])),
               _l8_,
               pos,
               _l7_,
               _l6_,
               _l3_,
               function(self){
                 /*<<prover/js/jsprover.ml:637:18>>*/ return function
                        (t41, param){
                          /*<<?>>*/ return t41.html();
                        }
                        (function(t40, param){ /*<<?>>*/ return t40.term;}
                          (self,
                           function(x){
                             /*<<prover/js/jsprover.ml:637:26>>*/ return  /*<<prover/js/jsprover.ml:637:26>>*/ caml_call1
                                    (caml_get_public_method(x, -856045716, 67), x);
                            /*<<prover/js/jsprover.ml:637:30>>*/ }),
                         function(x){
                           /*<<prover/js/jsprover.ml:637:18>>*/ return  /*<<prover/js/jsprover.ml:637:18>>*/ caml_call1
                                  (caml_get_public_method(x, -988375701, 66), x);
                          /*<<prover/js/jsprover.ml:637:36>>*/ });
                /*<<prover/js/jsprover.ml:637:36>>*/ },
               function(self){
                 /*<<prover/js/jsprover.ml:640:22>>*/ return function
                        (t43, param){
                          /*<<?>>*/ return t43.tostring();
                        }
                        (function(t42, param){ /*<<?>>*/ return t42.term;}
                          (self,
                           function(x){
                             /*<<prover/js/jsprover.ml:640:30>>*/ return  /*<<prover/js/jsprover.ml:640:30>>*/ caml_call1
                                    (caml_get_public_method(x, -856045716, 65), x);
                            /*<<prover/js/jsprover.ml:640:34>>*/ }),
                         function(x){
                           /*<<prover/js/jsprover.ml:640:22>>*/ return  /*<<prover/js/jsprover.ml:640:22>>*/ caml_call1
                                  (caml_get_public_method(x, 64642188, 64), x);
                          /*<<prover/js/jsprover.ml:640:44>>*/ });
                /*<<prover/js/jsprover.ml:640:44>>*/ },
               function(self){
                 /*<<prover/js/jsprover.ml:643:6>>*/ var _me_ = hyp[1];
                 /*<<prover/js/jsprover.ml:644:8>>*/ return option
                        (get_hyp_meta
                          (function(t45, param){ /*<<?>>*/ return t45.proof;}
                            (function(t44, param){ /*<<?>>*/ return t44.proof;}
                              (self,
                               function(x){
                                 /*<<prover/js/jsprover.ml:644:36>>*/ return  /*<<prover/js/jsprover.ml:644:36>>*/ caml_call1
                                        (caml_get_public_method(x, -930093436, 63), x);
                                /*<<prover/js/jsprover.ml:644:41>>*/ }),
                             function(x){
                               /*<<prover/js/jsprover.ml:644:44>>*/ return  /*<<prover/js/jsprover.ml:644:44>>*/ caml_call1
                                      (caml_get_public_method(x, -930093436, 62), x);
                              /*<<prover/js/jsprover.ml:644:49>>*/ }),
                           goal_id,
                           _me_));
                /*<<prover/js/jsprover.ml:644:80>>*/ },
               function(self, meta){
                 /*<<prover/js/jsprover.ml:647:6>>*/ var
                  /*<<prover/js/jsprover.ml:649:38>>*/ _mc_ = to_option(meta),
                 _md_ = hyp[1];
                 /*<<prover/js/jsprover.ml:649:38>>*/ return set_hyp_meta
                        (function(t47, param){ /*<<?>>*/ return t47.proof;}
                          (function(t46, param){ /*<<?>>*/ return t46.proof;}
                            (self,
                             function(x){
                               /*<<prover/js/jsprover.ml:648:16>>*/ return  /*<<prover/js/jsprover.ml:648:16>>*/ caml_call1
                                      (caml_get_public_method(x, -930093436, 61), x);
                              /*<<prover/js/jsprover.ml:648:21>>*/ }),
                           function(x){
                             /*<<prover/js/jsprover.ml:648:24>>*/ return  /*<<prover/js/jsprover.ml:648:24>>*/ caml_call1
                                    (caml_get_public_method(x, -930093436, 60), x);
                            /*<<prover/js/jsprover.ml:648:29>>*/ }),
                         goal_id,
                         _md_,
                         _mc_);
                /*<<prover/js/jsprover.ml:649:61>>*/ },
               function
               (self,
                parent,
                handle,
                phandle,
                position,
                fresh,
                term,
                proof,
                html,
                tostring,
                getmeta,
                setmeta){
                 /*<<?>>*/ if(! _lq_[1]){
                 var
                  _l9_ = create_table(_lc_),
                  _l__ = new_variable(_l9_, _lr_),
                  _l$_ = get_method_labels(_l9_, shared$1);
                 set_methods
                  (_l9_,
                   [0,
                    _l$_[7],
                    function(self_3){
                     var env = self_3[1 + _l__];
                      /*<<prover/js/jsprover.ml:616:8>>*/ return env[12];
                    },
                    _l$_[9],
                    function(self_3){
                     var env = self_3[1 + _l__];
                      /*<<prover/js/jsprover.ml:619:8>>*/ return env[11];
                    },
                    _l$_[6],
                    function(self_3){
                     var env = self_3[1 + _l__];
                      /*<<prover/js/jsprover.ml:622:8>>*/ return env[10];
                    },
                    _l$_[5],
                    function(self_3){
                     var env = self_3[1 + _l__];
                      /*<<prover/js/jsprover.ml:625:8>>*/ return env[9];
                    },
                    _l$_[11],
                    function(self_3){
                     var env = self_3[1 + _l__];
                      /*<<prover/js/jsprover.ml:628:8>>*/ return env[8];
                    },
                    _l$_[2],
                    function(self_3){
                     var env = self_3[1 + _l__];
                      /*<<prover/js/jsprover.ml:631:8>>*/ return env[7];
                    },
                    _l$_[4],
                    function(self_3){
                     var env = self_3[1 + _l__];
                      /*<<prover/js/jsprover.ml:634:8>>*/ return env[6];
                    },
                    _l$_[8],
                    function(self_3){
                     var env = self_3[1 + _l__];
                     return caml_call1(env[5], env[1]);
                    },
                    _l$_[1],
                    function(self_3){
                     var env = self_3[1 + _l__];
                     return caml_call1(env[4], env[1]);
                    },
                    _l$_[10],
                    function(self_3){
                     var env = self_3[1 + _l__];
                     return caml_call1(env[3], env[1]);
                    },
                    _l$_[3],
                    function(self_3){
                     var env = self_3[1 + _l__];
                     return caml_call1(env[2], env[1]);
                    }]);
                 init_class(_l9_);
                 _lq_[1] =
                  function(_ma_){
                   var _mb_ = create_object_opt(0, _l9_);
                   _mb_[1 + _l__] = _ma_;
                   return _mb_;
                  };
                }
                return caml_call1
                        (_lq_[1],
                         [0,
                          self,
                          setmeta,
                          getmeta,
                          tostring,
                          html,
                          proof,
                          term,
                          fresh,
                          position,
                          phandle,
                          handle,
                          parent]);
               });
     });
   var _ls_ = [0, 0];
   caml_update_dummy
    (js_term,
     function(parent, goal_id, kind, term){
       /*<<?>>*/ return function(t63, t64, t65, param){
                /*<<?>>*/ return {html: caml_js_wrap_meth_callback(t63),
                       htmltag: caml_js_wrap_meth_callback(t64),
                       tostring: caml_js_wrap_meth_callback(t65)};
              }
              (function(self){
                 /*<<prover/js/jsprover.ml:790:18>>*/ return function
                        (t60, param){
                          /*<<?>>*/ return t60.htmltag();
                        }
                        (self,
                         function(x){
                           /*<<prover/js/jsprover.ml:790:18>>*/ return  /*<<prover/js/jsprover.ml:790:18>>*/ caml_call1
                                  (caml_get_public_method(x, -796476977, 72), x);
                          /*<<prover/js/jsprover.ml:790:32>>*/ });
                /*<<prover/js/jsprover.ml:790:32>>*/ },
               function(self){
                 /*<<prover/js/jsprover.ml:794:6>>*/ if
                 (typeof kind === "number")
                 var path = make$5(_lu_, 0, goal_id);
                else
                 var
                  name = kind[2],
                  path = make$5([0, [0, name]], 0, goal_id);
                 /*<<prover/js/jsprover.ml:801:11>>*/ var
                  /*<<prover/js/jsprover.ml:801:11>>*/ _l1_ =
                   term_to_xml
                    (0,
                     0,
                     path,
                     function(t61, param){ /*<<?>>*/ return t61.goal();}
                       (parent,
                        function(x){
                          /*<<prover/js/jsprover.ml:801:38>>*/ return  /*<<prover/js/jsprover.ml:801:38>>*/ caml_call1
                                 (caml_get_public_method(x, -999716589, 71), x);
                         /*<<prover/js/jsprover.ml:801:52>>*/ })
                      [1],
                     term),
                  /*<<prover/js/jsprover.ml:800:30>>*/ _l2_ = pp(0, 0, 0);
                 /*<<prover/js/jsprover.ml:799:6>>*/ return  /*<<prover/js/jsprover.ml:799:6>>*/ caml_jsstring_of_string
                        ( /*<<prover/js/jsprover.ml:800:8>>*/ caml_call2
                          (asprintf(_lv_), _l2_, _l1_));
                /*<<prover/js/jsprover.ml:801:71>>*/ },
               function(self){
                 /*<<prover/js/jsprover.ml:806:6>>*/ return  /*<<prover/js/jsprover.ml:806:6>>*/ caml_jsstring_of_string
                        (term_to_string
                          (0,
                           0,
                           function(t62, param){ /*<<?>>*/ return t62.goal();}
                             (parent,
                              function(x){
                                /*<<prover/js/jsprover.ml:806:41>>*/ return  /*<<prover/js/jsprover.ml:806:41>>*/ caml_call1
                                       (caml_get_public_method(x, -999716589, 70), x);
                               /*<<prover/js/jsprover.ml:806:55>>*/ })
                            [1],
                           term));
                /*<<prover/js/jsprover.ml:806:67>>*/ },
               function(self, html, htmltag, tostring){
                 /*<<?>>*/ if(! _ls_[1]){
                 var
                  _lW_ = create_table(_k__),
                  _lX_ = new_variable(_lW_, _lt_),
                  _lY_ = get_method_labels(_lW_, _le_);
                 set_methods
                  (_lW_,
                   [0,
                    _lY_[3],
                    function(self_4){
                     var env = self_4[1 + _lX_];
                     return caml_call1(env[4], env[1]);
                    },
                    _lY_[2],
                    function(self_4){
                     var env = self_4[1 + _lX_];
                     return caml_call1(env[3], env[1]);
                    },
                    _lY_[1],
                    function(self_4){
                     var env = self_4[1 + _lX_];
                     return caml_call1(env[2], env[1]);
                    }]);
                 init_class(_lW_);
                 _ls_[1] =
                  function(_lZ_){
                   var _l0_ = create_object_opt(0, _lW_);
                   _l0_[1 + _lX_] = _lZ_;
                   return _l0_;
                  };
                }
                return caml_call1(_ls_[1], [0, self, tostring, htmltag, html]);
               });
     });
   function print_goal(param){
    var goal = param[2];
     /*<<prover/js/jsprover.ml:812:2>>*/ js_log(_lw_);
     /*<<prover/js/jsprover.ml:813:2>>*/ iter$0
     (function(param){
        /*<<prover/js/jsprover.ml:814:4>>*/ var
        ty = param[2],
        name = param[1],
         /*<<prover/js/jsprover.ml:818:13>>*/ _lU_ =
          term_to_string(0, 0, goal[1], ty),
         /*<<prover/js/jsprover.ml:817:38>>*/ _lV_ = show(name);
        /*<<prover/js/jsprover.ml:817:11>>*/ return js_log
               ( /*<<prover/js/jsprover.ml:817:11>>*/ caml_call2
                 (sprintf$0(_lx_), _lV_, _lU_));
       /*<<prover/js/jsprover.ml:819:7>>*/ },
      Map[10].call(null, goal[1][1]));
     /*<<prover/js/jsprover.ml:822:2>>*/ js_log(_ly_);
     /*<<prover/js/jsprover.ml:823:2>>*/ iter$8
     (function(hyp){
        /*<<prover/js/jsprover.ml:826:8>>*/ var
         /*<<prover/js/jsprover.ml:828:13>>*/ _lS_ =
          term_to_string(0, 0, goal[1], hyp[3]),
         /*<<prover/js/jsprover.ml:827:38>>*/ _lT_ = show(hyp[1]);
        /*<<prover/js/jsprover.ml:827:11>>*/ return js_log
               ( /*<<prover/js/jsprover.ml:827:11>>*/ caml_call2
                 (sprintf$0(_lz_), _lT_, _lS_));
       /*<<prover/js/jsprover.ml:828:60>>*/ },
      goal[2]);
     /*<<prover/js/jsprover.ml:834:7>>*/  /*<<prover/js/jsprover.ml:834:7>>*/ var
     _lR_ = term_to_string(0, 0, goal[1], goal[3]);
     /*<<prover/js/jsprover.ml:833:5>>*/ return js_log
            ( /*<<prover/js/jsprover.ml:833:5>>*/ caml_call1
              (sprintf$0(_lA_), _lR_));
   }
   var _lB_ = [0, 0];
   function export$1(name){
     /*<<prover/js/jsprover.ml:838:2>>*/ return export$0
            (name,
             function(t67, param){
                /*<<?>>*/ return {setgoalsb: caml_js_wrap_meth_callback(t67)};
              }
              (function(param, goalsb){
                 /*<<prover/js/jsprover.ml:842:9>>*/ var
                  /*<<prover/js/jsprover.ml:843:11>>*/ _lO_ = 0,
                  /*<<prover/js/jsprover.ml:843:11>>*/ goals =
                   function(_lQ_){
                      /*<<?>>*/ return flip(from_string, _lO_, _lQ_);
                    }
                    (decode_exn
                      (0,
                       0,
                       0,
                       0,
                        /*<<prover/js/jsprover.ml:843:11>>*/ caml_string_of_jsstring
                        (goalsb)));
                 /*<<prover/js/jsprover.ml:848:9>>*/ iter$0(print_goal, goals);
                 /*<<prover/js/jsprover.ml:850:25>>*/ return  /*<<prover/js/jsprover.ml:850:25>>*/ caml_call1
                        (js_proof_engine,
                         function(_lP_){ /*<<?>>*/ return symbol$13(init$2, _lP_);}
                          (goals));
                /*<<prover/js/jsprover.ml:850:45>>*/ },
               function(self, setgoalsb){
                 /*<<prover/js/jsprover.ml:839:4>>*/ if(! _lB_[1]){
                 var
                  _lK_ = create_table(_ld_),
                  _lL_ = new_variable(_lK_, _lC_);
                 set_method
                  (_lK_,
                   get_method_label(_lK_, _lD_),
                   function(self_5){
                    var env = self_5[1 + _lL_];
                     /*<<prover/js/jsprover.ml:839:4>>*/ return  /*<<prover/js/jsprover.ml:839:4>>*/ caml_call1
                            (env[2], env[1]);
                   });
                 init_class(_lK_);
                 _lB_[1] =
                  function(_lM_){
                   var _lN_ = create_object_opt(0, _lK_);
                   _lN_[1 + _lL_] = _lM_;
                   return _lN_;
                  };
                }
                return caml_call1(_lB_[1], [0, self, setgoalsb]);
                /*<<prover/js/jsprover.ml:851:8>>*/ }));
    /*<<prover/js/jsprover.ml:851:8>>*/ }
    /*<<prover/js/jsprover.ml:854:9>>*/ export$1(_lE_);
    /*<<std_exit.ml:18:8>>*/ do_at_exit(0);
   return;
   /*<<?>>*/ }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
